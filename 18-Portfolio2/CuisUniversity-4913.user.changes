TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'Ch.A 10/18/2021 20:07:35'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Ch.A 10/18/2021 20:09:45'!
Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'nil' stamp: 'Ch.A 10/18/2021 20:09:32'!
test01
	| account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer new transfer: 0 from: account1 to: account2.
	
	self assert: 0 equals: account1 balance.
	self assert: 0 equals: account2 balance.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Ch.A 10/18/2021 20:10:25' prior: 50921548!
test01
	| account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer transfer: 0 from: account1 to: account2.
	
	self assert: 0 equals: account1 balance.
	self assert: 0 equals: account2 balance.! !

!testRun: #TransferTest #test01 stamp: 'Ch.A 10/18/2021 20:10:31'!
ERROR!

!testRun: #TransferTest #test01 stamp: 'Ch.A 10/18/2021 20:10:31'!
ERROR!

!testRun: #TransferTest #test01 stamp: 'Ch.A 10/18/2021 20:10:35'!
ERROR!

!testRun: #TransferTest #test01 stamp: 'Ch.A 10/18/2021 20:10:35'!
ERROR!
!Transfer class methodsFor: 'instance creation' stamp: 'Ch.A 10/18/2021 20:10:51'!
transfer: aSmallInteger from: aReceptiveAccount to: aReceptiveAccount3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeTransfer: aSmallInteger from: aReceptiveAccount to: aReceptiveAccount3 ! !
!Transfer class methodsFor: 'instance creation' stamp: 'Ch.A 10/18/2021 20:11:22' prior: 50921579!
transfer: anAmount from: aReceptiveAccount1 to: aReceptiveAccount2
	! !

!testRun: #TransferTest #test01 stamp: 'Ch.A 10/18/2021 20:11:23'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'Ch.A 10/18/2021 20:11:24'!
PASSED!

AccountTransaction subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Ch.A 10/18/2021 20:12:03'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #TransferTest #test01 stamp: 'Ch.A 10/18/2021 20:12:15'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Ch.A 10/18/2021 20:12:36'!
test02
	| account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer transfer: 5 from: account1 to: account2.
	
	self assert: -5 equals: account1 balance.
	self assert: 5 equals: account2 balance.! !

!testRun: #TransferTest #test02 stamp: 'Ch.A 10/18/2021 20:12:37'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'Ch.A 10/18/2021 20:15:25' prior: 50921591!
transfer: anAmount from: aReceptiveAccount1 to: aReceptiveAccount2
	Withdraw register: anAmount on: aReceptiveAccount1.
	Deposit register: anAmount on: aReceptiveAccount2.! !

!testRun: #TransferTest #test02 stamp: 'Ch.A 10/18/2021 20:15:26'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'Ch.A 10/18/2021 20:15:26'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'Ch.A 10/18/2021 20:15:26'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Ch.A 10/18/2021 20:20:51'!
test03
	| account1 account2 transfer |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer transfer: 5 from: account1 to: account2.
	
	self assert: -5 equals: account1 balance.
	self assert: 5 equals: account2 balance.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Ch.A 10/18/2021 20:21:25' prior: 50921646!
test03
	| account1 account2 transfer |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer transfer: 5 from: account1 to: account2.
	
	self assert: (account1 hasRegistered: transfer).! !

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 20:22:06'!
FAILURE!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 20:22:06'!
FAILURE!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 20:23:20'!
FAILURE!

!testRun: #TransferTest #test01 stamp: 'Ch.A 10/18/2021 20:26:05'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'Ch.A 10/18/2021 20:26:05'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 20:26:05'!
FAILURE!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 20:26:05'!
FAILURE!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 20:26:33'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 20:26:36'!
FAILURE!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 20:26:36'!
FAILURE!

Transfer subclass: #TransferIn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferIn category: 'Portfolio-Solucion' stamp: 'Ch.A 10/18/2021 20:28:29'!
Transfer subclass: #TransferIn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transfer subclass: #TransferOut
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferOut category: 'Portfolio-Solucion' stamp: 'Ch.A 10/18/2021 20:28:34'!
Transfer subclass: #TransferOut
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 20:37:38'!
FAILURE!

Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Ch.A 10/18/2021 20:39:20'!
Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer class methodsFor: 'instance creation' stamp: 'Ch.A 10/18/2021 20:42:50' prior: 50921630!
transfer: anAmount from: aReceptiveAccount1 to: aReceptiveAccount2
	anAmount = 0 ifTrue: [self error: self transferCannotBeNull].
	Withdraw register: anAmount on: aReceptiveAccount1.
	Deposit register: anAmount on: aReceptiveAccount2.! !

!testRun: #TransferTest #test01 stamp: 'Ch.A 10/18/2021 20:42:57'!
ERROR!

!testRun: #TransferTest #test02 stamp: 'Ch.A 10/18/2021 20:42:57'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 20:42:57'!
FAILURE!

!testRun: #TransferTest #test01 stamp: 'Ch.A 10/18/2021 20:43:00'!
ERROR!
!Transfer class methodsFor: 'error message' stamp: 'Ch.A 10/18/2021 20:43:21'!
transferCannotBeNull
	self shouldBeImplemented.! !
!Transfer class methodsFor: 'error message' stamp: 'Ch.A 10/18/2021 20:43:40' prior: 50921750!
transferCannotBeNull
	^ 'Transfer cannot be null'! !

!testRun: #TransferTest #test01 stamp: 'Ch.A 10/18/2021 20:43:43'!
ERROR!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Ch.A 10/18/2021 20:46:00' prior: 50921559!
test01
	| account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	
		self 
		should: [Transfer transfer: 0 from: account1 to: account2. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer transferCannotBeNull equals: anError messageText.]! !

!testRun: #TransferTest #test01 stamp: 'Ch.A 10/18/2021 20:46:01'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'Ch.A 10/18/2021 20:46:03'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 20:46:04'!
FAILURE!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 20:46:04'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Ch.A 10/18/2021 20:46:59' prior: 50921658!
test03
	| account1 account2 transfer |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer transfer: 5 from: account1 to: account2.
	
	self assert: (account1 hasRegisteredTransfer: transfer).! !

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 20:47:01'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ch.A 10/18/2021 20:47:12'!
hasRegisteredTransfer: aClass 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ch.A 10/18/2021 20:47:21' prior: 50921799!
hasRegisteredTransfer: xxx
	^true! !

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 20:47:23'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'Ch.A 10/18/2021 20:47:23'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'Ch.A 10/18/2021 20:47:23'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 20:47:23'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Ch.A 10/18/2021 20:48:00' prior: 50921786!
test03
	| account1 account2 transfer |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer transfer: 5 from: account2 to: account1.
	
	self assert: (account1 hasRegisteredTransfer: transfer).! !

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 20:48:02'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'Ch.A 10/18/2021 20:48:02'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'Ch.A 10/18/2021 20:48:02'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 20:48:02'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Ch.A 10/18/2021 20:48:11' prior: 50921818!
test03
	| account1 account2 transfer |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer transfer: 5 from: account1 to: account2.
	
	self assert: (account1 hasRegisteredTransfer: transfer).! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Ch.A 10/18/2021 20:50:23'!
test04
	| account1 account2 transfer |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer transfer: 5 from: account2 to: account1.
	
	self deny: (account1 hasRegisteredTransfer: transfer).! !

!testRun: #TransferTest #test04 stamp: 'Ch.A 10/18/2021 20:50:25'!
FAILURE!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'Ch.A 10/18/2021 20:53:21'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions tranfers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'Ch.A 10/18/2021 20:53:20' prior: 50921804!
hasRegisteredTransfer: aTransfer
	^tranfers includes: aTransfer
	! !

!testRun: #TransferTest #test04 stamp: 'Ch.A 10/18/2021 20:53:23'!
ERROR!

!testRun: #TransferTest #test04 stamp: 'Ch.A 10/18/2021 20:54:17'!
ERROR!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'Ch.A 10/18/2021 20:55:10' prior: 50921366 overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.
	tranfers := OrderedCollection new.! !

!testRun: #TransferTest #test04 stamp: 'Ch.A 10/18/2021 20:55:14'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'Ch.A 10/18/2021 20:55:19'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'Ch.A 10/18/2021 20:55:19'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 20:55:19'!
FAILURE!

!testRun: #TransferTest #test04 stamp: 'Ch.A 10/18/2021 20:55:19'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 20:55:19'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'Ch.A 10/18/2021 21:01:41' prior: 50921730!
transfer: anAmount from: aReceptiveAccount1 to: aReceptiveAccount2
	anAmount > 0 ifFalse: [self error: self transferCannotBeNull].
	Withdraw register: anAmount on: aReceptiveAccount1.
	Deposit register: anAmount on: aReceptiveAccount2.! !


----QUIT----(18 October 2021 21:09:40) CuisUniversity-4913.image priorSource: 18847439!

----STARTUP---- (18 October 2021 21:29:48) as /home/alex/Downloads/linux64-Portfolio/CuisUniversity-4913.image!


!classRemoval: #TransferIn stamp: 'Ch.A 10/18/2021 21:30:36'!
Transfer subclass: #TransferIn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferOut stamp: 'Ch.A 10/18/2021 21:30:38'!
Transfer subclass: #TransferOut
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #TransferTest #test01 stamp: 'Ch.A 10/18/2021 21:30:39'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'Ch.A 10/18/2021 21:30:39'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 21:30:39'!
FAILURE!

!testRun: #TransferTest #test04 stamp: 'Ch.A 10/18/2021 21:30:39'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 21:30:39'!
FAILURE!

!methodRemoval: TransferTest #test04 stamp: 'Ch.A 10/18/2021 21:31:55'!
test04
	| account1 account2 transfer |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer transfer: 5 from: account2 to: account1.
	
	self deny: (account1 hasRegisteredTransfer: transfer).!

!methodRemoval: ReceptiveAccount #hasRegisteredTransfer: stamp: 'Ch.A 10/18/2021 21:32:14'!
hasRegisteredTransfer: aTransfer
	^tranfers includes: aTransfer
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Ch.A 10/18/2021 21:37:17' prior: 50921838!
test03
	| account1 account2 transfer |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer transfer: 5 from: account1 to: account2.
	
	self assert: transfer pataDeposit value equals: transfer pataWithDraw value.! !

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 21:37:21'!
ERROR!

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'Ch.A 10/18/2021 21:37:58'!
Transfer class
	instanceVariableNames: 'pataWithdraw'!

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'Ch.A 10/18/2021 21:37:59'!
Transfer class
	instanceVariableNames: 'pataWithdraw pataDeposit'!
!Transfer class methodsFor: 'instance creation' stamp: 'Ch.A 10/18/2021 21:37:56' prior: 50921902!
transfer: anAmount from: aReceptiveAccount1 to: aReceptiveAccount2
	anAmount > 0 ifFalse: [self error: self transferCannotBeNull].
	pataWithdraw := Withdraw register: anAmount on: aReceptiveAccount1.
	pataDeposit := Deposit register: anAmount on: aReceptiveAccount2.! !

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 21:38:01'!
ERROR!
!Transfer class methodsFor: 'pata' stamp: 'Ch.A 10/18/2021 21:38:14'!
pataDeposit
	self shouldBeImplemented.
	^pataDeposit! !
!Transfer class methodsFor: 'pata' stamp: 'Ch.A 10/18/2021 21:38:25' prior: 50921995!
pataDeposit
	^pataDeposit! !

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 21:38:28'!
ERROR!
!Transfer class methodsFor: 'pata' stamp: 'Ch.A 10/18/2021 21:38:33'!
pataWithDraw
	self shouldBeImplemented.! !
!Transfer class methodsFor: 'pata' stamp: 'Ch.A 10/18/2021 21:38:51' prior: 50922006!
pataWithDraw
	^pataWithdraw.! !

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 21:38:52'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'Ch.A 10/18/2021 21:38:52'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'Ch.A 10/18/2021 21:38:52'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 21:38:52'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Ch.A 10/18/2021 21:39:19' prior: 50921958!
test03
	| account1 account2 transfer |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer transfer: 5 from: account1 to: account2.
	
	self assert: transfer pataDeposit value equals: transfer pataWithDraw value! !

!methodRemoval: Transfer class #pataDeposit stamp: 'Ch.A 10/18/2021 21:41:45'!
pataDeposit
	^pataDeposit!

!methodRemoval: Transfer class #pataWithDraw stamp: 'Ch.A 10/18/2021 21:41:47'!
pataWithDraw
	^pataWithdraw.!

Transfer class
	instanceVariableNames: ''!

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'Ch.A 10/18/2021 21:41:51'!
Transfer class
	instanceVariableNames: ''!

!testRun: #TransferTest #test01 stamp: 'Ch.A 10/18/2021 21:41:56'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'Ch.A 10/18/2021 21:41:56'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 21:41:56'!
ERROR!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 21:41:56'!
ERROR!

transfer!

!testRun: #TransferTest #test01 stamp: 'Ch.A 10/18/2021 21:42:30'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'Ch.A 10/18/2021 21:42:30'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 21:42:30'!
ERROR!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 21:42:30'!
ERROR!

transfer!
!Transfer class methodsFor: 'instance creation' stamp: 'Ch.A 10/18/2021 21:45:48' prior: 50921982!
transfer: anAmount from: aReceptiveAccount1 to: aReceptiveAccount2
	| deposit withdraw |
	anAmount > 0 ifFalse: [self error: self transferCannotBeNull].
	withdraw := Withdraw register: anAmount on: aReceptiveAccount1.
	deposit :=Deposit register: anAmount on: aReceptiveAccount2.
	
	self initializeTransferWith: anAmount withPataWithdraw: withdraw withPataDeposit: deposit.
! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Ch.A 10/18/2021 21:46:31'!
Object subclass: #Transfer
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'nil' stamp: 'Ch.A 10/18/2021 21:46:30'!
initializeTransferWith: anAmount withPataWithdraw: withdraw withPataDeposit: deposit
	value := anAmount! !
!Transfer class methodsFor: 'instance creation' stamp: 'Ch.A 10/18/2021 21:47:21' prior: 50922069!
transfer: anAmount from: aReceptiveAccount1 to: aReceptiveAccount2
	| deposit withdraw |
	anAmount > 0 ifFalse: [self error: self transferCannotBeNull].
	withdraw := Withdraw register: anAmount on: aReceptiveAccount1.
	deposit :=Deposit register: anAmount on: aReceptiveAccount2.
	
	self new initializeTransferWith: anAmount withPataWithdraw: withdraw withPataDeposit: deposit.
! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Ch.A 10/18/2021 21:47:54'!
Object subclass: #Transfer
	instanceVariableNames: 'value pataWithdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'Ch.A 10/18/2021 21:47:55'!
Object subclass: #Transfer
	instanceVariableNames: 'value pataWithdraw pataDeposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Ch.A 10/18/2021 21:47:52' prior: 50922091!
initializeTransferWith: anAmount withPataWithdraw: withdraw withPataDeposit: deposit
	value := anAmount.
	pataWithdraw := withdraw.
	pataDeposit := deposit.! !

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 21:48:00'!
ERROR!
!Transfer class methodsFor: 'instance creation' stamp: 'Ch.A 10/18/2021 21:48:43' prior: 50922098!
transfer: anAmount from: aReceptiveAccount1 to: aReceptiveAccount2
	| deposit withdraw |
	anAmount > 0 ifFalse: [self error: self transferCannotBeNull].
	withdraw := Withdraw register: anAmount on: aReceptiveAccount1.
	deposit :=Deposit register: anAmount on: aReceptiveAccount2.
	
	^self new initializeTransferWith: anAmount withPataWithdraw: withdraw withPataDeposit: deposit.
! !

!testRun: #TransferTest #test01 stamp: 'Ch.A 10/18/2021 21:48:45'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'Ch.A 10/18/2021 21:48:45'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 21:48:45'!
ERROR!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 21:48:45'!
ERROR!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 21:49:41'!
ERROR!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 21:49:41'!
ERROR!

transfer!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 21:50:26'!
ERROR!

!testRun: #TransferTest #test01 stamp: 'Ch.A 10/18/2021 21:50:52'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'Ch.A 10/18/2021 21:50:52'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 21:50:52'!
ERROR!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 21:50:52'!
ERROR!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Ch.A 10/18/2021 21:50:57'!
pataDeposit
	self shouldBeImplemented.
	^pataDeposit! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'Ch.A 10/18/2021 21:51:02' prior: 50922181!
pataDeposit
	^pataDeposit! !

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 21:51:04'!
ERROR!
!Transfer methodsFor: 'as yet unclassified' stamp: 'Ch.A 10/18/2021 21:51:08'!
pataWithDraw
	self shouldBeImplemented.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'Ch.A 10/18/2021 21:51:22' prior: 50922192!
pataWithDraw
	^pataWithdraw! !

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 21:51:23'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'Ch.A 10/18/2021 21:51:34' prior: 50922025!
test03
	| account1 account2 transfer |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer transfer: 5 from: account1 to: account2.
	
	self assert: transfer pataDeposit value equals: transfer pataWithdraw value! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'Ch.A 10/18/2021 21:51:51'!
pataWithdraw
	^pataWithdraw! !

!methodRemoval: Transfer #pataWithDraw stamp: 'Ch.A 10/18/2021 21:51:51'!
pataWithDraw
	^pataWithdraw!

!testRun: #TransferTest #test01 stamp: 'Ch.A 10/18/2021 21:51:54'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'Ch.A 10/18/2021 21:51:54'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 21:51:54'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 21:52:10'!
ERROR!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 21:52:19'!
PASSED!

!testRun: #TransferTest #test01 stamp: 'Ch.A 10/18/2021 21:52:21'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'Ch.A 10/18/2021 21:52:21'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'Ch.A 10/18/2021 21:52:21'!
PASSED!

----QUIT----(18 October 2021 21:54:11) CuisUniversity-4913.image priorSource: 18888366!

----STARTUP---- (20 October 2021 13:22:17) as /home/matias/Downloads/linux64/CuisUniversity-4532.image!


----End fileIn of /home/matias/Downloads/Inge-TPs/Ingenieria-de-Software-I/18-Portfolio 2/Portfolio-Solucion.st----!

!classRemoval: #Transfer stamp: 'MS 10/20/2021 13:23:58'!
Object subclass: #Transfer
	instanceVariableNames: 'value pataWithdraw pataDeposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Withdraw stamp: 'MS 10/20/2021 13:23:59'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Deposit stamp: 'MS 10/20/2021 13:23:59'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransaction stamp: 'MS 10/20/2021 13:24:00'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'MS 10/20/2021 13:24:01'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions tranfers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Portfolio stamp: 'MS 10/20/2021 13:24:01'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Account stamp: 'MS 10/20/2021 13:24:02'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferTest stamp: 'MS 10/20/2021 13:24:03'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccountTest stamp: 'MS 10/20/2021 13:24:03'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTest stamp: 'MS 10/20/2021 13:24:04'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioEntry stamp: 'MS 10/20/2021 13:24:07'!
Object subclass: #PortfolioEntry
	instanceVariableNames: 'services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of /home/matias/Downloads/Inge-TPs/Ingenieria-de-Software-I/18-Portfolio 2/Portfolio-Solucion.st----!

----SNAPSHOT----(20 October 2021 13:24:48) CuisUniversity-4532.image priorSource: 19271615!

----STARTUP---- (20 October 2021 13:27:31) as /home/matias/Downloads/newcuis/linux64/CuisUniversity-4913.image!


!testRun: #TransferTest #test01 stamp: 'MS 10/20/2021 13:37:12'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'MS 10/20/2021 13:37:12'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'MS 10/20/2021 13:37:12'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 13:37:49' prior: 50935180!
test01
	| account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	
		self 
		should: [Transfer transfer: 0 from: account1 to: account2. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer transferCannotBeNull equals: anError messageText.]! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 13:38:12'!
test01canNotTransferZeroAsAmount
	| account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	
		self 
		should: [Transfer transfer: 0 from: account1 to: account2. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer transferCannotBeNull equals: anError messageText.]! !

!methodRemoval: TransferTest #test01 stamp: 'MS 10/20/2021 13:38:12'!
test01
	| account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	
		self 
		should: [Transfer transfer: 0 from: account1 to: account2. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer transferCannotBeNull equals: anError messageText.]!
!Transfer class methodsFor: 'instance creation' stamp: 'MS 10/20/2021 14:51:52' prior: 50935603!
transfer: anAmount from: aSourceReceptiveAccount to: aDestinationReceptiveAccount
	| deposit withdraw |
	anAmount = 0 ifTrue: [self error: self transferCannotBeNull].
	withdraw := Withdraw register: anAmount on: aSourceReceptiveAccount.
	deposit :=Deposit register: anAmount on: aDestinationReceptiveAccount.
	
	^self new initializeTransferWith: anAmount withPataWithdraw: withdraw withPataDeposit: deposit.
! !

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'MS 10/20/2021 14:51:54'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'MS 10/20/2021 14:51:54'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'MS 10/20/2021 14:51:54'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 14:52:13'!
test04
	| account1 account2 transfer |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer transfer: 5 from: account1 to: account2.
	
	self assert: transfer pataDeposit value equals: transfer pataWithdraw value! !

!methodRemoval: TransferTest #test03 stamp: 'MS 10/20/2021 14:52:13'!
test03
	| account1 account2 transfer |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer transfer: 5 from: account1 to: account2.
	
	self assert: transfer pataDeposit value equals: transfer pataWithdraw value!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 14:52:19'!
test03
	| account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer transfer: 5 from: account1 to: account2.
	
	self assert: -5 equals: account1 balance.
	self assert: 5 equals: account2 balance.! !

!methodRemoval: TransferTest #test02 stamp: 'MS 10/20/2021 14:52:19'!
test02
	| account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer transfer: 5 from: account1 to: account2.
	
	self assert: -5 equals: account1 balance.
	self assert: 5 equals: account2 balance.!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 14:52:37'!
test01canNotTransferANegativeAmount
	| account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	
		self 
		should: [Transfer transfer: -1 from: account1 to: account2. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer transferCannotBeNull equals: anError messageText.]! !

!testRun: #TransferTest #test01canNotTransferANegativeAmount stamp: 'MS 10/20/2021 14:52:38'!
FAILURE!

!testRun: #TransferTest #test01canNotTransferANegativeAmount stamp: 'MS 10/20/2021 14:52:56'!
FAILURE!

!methodRemoval: TransferTest #test01canNotTransferANegativeAmount stamp: 'MS 10/20/2021 14:53:34'!
test01canNotTransferANegativeAmount
	| account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	
		self 
		should: [Transfer transfer: -1 from: account1 to: account2. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer transferCannotBeNull equals: anError messageText.]!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 14:53:40'!
test02
	| account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer transfer: 5 from: account1 to: account2.
	
	self assert: -5 equals: account1 balance.
	self assert: 5 equals: account2 balance.! !

!methodRemoval: TransferTest #test03 stamp: 'MS 10/20/2021 14:53:40'!
test03
	| account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer transfer: 5 from: account1 to: account2.
	
	self assert: -5 equals: account1 balance.
	self assert: 5 equals: account2 balance.!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 14:53:45'!
test03
	| account1 account2 transfer |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer transfer: 5 from: account1 to: account2.
	
	self assert: transfer pataDeposit value equals: transfer pataWithdraw value! !

!methodRemoval: TransferTest #test04 stamp: 'MS 10/20/2021 14:53:45'!
test04
	| account1 account2 transfer |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer transfer: 5 from: account1 to: account2.
	
	self assert: transfer pataDeposit value equals: transfer pataWithdraw value!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:05:42'!
test04
	| account1 account2 transfer |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer transfer: 5 from: account1 to: account2.
	
	self assert: transfer pataDeposit value equals: transfer pataWithdraw value! !

!methodRemoval: TransferTest #test03 stamp: 'MS 10/20/2021 15:05:42'!
test03
	| account1 account2 transfer |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer transfer: 5 from: account1 to: account2.
	
	self assert: transfer pataDeposit value equals: transfer pataWithdraw value!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:05:51'!
test03
	| account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer transfer: 5 from: account1 to: account2.
	
	self assert: -5 equals: account1 balance.
	self assert: 5 equals: account2 balance.! !

!methodRemoval: TransferTest #test02 stamp: 'MS 10/20/2021 15:05:51'!
test02
	| account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer transfer: 5 from: account1 to: account2.
	
	self assert: -5 equals: account1 balance.
	self assert: 5 equals: account2 balance.!
!TransferTest methodsFor: 'nil' stamp: 'MS 10/20/2021 15:05:53'!
test02
	| account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer transfer: 5 from: account1 to: account2.
	
	self assert: -5 equals: account1 balance.
	self assert: 5 equals: account2 balance.! !

!methodRemoval: TransferTest #test02 stamp: 'MS 10/20/2021 15:06:07'!
test02
	| account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer transfer: 5 from: account1 to: account2.
	
	self assert: -5 equals: account1 balance.
	self assert: 5 equals: account2 balance.!

!testRun: #TransferTest #test04 stamp: 'MS 10/20/2021 15:06:09'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'MS 10/20/2021 15:06:12'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'MS 10/20/2021 15:06:12'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'MS 10/20/2021 15:06:12'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:06:48'!
test02canNotTransferToSameAccount
	| account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	
		self 
		should: [Transfer transfer: 0 from: account1 to: account2. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer transferCannotBeNull equals: anError messageText.]! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:07:04' prior: 50935892!
test02canNotTransferToSameAccount
	| account1  |
	account1 := ReceptiveAccount new.
	
		self 
		should: [Transfer transfer: 10 from: account1 to: account1. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer transferCannotBeNull equals: anError messageText.]! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:07:10' prior: 50935906!
test02canNotTransferToSameAccount
	| account  |
	account := ReceptiveAccount new.
	
		self 
		should: [Transfer transfer: 10 from: account to: account. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer transferCannotBeNull equals: anError messageText.]! !

!testRun: #TransferTest #test02canNotTransferToSameAccount stamp: 'MS 10/20/2021 15:07:11'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:09:16' prior: 50935919!
test02canNotTransferToSameAccount
	| account  |
	account := ReceptiveAccount new.
	
		self 
		should: [Transfer transfer: 10 from: account to: account. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer cannotTransferToSourceAccountErrorMesssage equals: anError messageText.]! !

!testRun: #TransferTest #test02canNotTransferToSameAccount stamp: 'MS 10/20/2021 15:09:19'!
FAILURE!

!testRun: #TransferTest #test02canNotTransferToSameAccount stamp: 'MS 10/20/2021 15:09:31'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:10:48' prior: 50935935!
test02canNotTransferToSameAccount
	| account1 account2  |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer transfer: 10  from:account1  to:account2 .
		self 
		should: [Transfer transfer: 10 from: account1 to: account1. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer cannotTransferToSourceAccountErrorMesssage equals: anError messageText.]! !

!testRun: #TransferTest #test02canNotTransferToSameAccount stamp: 'MS 10/20/2021 15:10:48'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'MS 10/20/2021 15:12:23' prior: 50935680!
transfer: anAmount from: aSourceReceptiveAccount to: aDestinationReceptiveAccount
	| deposit withdraw |
	anAmount = 0 ifTrue: [self error: self transferCannotBeNull].
	(aSourceReceptiveAccount = aDestinationReceptiveAccount) ifTrue: [self error: self cannotTransferToSourceAccountErrorMesssage].
	withdraw := Withdraw register: anAmount on: aSourceReceptiveAccount.
	deposit :=Deposit register: anAmount on: aDestinationReceptiveAccount.
	
	^self new initializeTransferWith: anAmount withPataWithdraw: withdraw withPataDeposit: deposit.
! !

!testRun: #TransferTest #test02canNotTransferToSameAccount stamp: 'MS 10/20/2021 15:12:31'!
ERROR!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:12:56'!
cannotTransferToSourceAccountErrorMesssage
	self shouldBeImplemented.! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:13:25' prior: 50935998!
cannotTransferToSourceAccountErrorMesssage
	^'An account cannot transfer to himself'.! !

!testRun: #TransferTest #test02canNotTransferToSameAccount stamp: 'MS 10/20/2021 15:13:26'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'MS 10/20/2021 15:13:26'!
PASSED!

!testRun: #TransferTest #test02canNotTransferToSameAccount stamp: 'MS 10/20/2021 15:13:26'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'MS 10/20/2021 15:13:26'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'MS 10/20/2021 15:13:26'!
PASSED!
!Transfer methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:28:46' prior: 50935587!
pataDeposit

	^pataDeposit! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:28:50' prior: 50935591!
pataWithdraw

	^pataWithdraw! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'MS 10/20/2021 15:31:15'!
Object subclass: #Transfer
	instanceVariableNames: 'value source pataDeposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:31:15' prior: 50936028!
pataWithdraw

	^source! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:31:15' prior: 50935579!
initializeTransferWith: anAmount withPataWithdraw: withdraw withPataDeposit: deposit
	value := anAmount.
	source := withdraw.
	pataDeposit := deposit.! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'MS 10/20/2021 15:31:21'!
Object subclass: #Transfer
	instanceVariableNames: 'value source destination'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:31:21' prior: 50936024!
pataDeposit

	^destination! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:31:21' prior: 50936044!
initializeTransferWith: anAmount withPataWithdraw: withdraw withPataDeposit: deposit
	value := anAmount.
	source := withdraw.
	destination := deposit.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:31:35'!
destination

	^destination! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:31:35' prior: 50935821!
test04
	| account1 account2 transfer |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer transfer: 5 from: account1 to: account2.
	
	self assert: transfer destination value equals: transfer pataWithdraw value! !

!methodRemoval: Transfer #pataDeposit stamp: 'MS 10/20/2021 15:31:35'!
pataDeposit

	^destination!
!Transfer methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:31:42'!
source

	^source! !

!methodRemoval: Transfer #pataWithdraw stamp: 'MS 10/20/2021 15:31:42'!
pataWithdraw

	^source!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'MS 10/20/2021 15:32:11'!
PASSED!

!testRun: #TransferTest #test02canNotTransferToSameAccount stamp: 'MS 10/20/2021 15:32:11'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'MS 10/20/2021 15:32:11'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'MS 10/20/2021 15:32:11'!
ERROR!

!testRun: #TransferTest #test04 stamp: 'MS 10/20/2021 15:32:11'!
ERROR!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:32:26' prior: 50936076!
test04
	| account1 account2 transfer |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer transfer: 5 from: account1 to: account2.
	
	self assert: transfer destination value equals: transfer source value! !

!testRun: #TransferTest #test04 stamp: 'MS 10/20/2021 15:32:27'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'MS 10/20/2021 15:32:27'!
PASSED!

!testRun: #TransferTest #test02canNotTransferToSameAccount stamp: 'MS 10/20/2021 15:32:27'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'MS 10/20/2021 15:32:27'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'MS 10/20/2021 15:32:27'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:35:23'!
test05
	| account1 account2 transfer |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer transfer: 100 from: account1 to: account2.
	
	self assert: transfer source equals: transfer destination other.
	self assert: transfer destination equals: transfer source other.
	! !

!testRun: #TransferTest #test05 stamp: 'MS 10/20/2021 15:35:24'!
ERROR!
!Transfer methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:42:14' prior: 50936064!
initializeTransferWith: anAmount withPataWithdraw: withdraw withPataDeposit: deposit
	
	value := anAmount.
	"source := "
		destination :=  deposit.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:42:24' prior: 50936150!
initializeTransferWith: anAmount withPataWithdraw: withdraw withPataDeposit: deposit
	
	value := anAmount.
	"source := "
	destination :=  deposit.! !

Object subclass: #TransferParts
	instanceVariableNames: 'value source destination'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferParts category: 'Portfolio-Solucion' stamp: 'MS 10/20/2021 15:42:32'!
Object subclass: #TransferParts
	instanceVariableNames: 'value source destination'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #TransferParts
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferParts category: 'Portfolio-Solucion' stamp: 'MS 10/20/2021 15:42:39'!
Object subclass: #TransferParts
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferParts subclass: #TransferSource
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferSource category: 'Portfolio-Solucion' stamp: 'MS 10/20/2021 15:42:56'!
TransferParts subclass: #TransferSource
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferParts subclass: #TransferDestination
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDestination category: 'Portfolio-Solucion' stamp: 'MS 10/20/2021 15:42:59'!
TransferParts subclass: #TransferDestination
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:43:41' prior: 50936158!
initializeTransferWith: anAmount withPataWithdraw: withdraw withPataDeposit: deposit
	
	value := anAmount.
	source := TransferSource for: self.
	destination :=  TransferDestination for: self.! !
!TransferParts class methodsFor: 'no messages' stamp: 'MS 10/20/2021 15:46:44'!
for: aTransfer

	^ self new initializeFor: aTransfer! !

!classDefinition: #TransferParts category: 'Portfolio-Solucion' stamp: 'MS 10/20/2021 15:48:16'!
Object subclass: #TransferParts
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferParts methodsFor: 'no messages' stamp: 'MS 10/20/2021 15:48:13'!
initializeFor: aTransfer

	transfer := aTransfer ! !
!TransferParts methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:48:31'!
transfer

	^transfer.! !

!testRun: #TransferTest #test05 stamp: 'MS 10/20/2021 15:48:39'!
ERROR!

!testRun: #TransferTest #test05 stamp: 'MS 10/20/2021 15:48:39'!
ERROR!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:51:33' prior: 50936134!
test05
	| account1 account2 transfer |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer transfer: 100 from: account1 to: account2.
	
	self assert: transfer source equals: transfer destination .
	self assert: transfer destination equals: transfer source .
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:53:03' prior: 50935653!
test01canNotTransferZeroAsAmount
	| account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	
		self 
		should: [account1 transfer: 0 to: account2. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer transferCannotBeNull equals: anError messageText.]! !

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'MS 10/20/2021 15:53:06'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:53:16'!
transfer: aSmallInteger to: aReceptiveAccount 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:54:44' prior: 50936281!
transfer: aValue to: aReceptiveAccount
 
	^Transfer transfer: aValue from: self to: aReceptiveAccount.! !

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'MS 10/20/2021 15:54:47'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'MS 10/20/2021 15:54:47'!
PASSED!

!testRun: #TransferTest #test02canNotTransferToSameAccount stamp: 'MS 10/20/2021 15:54:47'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'MS 10/20/2021 15:54:47'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'MS 10/20/2021 15:54:47'!
FAILURE!

!testRun: #TransferTest #test05 stamp: 'MS 10/20/2021 15:54:47'!
FAILURE!

!testRun: #TransferTest #test05 stamp: 'MS 10/20/2021 15:54:48'!
ERROR!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'MS 10/20/2021 15:54:52'!
PASSED!

!testRun: #TransferTest #test02canNotTransferToSameAccount stamp: 'MS 10/20/2021 15:54:52'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'MS 10/20/2021 15:54:52'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'MS 10/20/2021 15:54:52'!
FAILURE!

!testRun: #TransferTest #test05 stamp: 'MS 10/20/2021 15:54:52'!
FAILURE!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'MS 10/20/2021 15:54:55'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'MS 10/20/2021 15:55:12'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:55:21' prior: 50936264!
test01canNotTransferZeroAsAmount
	| account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
		self 
		should: [account1 transfer: 0 to: account2. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer transferCannotBeNull equals: anError messageText.]! !

!testRun: #TransferTest #test02canNotTransferToSameAccount stamp: 'MS 10/20/2021 15:55:25'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:55:54' prior: 50935955!
test02canNotTransferToSameAccount
	| account1 account2  |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
		self 
		should: [account1 transfer:50  to: account1]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer cannotTransferToSourceAccountErrorMesssage equals: anError messageText.]! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:56:03' prior: 50936349!
test02canNotTransferToSameAccount
	| account1  |
	account1 := ReceptiveAccount new.
		self 
		should: [account1 transfer:50  to: account1]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer cannotTransferToSourceAccountErrorMesssage equals: anError messageText.]! !

!testRun: #TransferTest #test02canNotTransferToSameAccount stamp: 'MS 10/20/2021 15:56:04'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'MS 10/20/2021 15:56:04'!
PASSED!

!testRun: #TransferTest #test02canNotTransferToSameAccount stamp: 'MS 10/20/2021 15:56:04'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'MS 10/20/2021 15:56:04'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'MS 10/20/2021 15:56:04'!
FAILURE!

!testRun: #TransferTest #test05 stamp: 'MS 10/20/2021 15:56:04'!
FAILURE!

!testRun: #TransferTest #test03 stamp: 'MS 10/20/2021 15:56:09'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:56:25' prior: 50935842!
test03
	| account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	account1 transfer:5  to: account2.
		
	self assert: -5 equals: account1 balance.
	self assert: 5 equals: account2 balance.! !

!testRun: #TransferTest #test03 stamp: 'MS 10/20/2021 15:56:26'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'MS 10/20/2021 15:56:26'!
PASSED!

!testRun: #TransferTest #test02canNotTransferToSameAccount stamp: 'MS 10/20/2021 15:56:26'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'MS 10/20/2021 15:56:26'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'MS 10/20/2021 15:56:26'!
FAILURE!

!testRun: #TransferTest #test05 stamp: 'MS 10/20/2021 15:56:26'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:57:34' prior: 50936110!
test04
	| account1 account2 transfer |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := account1 transfer:5  to: account2.	
	
	self assert: transfer destination value equals: transfer source value! !

!testRun: #TransferTest #test04 stamp: 'MS 10/20/2021 15:57:35'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 15:58:17' prior: 50936422!
test04
	| account1 account2 transfer |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := account1 transfer:5  to: account2.	
	
	self assert: transfer destination transfer equals: transfer source transfer.! !

!testRun: #TransferTest #test04 stamp: 'MS 10/20/2021 15:58:17'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'MS 10/20/2021 15:58:17'!
PASSED!

!testRun: #TransferTest #test02canNotTransferToSameAccount stamp: 'MS 10/20/2021 15:58:17'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'MS 10/20/2021 15:58:17'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'MS 10/20/2021 15:58:17'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'MS 10/20/2021 15:58:17'!
FAILURE!

!testRun: #TransferTest #test05 stamp: 'MS 10/20/2021 15:58:17'!
FAILURE!

!testRun: #TransferTest #test04 stamp: 'MS 10/20/2021 15:59:48'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'MS 10/20/2021 15:59:48'!
PASSED!

!testRun: #TransferTest #test02canNotTransferToSameAccount stamp: 'MS 10/20/2021 15:59:48'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'MS 10/20/2021 15:59:48'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'MS 10/20/2021 15:59:48'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'MS 10/20/2021 15:59:48'!
FAILURE!

!testRun: #TransferTest #test05 stamp: 'MS 10/20/2021 15:59:48'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 16:03:03' prior: 50936435!
test04
	| account1 account2 transfer |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := account1 transfer:5  to: account2.	
	
	self assert: transfer destination equals: transfer source other.! !

!testRun: #TransferTest #test04 stamp: 'MS 10/20/2021 16:03:03'!
ERROR!
!TransferParts methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 16:03:40'!
other
	self shouldBeImplemented.! !
!TransferParts methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 16:03:48' prior: 50936495!
other
	self subclassResponsibility.! !

!testRun: #TransferTest #test04 stamp: 'MS 10/20/2021 16:03:51'!
ERROR!
!TransferSource methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 16:04:00' overrides: 50936500!
other
	self shouldBeImplemented.! !
!TransferSource methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 16:04:15' prior: 50936507 overrides: 50936500!
other
	^transfer destination .! !

!testRun: #TransferTest #test04 stamp: 'MS 10/20/2021 16:04:17'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'MS 10/20/2021 16:04:17'!
PASSED!

!testRun: #TransferTest #test02canNotTransferToSameAccount stamp: 'MS 10/20/2021 16:04:17'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'MS 10/20/2021 16:04:17'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'MS 10/20/2021 16:04:17'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'MS 10/20/2021 16:04:17'!
FAILURE!

!testRun: #TransferTest #test05 stamp: 'MS 10/20/2021 16:04:17'!
FAILURE!

!testRun: #TransferTest #test04 stamp: 'MS 10/20/2021 16:04:53'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'MS 10/20/2021 16:04:56'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'MS 10/20/2021 16:04:59'!
FAILURE!

!testRun: #TransferTest #test05 stamp: 'MS 10/20/2021 16:04:59'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 16:05:13' prior: 50936482!
test04
	| account1 account2 transfer |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := account1 transfer:5  to: account2.	
	
	self assert: transfer destination equals: transfer source other.
	self assert: transfer source equals: transfer destination other.! !

!testRun: #TransferTest #test04 stamp: 'MS 10/20/2021 16:05:14'!
ERROR!
!TransferDestination methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 16:05:20' overrides: 50936500!
other
	self shouldBeImplemented.! !
!TransferDestination methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 16:05:34' prior: 50936559 overrides: 50936500!
other
	^transfer source.! !

!testRun: #TransferTest #test04 stamp: 'MS 10/20/2021 16:05:35'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'MS 10/20/2021 16:05:35'!
PASSED!

!testRun: #TransferTest #test02canNotTransferToSameAccount stamp: 'MS 10/20/2021 16:05:35'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'MS 10/20/2021 16:05:35'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'MS 10/20/2021 16:05:35'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'MS 10/20/2021 16:05:35'!
FAILURE!

!testRun: #TransferTest #test05 stamp: 'MS 10/20/2021 16:05:35'!
FAILURE!

!testRun: #TransferTest #test05 stamp: 'MS 10/20/2021 16:05:40'!
FAILURE!

!testRun: #TransferTest #test04 stamp: 'MS 10/20/2021 16:05:47'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'MS 10/20/2021 16:05:47'!
PASSED!

!testRun: #TransferTest #test02canNotTransferToSameAccount stamp: 'MS 10/20/2021 16:05:47'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'MS 10/20/2021 16:05:47'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'MS 10/20/2021 16:05:47'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'MS 10/20/2021 16:05:47'!
FAILURE!

!testRun: #TransferTest #test05 stamp: 'MS 10/20/2021 16:05:47'!
FAILURE!

!testRun: #TransferTest #test04 stamp: 'MS 10/20/2021 16:05:50'!
PASSED!

!methodRemoval: TransferTest #test05 stamp: 'MS 10/20/2021 16:06:03'!
test05
	| account1 account2 transfer |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer transfer: 100 from: account1 to: account2.
	
	self assert: transfer source equals: transfer destination .
	self assert: transfer destination equals: transfer source .
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 16:06:32'!
test03aTransferMustAffectBothBalances
	| account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	account1 transfer:5  to: account2.
		
	self assert: -5 equals: account1 balance.
	self assert: 5 equals: account2 balance.! !

!methodRemoval: TransferTest #test03 stamp: 'MS 10/20/2021 16:06:32'!
test03
	| account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	account1 transfer:5  to: account2.
		
	self assert: -5 equals: account1 balance.
	self assert: 5 equals: account2 balance.!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 16:07:29'!
test04canNavigateThroughTransfer
	| account1 account2 transfer |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := account1 transfer:5  to: account2.	
	
	self assert: transfer destination equals: transfer source other.
	self assert: transfer source equals: transfer destination other.! !

!methodRemoval: TransferTest #test04 stamp: 'MS 10/20/2021 16:07:29'!
test04
	| account1 account2 transfer |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := account1 transfer:5  to: account2.	
	
	self assert: transfer destination equals: transfer source other.
	self assert: transfer source equals: transfer destination other.!
!Transfer class methodsFor: 'instance creation' stamp: 'MS 10/20/2021 16:09:33' prior: 50935975!
transfer: anAmount from: aSourceReceptiveAccount to: aDestinationReceptiveAccount
	| deposit withdraw |
	anAmount = 0 ifTrue: [self error: self transferCannotBeNull].
	(aSourceReceptiveAccount = aDestinationReceptiveAccount) ifTrue: [self error: self cannotTransferToSourceAccountErrorMesssage].
	
	
	^self new initializeTransferWith: anAmount withPataWithdraw: withdraw withPataDeposit: deposit.
! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 16:09:59'!
initializeFor: anAmount from: withdraw to: deposit
	
	value := anAmount.
	source := TransferSource for: self.
	destination :=  TransferDestination for: self.! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 16:09:59' prior: 50936665!
transfer: anAmount from: aSourceReceptiveAccount to: aDestinationReceptiveAccount
	| deposit withdraw |
	anAmount = 0 ifTrue: [self error: self transferCannotBeNull].
	(aSourceReceptiveAccount = aDestinationReceptiveAccount) ifTrue: [self error: self cannotTransferToSourceAccountErrorMesssage].
	
	
	^self new initializeFor: anAmount from: withdraw to: deposit.
! !

!methodRemoval: Transfer #initializeTransferWith:withPataWithdraw:withPataDeposit: stamp: 'MS 10/20/2021 16:09:59'!
initializeTransferWith: anAmount withPataWithdraw: withdraw withPataDeposit: deposit
	
	value := anAmount.
	source := TransferSource for: self.
	destination :=  TransferDestination for: self.!
!Transfer methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 16:10:29' prior: 50936680!
initializeFor: anAmount from: aSourceReceptiveAccount to: aDestinationReceptiveAccount
	
	value := anAmount.
	source := TransferSource for: self.
	destination :=  TransferDestination for: self.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 16:11:05' prior: 50936714!
initializeFor: anAmount from: aSourceReceptiveAccount to: aDestinationReceptiveAccount
	
	value := anAmount.
	source := TransferSource for: self.
	destination :=  TransferDestination for: self.
	
	aSourceReceptiveAccount register: source.
	aDestinationReceptiveAccount register: destination.! !

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'MS 10/20/2021 16:11:15'!
PASSED!

!testRun: #TransferTest #test02canNotTransferToSameAccount stamp: 'MS 10/20/2021 16:11:15'!
PASSED!

!testRun: #TransferTest #test03aTransferMustAffectBothBalances stamp: 'MS 10/20/2021 16:11:15'!
ERROR!

!testRun: #TransferTest #test04canNavigateThroughTransfer stamp: 'MS 10/20/2021 16:11:15'!
ERROR!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'MS 10/20/2021 16:14:25'!
PASSED!

!testRun: #TransferTest #test02canNotTransferToSameAccount stamp: 'MS 10/20/2021 16:14:27'!
PASSED!

!testRun: #TransferTest #test03aTransferMustAffectBothBalances stamp: 'MS 10/20/2021 16:14:28'!
ERROR!

!testRun: #TransferTest #test03aTransferMustAffectBothBalances stamp: 'MS 10/20/2021 16:14:28'!
ERROR!
!Transfer class methodsFor: 'instance creation' stamp: 'MS 10/20/2021 16:15:31' prior: 50936689!
transfer: anAmount from: aSourceReceptiveAccount to: aDestinationReceptiveAccount
	
	anAmount = 0 ifTrue: [self error: self transferCannotBeNull].
	(aSourceReceptiveAccount = aDestinationReceptiveAccount) ifTrue: [self error: self cannotTransferToSourceAccountErrorMesssage].
	
	
	^self new initializeFor: anAmount from: aSourceReceptiveAccount to: aDestinationReceptiveAccount .
! !

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'MS 10/20/2021 16:15:46'!
PASSED!

!testRun: #TransferTest #test02canNotTransferToSameAccount stamp: 'MS 10/20/2021 16:15:46'!
PASSED!

!testRun: #TransferTest #test03aTransferMustAffectBothBalances stamp: 'MS 10/20/2021 16:15:46'!
ERROR!

!testRun: #TransferTest #test04canNavigateThroughTransfer stamp: 'MS 10/20/2021 16:15:46'!
PASSED!

!testRun: #TransferTest #test03aTransferMustAffectBothBalances stamp: 'MS 10/20/2021 16:15:46'!
ERROR!

!testRun: #TransferTest #test02canNotTransferToSameAccount stamp: 'MS 10/20/2021 16:15:57'!
PASSED!

!testRun: #TransferTest #test04canNavigateThroughTransfer stamp: 'MS 10/20/2021 16:16:00'!
PASSED!

!testRun: #TransferTest #test03aTransferMustAffectBothBalances stamp: 'MS 10/20/2021 16:16:02'!
ERROR!

!testRun: #TransferTest #test03aTransferMustAffectBothBalances stamp: 'MS 10/20/2021 16:16:02'!
ERROR!
!TransferSource methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 16:16:18'!
affectBalance: aSmallInteger 
	self shouldBeImplemented.! !
!TransferSource methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 16:16:48' prior: 50936806!
affectBalance: aBalance 
	
	^aBalance + self value.! !
!TransferSource methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 16:17:01' prior: 50936811!
affectBalance: aBalance 
	
	^aBalance + transfer value.! !

!testRun: #TransferTest #test03aTransferMustAffectBothBalances stamp: 'MS 10/20/2021 16:17:03'!
ERROR!
!TransferParts methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 16:17:37' overrides: 16881508!
value
	
	transfer value.! !
!TransferParts methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 16:17:44' prior: 50936825 overrides: 16881508!
value
	
	^transfer value.! !

!testRun: #TransferTest #test03aTransferMustAffectBothBalances stamp: 'MS 10/20/2021 16:17:48'!
ERROR!

!testRun: #TransferTest #test03aTransferMustAffectBothBalances stamp: 'MS 10/20/2021 16:17:48'!
ERROR!
!TransferSource methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 16:18:05' prior: 50936816!
affectBalance: aBalance 
	
	^aBalance + self value.! !

!testRun: #TransferTest #test03aTransferMustAffectBothBalances stamp: 'MS 10/20/2021 16:18:07'!
ERROR!

!testRun: #TransferTest #test03aTransferMustAffectBothBalances stamp: 'MS 10/20/2021 16:18:47'!
ERROR!
!Transfer methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 16:20:39' overrides: 16881508!
value

	^value.! !

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'MS 10/20/2021 16:20:42'!
PASSED!

!testRun: #TransferTest #test02canNotTransferToSameAccount stamp: 'MS 10/20/2021 16:20:42'!
PASSED!

!testRun: #TransferTest #test03aTransferMustAffectBothBalances stamp: 'MS 10/20/2021 16:20:42'!
FAILURE!

!testRun: #TransferTest #test04canNavigateThroughTransfer stamp: 'MS 10/20/2021 16:20:42'!
PASSED!

!testRun: #TransferTest #test03aTransferMustAffectBothBalances stamp: 'MS 10/20/2021 16:20:42'!
FAILURE!
!TransferSource methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 16:21:24' prior: 50936841!
affectBalance: aBalance 
	
	^aBalance - self value.! !

!testRun: #TransferTest #test03aTransferMustAffectBothBalances stamp: 'MS 10/20/2021 16:21:28'!
ERROR!

!testRun: #TransferTest #test03aTransferMustAffectBothBalances stamp: 'MS 10/20/2021 16:21:28'!
ERROR!
!TransferDestination methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 16:21:38'!
affectBalance: aSmallInteger 
	self shouldBeImplemented.! !
!TransferDestination methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 16:21:53' prior: 50936884!
affectBalance: aBalance 
	aBalance + transfer value.! !

!testRun: #TransferTest #test03aTransferMustAffectBothBalances stamp: 'MS 10/20/2021 16:21:54'!
FAILURE!
!TransferDestination methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 16:22:18' prior: 50936890!
affectBalance: aBalance 
	^aBalance + transfer value.! !

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'MS 10/20/2021 16:22:19'!
PASSED!

!testRun: #TransferTest #test02canNotTransferToSameAccount stamp: 'MS 10/20/2021 16:22:19'!
PASSED!

!testRun: #TransferTest #test03aTransferMustAffectBothBalances stamp: 'MS 10/20/2021 16:22:19'!
PASSED!

!testRun: #TransferTest #test04canNavigateThroughTransfer stamp: 'MS 10/20/2021 16:22:19'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 16:23:57'!
test02canNotTransferANegativeValueAsAmount
	| account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
		self 
		should: [account1 transfer: -1 to: account2. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer transferCannotBeNull equals: anError messageText.]! !

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'MS 10/20/2021 16:23:59'!
FAILURE!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'MS 10/20/2021 16:24:23'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 16:24:42' prior: 50936916!
test02canNotTransferANegativeValueAsAmount
	| account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	account1 transfer: 50  to: account2.
	
		self 
		should: [account1 transfer: -1 to: account2. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer transferCannotBeNull equals: anError messageText.]! !

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'MS 10/20/2021 16:24:43'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'MS 10/20/2021 16:25:07' prior: 50936762!
transfer: anAmount from: aSourceReceptiveAccount to: aDestinationReceptiveAccount
	
	anAmount < 0 ifTrue: [self error: self transferCannotBeNull].
	(aSourceReceptiveAccount = aDestinationReceptiveAccount) ifTrue: [self error: self cannotTransferToSourceAccountErrorMesssage].
	
	
	^self new initializeFor: anAmount from: aSourceReceptiveAccount to: aDestinationReceptiveAccount .
! !
!Transfer class methodsFor: 'instance creation' stamp: 'MS 10/20/2021 16:25:15' prior: 50936956!
transfer: anAmount from: aSourceReceptiveAccount to: aDestinationReceptiveAccount
	
	anAmount <= 0 ifTrue: [self error: self transferCannotBeNull].
	(aSourceReceptiveAccount = aDestinationReceptiveAccount) ifTrue: [self error: self cannotTransferToSourceAccountErrorMesssage].
	
	
	^self new initializeFor: anAmount from: aSourceReceptiveAccount to: aDestinationReceptiveAccount .
! !

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'MS 10/20/2021 16:25:17'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'MS 10/20/2021 16:25:17'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'MS 10/20/2021 16:25:17'!
PASSED!

!testRun: #TransferTest #test02canNotTransferToSameAccount stamp: 'MS 10/20/2021 16:25:17'!
PASSED!

!testRun: #TransferTest #test03aTransferMustAffectBothBalances stamp: 'MS 10/20/2021 16:25:17'!
PASSED!

!testRun: #TransferTest #test04canNavigateThroughTransfer stamp: 'MS 10/20/2021 16:25:17'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 16:25:20' prior: 50936937!
test02canNotTransferANegativeValueAsAmount
	| account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
		
		self 
		should: [account1 transfer: -1 to: account2. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer transferCannotBeNull equals: anError messageText.]! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 16:25:29'!
test03canNotTransferToSameAccount
	| account1  |
	account1 := ReceptiveAccount new.
		self 
		should: [account1 transfer:50  to: account1]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer cannotTransferToSourceAccountErrorMesssage equals: anError messageText.]! !

!methodRemoval: TransferTest #test02canNotTransferToSameAccount stamp: 'MS 10/20/2021 16:25:29'!
test02canNotTransferToSameAccount
	| account1  |
	account1 := ReceptiveAccount new.
		self 
		should: [account1 transfer:50  to: account1]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer cannotTransferToSourceAccountErrorMesssage equals: anError messageText.]!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 16:25:34'!
test04aTransferMustAffectBothBalances
	| account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	account1 transfer:5  to: account2.
		
	self assert: -5 equals: account1 balance.
	self assert: 5 equals: account2 balance.! !

!methodRemoval: TransferTest #test03aTransferMustAffectBothBalances stamp: 'MS 10/20/2021 16:25:34'!
test03aTransferMustAffectBothBalances
	| account1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	account1 transfer:5  to: account2.
		
	self assert: -5 equals: account1 balance.
	self assert: 5 equals: account2 balance.!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'MS 10/20/2021 16:25:38'!
test05canNavigateThroughTransfer
	| account1 account2 transfer |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := account1 transfer:5  to: account2.	
	
	self assert: transfer destination equals: transfer source other.
	self assert: transfer source equals: transfer destination other.! !

!methodRemoval: TransferTest #test04canNavigateThroughTransfer stamp: 'MS 10/20/2021 16:25:38'!
test04canNavigateThroughTransfer
	| account1 account2 transfer |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := account1 transfer:5  to: account2.	
	
	self assert: transfer destination equals: transfer source other.
	self assert: transfer source equals: transfer destination other.!

----QUIT----(20 October 2021 16:38:59) CuisUniversity-4913.image priorSource: 19327210!

----STARTUP---- (21 October 2021 19:28:48) as /home/matias/Downloads/newcuis/linux64/CuisUniversity-4913.image!


TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportTest category: 'Portfolio-Solucion' stamp: 'MS 10/21/2021 19:36:05'!
TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportTest methodsFor: 'no messages' stamp: 'MS 10/21/2021 19:43:35'!
test01

	|account|
	
	account := ReceptiveAccount new.
	
	self assert: (OrderedCollection new with: 'Balance = 0') equals: account accountSummary.! !

!testRun: #ReportTest #test01 stamp: 'MS 10/21/2021 19:43:40'!
ERROR!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 19:44:00' prior: 50937112!
test01

	|account|
	
	account := ReceptiveAccount new.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: account accountSummary.! !

!testRun: #ReportTest #test01 stamp: 'MS 10/21/2021 19:44:01'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 19:45:01'!
accountSummary
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 19:45:16' prior: 50937132!
accountSummary
	^0! !

!testRun: #ReportTest #test01 stamp: 'MS 10/21/2021 19:45:19'!
FAILURE!

!testRun: #ReportTest #test01 stamp: 'MS 10/21/2021 19:45:40'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 19:46:11' prior: 50937137!
accountSummary
	^'0'.! !

!testRun: #ReportTest #test01 stamp: 'MS 10/21/2021 19:46:21'!
FAILURE!

!testRun: #ReportTest #test01 stamp: 'MS 10/21/2021 19:46:21'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 19:46:44' prior: 50937146!
accountSummary
	^'Balance = 0'.! !

!testRun: #ReportTest #test01 stamp: 'MS 10/21/2021 19:46:46'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 19:47:15' prior: 50937155!
accountSummary
	^OrderedCollection with: 'Balance = 0'.! !

!testRun: #ReportTest #test01 stamp: 'MS 10/21/2021 19:47:17'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/21/2021 19:47:21'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 19:48:30'!
test02

	|account|
	
	account := ReceptiveAccount new.
	Deposit register:100 on:account .
		
	self assert: (OrderedCollection with: 'Balance = 0') equals: account accountSummary.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 19:49:04' prior: 50937171!
test02

	|account|
	
	account := ReceptiveAccount new.
	Deposit register:100 on:account .
		
	self assert: (OrderedCollection with:'Deposito por 100' with: 'Balance = 0') equals: account accountSummary.! !

!testRun: #ReportTest #test02 stamp: 'MS 10/21/2021 19:50:11'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 19:50:58' prior: 50937162!
accountSummary
	|accountSummary |
	accountSummary := OrderedCollection new.
	^OrderedCollection with: 'Balance = 0'.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 19:57:02' prior: 50937192!
accountSummary
	|accountSummary |
	accountSummary := OrderedCollection new.
	transactions do: [:aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: [accountSummary add: 'Deposito por', aTransaction value asString , '.'].
	].
	accountSummary add: 'Balance = ', self balance asString.
	^accountSummary.! !

!testRun: #ReportTest #test02 stamp: 'MS 10/21/2021 19:57:05'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 19:57:33' prior: 50937180!
test02

	|account|
	
	account := ReceptiveAccount new.
	Deposit register:100 on:account .
		
	self assert: (OrderedCollection with:'Deposito por 100.' with: 'Balance = 0') equals: account accountSummary.! !

!testRun: #ReportTest #test02 stamp: 'MS 10/21/2021 19:57:35'!
FAILURE!

!testRun: #ReportTest #test02 stamp: 'MS 10/21/2021 19:58:43'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 19:59:43' prior: 50937199!
accountSummary
	|accountSummary |
	accountSummary := OrderedCollection new.
	transactions do: [:aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: [accountSummary add: 'Deposito por ', aTransaction value asString , '.'].
	].
	accountSummary add: 'Balance = ', self balance asString.
	^accountSummary.! !

!testRun: #ReportTest #test02 stamp: 'MS 10/21/2021 19:59:45'!
FAILURE!

account accountSummary.!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:01:21' prior: 50937214!
test02

	|account|
	
	account := ReceptiveAccount new.
	Deposit register:100 on:account .
		
	self assert: (OrderedCollection with:'Deposito por 100.' with: 'Balance = 100') equals: account accountSummary.! !

!testRun: #ReportTest #test02 stamp: 'MS 10/21/2021 20:01:23'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/21/2021 20:01:23'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/21/2021 20:01:23'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:02:13'!
test03

	|account|
	
	account := ReceptiveAccount new.
	Withdraw register:100 on:account .
		
	self assert: (OrderedCollection with:'Extraccion por 100.' with: 'Balance = -100') equals: account accountSummary.! !

!testRun: #ReportTest #test03 stamp: 'MS 10/21/2021 20:02:14'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:05:13' prior: 50937229!
accountSummary
	|accountSummary |
	accountSummary := OrderedCollection new.
	transactions do: [:aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: [accountSummary add: 'Deposito por ', aTransaction value asString , '.'].
		(aTransaction isKindOf: Withdraw) ifTrue: [accountSummary add: 'Extraccion por ', aTransaction value asString , '.'].
	].
	accountSummary add: 'Balance = ', self balance asString.
	^accountSummary.! !

!testRun: #ReportTest #test03 stamp: 'MS 10/21/2021 20:05:16'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/21/2021 20:05:16'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/21/2021 20:05:16'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/21/2021 20:05:16'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:07:53' prior: 50937261!
test03

	|sourceAccount destinationAccount |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	sourceAccount transfer: 100 to: destinationAccount .
		
	self assert: (OrderedCollection with:'Salida por transferencia de 100.' with: 'Balance = -100') equals: sourceAccount accountSummary.! !

!testRun: #ReportTest #test03 stamp: 'MS 10/21/2021 20:07:55'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:10:39' prior: 50937274!
accountSummary
	|accountSummary |
	accountSummary := OrderedCollection new.
	transactions do: [:aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: [accountSummary add: 'Deposito por ', aTransaction value asString , '.'].
		(aTransaction isKindOf: Withdraw) ifTrue: [accountSummary add: 'Extraccion por ', aTransaction value asString , '.'].
		(aTransaction isKindOf: TransferSource ) ifTrue: [accountSummary add: 'Salida por transferencia de ', aTransaction value asString , '.'].
	].
	accountSummary add: 'Balance = ', self balance asString.
	^accountSummary.! !

!testRun: #ReportTest #test03 stamp: 'MS 10/21/2021 20:10:42'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/21/2021 20:10:42'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/21/2021 20:10:42'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/21/2021 20:10:42'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:11:14'!
test04

	|sourceAccount destinationAccount |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	sourceAccount transfer: 100 to: destinationAccount .
		
	self assert: (OrderedCollection with:'Salida por transferencia de 100.' with: 'Balance = -100') equals: sourceAccount accountSummary.! !

!methodRemoval: ReportTest #test03 stamp: 'MS 10/21/2021 20:11:14'!
test03

	|sourceAccount destinationAccount |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	sourceAccount transfer: 100 to: destinationAccount .
		
	self assert: (OrderedCollection with:'Salida por transferencia de 100.' with: 'Balance = -100') equals: sourceAccount accountSummary.!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:11:20'!
test03

	|sourceAccount destinationAccount |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	sourceAccount transfer: 100 to: destinationAccount .
		
	self assert: (OrderedCollection with:'Salida por transferencia de 100.' with: 'Balance = -100') equals: sourceAccount accountSummary.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:12:08' prior: 50937371!
test03

	|account|
	account := ReceptiveAccount new.
	Withdraw register:100 on:account .
		
	self assert: (OrderedCollection with:'Extraccion por 100.' with: 'Balance = 100') equals: account accountSummary! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:12:25' prior: 50937316!
accountSummary
	|accountSummary |
	accountSummary := OrderedCollection new.
	transactions do: [:aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: [accountSummary add: 'Deposito por ', aTransaction value asString , '.'].
		(aTransaction isKindOf: Withdraw) ifTrue: [accountSummary add: 'Extracccion por ', aTransaction value asString , '.'].
		(aTransaction isKindOf: TransferSource ) ifTrue: [accountSummary add: 'Salida por transferencia de ', aTransaction value asString , '.'].
	].
	accountSummary add: 'Balance = ', self balance asString.
	^accountSummary.! !

!testRun: #ReportTest #test01 stamp: 'MS 10/21/2021 20:12:33'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/21/2021 20:12:33'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/21/2021 20:12:33'!
FAILURE!

!testRun: #ReportTest #test04 stamp: 'MS 10/21/2021 20:12:33'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/21/2021 20:12:33'!
FAILURE!

!testRun: #ReportTest #test03 stamp: 'MS 10/21/2021 20:12:39'!
FAILURE!

!testRun: #ReportTest #test03 stamp: 'MS 10/21/2021 20:12:39'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:13:04' prior: 50937395!
accountSummary
	|accountSummary |
	accountSummary := OrderedCollection new.
	transactions do: [:aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: [accountSummary add: 'Deposito por ', aTransaction value asString , '.'].
		(aTransaction isKindOf: Withdraw) ifTrue: [accountSummary add: 'Extraccion por ', aTransaction value asString , '.'].
		(aTransaction isKindOf: TransferSource ) ifTrue: [accountSummary add: 'Salida por transferencia de ', aTransaction value asString , '.'].
	].
	accountSummary add: 'Balance = ', self balance asString.
	^accountSummary.! !

!testRun: #ReportTest #test03 stamp: 'MS 10/21/2021 20:13:06'!
FAILURE!

!testRun: #ReportTest #test03 stamp: 'MS 10/21/2021 20:13:12'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:13:40' prior: 50937385!
test03

	|account|
	account := ReceptiveAccount new.
	Withdraw register:100 on:account .
		
	self assert: (OrderedCollection with:'Extraccion por 100.' with: 'Balance = -100') equals: account accountSummary! !

!testRun: #ReportTest #test03 stamp: 'MS 10/21/2021 20:13:42'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/21/2021 20:13:42'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/21/2021 20:13:42'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/21/2021 20:13:42'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'MS 10/21/2021 20:13:42'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'MS 10/21/2021 20:13:46'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:14:12' prior: 50937346!
test04

	|sourceAccount destinationAccount |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	sourceAccount transfer: 100 to: destinationAccount .
		
	self assert: (OrderedCollection with:'Entrada por transferencia de 100.' with: 'Balance = 100') equals: destinationAccount accountSummary.! !

!testRun: #ReportTest #test04 stamp: 'MS 10/21/2021 20:14:13'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:14:51' prior: 50937432!
accountSummary
	|accountSummary |
	accountSummary := OrderedCollection new.
	transactions do: [:aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: [accountSummary add: 'Deposito por ', aTransaction value asString , '.'].
		(aTransaction isKindOf: Withdraw) ifTrue: [accountSummary add: 'Extraccion por ', aTransaction value asString , '.'].
		(aTransaction isKindOf: TransferSource ) ifTrue: [accountSummary add: 'Salida por transferencia de ', aTransaction value asString , '.'].
		(aTransaction isKindOf: TransferDestination ) ifTrue: [accountSummary add: 'Entrada por transferencia de ', aTransaction value asString , '.'].
	].
	accountSummary add: 'Balance = ', self balance asString.
	^accountSummary.! !

!testRun: #ReportTest #test04 stamp: 'MS 10/21/2021 20:14:53'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/21/2021 20:14:53'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/21/2021 20:14:53'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/21/2021 20:14:53'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'MS 10/21/2021 20:14:53'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:15:01'!
test05

	|sourceAccount destinationAccount |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	sourceAccount transfer: 100 to: destinationAccount .
		
	self assert: (OrderedCollection with:'Entrada por transferencia de 100.' with: 'Balance = 100') equals: destinationAccount accountSummary.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:15:03' prior: 50937482!
test04

	|sourceAccount destinationAccount |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	sourceAccount transfer: 100 to: destinationAccount .
		
	self assert: (OrderedCollection with:'Entrada por transferencia de 100.' with: 'Balance = 100') equals: destinationAccount accountSummary.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:15:17' prior: 50937549!
test04

	|sourceAccount destinationAccount |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	sourceAccount transfer: 100 to: destinationAccount .
		
	self assert: (OrderedCollection with:'Salida por transferencia de 100.' with: 'Balance = 100') equals: sourceAccount accountSummary.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:15:33' prior: 50937498!
accountSummary
	|accountSummary |
	accountSummary := OrderedCollection new.
	transactions do: [:aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: [accountSummary add: 'Deposito por ', aTransaction value asString , '.'].
		(aTransaction isKindOf: Withdraw) ifTrue: [accountSummary add: 'Extraccion por ', aTransaction value asString , '.'].
		(aTransaction isKindOf: TransferSource ) ifTrue: [accountSummary add: 'Salida poor transferencia de ', aTransaction value asString , '.'].
		(aTransaction isKindOf: TransferDestination ) ifTrue: [accountSummary add: 'Entrada por transferencia de ', aTransaction value asString , '.'].
	].
	accountSummary add: 'Balance = ', self balance asString.
	^accountSummary.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:15:45' prior: 50937563!
test04

	|sourceAccount destinationAccount |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	sourceAccount transfer: 100 to: destinationAccount .
		
	self assert: (OrderedCollection with:'Salida por transferencia de 100.' with: 'Balance = -100') equals: sourceAccount accountSummary.! !

!testRun: #ReportTest #test04 stamp: 'MS 10/21/2021 20:15:46'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:16:07' prior: 50937577!
accountSummary
	|accountSummary |
	accountSummary := OrderedCollection new.
	transactions do: [:aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: [accountSummary add: 'Deposito por ', aTransaction value asString , '.'].
		(aTransaction isKindOf: Withdraw) ifTrue: [accountSummary add: 'Extraccion por ', aTransaction value asString , '.'].
		(aTransaction isKindOf: TransferSource ) ifTrue: [accountSummary add: 'Salida por transferencia de ', aTransaction value asString , '.'].
		(aTransaction isKindOf: TransferDestination ) ifTrue: [accountSummary add: 'Entrada por transferencia de ', aTransaction value asString , '.'].
	].
	accountSummary add: 'Balance = ', self balance asString.
	^accountSummary.! !

!testRun: #ReportTest #test04 stamp: 'MS 10/21/2021 20:16:09'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/21/2021 20:16:09'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/21/2021 20:16:09'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/21/2021 20:16:09'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'MS 10/21/2021 20:16:09'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'MS 10/21/2021 20:16:09'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:18:14'!
test06

	|sourceAccount destinationAccount |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	Deposit register: 100  on: sourceAccount .
	Withdraw register: 50 on: sourceAccount.
	sourceAccount transfer: 100 to: destinationAccount .
		
	self assert: (OrderedCollection with:'Entrada por transferencia de 100.' with: 'Balance = 100') equals: destinationAccount accountSummary.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:18:32' prior: 50937658!
test06

	|sourceAccount destinationAccount |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	Deposit register: 100  on: sourceAccount .
	Withdraw register: 50 on: sourceAccount.
	sourceAccount transfer: 20 to: destinationAccount .
	
		
	self assert: (OrderedCollection with:'Entrada por transferencia de 100.' with: 'Balance = 100') equals: destinationAccount accountSummary.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:18:38' prior: 50937675!
test06

	|account1 destinationAccount |
	
	account1 := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	Deposit register: 100  on: account1 .
	Withdraw register: 50 on: account1.
	account1 transfer: 20 to: destinationAccount .
	
		
	self assert: (OrderedCollection with:'Entrada por transferencia de 100.' with: 'Balance = 100') equals: destinationAccount accountSummary.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:18:47' prior: 50937692!
test06

	|account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100  on: account1 .
	Withdraw register: 50 on: account1.
	account1 transfer: 20 to: account2 .
	
		
	self assert: (OrderedCollection with:'Entrada por transferencia de 100.' with: 'Balance = 100') equals: account2 accountSummary.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:19:00' prior: 50937708!
test06

	|account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100  on: account1 .
	Withdraw register: 50 on: account1.
	account1 transfer: 20 to: account2.
	
		
	self assert: (OrderedCollection with:'Entrada por transferencia de 100.' with: 'Balance = 100') equals: account2 accountSummary.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:21:54' prior: 50937723!
test06

	|account1 account2 expectedReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100  on: account1 .
	Withdraw register: 50 on: account1.
	account1 transfer: 20 to: account2.
	account2 transfer: 30 to: account1.
	
	expectedReport := OrderedCollection 
		with: 'Dep�sito por 100.'
		with: 'Extracci�n por 50.'
		with: 'Salida por transferencia de 20.'
		with: 'Entrada por transferencia de 30.'
		with: 'Balance = 60'. 
	
		
	self assert: (OrderedCollection with:'Entrada por transferencia de 100.' with: 'Balance = 100') equals: account2 accountSummary.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:22:09' prior: 50937737!
test06

	|account1 account2 expectedReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100  on: account1 .
	Withdraw register: 50 on: account1.
	account1 transfer: 20 to: account2.
	account2 transfer: 30 to: account1.
	
	expectedReport := OrderedCollection 
		with: 'Dep�sito por 100.'
		with: 'Extracci�n por 50.'
		with: 'Salida por transferencia de 20.'
		with: 'Entrada por transferencia de 30.'
		with: 'Balance = 60'. 
	
		
	self assert: expectedReport equals: account1 accountSummary.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:22:21' prior: 50937619!
accountSummary
	|accountSummary |
	accountSummary := OrderedCollection new.
	transactions do: [:aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: [accountSummary add: 'Deposito por ', aTransaction value asString , '..'].
		(aTransaction isKindOf: Withdraw) ifTrue: [accountSummary add: 'Extraccion por ', aTransaction value asString , '.'].
		(aTransaction isKindOf: TransferSource ) ifTrue: [accountSummary add: 'Salida por transferencia de ', aTransaction value asString , '.'].
		(aTransaction isKindOf: TransferDestination ) ifTrue: [accountSummary add: 'Entrada por transferencia de ', aTransaction value asString , '.'].
	].
	accountSummary add: 'Balance = ', self balance asString.
	^accountSummary.! !

!testRun: #ReportTest #test06 stamp: 'MS 10/21/2021 20:22:28'!
FAILURE!

!testRun: #ReportTest #test06 stamp: 'MS 10/21/2021 20:22:28'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:22:55' prior: 50937781!
accountSummary
	|accountSummary |
	accountSummary := OrderedCollection new.
	transactions do: [:aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: [accountSummary add: 'Deposito por ', aTransaction value asString , '.'].
		(aTransaction isKindOf: Withdraw) ifTrue: [accountSummary add: 'Extraccion por ', aTransaction value asString , '.'].
		(aTransaction isKindOf: TransferSource ) ifTrue: [accountSummary add: 'Salida por transferencia de ', aTransaction value asString , '.'].
		(aTransaction isKindOf: TransferDestination ) ifTrue: [accountSummary add: 'Entrada por transferencia de ', aTransaction value asString , '.'].
	].
	accountSummary add: 'Balance = ', self balance asString.
	^accountSummary.! !

!testRun: #ReportTest #test06 stamp: 'MS 10/21/2021 20:22:57'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:25:21' prior: 50937812!
accountSummary
	|accountSummary |
	accountSummary := OrderedCollection new.
	transactions do: [:aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: [accountSummary add: 'Deposito por ', aTransaction value asString , '..'].
		(aTransaction isKindOf: Withdraw) ifTrue: [accountSummary add: 'Extraccion por ', aTransaction value asString , '.'].
		(aTransaction isKindOf: TransferSource ) ifTrue: [accountSummary add: 'Salida por transferencia de ', aTransaction value asString , '.'].
		(aTransaction isKindOf: TransferDestination ) ifTrue: [accountSummary add: 'Entrada por transferencia de ', aTransaction value asString , '.'].
	].
	accountSummary add: 'Balance = ', self balance asString.
	^accountSummary.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:25:34' prior: 50937760!
test06

	|account1 account2 expectedReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100  on: account1 .
	Withdraw register: 50 on: account1.
	account1 transfer: 20 to: account2.
	account2 transfer: 30 to: account1.
	
	expectedReport := OrderedCollection 
		with: 'Deposito por 100.'
		with: 'Extraccion por 50.'
		with: 'Salida por transferencia de 20.'
		with: 'Entrada por transferencia de 30.'
		with: 'Balance = 60'. 
	
		
	self assert: expectedReport equals: account1 accountSummary.! !

!testRun: #ReportTest #test06 stamp: 'MS 10/21/2021 20:25:44'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:26:06' prior: 50937840!
accountSummary
	|accountSummary |
	accountSummary := OrderedCollection new.
	transactions do: [:aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: [accountSummary add: 'Deposito por ', aTransaction value asString , '.'].
		(aTransaction isKindOf: Withdraw) ifTrue: [accountSummary add: 'Extraccion por ', aTransaction value asString , '.'].
		(aTransaction isKindOf: TransferSource ) ifTrue: [accountSummary add: 'Salida por transferencia de ', aTransaction value asString , '.'].
		(aTransaction isKindOf: TransferDestination ) ifTrue: [accountSummary add: 'Entrada por transferencia de ', aTransaction value asString , '.'].
	].
	accountSummary add: 'Balance = ', self balance asString.
	^accountSummary.! !

!testRun: #ReportTest #test06 stamp: 'MS 10/21/2021 20:26:08'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/21/2021 20:26:08'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/21/2021 20:26:08'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/21/2021 20:26:08'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'MS 10/21/2021 20:26:08'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'MS 10/21/2021 20:26:08'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'MS 10/21/2021 20:26:08'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:54:01' prior: 50937889!
accountSummary
	|accountSummary |
	accountSummary := OrderedCollection new.
	transactions do: [:aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: [accountSummary add: 'Deposito por ', aTransaction value asString , '.'].
		(aTransaction isKindOf: Withdraw) ifTrue: [accountSummary add: 'Extraccion por ', aTransaction value asString , '.'].
		(aTransaction isKindOf: TransferSource) ifTrue: [accountSummary add: 'Salida por transferencia de ', aTransaction value asString , '.'].
		(aTransaction isKindOf: TransferDestination) ifTrue: [accountSummary add: 'Entrada por transferencia de ', aTransaction value asString , '.'].
	].
	accountSummary add: 'Balance = ', self balance asString.
	^accountSummary.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 10/21/2021 20:56:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 10/21/2021 20:56:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 10/21/2021 20:56:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 10/21/2021 20:56:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 10/21/2021 20:56:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 10/21/2021 20:56:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 10/21/2021 20:56:42'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/21/2021 20:56:55'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/21/2021 20:56:55'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/21/2021 20:56:55'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'MS 10/21/2021 20:56:55'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'MS 10/21/2021 20:56:55'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'MS 10/21/2021 20:56:55'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 20:57:36' prior: 50937931!
accountSummary
	|accountSummary |
	accountSummary := OrderedCollection new.
	transactions do: [:aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [accountSummary add: 'Deposito por ', aTransaction value asString , '.'].
		(aTransaction isKindOf: Withdraw) ifTrue: [accountSummary add: 'Extraccion por ', aTransaction value asString , '.'].
		(aTransaction isKindOf: TransferSource) ifTrue: [accountSummary add: 'Salida por transferencia de ', aTransaction value asString , '.'].
		(aTransaction isKindOf: TransferDestination) ifTrue: [accountSummary add: 'Entrada por transferencia de ', aTransaction value asString , '.'].
	].
	accountSummary add: 'Balance = ', self balance asString.
	^accountSummary.! !

----STARTUP---- (21 October 2021 21:06:37) as /home/matias/Downloads/newcuis/linux64/CuisUniversity-4913.image!


----QUIT----(21 October 2021 21:07:59) CuisUniversity-4913.image priorSource: 19374180!

----STARTUP---- (21 October 2021 21:08:03) as /home/matias/Downloads/newcuis/linux64/CuisUniversity-4913.image!


TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportTest category: 'Portfolio-Solucion' stamp: 'MS 10/21/2021 21:15:04'!
TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportTest methodsFor: 'no messages' stamp: 'MS 10/21/2021 21:17:00'!
test01
	|account|
	
	account := ReceptiveAccount new.
	
	self assert: (OrderedCollection new with: 'Balance = 0') equals: account accountSummary.
	! !

!testRun: #ReportTest #test01 stamp: 'MS 10/21/2021 21:17:09'!
ERROR!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 21:17:32' prior: 50937118!
test01
	|account|
	
	account := ReceptiveAccount new.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: account accountSummary.
	! !

!testRun: #ReportTest #test01 stamp: 'MS 10/21/2021 21:17:33'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 21:18:15'!
accountSummary
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 21:18:41' prior: 50937138!
accountSummary
	^OrderedCollection with: 'Balance = 0'.! !

!testRun: #ReportTest #test01 stamp: 'MS 10/21/2021 21:18:42'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/21/2021 21:18:42'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 21:19:02'!
test02

	|account|
	
	account := ReceptiveAccount new.
	Deposit register:100 on:account .
		
	self assert: (OrderedCollection with: 'Balance = 0') equals: account accountSummary.
	! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 21:20:44' prior: 50937152!
test02

	|account|
	
	account := ReceptiveAccount new.
	Deposit register:100 on:account .
		
	self assert: (OrderedCollection with:'Deposito por 100' with: 'Balance = 100') equals: account accountSummary.
	! !

!testRun: #ReportTest #test02 stamp: 'MS 10/21/2021 21:20:46'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 21:21:25' prior: 50937143!
accountSummary
	|accountSummary |
	accountSummary := OrderedCollection new.
	transactions do: [:aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: [accountSummary add: 'Deposito por ', aTransaction value asString , '.'].
	].
	accountSummary add: 'Balance = ', self balance asString.
	^accountSummary.! !

!testRun: #ReportTest #test02 stamp: 'MS 10/21/2021 21:21:26'!
FAILURE!

!testRun: #ReportTest #test02 stamp: 'MS 10/21/2021 21:21:35'!
FAILURE!

!testRun: #ReportTest #test02 stamp: 'MS 10/21/2021 21:22:41'!
FAILURE!

!testRun: #ReportTest #test02 stamp: 'MS 10/21/2021 21:23:07'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 21:23:32' prior: 50937161!
test02

	|account|
	
	account := ReceptiveAccount new.
	Deposit register:100 on:account .
		
	self assert: (OrderedCollection with:'Deposito por 100.' with: 'Balance = 100') equals: account accountSummary.
	! !

!testRun: #ReportTest #test02 stamp: 'MS 10/21/2021 21:23:35'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/21/2021 21:23:35'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/21/2021 21:23:35'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 21:23:54'!
test03

	|account|
	
	account := ReceptiveAccount new.
	Withdraw register:100 on:account .
		
	self assert: (OrderedCollection with:'Extraccion por 100.' with: 'Balance = -100') equals: account accountSummary.
	! !

!testRun: #ReportTest #test03 stamp: 'MS 10/21/2021 21:23:56'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 21:24:38' prior: 50937173!
accountSummary
	|accountSummary |
	accountSummary := OrderedCollection new.
	transactions do: [:aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: [accountSummary add: 'Deposito por ', aTransaction value asString , '.'].
		(aTransaction isKindOf: Withdraw) ifTrue: [accountSummary add: 'Extraccion por ', aTransaction value asString , '.'].
	].
	accountSummary add: 'Balance = ', self balance asString.
	^accountSummary.! !

!testRun: #ReportTest #test03 stamp: 'MS 10/21/2021 21:24:40'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/21/2021 21:24:41'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/21/2021 21:24:41'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/21/2021 21:24:41'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 21:25:43'!
test04

	|sourceAccount destinationAccount |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	sourceAccount transfer: 100 to: destinationAccount .
		
	self assert: (OrderedCollection with:'Salida por transferencia de 100.' with: 'Balance = -100') equals: sourceAccount accountSummary.
	! !

!testRun: #ReportTest #test04 stamp: 'MS 10/21/2021 21:25:44'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 21:26:26' prior: 50937224!
accountSummary
	|accountSummary |
	accountSummary := OrderedCollection new.
	transactions do: [:aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: [accountSummary add: 'Deposito por ', aTransaction value asString , '.'].
		(aTransaction isKindOf: Withdraw) ifTrue: [accountSummary add: 'Extraccion por ', aTransaction value asString , '.'].
		(aTransaction isKindOf: TransferSource ) ifTrue: [accountSummary add: 'Salida por transferencia de ', aTransaction value asString , '.'].
	].
	accountSummary add: 'Balance = ', self balance asString.
	^accountSummary.! !

!testRun: #ReportTest #test04 stamp: 'MS 10/21/2021 21:26:32'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/21/2021 21:26:32'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/21/2021 21:26:32'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/21/2021 21:26:32'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'MS 10/21/2021 21:26:32'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 21:27:10'!
test05

	|sourceAccount destinationAccount |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	sourceAccount transfer: 100 to: destinationAccount .
		
	self assert: (OrderedCollection with:'Entrada por transferencia de 100.' with: 'Balance = 100') equals: destinationAccount accountSummary.
	! !

!testRun: #ReportTest #test05 stamp: 'MS 10/21/2021 21:27:14'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 21:28:02' prior: 50937265!
accountSummary
	|accountSummary |
	accountSummary := OrderedCollection new.
	transactions do: [:aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: [accountSummary add: 'Deposito por ', aTransaction value asString , '.'].
		(aTransaction isKindOf: Withdraw) ifTrue: [accountSummary add: 'Extraccion por ', aTransaction value asString , '.'].
		(aTransaction isKindOf: TransferSource ) ifTrue: [accountSummary add: 'Salida por transferencia de ', aTransaction value asString , '.'].
		(aTransaction isKindOf: TransferDestination ) ifTrue: [accountSummary add: 'Entrada por transferencia de ', aTransaction value asString , '.'].
	].
	accountSummary add: 'Balance = ', self balance asString.
	^accountSummary.! !

!testRun: #ReportTest #test05 stamp: 'MS 10/21/2021 21:28:19'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/21/2021 21:28:19'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/21/2021 21:28:19'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/21/2021 21:28:19'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'MS 10/21/2021 21:28:19'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'MS 10/21/2021 21:28:19'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 21:28:47'!
test06

	|sourceAccount destinationAccount |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	Deposit register: 100  on: sourceAccount .
	Withdraw register: 50 on: sourceAccount.
	sourceAccount transfer: 100 to: destinationAccount .
		
	self assert: (OrderedCollection with:'Entrada por traansferencia de 100.' with: 'Balance = 100') equals: destinationAccount accountSummary.
	! !

!testRun: #ReportTest #test06 stamp: 'MS 10/21/2021 21:28:49'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/21/2021 21:29:03' prior: 50937352!
test06

	|sourceAccount destinationAccount |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	Deposit register: 100  on: sourceAccount .
	Withdraw register: 50 on: sourceAccount.
	sourceAccount transfer: 100 to: destinationAccount .
		
	self assert: (OrderedCollection with:'Entrada por transferencia de 100.' with: 'Balance = 100') equals: destinationAccount accountSummary.
	! !

!testRun: #ReportTest #test06 stamp: 'MS 10/21/2021 21:29:06'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/21/2021 21:29:06'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/21/2021 21:29:06'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/21/2021 21:29:06'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'MS 10/21/2021 21:29:06'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'MS 10/21/2021 21:29:06'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'MS 10/21/2021 21:29:06'!
PASSED!

Object subclass: #TypeOfTransaccions
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TypeOfTransaccions category: 'Portfolio-Solucion' stamp: 'MS 10/21/2021 21:42:29'!
Object subclass: #TypeOfTransaccions
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRenamed: #TypeOfTransaccions as: #TypeOfReports stamp: 'MS 10/21/2021 21:43:52'!
Smalltalk renameClassNamed: #TypeOfTransaccions as: #TypeOfReports!

----SNAPSHOT----(21 October 2021 21:50:41) CuisUniversity-4913.image priorSource: 19374383!

----QUIT----(21 October 2021 21:51:04) CuisUniversity-4913.image priorSource: 19384605!

----STARTUP---- (22 October 2021 15:50:51) as /home/matias/Downloads/newcuis/linux64/CuisUniversity-4913.image!


!classRenamed: #TypeOfReports as: #AccountSummar stamp: 'MS 10/22/2021 15:51:49'!
Smalltalk renameClassNamed: #TypeOfReports as: #AccountSummar!

!classRenamed: #AccountSummar as: #AccountSummary stamp: 'MS 10/22/2021 15:51:55'!
Smalltalk renameClassNamed: #AccountSummar as: #AccountSummary!

!classRemoval: #AccountSummary stamp: 'MS 10/22/2021 16:18:10'!
Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'MS 10/22/2021 16:19:48'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'MS 10/22/2021 16:21:43'!
Report subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'no messages' stamp: 'MS 10/22/2021 16:25:10'!
for: anAccount

	^self new initializeFor: anAccount.! !
!AccountSummary class methodsFor: 'no messages' stamp: 'MS 10/22/2021 16:25:18'!
for: anAccount

	^self new initializeFor: anAccount.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:25:31'!
initializeFor: anAccount.! !

!methodRemoval: AccountSummary #for: stamp: 'MS 10/22/2021 16:25:34'!
for: anAccount

	^self new initializeFor: anAccount.!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'MS 10/22/2021 16:26:48'!
Report subclass: #AccountSummary
	instanceVariableNames: 'report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:26:47' prior: 50937477!
initializeFor: anAccount

	report := OrderedCollection new.
	anAccount accountSummary: self.
	report add: 'Balance = ', anAccount balance asString.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:28:13'!
accountSummary: aReport


	transactions do: [:aTransaction | aTransaction affectReport: aReport.].! !
!Deposit methodsFor: 'balance' stamp: 'MS 10/22/2021 16:29:48'!
affectReport: aReport
	
	^aReport addFromDeposit: value.! !
!Withdraw methodsFor: 'balance' stamp: 'MS 10/22/2021 16:30:08'!
affectReport: aReport
	
	^aReport addFromWithdraw: value.! !
!TransferDestination methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:30:51'!
affectReport: aReport
	
	^aReport addFromTransferDestination: transfer value ! !
!TransferSource methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:31:02'!
affectReport: aReport
	
	^aReport addFromTransferSource: transfer value ! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:31:31'!
addFromDeposit: anAmount
	
	^report add: 'Dep�sito por ', anAmount asString, '.'.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:31:45'!
addFromDepositTransfer: anAmount
	
	^report add: 'Entrada por transferencia de ', anAmount value asString, '.'.
	! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:31:51' prior: 50937527!
addFromDeposit: anAmount
	
	^report add: 'Deposito por ', anAmount asString, '.'.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:32:10'!
addFromWithdraw: anAmount
	
	^report add: 'Extracci�n por ', anAmount asString, '.'.
	! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:32:28' prior: 50937540!
addFromDeposit: anAmount
	
	^report add: 'Dep�sito por ', anAmount asString, '.'.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:32:55' prior: 50937533!
addFromDepositTransfer: anAmount
	
	^report add: 'Entrada por transferencia de ', anAmount value asString, '.'.
	! !

!methodRemoval: AccountSummary #addFromDepositTransfer: stamp: 'MS 10/22/2021 16:32:57'!
addFromDepositTransfer: anAmount
	
	^report add: 'Entrada por transferencia de ', anAmount value asString, '.'.
	!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:33:57'!
addFromTransferDestination: anAmount

	^report add: 'Entrada por transferencia de ', anAmount value asString, '.'

! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:34:12'!
addFromTransferSource: anAmount

	^report add: 'Salida por transferencia de ', anAmount value asString, '.'.
! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:34:58' prior: 50937128!
test01
	|account|
	
	account := ReceptiveAccount new.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: (AccountSummary from: account).! !

!testRun: #ReportTest #test01 stamp: 'MS 10/22/2021 16:34:59'!
ERROR!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:35:05' prior: 50937585!
test01
	|account|
	
	account := ReceptiveAccount new.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: (AccountSummary for: account).! !

!testRun: #ReportTest #test01 stamp: 'MS 10/22/2021 16:35:06'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:36:07' prior: 50937595!
test01
	|account|
	
	account := ReceptiveAccount new.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: (AccountSummary for: account report).! !

!testRun: #ReportTest #test01 stamp: 'MS 10/22/2021 16:36:08'!
ERROR!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:36:42' prior: 50937605!
test01
	|account accountSummary|
	
	account := ReceptiveAccount new.
	accountSummary := AccountSummary for: account.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: (AccountSummary for: account).! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:36:49' prior: 50937616!
test01
	|account accountSummary|
	
	account := ReceptiveAccount new.
	accountSummary := AccountSummary for: account.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary report.! !

!testRun: #ReportTest #test01 stamp: 'MS 10/22/2021 16:36:50'!
ERROR!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:37:02'!
report

	^report	! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:37:04' prior: 50937638!
report

	^report.	! !

!testRun: #ReportTest #test01 stamp: 'MS 10/22/2021 16:37:04'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/22/2021 16:37:04'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/22/2021 16:37:04'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'MS 10/22/2021 16:37:04'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'MS 10/22/2021 16:37:04'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'MS 10/22/2021 16:37:04'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/22/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/22/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/22/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'MS 10/22/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'MS 10/22/2021 16:37:10'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'MS 10/22/2021 16:37:10'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:37:43' prior: 50937195!
test02

	|account accountSummary|
	
	account := ReceptiveAccount new.
	Deposit register:100 on:account .
	accountSummary := AccountSummary for: account.
		
	self assert: (OrderedCollection with:'Deposito por 100.' with: 'Balance = 100') equals: account accountSummary.
	! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:38:29' prior: 50937673!
test02

	|account accountSummary expectiveReport|
	
	account := ReceptiveAccount new.
	Deposit register:100 on:account .
	accountSummary := AccountSummary for: account.
	expectiveReport := OrderedCollection with:'Deposito por 100.' with: 'Balance = 100'.
		
	self assert: expectiveReport equals: accountSummary report.
	! !

!testRun: #ReportTest #test02 stamp: 'MS 10/22/2021 16:38:30'!
FAILURE!

!testRun: #ReportTest #test02 stamp: 'MS 10/22/2021 16:38:37'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:39:06' prior: 50937685!
test02

	|account accountSummary expectiveReport|
	
	account := ReceptiveAccount new.
	Deposit register:100 on:account .
	accountSummary := AccountSummary for: account.
	expectiveReport := OrderedCollection with:'Dep�sito por 100.' with: 'Balance = 100'.
		
	self assert: expectiveReport equals: accountSummary report.
	! !

!testRun: #ReportTest #test02 stamp: 'MS 10/22/2021 16:39:07'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/22/2021 16:39:07'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/22/2021 16:39:07'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/22/2021 16:39:07'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'MS 10/22/2021 16:39:07'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'MS 10/22/2021 16:39:07'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'MS 10/22/2021 16:39:07'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:41:39' prior: 50937211!
test03

	|account accountSummary expectedReport|
	
	account := ReceptiveAccount new.
	Withdraw register:100 on:account.
	accountSummary := AccountSummary for: account.
	expectedReport := OrderedCollection with:'Extracci�n por 100.' with: 'Balance = -100'.
		
	self assert: expectedReport equals: accountSummary balance.
	! !

!testRun: #ReportTest #test03 stamp: 'MS 10/22/2021 16:41:40'!
ERROR!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:41:46' prior: 50937732!
test03

	|account accountSummary expectedReport|
	
	account := ReceptiveAccount new.
	Withdraw register:100 on:account.
	accountSummary := AccountSummary for: account.
	expectedReport := OrderedCollection with:'Extracci�n por 100.' with: 'Balance = -100'.
		
	self assert: expectedReport equals: accountSummary report.
	! !

!testRun: #ReportTest #test03 stamp: 'MS 10/22/2021 16:41:46'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/22/2021 16:41:46'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/22/2021 16:41:46'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/22/2021 16:41:46'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'MS 10/22/2021 16:41:46'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'MS 10/22/2021 16:41:46'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'MS 10/22/2021 16:41:46'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:41:54' prior: 50937703!
test02

	|account accountSummary expectedReport|
	
	account := ReceptiveAccount new.
	Deposit register:100 on:account .
	accountSummary := AccountSummary for: account.
	expectedReport := OrderedCollection with:'Dep�sito por 100.' with: 'Balance = 100'.
		
	self assert: expectedReport equals: accountSummary report.
	! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:42:40' prior: 50937249!
test04

	|sourceAccount destinationAccount summarySourceAccount expectedReport|
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	sourceAccount transfer: 100 to: destinationAccount .
		
	self assert: (OrderedCollection with:'Salida por transferencia de 100.' with: 'Balance = -100') equals: sourceAccount accountSummary.
	! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:43:43' prior: 50937790!
test04

	|sourceAccount destinationAccount sourceAccountSummary expectedReport|
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	sourceAccount transfer: 100 to: destinationAccount .
	sourceAccountSummary := AccountSummary for: sourceAccount.
	expectedReport := OrderedCollection with:'Salida por transferencia de 100.' with: 'Balance = -100'.
		
	self assert: expectedReport equals: sourceAccountSummary report.
	! !

!testRun: #ReportTest #test04 stamp: 'MS 10/22/2021 16:43:44'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/22/2021 16:43:44'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/22/2021 16:43:44'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/22/2021 16:43:44'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'MS 10/22/2021 16:43:44'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'MS 10/22/2021 16:43:44'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'MS 10/22/2021 16:43:44'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:45:51' prior: 50937297!
test05

	|sourceAccount destinationAccount destinationAccountSummary expectedReport |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	sourceAccount transfer: 100 to: destinationAccount .
	destinationAccountSummary := AccountSummary for: destinationAccount.
	expectedReport := OrderedCollection with:'Entrada por transferencia de 100.' with: 'Balance = 100'.
		
	self assert: (expectedReport ) equals: destinationAccountSummary report.
	! !

!testRun: #ReportTest #test05 stamp: 'MS 10/22/2021 16:45:51'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/22/2021 16:45:51'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/22/2021 16:45:51'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/22/2021 16:45:51'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'MS 10/22/2021 16:45:51'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'MS 10/22/2021 16:45:51'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'MS 10/22/2021 16:45:51'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:46:48' prior: 50937371!
test06

	|sourceAccount destinationAccount destinationAccountSummary expectedReport |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	Deposit register: 100  on: sourceAccount .
	Withdraw register: 50 on: sourceAccount.
	sourceAccount transfer: 100 to: destinationAccount .
		
	self assert: (OrderedCollection with:'Entrada por transferencia de 100.' with: 'Balance = 100') equals: destinationAccount accountSummary.
	! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:47:36' prior: 50937872!
test06

	|sourceAccount destinationAccount destinationAccountSummary expectedReport |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	Deposit register: 100  on: sourceAccount .
	Withdraw register: 50 on: sourceAccount.
	sourceAccount transfer: 100 to: destinationAccount .
	destinationAccountSummary := AccountSummary for: destinationAccount.
	expectedReport := OrderedCollection with:'Entrada por transferencia de 100.' with: 'Balance = 100'.
		
	self assert: expectedReport equals: destinationAccountSummary report .
	! !

!testRun: #ReportTest #test06 stamp: 'MS 10/22/2021 16:47:37'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/22/2021 16:47:37'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/22/2021 16:47:37'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/22/2021 16:47:37'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'MS 10/22/2021 16:47:37'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'MS 10/22/2021 16:47:37'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'MS 10/22/2021 16:47:37'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:49:31'!
test07
	|portfolio accountSummary expectedReport|
	
	portfolio := Portfolio new.
	accountSummary := AccountSummary for: portfolio.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary report.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 16:50:07' prior: 50937926!
test07
	|portfolio accountSummary expectedReport|
	
	portfolio := Portfolio new.
	accountSummary := AccountSummary for: portfolio.
	
	expectedReport := OrderedCollection with: 'Balance = 0'.
	
	self assert: expectedReport equals: accountSummary report.! !

!testRun: #ReportTest #test07 stamp: 'MS 10/22/2021 16:50:10'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 17:09:50'!
accountSummary: anAccountSummary 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 17:09:54' prior: 50937949!
accountSummary: anAccountSummary 
	! !

!testRun: #ReportTest #test07 stamp: 'MS 10/22/2021 17:09:54'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/22/2021 17:09:54'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/22/2021 17:09:54'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/22/2021 17:09:54'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'MS 10/22/2021 17:09:54'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'MS 10/22/2021 17:09:54'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'MS 10/22/2021 17:09:54'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'MS 10/22/2021 17:09:54'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 17:11:20'!
test08
	|portfolio account accountSummary expectedReport|
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register:100  on: account.
	accountSummary := AccountSummary for: portfolio.
	
	expectedReport := OrderedCollection with: 'Balance = 0'.
	
	self assert: expectedReport equals: accountSummary report.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 17:12:50' prior: 50937976!
test08
	|portfolio account accountSummary expectedReport|
	
	account := ReceptiveAccount new. 
	
	portfolio := Portfolio with: account .
	accountSummary := AccountSummary for: portfolio.
	
	expectedReport := OrderedCollection with: 'Balance = 0'.
	
	self assert: expectedReport equals: accountSummary report.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 17:15:00' prior: 50937990!
test08
	|portfolio sourceAccount  accountSummary expectedReport|
		
	sourceAccount := ReceptiveAccount new.
	Deposit register: 100  on: sourceAccount .
	Withdraw register: 50 on: sourceAccount.
	expectedReport := OrderedCollection with:'Entrada por transferencia de 100.' with: 'Balance = 100'.
	portfolio := Portfolio with: sourceAccount.
	accountSummary := AccountSummary for: portfolio.
		
	self assert: expectedReport equals: accountSummary report .! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 17:15:20' prior: 50938003!
test08
	|portfolio account  accountSummary expectedReport|
		
	account := ReceptiveAccount new.
	Deposit register: 100  on: account .
	Withdraw register: 50 on: account.
	expectedReport := OrderedCollection with:'Entrada por transferencia de 100.' with: 'Balance = 100'.
	portfolio := Portfolio with: account.
	accountSummary := AccountSummary for: portfolio.
		
	self assert: expectedReport equals: accountSummary report .! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 17:16:15' prior: 50937890!
test06

	|sourceAccount destinationAccount destinationAccountSummary expectedReport |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	Deposit register: 100  on: sourceAccount .
	Withdraw register: 50 on: sourceAccount.
	sourceAccount transfer: 100 to: destinationAccount .
	destinationAccountSummary := AccountSummary for: destinationAccount.
	expectedReport := OrderedCollection 
		with:'Entrada por transferencia de 100.' 
		with: 'Balance = 100'.
		
	self assert: expectedReport equals: destinationAccountSummary report .
	! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 17:16:33' prior: 50938038!
test06

	|sourceAccount destinationAccount destinationAccountSummary expectedReport |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	Deposit register: 100  on: sourceAccount .
	Withdraw register: 50 on: sourceAccount.
	sourceAccount transfer: 100 to: destinationAccount .
	destinationAccountSummary := AccountSummary for: destinationAccount.
	expectedReport := OrderedCollection 
		with: 'Dep�sito por 100.'
		with: 'Balance = 100'.
		
	self assert: expectedReport equals: destinationAccountSummary report .
	! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 17:16:57' prior: 50938059!
test06

	|sourceAccount destinationAccount destinationAccountSummary expectedReport |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	Deposit register: 100  on: sourceAccount .
	Withdraw register: 50 on: sourceAccount.
	sourceAccount transfer: 100 to: destinationAccount .
	destinationAccountSummary := AccountSummary for: destinationAccount.
	expectedReport := OrderedCollection 
		with: 'Dep�sito por 100.'
		with: 'Extracci�n por 50.'
		
		with: 'Balance = 100'.
		
	self assert: expectedReport equals: destinationAccountSummary report .
	! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 17:18:16' prior: 50938080!
test06

	|sourceAccount destinationAccount destinationAccountSummary expectedReport |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	Deposit register: 100  on: sourceAccount .
	Withdraw register: 50 on: sourceAccount.
	sourceAccount transfer: 20 to: destinationAccount .
	destinationAccount transfer: 30 to: sourceAccount.
	destinationAccountSummary := AccountSummary for: destinationAccount.
	expectedReport := OrderedCollection 
		with: 'Dep�sito por 100.'
		with: 'Extracci�n por 50.'
		with:'Salida por transferencia de 20.' 
		
		with: 'Balance = 100'.
		
	self assert: expectedReport equals: destinationAccountSummary report .
	! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 17:18:39' prior: 50938102!
test06

	|sourceAccount destinationAccount destinationAccountSummary expectedReport |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	Deposit register: 100  on: sourceAccount .
	Withdraw register: 50 on: sourceAccount.
	sourceAccount transfer: 20 to: destinationAccount .
	destinationAccount transfer: 30 to: sourceAccount.
	destinationAccountSummary := AccountSummary for: destinationAccount.
	expectedReport := OrderedCollection 
		with: 'Dep�sito por 100.'
		with: 'Extracci�n por 50.'
		with:'Salida por transferencia de 20.' 
		with:'Entrada por transferencia de 30.'
		with: 'Balance = 60'.
		
	self assert: expectedReport equals: destinationAccountSummary report .
	! !

!testRun: #ReportTest #test06 stamp: 'MS 10/22/2021 17:18:40'!
FAILURE!

!testRun: #ReportTest #test06 stamp: 'MS 10/22/2021 17:18:45'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 17:19:02' prior: 50938127!
test06

	|sourceAccount destinationAccount sourceAccountSummary expectedReport |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	Deposit register: 100  on: sourceAccount .
	Withdraw register: 50 on: sourceAccount.
	sourceAccount transfer: 20 to: destinationAccount .
	destinationAccount transfer: 30 to: sourceAccount.
	sourceAccountSummary := AccountSummary for: destinationAccount.
	expectedReport := OrderedCollection 
		with: 'Dep�sito por 100.'
		with: 'Extracci�n por 50.'
		with:'Salida por transferencia de 20.' 
		with:'Entrada por transferencia de 30.'
		with: 'Balance = 60'.
		
	self assert: expectedReport equals: sourceAccountSummary report .
	! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 17:19:10' prior: 50938157!
test06

	|sourceAccount destinationAccount sourceAccountSummary expectedReport |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	Deposit register: 100  on: sourceAccount .
	Withdraw register: 50 on: sourceAccount.
	sourceAccount transfer: 20 to: destinationAccount .
	destinationAccount transfer: 30 to: sourceAccount.
	sourceAccountSummary := AccountSummary for: sourceAccount .
	expectedReport := OrderedCollection 
		with: 'Dep�sito por 100.'
		with: 'Extracci�n por 50.'
		with:'Salida por transferencia de 20.' 
		with:'Entrada por transferencia de 30.'
		with: 'Balance = 60'.
		
	self assert: expectedReport equals: sourceAccountSummary report .
	! !

!testRun: #ReportTest #test06 stamp: 'MS 10/22/2021 17:19:11'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/22/2021 17:19:11'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/22/2021 17:19:11'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/22/2021 17:19:11'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'MS 10/22/2021 17:19:11'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'MS 10/22/2021 17:19:11'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'MS 10/22/2021 17:19:11'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'MS 10/22/2021 17:19:11'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'MS 10/22/2021 17:19:11'!
FAILURE!

!testRun: #ReportTest #test08 stamp: 'MS 10/22/2021 17:19:11'!
FAILURE!

!testRun: #ReportTest #test06 stamp: 'MS 10/22/2021 17:19:26'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/22/2021 17:19:26'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/22/2021 17:19:26'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/22/2021 17:19:26'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'MS 10/22/2021 17:19:26'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'MS 10/22/2021 17:19:26'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'MS 10/22/2021 17:19:26'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'MS 10/22/2021 17:19:26'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'MS 10/22/2021 17:19:26'!
FAILURE!

!testRun: #ReportTest #test08 stamp: 'MS 10/22/2021 17:19:26'!
FAILURE!

!testRun: #ReportTest #test06 stamp: 'MS 10/22/2021 17:19:40'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'MS 10/22/2021 17:19:57'!
FAILURE!

!testRun: #ReportTest #test08 stamp: 'MS 10/22/2021 17:19:57'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 17:20:13' prior: 50937954!
accountSummary: anAccountSummary 

	^12.
	! !

!testRun: #ReportTest #test08 stamp: 'MS 10/22/2021 17:20:27'!
FAILURE!

!testRun: #ReportTest #test08 stamp: 'MS 10/22/2021 17:20:27'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 17:22:24' prior: 50938259!
accountSummary: aReport 

	accounts do: [:anAccount | anAccount accountSummary: aReport .].
	^aReport.
	! !

!testRun: #ReportTest #test08 stamp: 'MS 10/22/2021 17:22:26'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 17:23:07' prior: 50938021!
test08
	|portfolio account  accountSummary expectedReport|
		
	account := ReceptiveAccount new.
	Deposit register: 100  on: account .
	Withdraw register: 50 on: account.
	expectedReport := OrderedCollection with:'Dep' with: 'Balance = 100'.
	portfolio := Portfolio with: account.
	accountSummary := AccountSummary for: portfolio.
		
	self assert: expectedReport equals: accountSummary report .! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 17:23:48' prior: 50938277!
test08
	|portfolio account  accountSummary expectedReport|
		
	account := ReceptiveAccount new.
	Deposit register: 100  on: account .
	Withdraw register: 50 on: account.
	expectedReport := OrderedCollection 
		with:'Dep�sito por 100.' 
		with: 'Extracci�n por 50'
		with: 'Balance = 50'.
	portfolio := Portfolio with: account.
	accountSummary := AccountSummary for: portfolio.
		
	self assert: expectedReport equals: accountSummary report .! !

!testRun: #ReportTest #test08 stamp: 'MS 10/22/2021 17:23:49'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 17:24:17' prior: 50938293!
test08
	|portfolio account  accountSummary expectedReport|
		
	account := ReceptiveAccount new.
	Deposit register: 100  on: account .
	Withdraw register: 50 on: account.
	expectedReport := OrderedCollection 
		with:'Dep�sito por 100.' 
		with: 'Extracci�n por 50.'
		with: 'Balance = 50'.
	portfolio := Portfolio with: account.
	accountSummary := AccountSummary for: portfolio.
		
	self assert: expectedReport equals: accountSummary report .! !

!testRun: #ReportTest #test08 stamp: 'MS 10/22/2021 17:24:27'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/22/2021 17:24:27'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/22/2021 17:24:27'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/22/2021 17:24:27'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'MS 10/22/2021 17:24:27'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'MS 10/22/2021 17:24:27'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'MS 10/22/2021 17:24:27'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'MS 10/22/2021 17:24:27'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'MS 10/22/2021 17:24:27'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 17:30:36'!
test09
	|portfolio account  accountSummary expectedReport|
		
	account := ReceptiveAccount new.
	Deposit register: 100  on: account .
	Withdraw register: 50 on: account.
	expectedReport := OrderedCollection 
		with:'Dep�sito por 100.' 
		with: 'Extracci�n por 50.'
		with: 'Balance = 50'.
	portfolio := Portfolio with: account.
	accountSummary := AccountSummary for: portfolio.
		
	self assert: expectedReport equals: accountSummary report .! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 17:30:51' prior: 50938350!
test09
	|sourceAccount destinationAccount sourceAccountSummary expectedReport |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	Deposit register: 100  on: sourceAccount .
	Withdraw register: 50 on: sourceAccount.
	sourceAccount transfer: 20 to: destinationAccount .
	destinationAccount transfer: 30 to: sourceAccount.
	sourceAccountSummary := AccountSummary for: sourceAccount .
	expectedReport := OrderedCollection 
		with: 'Dep�sito por 100.'
		with: 'Extracci�n por 50.'
		with:'Salida por transferencia de 20.' 
		with:'Entrada por transferencia de 30.'
		with: 'Balance = 60'.
		
	self assert: expectedReport equals: sourceAccountSummary report .! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 17:32:45' prior: 50938367!
test09
	|portfolio sourceAccount destinationAccount sourceAccountSummary expectedReport |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	Deposit register: 100  on: sourceAccount .
	Withdraw register: 50 on: sourceAccount.
	sourceAccount transfer: 20 to: destinationAccount .
	destinationAccount transfer: 30 to: sourceAccount.
	portfolio := Portfolio with: sourceAccount.
	
	sourceAccountSummary := AccountSummary for: sourceAccount .
	expectedReport := OrderedCollection 
		with: 'Dep�sito por 100.'
		with: 'Extracci�n por 50.'
		with:'Salida por transferencia de 20.' 
		with:'Entrada por transferencia de 30.'
		with: 'Balance = 60'.
		
	self assert: expectedReport equals: sourceAccountSummary report .! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 17:32:52' prior: 50938392!
test09
	|portfolio account1 destinationAccount sourceAccountSummary expectedReport |
	
	account1 := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	Deposit register: 100  on: account1 .
	Withdraw register: 50 on: account1.
	account1 transfer: 20 to: destinationAccount .
	destinationAccount transfer: 30 to: account1.
	portfolio := Portfolio with: account1.
	
	sourceAccountSummary := AccountSummary for: account1 .
	expectedReport := OrderedCollection 
		with: 'Dep�sito por 100.'
		with: 'Extracci�n por 50.'
		with:'Salida por transferencia de 20.' 
		with:'Entrada por transferencia de 30.'
		with: 'Balance = 60'.
		
	self assert: expectedReport equals: sourceAccountSummary report .! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 17:33:16' prior: 50938419!
test09
	|portfolio account1 account2 sourceAccountSummary expectedReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100  on: account1 .
	Withdraw register: 50 on: account1.
	account1 transfer: 20 to: account2 .
	account2 transfer: 30 to: account1.
	portfolio := Portfolio with: account1.
	
	sourceAccountSummary := AccountSummary for: account1 .
	expectedReport := OrderedCollection 
		with: 'Dep�sito por 100.'
		with: 'Extracci�n por 50.'
		with:'Salida por transferencia de 20.' 
		with:'Entrada por transferencia de 30.'
		with: 'Balance = 60'.
		
	self assert: expectedReport equals: sourceAccountSummary report .! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 17:33:28' prior: 50938445!
test09
	|portfolio account1 account2 portfolioSummary expectedReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100  on: account1 .
	Withdraw register: 50 on: account1.
	account1 transfer: 20 to: account2 .
	account2 transfer: 30 to: account1.
	portfolio := Portfolio with: account1.
	
	portfolioSummary := AccountSummary for: account1 .
	expectedReport := OrderedCollection 
		with: 'Dep�sito por 100.'
		with: 'Extracci�n por 50.'
		with:'Salida por transferencia de 20.' 
		with:'Entrada por transferencia de 30.'
		with: 'Balance = 60'.
		
	self assert: expectedReport equals: portfolioSummary report .! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 17:33:44' prior: 50938469!
test09
	|portfolio account1 account2 portfolioSummary expectedReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100  on: account1 .
	Withdraw register: 50 on: account1.
	account1 transfer: 20 to: account2 .
	account2 transfer: 30 to: account1.
	portfolio := Portfolio with: account1.
	portfolio add: account2.
	
	portfolioSummary := AccountSummary for: portfolio .
	expectedReport := OrderedCollection 
		with: 'Dep�sito por 100.'
		with: 'Extracci�n por 50.'
		with:'Salida por transferencia de 20.' 
		with:'Entrada por transferencia de 30.'
		with: 'Balance = 60'.
		
	self assert: expectedReport equals: portfolioSummary report .! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 17:35:18' prior: 50938493!
test09
	|portfolio account1 account2 portfolioSummary expectedReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100  on: account1 .
	Withdraw register: 50 on: account1.
	account1 transfer: 20 to: account2 .
	account2 transfer: 30 to: account1.
	portfolio := Portfolio with: account1.
	portfolio add: account2.
	
	portfolioSummary := AccountSummary for: portfolio .
	expectedReport := OrderedCollection 
		with: 'Dep�sito por 100.'
		with:'Salida por transferencia de 20.' 
		with:'Entrada por transferencia de 30.'
		with:'Entrada por transferencia de 20.'
		with:'Salida por transferencia de 30.' 
		with: 'Balance = 100'.
		
	self assert: expectedReport equals: portfolioSummary report .! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 17:35:20' prior: 50938518!
test09
	|portfolio account1 account2 portfolioSummary expectedReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100  on: account1 .
	Withdraw register: 50 on: account1.
	account1 transfer: 20 to: account2 .
	account2 transfer: 30 to: account1.
	portfolio := Portfolio with: account1.
	portfolio add: account2.
	
	portfolioSummary := AccountSummary for: portfolio .
	expectedReport := OrderedCollection 
		with: 'Dep�sito por 100.'
		with:'Salida por transferencia de 20.' 
		with:'Entrada por transferencia de 30.'
		with:'Entrada por transferencia de 20.'
		with:'Salida por transferencia de 30.' 
		with: 'Balance = 1000'.
		
	self assert: expectedReport equals: portfolioSummary report .! !

!testRun: #ReportTest #test09 stamp: 'MS 10/22/2021 17:35:21'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 17:35:27' prior: 50938545!
test09
	|portfolio account1 account2 portfolioSummary expectedReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100  on: account1 .
	Withdraw register: 50 on: account1.
	account1 transfer: 20 to: account2 .
	account2 transfer: 30 to: account1.
	portfolio := Portfolio with: account1.
	portfolio add: account2.
	
	portfolioSummary := AccountSummary for: portfolio .
	expectedReport := OrderedCollection 
		with: 'Dep�sito por 100.'
		with:'Salida por transferencia de 20.' 
		with:'Entrada por transferencia de 30.'
		with:'Entrada por transferencia de 20.'
		with:'Salida por transferencia de 30.' 
		with: 'Balance = 100'.
		
	self assert: expectedReport equals: portfolioSummary report .! !

!testRun: #ReportTest #test09 stamp: 'MS 10/22/2021 17:35:27'!
FAILURE!

!testRun: #ReportTest #test09 stamp: 'MS 10/22/2021 17:35:47'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/22/2021 17:35:53' prior: 50938574!
test09
	|portfolio account1 account2 portfolioSummary expectedReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100  on: account1 .
	account1 transfer: 20 to: account2 .
	account2 transfer: 30 to: account1.
	portfolio := Portfolio with: account1.
	portfolio add: account2.
	
	portfolioSummary := AccountSummary for: portfolio .
	expectedReport := OrderedCollection 
		with: 'Dep�sito por 100.'
		with:'Salida por transferencia de 20.' 
		with:'Entrada por transferencia de 30.'
		with:'Entrada por transferencia de 20.'
		with:'Salida por transferencia de 30.' 
		with: 'Balance = 100'.
		
	self assert: expectedReport equals: portfolioSummary report .! !

!testRun: #ReportTest #test09 stamp: 'MS 10/22/2021 17:35:55'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/22/2021 17:35:55'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/22/2021 17:35:55'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/22/2021 17:35:55'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'MS 10/22/2021 17:35:55'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'MS 10/22/2021 17:35:55'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'MS 10/22/2021 17:35:55'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'MS 10/22/2021 17:35:55'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'MS 10/22/2021 17:35:55'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'MS 10/22/2021 17:35:55'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/22/2021 17:38:05'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/22/2021 17:38:05'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/22/2021 17:38:05'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'MS 10/22/2021 17:38:05'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'MS 10/22/2021 17:38:05'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'MS 10/22/2021 17:38:05'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'MS 10/22/2021 17:38:05'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'MS 10/22/2021 17:38:05'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'MS 10/22/2021 17:38:05'!
PASSED!

----QUIT----(22 October 2021 17:38:14) CuisUniversity-4913.image priorSource: 19384698!

----STARTUP---- (23 October 2021 10:24:08) as /home/matias/Downloads/newcuis/linux64/CuisUniversity-4913.image!


Report subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'MS 10/23/2021 10:26:55'!
Report subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 10:28:40'!
test10
	|account|
	
	account := ReceptiveAccount new.
	
	self assert: 0 equals: (TransferNet for: account).! !

!testRun: #ReportTest #test10 stamp: 'MS 10/23/2021 10:28:42'!
ERROR!
!TransferNet class methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 10:28:56'!
for: aReceptiveAccount 
	self shouldBeImplemented.! !
!TransferNet class methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 10:29:51' prior: 50938700!
for: anAccount
	^self new initialize with: anAccount .! !

!testRun: #ReportTest #test10 stamp: 'MS 10/23/2021 10:29:53'!
ERROR!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 10:30:11'!
with: aReceptiveAccount 
	self shouldBeImplemented.! !
!TransferNet class methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 10:30:26' prior: 50938705!
for: anAccount
	^self new initializeWith: anAccount .! !

!testRun: #ReportTest #test10 stamp: 'MS 10/23/2021 10:30:27'!
ERROR!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'MS 10/23/2021 10:31:06'!
Report subclass: #TransferNet
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'initialization' stamp: 'MS 10/23/2021 10:31:06'!
initializeWith: anAccount 
	self shouldBeImplemented.
	account := anAccount.! !
!TransferNet methodsFor: 'initialization' stamp: 'MS 10/23/2021 10:31:37' prior: 50938731!
initializeWith: anAccount 
	account := anAccount.
	^0.! !

!testRun: #ReportTest #test10 stamp: 'MS 10/23/2021 10:31:39'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/23/2021 10:31:39'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/23/2021 10:31:39'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/23/2021 10:31:39'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'MS 10/23/2021 10:31:39'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'MS 10/23/2021 10:31:39'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'MS 10/23/2021 10:31:39'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'MS 10/23/2021 10:31:39'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'MS 10/23/2021 10:31:39'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'MS 10/23/2021 10:31:39'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'MS 10/23/2021 10:31:39'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 10:32:37'!
test11
	|account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	 
	self assert: 0 equals: (TransferNet for: account1).! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 10:33:57' prior: 50938767!
test11
	|account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer transfer: 100 from: account1  to: account2.
	 
	self assert: 0 equals: (TransferNet for: account1).! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 10:34:31' prior: 50938775!
test11
	|account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer transfer: 100 from: account1  to: account2.
	 
	self assert: 100 equals: (TransferNet for: account2).! !

!testRun: #ReportTest #test11 stamp: 'MS 10/23/2021 10:34:44'!
FAILURE!

!methodRemoval: ReceptiveAccount #accountSummary stamp: 'MS 10/23/2021 10:36:02'!
accountSummary
	|accountSummary |
	accountSummary := OrderedCollection new.
	transactions do: [:aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: [accountSummary add: 'Deposito por ', aTransaction value asString , '.'].
		(aTransaction isKindOf: Withdraw) ifTrue: [accountSummary add: 'Extraccion por ', aTransaction value asString , '.'].
		(aTransaction isKindOf: TransferSource ) ifTrue: [accountSummary add: 'Salida por transferencia de ', aTransaction value asString , '.'].
		(aTransaction isKindOf: TransferDestination ) ifTrue: [accountSummary add: 'Entrada por transferencia de ', aTransaction value asString , '.'].
	].
	accountSummary add: 'Balance = ', self balance asString.
	^accountSummary.!

!testRun: #ReportTest #test01 stamp: 'MS 10/23/2021 10:36:15'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/23/2021 10:36:15'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/23/2021 10:36:15'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'MS 10/23/2021 10:36:15'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'MS 10/23/2021 10:36:15'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'MS 10/23/2021 10:36:15'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'MS 10/23/2021 10:36:15'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'MS 10/23/2021 10:36:15'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'MS 10/23/2021 10:36:15'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'MS 10/23/2021 10:36:15'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'MS 10/23/2021 10:36:15'!
FAILURE!

!testRun: #ReportTest #test11 stamp: 'MS 10/23/2021 10:36:15'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 10:39:13' prior: 50937501!
accountSummary: aReport

	transactions do: [:aTransaction | aTransaction affectReport: aReport.].! !

!methodRemoval: TransferNet #with: stamp: 'MS 10/23/2021 10:41:07'!
with: aReceptiveAccount 
	self shouldBeImplemented.!
!TransferNet methodsFor: 'initialization' stamp: 'MS 10/23/2021 10:41:29' prior: 50938737!
initializeWith: anAccount 
	account := anAccount.
	anAccount tranferNet: self.
	^0.! !
!TransferNet methodsFor: 'initialization' stamp: 'MS 10/23/2021 10:41:43' prior: 50938860!
initializeWith: anAccount 
	account := anAccount.
	anAccount tranferNet: self.
! !

!testRun: #ReportTest #test10 stamp: 'MS 10/23/2021 10:41:50'!
ERROR!

!testRun: #ReportTest #test10 stamp: 'MS 10/23/2021 10:41:50'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 10:42:39'!
tranferNet: aTransferNet 
	self shouldBeImplemented.! !

!testRun: #ReportTest #test10 stamp: 'MS 10/23/2021 10:47:59'!
ERROR!

!testRun: #ReportTest #test10 stamp: 'MS 10/23/2021 10:47:59'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 10:48:19' prior: 50938876!
tranferNet: aTransferNet 
	^0.! !

!testRun: #ReportTest #test10 stamp: 'MS 10/23/2021 10:48:20'!
FAILURE!

!testRun: #ReportTest #test10 stamp: 'MS 10/23/2021 10:48:45'!
FAILURE!

!testRun: #ReportTest #test10 stamp: 'MS 10/23/2021 10:48:45'!
FAILURE!
!TransferNet methodsFor: 'initialization' stamp: 'MS 10/23/2021 10:48:59' prior: 50938866!
initializeWith: anAccount 
	account := anAccount.
	^anAccount tranferNet: self.
! !

!testRun: #ReportTest #test10 stamp: 'MS 10/23/2021 10:49:00'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'MS 10/23/2021 10:49:04'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'MS 10/23/2021 10:49:28'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 10:51:06' prior: 50938886!
tranferNet: aTransferNet 
	
	^transactions sum: [:aTransaction| aTransaction value]
	ifEmpty: [^0].! !

!testRun: #ReportTest #test11 stamp: 'MS 10/23/2021 10:51:21'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/23/2021 10:51:21'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/23/2021 10:51:21'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/23/2021 10:51:21'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'MS 10/23/2021 10:51:21'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'MS 10/23/2021 10:51:21'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'MS 10/23/2021 10:51:21'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'MS 10/23/2021 10:51:21'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'MS 10/23/2021 10:51:21'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'MS 10/23/2021 10:51:21'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'MS 10/23/2021 10:51:21'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'MS 10/23/2021 10:51:21'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 10:51:50'!
test12
	|account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer transfer: 100 from: account2  to: account1.
	 
	self assert: -100 equals: (TransferNet for: account1).! !

!testRun: #ReportTest #test12 stamp: 'MS 10/23/2021 10:51:51'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 10:53:10' prior: 50938910!
tranferNet: aTransferNet 
	
	^transactions sum: [:aTransaction| aTransaction value]
	ifEmpty: [^0].! !

!testRun: #ReportTest #test12 stamp: 'MS 10/23/2021 10:54:38'!
FAILURE!

!testRun: #ReportTest #test12 stamp: 'MS 10/23/2021 10:54:38'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 10:57:08' prior: 50938956!
tranferNet: aTransferNet 
	|aBalance|
	aBalance := 0.
	transactions sum: [:aTransaction| 
		aTransaction affectBalance: aBalance ]
	ifEmpty: [^0].
	^aBalance.! !

!testRun: #ReportTest #test12 stamp: 'MS 10/23/2021 10:57:10'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 10:57:43' prior: 50938943!
test12
	|account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer transfer: 100 from: account2  to: account1.
	 
	self assert: -100 equals: (TransferNet for: account2).! !

!testRun: #ReportTest #test12 stamp: 'MS 10/23/2021 10:57:45'!
FAILURE!

!testRun: #ReportTest #test10 stamp: 'MS 10/23/2021 10:57:56'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'MS 10/23/2021 10:57:58'!
FAILURE!

!testRun: #ReportTest #test11 stamp: 'MS 10/23/2021 10:57:58'!
FAILURE!

transactions!

transactions!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 10:59:42' prior: 50938967!
tranferNet: aTransferNet 
	|aBalance|
	aBalance := 0.
	transactions sum: [:aTransaction| 
		aTransaction affectBalance: aBalance ].
	^aBalance.! !

!testRun: #ReportTest #test11 stamp: 'MS 10/23/2021 10:59:44'!
FAILURE!

!testRun: #ReportTest #test10 stamp: 'MS 10/23/2021 10:59:48'!
ERROR!

!testRun: #ReportTest #test10 stamp: 'MS 10/23/2021 10:59:48'!
ERROR!

!testRun: #ReportTest #test11 stamp: 'MS 10/23/2021 11:00:02'!
FAILURE!

!testRun: #ReportTest #test11 stamp: 'MS 10/23/2021 11:00:02'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 11:00:32' prior: 50938998!
tranferNet: aTransferNet 
	|aBalance|
	aBalance := 0.
	transactions sum: [:aTransaction| 
		aTransaction affectBalance: aBalance ]
	ifEmpty: [^0].
	^aBalance.! !

!testRun: #ReportTest #test11 stamp: 'MS 10/23/2021 11:00:33'!
FAILURE!

!testRun: #ReportTest #test10 stamp: 'MS 10/23/2021 11:00:37'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'MS 10/23/2021 11:00:41'!
FAILURE!

!testRun: #ReportTest #test11 stamp: 'MS 10/23/2021 11:00:41'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 11:01:50' prior: 50939018!
tranferNet: aTransferNet 
	
	^transactions do: [:aTransaction| aTransaction value ].
! !

!testRun: #ReportTest #test11 stamp: 'MS 10/23/2021 11:01:54'!
FAILURE!

!testRun: #ReportTest #test11 stamp: 'MS 10/23/2021 11:01:59'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 11:03:08' prior: 50939036!
tranferNet: aTransferNet 
	|balance|
	balance := 0.
	^transactions do: [:aTransaction| balance:= aTransaction value ].
! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 11:03:18' prior: 50939047!
tranferNet: aTransferNet 
	|balance|
	balance := 0.
	transactions do: [:aTransaction| balance:= aTransaction value ].
	^balance.! !

!testRun: #ReportTest #test11 stamp: 'MS 10/23/2021 11:03:20'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/23/2021 11:03:20'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/23/2021 11:03:20'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/23/2021 11:03:20'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'MS 10/23/2021 11:03:20'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'MS 10/23/2021 11:03:20'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'MS 10/23/2021 11:03:20'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'MS 10/23/2021 11:03:20'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'MS 10/23/2021 11:03:20'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'MS 10/23/2021 11:03:20'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'MS 10/23/2021 11:03:20'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'MS 10/23/2021 11:03:20'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'MS 10/23/2021 11:03:20'!
FAILURE!

!testRun: #ReportTest #test12 stamp: 'MS 10/23/2021 11:03:20'!
FAILURE!

!testRun: #ReportTest #test11 stamp: 'MS 10/23/2021 11:03:25'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'MS 10/23/2021 11:03:31'!
FAILURE!

!testRun: #ReportTest #test12 stamp: 'MS 10/23/2021 11:03:31'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 11:04:04' prior: 50939054!
tranferNet: aTransferNet 
	|balance|
	balance := 0.
	transactions do: [:aTransaction| aTransaction affectBalance: balance].
	^balance.! !

!testRun: #ReportTest #test12 stamp: 'MS 10/23/2021 11:04:06'!
FAILURE!

!testRun: #ReportTest #test11 stamp: 'MS 10/23/2021 11:04:12'!
FAILURE!

!testRun: #ReportTest #test11 stamp: 'MS 10/23/2021 11:04:12'!
FAILURE!

!testRun: #ReportTest #test11 stamp: 'MS 10/23/2021 11:04:40'!
FAILURE!

!testRun: #ReportTest #test11 stamp: 'MS 10/23/2021 11:04:40'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 11:05:05' prior: 50939100!
tranferNet: aTransferNet 
	|balance|
	balance := 0.
	transactions do: [:aTransaction| balance := aTransaction affectBalance: balance].
	^balance.! !

!testRun: #ReportTest #test11 stamp: 'MS 10/23/2021 11:05:06'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'MS 10/23/2021 11:05:09'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'MS 10/23/2021 11:05:11'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 11:06:30'!
test13
	
	|account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer transfer: 100 from: account2  to: account1.
	Deposit register:1000  on: account1.
	Withdraw register: 500 on: account1.
	 
	self assert: 100 equals: (TransferNet for: account1).! !

!testRun: #ReportTest #test13 stamp: 'MS 10/23/2021 11:06:53'!
FAILURE!

!testRun: #ReportTest #test13 stamp: 'MS 10/23/2021 11:06:53'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 11:09:16' prior: 50939119!
tranferNet: aTransferNet 
	|balance|
	balance := 0.
	transactions do: [:aTransaction|
		(aTransaction isKindOf: TransferParts) ifTrue: [balance := aTransaction affectBalance: balance].
			].
	^balance.! !

!testRun: #ReportTest #test13 stamp: 'MS 10/23/2021 11:09:17'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'MS 10/23/2021 11:09:20'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/23/2021 11:09:20'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/23/2021 11:09:20'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/23/2021 11:09:20'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'MS 10/23/2021 11:09:20'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'MS 10/23/2021 11:09:20'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'MS 10/23/2021 11:09:20'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'MS 10/23/2021 11:09:20'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'MS 10/23/2021 11:09:20'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'MS 10/23/2021 11:09:20'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'MS 10/23/2021 11:09:20'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'MS 10/23/2021 11:09:20'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'MS 10/23/2021 11:09:20'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'MS 10/23/2021 11:09:20'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 11:19:30' prior: 50939150!
tranferNet: aTransferNet 
	|balance|
	balance := 0.
	transactions do: [:aTransaction|
		(aTransaction isKindOf: TransferParts) ifTrue: [balance := aTransaction affectReport: balance].
			].
	^balance.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 11:20:00' prior: 50939194!
tranferNet: aTransferNet 
	|balance|
	balance := 0.
	transactions do: [:aTransaction|
		(aTransaction isKindOf: TransferParts) ifTrue: [balance := aTransaction affectReport: aTransferNet].
			].
	^balance.! !

Report subclass: #TransferNet
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'MS 10/23/2021 11:22:29'!
Report subclass: #TransferNet
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'initialization' stamp: 'MS 10/23/2021 11:23:08' prior: 50938897!
initializeWith: anAccount 
	account := anAccount.
	transferNet := 0.
	^anAccount tranferNet: self.
! !
!TransferNet methodsFor: 'initialization' stamp: 'MS 10/23/2021 11:23:47'!
addFromTransferDestination: anAmount

	^transferNet := transferNet + anAmount.! !
!TransferNet methodsFor: 'initialization' stamp: 'MS 10/23/2021 11:23:58'!
addFromTransferSource: anAmount

	^transferNet := transferNet - anAmount.! !

!testRun: #ReportTest #test01 stamp: 'MS 10/23/2021 11:24:00'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/23/2021 11:24:00'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/23/2021 11:24:00'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'MS 10/23/2021 11:24:00'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'MS 10/23/2021 11:24:00'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'MS 10/23/2021 11:24:00'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'MS 10/23/2021 11:24:00'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'MS 10/23/2021 11:24:00'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'MS 10/23/2021 11:24:00'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'MS 10/23/2021 11:24:00'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'MS 10/23/2021 11:24:00'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'MS 10/23/2021 11:24:00'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'MS 10/23/2021 11:24:00'!
PASSED!
!TransferNet methodsFor: 'initialization' stamp: 'MS 10/23/2021 11:26:03'!
addFromDeposit: anAmount! !
!TransferNet methodsFor: 'initialization' stamp: 'MS 10/23/2021 11:26:15'!
addFromWithdraw: anAmount! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 11:27:31' prior: 50939204!
tranferNet: aTransferNet 
	|xxxx|
	xxxx := 0.
	transactions do: [:aTransaction|
		xxxx := aTransaction affectReport: aTransferNet].
	
	^xxxx.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MS 10/23/2021 11:27:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MS 10/23/2021 11:27:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MS 10/23/2021 11:27:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MS 10/23/2021 11:27:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MS 10/23/2021 11:27:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MS 10/23/2021 11:27:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MS 10/23/2021 11:27:33'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/23/2021 11:27:39'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/23/2021 11:27:39'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/23/2021 11:27:39'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'MS 10/23/2021 11:27:39'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'MS 10/23/2021 11:27:39'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'MS 10/23/2021 11:27:39'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'MS 10/23/2021 11:27:39'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'MS 10/23/2021 11:27:39'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'MS 10/23/2021 11:27:39'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'MS 10/23/2021 11:27:39'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'MS 10/23/2021 11:27:39'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'MS 10/23/2021 11:27:39'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'MS 10/23/2021 11:27:39'!
FAILURE!

!testRun: #ReportTest #test13 stamp: 'MS 10/23/2021 11:27:39'!
FAILURE!

xxxx!
!TransferNet methodsFor: 'initialization' stamp: 'MS 10/23/2021 11:29:31' prior: 50939227!
initializeWith: anAccount 
	transferNet := 0.
	anAccount tranferNet: self.
	^transferNet.! !

!testRun: #ReportTest #test13 stamp: 'MS 10/23/2021 11:29:32'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'MS 10/23/2021 11:29:46'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'MS 10/23/2021 11:29:48'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/23/2021 11:29:48'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/23/2021 11:29:48'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'MS 10/23/2021 11:29:48'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'MS 10/23/2021 11:29:48'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'MS 10/23/2021 11:29:48'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'MS 10/23/2021 11:29:48'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'MS 10/23/2021 11:29:48'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'MS 10/23/2021 11:29:48'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'MS 10/23/2021 11:29:48'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'MS 10/23/2021 11:29:48'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'MS 10/23/2021 11:29:48'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'MS 10/23/2021 11:29:48'!
PASSED!
!Report methodsFor: 'no messages' stamp: 'MS 10/23/2021 11:31:26'!
addFromDeposit: anAmount
	
	self sub! !
!Report methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 11:31:28' prior: 50939386!
addFromDeposit: anAmount
	
	self subclassResponsibility.! !
!Report methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 11:31:39'!
addFromTransferDestination: anAmount
	
	self subclassResponsibility.! !
!Report methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 11:31:47'!
addFromTransferSource: anAmount
	
	self subclassResponsibility.! !
!Report methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 11:31:58'!
addFromWithdraw: anAmount
	
	self subclassResponsibility.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 11:37:31' prior: 50939281!
tranferNet: aTransferNet 
	
	"|xxxx|
	xxxx := 0.
	"
	
	transactions do: [:aTransaction| aTransaction affectReport: aTransferNet].
	
	"^xxxx."! !

!testRun: #ReportTest #test01 stamp: 'MS 10/23/2021 11:37:36'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'MS 10/23/2021 11:37:36'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'MS 10/23/2021 11:37:36'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'MS 10/23/2021 11:37:36'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'MS 10/23/2021 11:37:36'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'MS 10/23/2021 11:37:36'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'MS 10/23/2021 11:37:36'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'MS 10/23/2021 11:37:36'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'MS 10/23/2021 11:37:36'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'MS 10/23/2021 11:37:36'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'MS 10/23/2021 11:37:36'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'MS 10/23/2021 11:37:36'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'MS 10/23/2021 11:37:36'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MS 10/23/2021 11:37:51' prior: 50939412!
tranferNet: aTransferNet 
	
	transactions do: [:aTransaction| aTransaction affectReport: aTransferNet].
	! !

----STARTUP---- (23 October 2021 13:29:50) as /home/alex/Downloads/linux64-Ejercitacion/CuisUniversity-4913.image!


!classRemoval: #ReceptiveAccount stamp: 'AC 10/23/2021 13:30:07'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'AC 10/23/2021 13:30:07'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts childrenPortfolios parentPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'AC 10/23/2021 13:30:07'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'AC 10/23/2021 13:30:07'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'AC 10/23/2021 13:30:08'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'AC 10/23/2021 13:30:08'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'AC 10/23/2021 13:30:08'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of /home/alex/Downloads/linux64-Ejercitacion/Portfolio-Solucion.st----!
!TransferDestination methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 13:31:28' overrides: 50919591!
initializeFor: aTransfer

	transfer := aTransfer ! !
!TransferSource methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 13:31:28' overrides: 50919591!
initializeFor: aTransfer

	transfer := aTransfer ! !

!methodRemoval: TransferParts #initializeFor: stamp: 'AC 10/23/2021 13:31:28'!
initializeFor: aTransfer

	transfer := aTransfer !
!TransferDestination methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 13:31:47' overrides: 50919600!
transfer

	^transfer.! !
!TransferSource methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 13:31:47' overrides: 50919600!
transfer

	^transfer.! !

!methodRemoval: TransferParts #transfer stamp: 'AC 10/23/2021 13:31:47'!
transfer

	^transfer.!
!TransferDestination methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 13:31:57' overrides: 50919604!
value
	
	^transfer value.! !
!TransferSource methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 13:31:57' overrides: 50919604!
value
	
	^transfer value.! !

!methodRemoval: TransferParts #value stamp: 'AC 10/23/2021 13:31:57'!
value
	
	^transfer value.!

Deposit subclass: #TransferDestination
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDestination category: 'Portfolio-Solucion' stamp: 'AC 10/23/2021 13:32:45'!
Deposit subclass: #TransferDestination
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Withdraw subclass: #TransferSource
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferSource category: 'Portfolio-Solucion' stamp: 'AC 10/23/2021 13:32:54'!
Withdraw subclass: #TransferSource
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 13:32:59'!
FAILURE!

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'AC 10/23/2021 13:32:59'!
FAILURE!

!testRun: #ReportTest #test10 stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 13:32:59'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 13:33:18'!
FAILURE!

sourceAccountSummary report!

expectedReport!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 13:34:39'!
FAILURE!

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'AC 10/23/2021 13:34:39'!
FAILURE!

!testRun: #ReportTest #test10 stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 13:34:39'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 13:34:41'!
FAILURE!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 13:34:45'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 13:34:48'!
FAILURE!

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'AC 10/23/2021 13:34:48'!
FAILURE!

!testRun: #ReportTest #test10 stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 13:34:48'!
PASSED!

!classRemoval: #TransferParts stamp: 'AC 10/23/2021 13:35:07'!
Object subclass: #TransferParts
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 13:35:09'!
FAILURE!

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'AC 10/23/2021 13:35:09'!
FAILURE!

!testRun: #ReportTest #test10 stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 13:35:09'!
PASSED!

Deposit subclass: #TransferDestination
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDestination category: 'Portfolio-Solucion' stamp: 'AC 10/23/2021 13:35:51'!
Deposit subclass: #TransferDestination
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Withdraw subclass: #TransferSource
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferSource category: 'Portfolio-Solucion' stamp: 'AC 10/23/2021 13:35:58'!
Withdraw subclass: #TransferSource
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 13:36:00'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 13:36:00'!
PASSED!

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 13:36:00'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 13:36:00'!
PASSED!

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 13:36:00'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 13:36:03'!
PASSED!

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 13:36:03'!
PASSED!
!Deposit methodsFor: 'value' stamp: 'AC 10/23/2021 13:37:52' prior: 50919295 overrides: 50919253!
value

	"^ value"! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 13:37:54'!
PASSED!

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 13:37:54'!
PASSED!
!Deposit methodsFor: 'value' stamp: 'AC 10/23/2021 13:38:32' prior: 50920448 overrides: 50919253!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'AC 10/23/2021 13:38:58' prior: 50919299 overrides: 50919257!
affectBalance: aBalance

	^aBalance + self value ! !
!Withdraw methodsFor: 'balance' stamp: 'AC 10/23/2021 13:39:06' prior: 50919342 overrides: 50919257!
affectBalance: aBalance

	^aBalance - self value! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 13:39:08'!
PASSED!

!classRenamed: #TransferDestination as: #TransferToDestination stamp: 'AC 10/23/2021 13:41:29'!
Smalltalk renameClassNamed: #TransferDestination as: #TransferToDestination!
!Transfer methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 13:41:29' prior: 50919526!
initializeFor: anAmount from: aSourceReceptiveAccount to: aDestinationReceptiveAccount
	
	value := anAmount.
	source := TransferSource for: self.
	destination :=  TransferToDestination for: self.
	
	aSourceReceptiveAccount register: source.
	aDestinationReceptiveAccount register: destination.! !

!classRenamed: #TransferSource as: #TransferFromSource stamp: 'AC 10/23/2021 13:41:37'!
Smalltalk renameClassNamed: #TransferSource as: #TransferFromSource!
!Transfer methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 13:41:37' prior: 50920731!
initializeFor: anAmount from: aSourceReceptiveAccount to: aDestinationReceptiveAccount
	
	value := anAmount.
	source := TransferFromSource for: self.
	destination :=  TransferToDestination for: self.
	
	aSourceReceptiveAccount register: source.
	aDestinationReceptiveAccount register: destination.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 13:41:40'!
PASSED!

!methodRemoval: TransferToDestination #affectBalance: stamp: 'AC 10/23/2021 13:41:46'!
affectBalance: aBalance 
	^aBalance + transfer value.!

!methodRemoval: TransferFromSource #affectBalance: stamp: 'AC 10/23/2021 13:41:49'!
affectBalance: aBalance 
	
	^aBalance - self value.!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 13:47:13'!
PASSED!

!classRenamed: #Report as: #AccountReporter stamp: 'AC 10/23/2021 13:47:52'!
Smalltalk renameClassNamed: #Report as: #AccountReporter!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 13:47:55'!
PASSED!

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 13:47:55'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 14:48:22'!
report: anAccountReporter
	anAccountReporter ! !

!methodRemoval: ReceptiveAccount #report: stamp: 'AC 10/23/2021 14:49:02'!
report: anAccountReporter
	anAccountReporter !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 14:51:38'!
PASSED!

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 14:51:38'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 14:54:42'!
report: anAccountReporter

	transactions do: [:aTransaction | aTransaction reportTo: anAccountReporter].! !
!AccountTransaction methodsFor: 'balance' stamp: 'AC 10/23/2021 14:55:24'!
reportTo: anAccountReporter
	self subclassResponsibility.! !
!AccountTransaction methodsFor: 'balance' stamp: 'AC 10/23/2021 14:55:27' prior: 50921307!
reportTo: anAccountReporter
	self subclassResponsibility! !
!Deposit methodsFor: 'balance' stamp: 'AC 10/23/2021 14:56:11' overrides: 50921312!
reportTo: anAccountReporter
	anAccountReporter report: self.! !
!Deposit methodsFor: 'balance' stamp: 'AC 10/23/2021 14:56:45' prior: 50921317 overrides: 50921312!
reportTo: anAccountReporter
	anAccountReporter ! !
!Deposit methodsFor: 'balance' stamp: 'AC 10/23/2021 14:57:20' prior: 50921323 overrides: 50921312!
reportTo: anAccountReporter
	anAccountReporter addFromDeposit: self! !
!TransferToDestination methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 14:57:52' overrides: 50921328!
reportTo: anAccountReporter
	anAccountReporter addFromTransferDestination: self! !
!Withdraw methodsFor: 'balance' stamp: 'AC 10/23/2021 14:58:02' overrides: 50921312!
reportTo: anAccountReporter
	anAccountReporter addFromWithdraw: self! !
!TransferFromSource methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 14:58:16' overrides: 50921340!
reportTo: anAccountReporter
	anAccountReporter addFromTransferSource: self! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 14:58:21'!
PASSED!

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 14:58:21'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 15:01:17'!
test01anAccountWithNoTransactionsReturnsCeroBalance
	|account accountSummary|
	
	account := ReceptiveAccount new.
	accountSummary := AccountSummary for: account.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary report.! !

!methodRemoval: ReportTest #test01anAccountWithNoTransactionsReturnsCeroBalance stamp: 'AC 10/23/2021 15:01:25'!
test01anAccountWithNoTransactionsReturnsCeroBalance
	|account accountSummary|
	
	account := ReceptiveAccount new.
	accountSummary := AccountSummary for: account.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary report.!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 15:01:34'!
test01anAccountWithNoTransactionsReturnsCeroBalance
	|account accountSummary|
	
	account := ReceptiveAccount new.
	accountSummary := AccountSummary for: account.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary report.! !

!methodRemoval: ReportTest #test01 stamp: 'AC 10/23/2021 15:01:34'!
test01
	|account accountSummary|
	
	account := ReceptiveAccount new.
	accountSummary := AccountSummary for: account.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary report.!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #ReportTest #test01anAccountWithNoTransactionsReturnsCeroBalance stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 15:01:37'!
PASSED!

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 15:01:37'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 15:03:32' prior: 50919433!
initializeFor: anAccount
	
	report := OrderedCollection new.
	anAccount report: self.
	report add: 'Balance = ', anAccount balance asString.! !

!testRun: #ReportTest #test01anAccountWithNoTransactionsReturnsCeroBalance stamp: 'AC 10/23/2021 15:03:33'!
PASSED!

!testRun: #ReportTest #test01anAccountWithNoTransactionsReturnsCeroBalance stamp: 'AC 10/23/2021 15:03:36'!
PASSED!

!testRun: #ReportTest #test01anAccountWithNoTransactionsReturnsCeroBalance stamp: 'AC 10/23/2021 15:03:41'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'AC 10/23/2021 15:03:41'!
FAILURE!

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 15:03:41'!
FAILURE!

!testRun: #ReportTest #test04 stamp: 'AC 10/23/2021 15:03:41'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'AC 10/23/2021 15:03:41'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 15:03:41'!
FAILURE!

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 15:03:41'!
ERROR!

!testRun: #ReportTest #test08 stamp: 'AC 10/23/2021 15:03:41'!
ERROR!

!testRun: #ReportTest #test09 stamp: 'AC 10/23/2021 15:03:41'!
ERROR!

!testRun: #ReportTest #test10 stamp: 'AC 10/23/2021 15:03:41'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'AC 10/23/2021 15:03:41'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'AC 10/23/2021 15:03:41'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'AC 10/23/2021 15:03:41'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 15:04:53' prior: 50919407 overrides: 50919374!
addFromDeposit: aDeposit
	
	^report add: 'Dep�sito por ', aDeposit value asString, '.'.! !

!testRun: #ReportTest #test02 stamp: 'AC 10/23/2021 15:04:54'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 15:04:57'!
FAILURE!

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 15:04:57'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 15:05:33' prior: 50919427 overrides: 50919389!
addFromWithdraw: aWithdraw
	
	^report add: 'Extracci�n por ', aWithdraw value asString, '.'.
	! !

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 15:05:34'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'AC 10/23/2021 15:05:35'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'AC 10/23/2021 15:05:37'!
PASSED!

!testRun: #ReportTest #test01anAccountWithNoTransactionsReturnsCeroBalance stamp: 'AC 10/23/2021 15:05:39'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'AC 10/23/2021 15:05:39'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 15:05:39'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'AC 10/23/2021 15:05:39'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'AC 10/23/2021 15:05:39'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 15:05:39'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 15:05:39'!
ERROR!

!testRun: #ReportTest #test08 stamp: 'AC 10/23/2021 15:05:39'!
ERROR!

!testRun: #ReportTest #test09 stamp: 'AC 10/23/2021 15:05:39'!
ERROR!

!testRun: #ReportTest #test10 stamp: 'AC 10/23/2021 15:05:39'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'AC 10/23/2021 15:05:39'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'AC 10/23/2021 15:05:39'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'AC 10/23/2021 15:05:39'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 15:05:41'!
ERROR!

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 15:05:52'!
ERROR!

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 15:05:56'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 15:06:25'!
report: anAccountSummary 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 15:08:29' prior: 50921765!
report: anAccountReporter
	accounts do: [:anAccount | anAccount report: anAccountReporter].! !

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 15:08:30'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'AC 10/23/2021 15:08:32'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'AC 10/23/2021 15:08:33'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #ReportTest #test01anAccountWithNoTransactionsReturnsCeroBalance stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 15:08:36'!
PASSED!

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 15:08:36'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (26 to: 42)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (61 to: 77)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{79 to: 81})
		cover: (50 to: 56)
		declaredAt: (50 to: 56).! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (13 to: 20)
		declaredAt: (13 to: 20))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{22 to: 25. 62 to: 69}.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 15:09:01'!
PASSED!
!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).
	(tranfers _ [
	(OrderedCollection
		cover: (85 to: 101)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{103 to: 105})
		cover: (73 to: 80)
		declaredAt: (73 to: 80).! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
with: anAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{32 to: 45}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{50 to: 57} ] value.! !
!Behavior method!
add: accountToAdd
	[
	(self coverAll:
		{21 to: 24}) assertCanAdd:
		(accountToAdd
			cover: (40 to: 51)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{26 to: 38}.
	[
	(accounts
		cover: (58 to: 65)
		declaredAt: (58 to: 65)) add:
		(accountToAdd
			cover: (72 to: 83)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{67 to: 70}.
	[
	(accountToAdd
		cover: (87 to: 98)
		declaredAt: (6 to: 17)) addedTo:
		(self coverAll:
			{109 to: 112}) ] valueCoveringAll:
		{100 to: 107}.! !
!Behavior method!
assertCanAdd: accountToAdd
	[
	([
	(self coverAll:
		{31 to: 34}) anyRootParentIsComposedBy:
		(accountToAdd
			cover: (63 to: 74)
			declaredAt: (15 to: 26)) ] valueCoveringAll:
		{36 to: 61}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) signalCanNotAddAccount ] valueCoveringAll:
			{92 to: 113} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	^ [
	([
	(self coverAll:
		{44 to: 47}) rootParents ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :aParent |
		[
		(aParent
			cover: (86 to: 92)
			declaredAt: (76 to: 82)) isComposedBy:
			(accountToAdd
				cover: (108 to: 119)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{94 to: 106} ]] valueCoveringAll:
		{61 to: 71}.! !
!Behavior method!
rootParents
	| rootParents |
	(rootParents _ [
	(Set
		cover: (50 to: 52)
		declaredAt: (50 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(self coverAll:
		{60 to: 63}) addRootParentsTo:
		(rootParents
			cover: (83 to: 93)
			declaredAt: (18 to: 28)) ] valueCoveringAll:
		{65 to: 81}.
	^ rootParents
		cover: (101 to: 111)
		declaredAt: (18 to: 28).! !
!Behavior method!
addRootParentsTo: rootParents
	[
	(parents
		cover: (33 to: 39)
		declaredAt: (33 to: 39))
		ifEmpty: [
			[
			(rootParents
				cover: (55 to: 65)
				declaredAt: (19 to: 29)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (96 to: 102)
				declaredAt: (33 to: 39)) do: [ :aParent |
				[
				(aParent
					cover: (121 to: 127)
					declaredAt: (111 to: 117)) addRootParentsTo:
					(rootParents
						cover: (147 to: 157)
						declaredAt: (19 to: 29)) ] valueCoveringAll:
					{129 to: 145} ]] valueCoveringAll:
				{104 to: 106} ]] valueCoveringAll:
		{44 to: 51. 82 to: 92}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	([
	(self coverAll:
		{29 to: 32}) =
		(anAccount
			cover: (36 to: 44)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 34}) or: [
		[
		(accounts
			cover: (52 to: 59)
			declaredAt: (52 to: 59)) anySatisfy: [ :composedAccount |
			[
			([
			(composedAccount
				cover: (95 to: 109)
				declaredAt: (76 to: 90)) isComposedBy:
				(anAccount
					cover: (125 to: 133)
					declaredAt: (15 to: 23)) ] valueCoveringAll:
				{111 to: 123}) or: [
				[
				(anAccount
					cover: (142 to: 150)
					declaredAt: (15 to: 23)) isComposedBy:
					(composedAccount
						cover: (166 to: 180)
						declaredAt: (76 to: 90)) ] valueCoveringAll:
					{152 to: 164} ]] valueCoveringAll:
				{136 to: 138} ]] valueCoveringAll:
			{61 to: 71} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
addedTo: aPortfolio
	^ self.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		inject:
			(0 coverAll:
				{36 to: 36})
		into: [ :currentBalance :transaction |
			[
			(transaction
				cover: (79 to: 89)
				declaredAt: (65 to: 75)) affectBalance:
				(currentBalance
					cover: (106 to: 119)
					declaredAt: (49 to: 62)) ] valueCoveringAll:
				{91 to: 104} ]] valueCoveringAll:
		{28 to: 34. 40 to: 44}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		([
		(self coverAll:
			{39 to: 42}) value ] valueCoveringAll:
			{44 to: 48}) ] valueCoveringAll:
		{37 to: 37}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 15:09:01'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
with: anAccount with: anotherAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{41 to: 44}) new ] valueCoveringAll:
		{46 to: 48}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{53 to: 66}.
	[ cascadeReceiver add: anotherAccount ] valueCoveringAll:
		{71 to: 89}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{94 to: 101} ] value.! !
!Behavior method!
addedTo: aPortfolio
	[
	(parents
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) add:
		(aPortfolio
			cover: (38 to: 47)
			declaredAt: (10 to: 19)) ] valueCoveringAll:
		{33 to: 36}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	(self coverAll:
		{28 to: 31}) =
		(anAccount
			cover: (35 to: 43)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{33 to: 33}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		([
		(self coverAll:
			{39 to: 42}) value ] valueCoveringAll:
			{44 to: 48}) ] valueCoveringAll:
		{37 to: 37}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 15:09:01'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (68 to: 76)
			declaredAt: (56 to: 64)) hasRegistered:
			(aTransaction
				cover: (93 to: 104)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{78 to: 91} ]] valueCoveringAll:
		{41 to: 51}.! !

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 15:09:01'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 15:09:01'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 15:09:01'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (53 to: 69)
		declaredAt: (53 to: 69)) new ] valueCoveringAll:
		{71 to: 73})
		cover: (37 to: 48)
		declaredAt: (19 to: 30).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionsTo:
			(transactions
				cover: (134 to: 145)
				declaredAt: (19 to: 30)) ] valueCoveringAll:
			{115 to: 132} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 15:09:01'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(aCollectionOfTransactions
		cover: (48 to: 72)
		declaredAt: (20 to: 44)) addAll:
		(transactions
			cover: (82 to: 93)
			declaredAt: (82 to: 93)) ] valueCoveringAll:
		{74 to: 80}.! !

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 15:09:01'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(accounts
		cover: (48 to: 55)
		declaredAt: (48 to: 55)) do: [ :anAccount |
		[
		(anAccount
			cover: (76 to: 84)
			declaredAt: (64 to: 72)) addTransactionsTo:
			(aCollectionOfTransactions
				cover: (105 to: 129)
				declaredAt: (20 to: 44)) ] valueCoveringAll:
			{86 to: 103} ]] valueCoveringAll:
		{57 to: 59}.! !

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 15:09:01'!
PASSED!
!Behavior method!
signalCanNotAddAccount
	[
	(self coverAll:
		{27 to: 30}) error:
		([
		([
		(self coverAll:
			{39 to: 42}) class ] valueCoveringAll:
			{44 to: 48}) canNotAddAccountErrorMessage ] valueCoveringAll:
			{50 to: 77}) ] valueCoveringAll:
		{32 to: 37}.! !
!Behavior method!
canNotAddAccountErrorMessage
	^ 'Can not add repeated account to a portfolio' coverAll:
		{34 to: 78}.! !
!Behavior method!
accountsSize
	^ [
	(accounts
		cover: (18 to: 25)
		declaredAt: (18 to: 25)) size ] valueCoveringAll:
		{27 to: 30}.! !
!Behavior method!
accountsIncludes: anAccount
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) includes:
		(anAccount
			cover: (51 to: 59)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{41 to: 49}.! !

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 15:09:01'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 15:09:01'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 15:09:01'!
PASSED!
!Behavior method!
accountsIsEmpty
	^ [
	(accounts
		cover: (21 to: 28)
		declaredAt: (21 to: 28)) isEmpty ] valueCoveringAll:
		{30 to: 36}.! !

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 15:09:01'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 15:09:01'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 15:09:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 15:09:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 15:09:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 15:09:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 15:09:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 15:09:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 15:09:01'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 15:09:01'!
PASSED!
!Behavior method!
for: anAccount
	^ [
	([
	(self coverAll:
		{19 to: 22}) new ] valueCoveringAll:
		{24 to: 26}) initializeFor:
		(anAccount
			cover: (43 to: 51)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{28 to: 41}.! !
!Behavior method!
initializeFor: anAccount
	(report _ [
	(OrderedCollection
		cover: (39 to: 55)
		declaredAt: (39 to: 55)) new ] valueCoveringAll:
		{57 to: 59})
		cover: (29 to: 34)
		declaredAt: (29 to: 34).
	[
	(anAccount
		cover: (63 to: 71)
		declaredAt: (16 to: 24)) report:
		(self coverAll:
			{81 to: 84}) ] valueCoveringAll:
		{73 to: 79}.
	[
	(report
		cover: (88 to: 93)
		declaredAt: (29 to: 34)) add:
		([
		('Balance = ' coverAll:
			{100 to: 111}) ,
			([
			([
			(anAccount
				cover: (114 to: 122)
				declaredAt: (16 to: 24)) balance ] valueCoveringAll:
				{124 to: 130}) asString ] valueCoveringAll:
				{132 to: 139}) ] valueCoveringAll:
			{112 to: 112}) ] valueCoveringAll:
		{95 to: 98}.! !
!Behavior method!
report: anAccountReporter
	[
	(transactions
		cover: (29 to: 40)
		declaredAt: (29 to: 40)) do: [ :aTransaction |
		[
		(aTransaction
			cover: (63 to: 74)
			declaredAt: (48 to: 59)) reportTo:
			(anAccountReporter
				cover: (86 to: 102)
				declaredAt: (9 to: 25)) ] valueCoveringAll:
			{76 to: 84} ]] valueCoveringAll:
		{42 to: 44}.! !
!Behavior method!
report
	^ report
		cover: (11 to: 16)
		declaredAt: (11 to: 16).! !

!testRun: #ReportTest #test01anAccountWithNoTransactionsReturnsCeroBalance stamp: 'AC 10/23/2021 15:09:01'!
PASSED!
!Behavior method!
reportTo: anAccountReporter
	[
	(anAccountReporter
		cover: (30 to: 46)
		declaredAt: (11 to: 27)) addFromDeposit:
		(self coverAll:
			{64 to: 67}) ] valueCoveringAll:
		{48 to: 62}.! !
!Behavior method!
addFromDeposit: aDeposit
	^ [
	(report
		cover: (30 to: 35)
		declaredAt: (30 to: 35)) add:
		([
		([
		('Dep�sito por ' coverAll:
			{42 to: 56}) ,
			([
			([
			(aDeposit
				cover: (59 to: 66)
				declaredAt: (17 to: 24)) value ] valueCoveringAll:
				{68 to: 72}) asString ] valueCoveringAll:
				{74 to: 81}) ] valueCoveringAll:
			{57 to: 57}) ,
			('.' coverAll:
				{84 to: 86}) ] valueCoveringAll:
			{82 to: 82}) ] valueCoveringAll:
		{37 to: 40}.! !

!testRun: #ReportTest #test02 stamp: 'AC 10/23/2021 15:09:01'!
PASSED!
!Behavior method!
reportTo: anAccountReporter
	[
	(anAccountReporter
		cover: (30 to: 46)
		declaredAt: (11 to: 27)) addFromWithdraw:
		(self coverAll:
			{65 to: 68}) ] valueCoveringAll:
		{48 to: 63}.! !
!Behavior method!
addFromWithdraw: aWithdraw
	^ [
	(report
		cover: (32 to: 37)
		declaredAt: (32 to: 37)) add:
		([
		([
		('Extracci�n por ' coverAll:
			{44 to: 60}) ,
			([
			([
			(aWithdraw
				cover: (63 to: 71)
				declaredAt: (18 to: 26)) value ] valueCoveringAll:
				{73 to: 77}) asString ] valueCoveringAll:
				{79 to: 86}) ] valueCoveringAll:
			{61 to: 61}) ,
			('.' coverAll:
				{89 to: 91}) ] valueCoveringAll:
			{87 to: 87}) ] valueCoveringAll:
		{39 to: 42}.! !

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 15:09:01'!
PASSED!
!Behavior method!
transfer: aValue to: aReceptiveAccount
	^ [
	(Transfer
		cover: (44 to: 51)
		declaredAt: (44 to: 51))
		transfer:
			(aValue
				cover: (63 to: 68)
				declaredAt: (11 to: 16))
		from:
			(self coverAll:
				{76 to: 79})
		to:
			(aReceptiveAccount
				cover: (85 to: 101)
				declaredAt: (22 to: 38)) ] valueCoveringAll:
		{53 to: 61. 70 to: 74. 81 to: 83}.! !
!Behavior method!
transfer: anAmount from: aSourceReceptiveAccount to: aDestinationReceptiveAccount
	[
	([
	(anAmount
		cover: (86 to: 93)
		declaredAt: (11 to: 18)) <=
		(0 coverAll:
			{98 to: 98}) ] valueCoveringAll:
		{95 to: 96}) ifTrue: [
		[
		(self coverAll:
			{109 to: 112}) error:
			([
			(self coverAll:
				{121 to: 124}) transferCannotBeNull ] valueCoveringAll:
				{126 to: 145}) ] valueCoveringAll:
			{114 to: 119} ]] valueCoveringAll:
		{100 to: 106}.
	[
	([
	(aSourceReceptiveAccount
		cover: (151 to: 173)
		declaredAt: (26 to: 48)) =
		(aDestinationReceptiveAccount
			cover: (177 to: 204)
			declaredAt: (54 to: 81)) ] valueCoveringAll:
		{175 to: 175}) ifTrue: [
		[
		(self coverAll:
			{216 to: 219}) error:
			([
			(self coverAll:
				{228 to: 231}) cannotTransferToSourceAccountErrorMesssage ] valueCoveringAll:
				{233 to: 274}) ] valueCoveringAll:
			{221 to: 226} ]] valueCoveringAll:
		{207 to: 213}.
	^ [
	([
	(self coverAll:
		{284 to: 287}) new ] valueCoveringAll:
		{289 to: 291})
		initializeFor:
			(anAmount
				cover: (308 to: 315)
				declaredAt: (11 to: 18))
		from:
			(aSourceReceptiveAccount
				cover: (323 to: 345)
				declaredAt: (26 to: 48))
		to:
			(aDestinationReceptiveAccount
				cover: (351 to: 378)
				declaredAt: (54 to: 81)) ] valueCoveringAll:
		{293 to: 306. 317 to: 321. 347 to: 349}.! !
!Behavior method!
initializeFor: anAmount from: aSourceReceptiveAccount to: aDestinationReceptiveAccount
	(value _ anAmount
		cover: (100 to: 107)
		declaredAt: (16 to: 23))
		cover: (91 to: 95)
		declaredAt: (91 to: 95).
	(source _ [
	(TransferFromSource
		cover: (121 to: 138)
		declaredAt: (121 to: 138)) for:
		(self coverAll:
			{145 to: 148}) ] valueCoveringAll:
		{140 to: 143})
		cover: (111 to: 116)
		declaredAt: (111 to: 116).
	(destination _ [
	(TransferToDestination
		cover: (168 to: 188)
		declaredAt: (168 to: 188)) for:
		(self coverAll:
			{195 to: 198}) ] valueCoveringAll:
		{190 to: 193})
		cover: (152 to: 162)
		declaredAt: (152 to: 162).
	[
	(aSourceReceptiveAccount
		cover: (204 to: 226)
		declaredAt: (31 to: 53)) register:
		(source
			cover: (238 to: 243)
			declaredAt: (111 to: 116)) ] valueCoveringAll:
		{228 to: 236}.
	[
	(aDestinationReceptiveAccount
		cover: (247 to: 274)
		declaredAt: (59 to: 86)) register:
		(destination
			cover: (286 to: 296)
			declaredAt: (152 to: 162)) ] valueCoveringAll:
		{276 to: 284}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (40 to: 48)
		declaredAt: (16 to: 24))
		cover: (28 to: 35)
		declaredAt: (28 to: 35).! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (40 to: 48)
		declaredAt: (16 to: 24))
		cover: (28 to: 35)
		declaredAt: (28 to: 35).! !
!Behavior method!
reportTo: anAccountReporter
	[
	(anAccountReporter
		cover: (30 to: 46)
		declaredAt: (11 to: 27)) addFromTransferSource:
		(self coverAll:
			{71 to: 74}) ] valueCoveringAll:
		{48 to: 69}.! !
!Behavior method!
addFromTransferSource: anAmount
	^ [
	(report
		cover: (36 to: 41)
		declaredAt: (36 to: 41)) add:
		([
		([
		('Salida por transferencia de ' coverAll:
			{48 to: 77}) ,
			([
			([
			(anAmount
				cover: (80 to: 87)
				declaredAt: (24 to: 31)) value ] valueCoveringAll:
				{89 to: 93}) asString ] valueCoveringAll:
				{95 to: 102}) ] valueCoveringAll:
			{78 to: 78}) ,
			('.' coverAll:
				{105 to: 107}) ] valueCoveringAll:
			{103 to: 103}) ] valueCoveringAll:
		{43 to: 46}.! !
!Behavior method!
value
	^ [
	(transfer
		cover: (11 to: 18)
		declaredAt: (11 to: 18)) value ] valueCoveringAll:
		{20 to: 24}.! !
!Behavior method!
value
	^ value
		cover: (10 to: 14)
		declaredAt: (10 to: 14).! !

!testRun: #ReportTest #test04 stamp: 'AC 10/23/2021 15:09:01'!
PASSED!
!Behavior method!
reportTo: anAccountReporter
	[
	(anAccountReporter
		cover: (30 to: 46)
		declaredAt: (11 to: 27)) addFromTransferDestination:
		(self coverAll:
			{76 to: 79}) ] valueCoveringAll:
		{48 to: 74}.! !
!Behavior method!
addFromTransferDestination: anAmount
	^ [
	(report
		cover: (41 to: 46)
		declaredAt: (41 to: 46)) add:
		([
		([
		('Entrada por transferencia de ' coverAll:
			{53 to: 83}) ,
			([
			([
			(anAmount
				cover: (86 to: 93)
				declaredAt: (29 to: 36)) value ] valueCoveringAll:
				{95 to: 99}) asString ] valueCoveringAll:
				{101 to: 108}) ] valueCoveringAll:
			{84 to: 84}) ,
			('.' coverAll:
				{111 to: 113}) ] valueCoveringAll:
			{109 to: 109}) ] valueCoveringAll:
		{48 to: 51}.! !
!Behavior method!
value
	^ [
	(transfer
		cover: (11 to: 18)
		declaredAt: (11 to: 18)) value ] valueCoveringAll:
		{20 to: 24}.! !

!testRun: #ReportTest #test05 stamp: 'AC 10/23/2021 15:09:01'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 15:09:01'!
PASSED!
!Behavior method!
report: anAccountReporter
	[
	(accounts
		cover: (28 to: 35)
		declaredAt: (28 to: 35)) do: [ :anAccount |
		[
		(anAccount
			cover: (55 to: 63)
			declaredAt: (43 to: 51)) report:
			(anAccountReporter
				cover: (73 to: 89)
				declaredAt: (9 to: 25)) ] valueCoveringAll:
			{65 to: 71} ]] valueCoveringAll:
		{37 to: 39}.! !

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 15:09:01'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'AC 10/23/2021 15:09:01'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'AC 10/23/2021 15:09:01'!
PASSED!
!Behavior method!
for: anAccount
	^ [
	([
	(self coverAll:
		{18 to: 21}) new ] valueCoveringAll:
		{23 to: 25}) initializeWith:
		(anAccount
			cover: (43 to: 51)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{27 to: 41}.! !
!Behavior method!
initializeWith: anAccount
	(transferNet _ 0 coverAll:
		{44 to: 44})
		cover: (29 to: 39)
		declaredAt: (29 to: 39).
	[
	(anAccount
		cover: (48 to: 56)
		declaredAt: (17 to: 25)) tranferNet:
		(self coverAll:
			{70 to: 73}) ] valueCoveringAll:
		{58 to: 68}.
	^ transferNet
		cover: (78 to: 88)
		declaredAt: (29 to: 39).! !
!Behavior method!
tranferNet: aTransferNet
	[
	(transactions
		cover: (30 to: 41)
		declaredAt: (30 to: 41)) do: [ :aTransaction |
		[
		(aTransaction
			cover: (63 to: 74)
			declaredAt: (49 to: 60)) affectReport:
			(aTransferNet
				cover: (90 to: 101)
				declaredAt: (13 to: 24)) ] valueCoveringAll:
			{76 to: 88} ]] valueCoveringAll:
		{43 to: 45}.! !

!testRun: #ReportTest #test10 stamp: 'AC 10/23/2021 15:09:01'!
PASSED!
!Behavior method!
affectReport: aReport
	^ [
	(aReport
		cover: (27 to: 33)
		declaredAt: (15 to: 21)) addFromTransferDestination:
		([
		(transfer
			cover: (63 to: 70)
			declaredAt: (63 to: 70)) value ] valueCoveringAll:
			{72 to: 76}) ] valueCoveringAll:
		{35 to: 61}.! !
!Behavior method!
addFromTransferDestination: anAmount
	^ (transferNet _ [
	(transferNet
		cover: (41 to: 51)
		declaredAt: (41 to: 51)) +
		(anAmount
			cover: (70 to: 77)
			declaredAt: (29 to: 36)) ] valueCoveringAll:
		{68 to: 68})
		cover: (56 to: 66)
		declaredAt: (41 to: 51).! !

!testRun: #ReportTest #test11 stamp: 'AC 10/23/2021 15:09:01'!
PASSED!
!Behavior method!
affectReport: aReport
	^ [
	(aReport
		cover: (27 to: 33)
		declaredAt: (15 to: 21)) addFromTransferSource:
		([
		(transfer
			cover: (58 to: 65)
			declaredAt: (58 to: 65)) value ] valueCoveringAll:
			{67 to: 71}) ] valueCoveringAll:
		{35 to: 56}.! !
!Behavior method!
addFromTransferSource: anAmount
	^ (transferNet _ [
	(transferNet
		cover: (36 to: 46)
		declaredAt: (36 to: 46)) -
		(anAmount
			cover: (65 to: 72)
			declaredAt: (24 to: 31)) ] valueCoveringAll:
		{63 to: 63})
		cover: (51 to: 61)
		declaredAt: (36 to: 46).! !

!testRun: #ReportTest #test12 stamp: 'AC 10/23/2021 15:09:01'!
PASSED!
!Behavior method!
affectReport: aReport
	^ [
	(aReport
		cover: (27 to: 33)
		declaredAt: (15 to: 21)) addFromDeposit:
		(value
			cover: (51 to: 55)
			declaredAt: (51 to: 55)) ] valueCoveringAll:
		{35 to: 49}.! !
!Behavior method!
addFromDeposit: anAmount
	^ self.! !
!Behavior method!
affectReport: aReport
	^ [
	(aReport
		cover: (27 to: 33)
		declaredAt: (15 to: 21)) addFromWithdraw:
		(value
			cover: (52 to: 56)
			declaredAt: (52 to: 56)) ] valueCoveringAll:
		{35 to: 50}.! !
!Behavior method!
addFromWithdraw: anAmount
	^ self.! !

!testRun: #ReportTest #test13 stamp: 'AC 10/23/2021 15:09:01'!
PASSED!
!Behavior method!
transferCannotBeNull
	^ 'Transfer cannot be null' coverAll:
		{25 to: 49}.! !

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 15:09:01'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 15:09:01'!
PASSED!
!Behavior method!
cannotTransferToSourceAccountErrorMesssage
	^ 'An account cannot transfer to himself' coverAll:
		{46 to: 84}.! !

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 15:09:01'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 15:09:01'!
PASSED!
!Behavior method!
destination
	^ destination
		cover: (16 to: 26)
		declaredAt: (16 to: 26).! !
!Behavior method!
source
	^ source
		cover: (11 to: 16)
		declaredAt: (11 to: 16).! !
!Behavior method!
other
	^ [
	(transfer
		cover: (9 to: 16)
		declaredAt: (9 to: 16)) destination ] valueCoveringAll:
		{18 to: 28}.! !
!Behavior method!
other
	^ [
	(transfer
		cover: (9 to: 16)
		declaredAt: (9 to: 16)) source ] valueCoveringAll:
		{18 to: 23}.! !

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 15:09:01'!
PASSED!

!methodRemoval: Portfolio #accountSummary: stamp: 'AC 10/23/2021 15:09:49'!
accountSummary: aReport 

	accounts do: [:anAccount | anAccount accountSummary: aReport .].
	^aReport.
	!

!methodRemoval: ReceptiveAccount #accountSummary: stamp: 'AC 10/23/2021 15:10:13'!
accountSummary: aReport

	transactions do: [:aTransaction | aTransaction affectReport: aReport.].!

!methodRemoval: ReceptiveAccount #tranferNet: stamp: 'AC 10/23/2021 15:10:18'!
tranferNet: aTransferNet 
	
	transactions do: [:aTransaction| aTransaction affectReport: aTransferNet].
	!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #ReportTest #test01anAccountWithNoTransactionsReturnsCeroBalance stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'AC 10/23/2021 15:10:23'!
ERROR!

!testRun: #ReportTest #test11 stamp: 'AC 10/23/2021 15:10:23'!
ERROR!

!testRun: #ReportTest #test12 stamp: 'AC 10/23/2021 15:10:23'!
ERROR!

!testRun: #ReportTest #test13 stamp: 'AC 10/23/2021 15:10:23'!
ERROR!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 15:10:23'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'AC 10/23/2021 15:10:25'!
ERROR!
!TransferNet methodsFor: 'initialization' stamp: 'AC 10/23/2021 15:10:58' prior: 50919491!
initializeWith: anAccount 
	transferNet := 0.
	anAccount report: self.
	^transferNet.! !

!testRun: #ReportTest #test10 stamp: 'AC 10/23/2021 15:10:58'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'AC 10/23/2021 15:11:00'!
ERROR!
!TransferNet methodsFor: 'initialization' stamp: 'AC 10/23/2021 15:12:09' prior: 50919475 overrides: 50919379!
addFromTransferDestination: anTransferToDestination

	^transferNet := transferNet + anTransferToDestination value.! !

!testRun: #ReportTest #test11 stamp: 'AC 10/23/2021 15:12:10'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'AC 10/23/2021 15:12:12'!
ERROR!
!TransferNet methodsFor: 'initialization' stamp: 'AC 10/23/2021 15:12:58' prior: 50919481 overrides: 50919384!
addFromTransferSource: aTransferFromSource

	^transferNet := transferNet - aTransferFromSource value.! !

!testRun: #ReportTest #test12 stamp: 'AC 10/23/2021 15:12:59'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'AC 10/23/2021 15:13:00'!
PASSED!

!methodRemoval: Deposit #affectReport: stamp: 'AC 10/23/2021 15:13:20'!
affectReport: aReport
	
	^aReport addFromDeposit: value.!

!methodRemoval: TransferToDestination #affectReport: stamp: 'AC 10/23/2021 15:13:23'!
affectReport: aReport
	
	^aReport addFromTransferDestination: transfer value !

!methodRemoval: Withdraw #affectReport: stamp: 'AC 10/23/2021 15:13:26'!
affectReport: aReport
	
	^aReport addFromWithdraw: value.!

!methodRemoval: TransferFromSource #affectReport: stamp: 'AC 10/23/2021 15:13:29'!
affectReport: aReport
	
	^aReport addFromTransferSource: transfer value !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #ReportTest #test01anAccountWithNoTransactionsReturnsCeroBalance stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 15:13:33'!
PASSED!

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 15:13:33'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 15:14:01'!
affectReport: anAccountReporter
	accounts do: [:anAccount | anAccount report: anAccountReporter].! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 15:14:01'!
affectReport: anAccountReporter

	transactions do: [:aTransaction | aTransaction reportTo: anAccountReporter].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 15:14:01' prior: 50921770!
report: anAccountReporter
	accounts do: [:anAccount | anAccount affectReport: anAccountReporter].! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 15:14:01' prior: 50921654!
initializeFor: anAccount
	
	report := OrderedCollection new.
	anAccount affectReport: self.
	report add: 'Balance = ', anAccount balance asString.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 15:14:01' prior: 50922921!
initializeWith: anAccount 
	transferNet := 0.
	anAccount affectReport: self.
	^transferNet.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 15:14:01' prior: 50923104!
affectReport: anAccountReporter
	accounts do: [:anAccount | anAccount affectReport: anAccountReporter].! !

!methodRemoval: Portfolio #report: stamp: 'AC 10/23/2021 15:14:01'!
report: anAccountReporter
	accounts do: [:anAccount | anAccount affectReport: anAccountReporter].!

!methodRemoval: ReceptiveAccount #report: stamp: 'AC 10/23/2021 15:14:01'!
report: anAccountReporter

	transactions do: [:aTransaction | aTransaction reportTo: anAccountReporter].!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #ReportTest #test01anAccountWithNoTransactionsReturnsCeroBalance stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 15:14:04'!
PASSED!

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 15:14:04'!
PASSED!
!AccountTransaction methodsFor: 'balance' stamp: 'AC 10/23/2021 15:14:25'!
affectReport: anAccountReporter
	self subclassResponsibility! !
!Deposit methodsFor: 'balance' stamp: 'AC 10/23/2021 15:14:25' overrides: 50923286!
affectReport: anAccountReporter
	anAccountReporter addFromDeposit: self! !
!TransferToDestination methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 15:14:25' overrides: 50923291!
affectReport: anAccountReporter
	anAccountReporter addFromTransferDestination: self! !
!Withdraw methodsFor: 'balance' stamp: 'AC 10/23/2021 15:14:25' overrides: 50923286!
affectReport: anAccountReporter
	anAccountReporter addFromWithdraw: self! !
!TransferFromSource methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 15:14:25' overrides: 50923303!
affectReport: anAccountReporter
	anAccountReporter addFromTransferSource: self! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 15:14:25' prior: 50923110!
affectReport: anAccountReporter

	transactions do: [:aTransaction | aTransaction affectReport: anAccountReporter].! !

!methodRemoval: AccountTransaction #reportTo: stamp: 'AC 10/23/2021 15:14:25'!
reportTo: anAccountReporter
	self subclassResponsibility!

!methodRemoval: Deposit #reportTo: stamp: 'AC 10/23/2021 15:14:25'!
reportTo: anAccountReporter
	anAccountReporter addFromDeposit: self!

!methodRemoval: TransferToDestination #reportTo: stamp: 'AC 10/23/2021 15:14:25'!
reportTo: anAccountReporter
	anAccountReporter addFromTransferDestination: self!

!methodRemoval: Withdraw #reportTo: stamp: 'AC 10/23/2021 15:14:25'!
reportTo: anAccountReporter
	anAccountReporter addFromWithdraw: self!

!methodRemoval: TransferFromSource #reportTo: stamp: 'AC 10/23/2021 15:14:25'!
reportTo: anAccountReporter
	anAccountReporter addFromTransferSource: self!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #ReportTest #test01anAccountWithNoTransactionsReturnsCeroBalance stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 15:14:26'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #ReportTest #test01anAccountWithNoTransactionsReturnsCeroBalance stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 15:14:34'!
PASSED!

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 15:14:34'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (26 to: 42)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (61 to: 77)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{79 to: 81})
		cover: (50 to: 56)
		declaredAt: (50 to: 56).! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (13 to: 20)
		declaredAt: (13 to: 20))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{22 to: 25. 62 to: 69}.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 15:14:56'!
PASSED!
!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).
	(tranfers _ [
	(OrderedCollection
		cover: (85 to: 101)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{103 to: 105})
		cover: (73 to: 80)
		declaredAt: (73 to: 80).! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
with: anAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{32 to: 45}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{50 to: 57} ] value.! !
!Behavior method!
add: accountToAdd
	[
	(self coverAll:
		{21 to: 24}) assertCanAdd:
		(accountToAdd
			cover: (40 to: 51)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{26 to: 38}.
	[
	(accounts
		cover: (58 to: 65)
		declaredAt: (58 to: 65)) add:
		(accountToAdd
			cover: (72 to: 83)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{67 to: 70}.
	[
	(accountToAdd
		cover: (87 to: 98)
		declaredAt: (6 to: 17)) addedTo:
		(self coverAll:
			{109 to: 112}) ] valueCoveringAll:
		{100 to: 107}.! !
!Behavior method!
assertCanAdd: accountToAdd
	[
	([
	(self coverAll:
		{31 to: 34}) anyRootParentIsComposedBy:
		(accountToAdd
			cover: (63 to: 74)
			declaredAt: (15 to: 26)) ] valueCoveringAll:
		{36 to: 61}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) signalCanNotAddAccount ] valueCoveringAll:
			{92 to: 113} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	^ [
	([
	(self coverAll:
		{44 to: 47}) rootParents ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :aParent |
		[
		(aParent
			cover: (86 to: 92)
			declaredAt: (76 to: 82)) isComposedBy:
			(accountToAdd
				cover: (108 to: 119)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{94 to: 106} ]] valueCoveringAll:
		{61 to: 71}.! !
!Behavior method!
rootParents
	| rootParents |
	(rootParents _ [
	(Set
		cover: (50 to: 52)
		declaredAt: (50 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(self coverAll:
		{60 to: 63}) addRootParentsTo:
		(rootParents
			cover: (83 to: 93)
			declaredAt: (18 to: 28)) ] valueCoveringAll:
		{65 to: 81}.
	^ rootParents
		cover: (101 to: 111)
		declaredAt: (18 to: 28).! !
!Behavior method!
addRootParentsTo: rootParents
	[
	(parents
		cover: (33 to: 39)
		declaredAt: (33 to: 39))
		ifEmpty: [
			[
			(rootParents
				cover: (55 to: 65)
				declaredAt: (19 to: 29)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (96 to: 102)
				declaredAt: (33 to: 39)) do: [ :aParent |
				[
				(aParent
					cover: (121 to: 127)
					declaredAt: (111 to: 117)) addRootParentsTo:
					(rootParents
						cover: (147 to: 157)
						declaredAt: (19 to: 29)) ] valueCoveringAll:
					{129 to: 145} ]] valueCoveringAll:
				{104 to: 106} ]] valueCoveringAll:
		{44 to: 51. 82 to: 92}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	([
	(self coverAll:
		{29 to: 32}) =
		(anAccount
			cover: (36 to: 44)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 34}) or: [
		[
		(accounts
			cover: (52 to: 59)
			declaredAt: (52 to: 59)) anySatisfy: [ :composedAccount |
			[
			([
			(composedAccount
				cover: (95 to: 109)
				declaredAt: (76 to: 90)) isComposedBy:
				(anAccount
					cover: (125 to: 133)
					declaredAt: (15 to: 23)) ] valueCoveringAll:
				{111 to: 123}) or: [
				[
				(anAccount
					cover: (142 to: 150)
					declaredAt: (15 to: 23)) isComposedBy:
					(composedAccount
						cover: (166 to: 180)
						declaredAt: (76 to: 90)) ] valueCoveringAll:
					{152 to: 164} ]] valueCoveringAll:
				{136 to: 138} ]] valueCoveringAll:
			{61 to: 71} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
addedTo: aPortfolio
	^ self.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		inject:
			(0 coverAll:
				{36 to: 36})
		into: [ :currentBalance :transaction |
			[
			(transaction
				cover: (79 to: 89)
				declaredAt: (65 to: 75)) affectBalance:
				(currentBalance
					cover: (106 to: 119)
					declaredAt: (49 to: 62)) ] valueCoveringAll:
				{91 to: 104} ]] valueCoveringAll:
		{28 to: 34. 40 to: 44}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		([
		(self coverAll:
			{39 to: 42}) value ] valueCoveringAll:
			{44 to: 48}) ] valueCoveringAll:
		{37 to: 37}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 15:14:56'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
with: anAccount with: anotherAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{41 to: 44}) new ] valueCoveringAll:
		{46 to: 48}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{53 to: 66}.
	[ cascadeReceiver add: anotherAccount ] valueCoveringAll:
		{71 to: 89}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{94 to: 101} ] value.! !
!Behavior method!
addedTo: aPortfolio
	[
	(parents
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) add:
		(aPortfolio
			cover: (38 to: 47)
			declaredAt: (10 to: 19)) ] valueCoveringAll:
		{33 to: 36}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	(self coverAll:
		{28 to: 31}) =
		(anAccount
			cover: (35 to: 43)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{33 to: 33}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		([
		(self coverAll:
			{39 to: 42}) value ] valueCoveringAll:
			{44 to: 48}) ] valueCoveringAll:
		{37 to: 37}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 15:14:56'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (68 to: 76)
			declaredAt: (56 to: 64)) hasRegistered:
			(aTransaction
				cover: (93 to: 104)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{78 to: 91} ]] valueCoveringAll:
		{41 to: 51}.! !

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 15:14:56'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 15:14:56'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 15:14:56'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (53 to: 69)
		declaredAt: (53 to: 69)) new ] valueCoveringAll:
		{71 to: 73})
		cover: (37 to: 48)
		declaredAt: (19 to: 30).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionsTo:
			(transactions
				cover: (134 to: 145)
				declaredAt: (19 to: 30)) ] valueCoveringAll:
			{115 to: 132} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 15:14:56'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(aCollectionOfTransactions
		cover: (48 to: 72)
		declaredAt: (20 to: 44)) addAll:
		(transactions
			cover: (82 to: 93)
			declaredAt: (82 to: 93)) ] valueCoveringAll:
		{74 to: 80}.! !

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 15:14:56'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(accounts
		cover: (48 to: 55)
		declaredAt: (48 to: 55)) do: [ :anAccount |
		[
		(anAccount
			cover: (76 to: 84)
			declaredAt: (64 to: 72)) addTransactionsTo:
			(aCollectionOfTransactions
				cover: (105 to: 129)
				declaredAt: (20 to: 44)) ] valueCoveringAll:
			{86 to: 103} ]] valueCoveringAll:
		{57 to: 59}.! !

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 15:14:56'!
PASSED!
!Behavior method!
signalCanNotAddAccount
	[
	(self coverAll:
		{27 to: 30}) error:
		([
		([
		(self coverAll:
			{39 to: 42}) class ] valueCoveringAll:
			{44 to: 48}) canNotAddAccountErrorMessage ] valueCoveringAll:
			{50 to: 77}) ] valueCoveringAll:
		{32 to: 37}.! !
!Behavior method!
canNotAddAccountErrorMessage
	^ 'Can not add repeated account to a portfolio' coverAll:
		{34 to: 78}.! !
!Behavior method!
accountsSize
	^ [
	(accounts
		cover: (18 to: 25)
		declaredAt: (18 to: 25)) size ] valueCoveringAll:
		{27 to: 30}.! !
!Behavior method!
accountsIncludes: anAccount
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) includes:
		(anAccount
			cover: (51 to: 59)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{41 to: 49}.! !

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 15:14:56'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 15:14:56'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 15:14:56'!
PASSED!
!Behavior method!
accountsIsEmpty
	^ [
	(accounts
		cover: (21 to: 28)
		declaredAt: (21 to: 28)) isEmpty ] valueCoveringAll:
		{30 to: 36}.! !

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 15:14:56'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 15:14:56'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 15:14:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 15:14:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 15:14:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 15:14:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 15:14:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 15:14:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 15:14:56'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 15:14:56'!
PASSED!
!Behavior method!
for: anAccount
	^ [
	([
	(self coverAll:
		{19 to: 22}) new ] valueCoveringAll:
		{24 to: 26}) initializeFor:
		(anAccount
			cover: (43 to: 51)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{28 to: 41}.! !
!Behavior method!
initializeFor: anAccount
	(report _ [
	(OrderedCollection
		cover: (39 to: 55)
		declaredAt: (39 to: 55)) new ] valueCoveringAll:
		{57 to: 59})
		cover: (29 to: 34)
		declaredAt: (29 to: 34).
	[
	(anAccount
		cover: (63 to: 71)
		declaredAt: (16 to: 24)) affectReport:
		(self coverAll:
			{87 to: 90}) ] valueCoveringAll:
		{73 to: 85}.
	[
	(report
		cover: (94 to: 99)
		declaredAt: (29 to: 34)) add:
		([
		('Balance = ' coverAll:
			{106 to: 117}) ,
			([
			([
			(anAccount
				cover: (120 to: 128)
				declaredAt: (16 to: 24)) balance ] valueCoveringAll:
				{130 to: 136}) asString ] valueCoveringAll:
				{138 to: 145}) ] valueCoveringAll:
			{118 to: 118}) ] valueCoveringAll:
		{101 to: 104}.! !
!Behavior method!
affectReport: anAccountReporter
	[
	(transactions
		cover: (35 to: 46)
		declaredAt: (35 to: 46)) do: [ :aTransaction |
		[
		(aTransaction
			cover: (69 to: 80)
			declaredAt: (54 to: 65)) affectReport:
			(anAccountReporter
				cover: (96 to: 112)
				declaredAt: (15 to: 31)) ] valueCoveringAll:
			{82 to: 94} ]] valueCoveringAll:
		{48 to: 50}.! !
!Behavior method!
report
	^ report
		cover: (11 to: 16)
		declaredAt: (11 to: 16).! !

!testRun: #ReportTest #test01anAccountWithNoTransactionsReturnsCeroBalance stamp: 'AC 10/23/2021 15:14:56'!
PASSED!
!Behavior method!
affectReport: anAccountReporter
	[
	(anAccountReporter
		cover: (34 to: 50)
		declaredAt: (15 to: 31)) addFromDeposit:
		(self coverAll:
			{68 to: 71}) ] valueCoveringAll:
		{52 to: 66}.! !
!Behavior method!
addFromDeposit: aDeposit
	^ [
	(report
		cover: (30 to: 35)
		declaredAt: (30 to: 35)) add:
		([
		([
		('Dep�sito por ' coverAll:
			{42 to: 56}) ,
			([
			([
			(aDeposit
				cover: (59 to: 66)
				declaredAt: (17 to: 24)) value ] valueCoveringAll:
				{68 to: 72}) asString ] valueCoveringAll:
				{74 to: 81}) ] valueCoveringAll:
			{57 to: 57}) ,
			('.' coverAll:
				{84 to: 86}) ] valueCoveringAll:
			{82 to: 82}) ] valueCoveringAll:
		{37 to: 40}.! !

!testRun: #ReportTest #test02 stamp: 'AC 10/23/2021 15:14:56'!
PASSED!
!Behavior method!
affectReport: anAccountReporter
	[
	(anAccountReporter
		cover: (34 to: 50)
		declaredAt: (15 to: 31)) addFromWithdraw:
		(self coverAll:
			{69 to: 72}) ] valueCoveringAll:
		{52 to: 67}.! !
!Behavior method!
addFromWithdraw: aWithdraw
	^ [
	(report
		cover: (32 to: 37)
		declaredAt: (32 to: 37)) add:
		([
		([
		('Extracci�n por ' coverAll:
			{44 to: 60}) ,
			([
			([
			(aWithdraw
				cover: (63 to: 71)
				declaredAt: (18 to: 26)) value ] valueCoveringAll:
				{73 to: 77}) asString ] valueCoveringAll:
				{79 to: 86}) ] valueCoveringAll:
			{61 to: 61}) ,
			('.' coverAll:
				{89 to: 91}) ] valueCoveringAll:
			{87 to: 87}) ] valueCoveringAll:
		{39 to: 42}.! !

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 15:14:56'!
PASSED!
!Behavior method!
transfer: aValue to: aReceptiveAccount
	^ [
	(Transfer
		cover: (44 to: 51)
		declaredAt: (44 to: 51))
		transfer:
			(aValue
				cover: (63 to: 68)
				declaredAt: (11 to: 16))
		from:
			(self coverAll:
				{76 to: 79})
		to:
			(aReceptiveAccount
				cover: (85 to: 101)
				declaredAt: (22 to: 38)) ] valueCoveringAll:
		{53 to: 61. 70 to: 74. 81 to: 83}.! !
!Behavior method!
transfer: anAmount from: aSourceReceptiveAccount to: aDestinationReceptiveAccount
	[
	([
	(anAmount
		cover: (86 to: 93)
		declaredAt: (11 to: 18)) <=
		(0 coverAll:
			{98 to: 98}) ] valueCoveringAll:
		{95 to: 96}) ifTrue: [
		[
		(self coverAll:
			{109 to: 112}) error:
			([
			(self coverAll:
				{121 to: 124}) transferCannotBeNull ] valueCoveringAll:
				{126 to: 145}) ] valueCoveringAll:
			{114 to: 119} ]] valueCoveringAll:
		{100 to: 106}.
	[
	([
	(aSourceReceptiveAccount
		cover: (151 to: 173)
		declaredAt: (26 to: 48)) =
		(aDestinationReceptiveAccount
			cover: (177 to: 204)
			declaredAt: (54 to: 81)) ] valueCoveringAll:
		{175 to: 175}) ifTrue: [
		[
		(self coverAll:
			{216 to: 219}) error:
			([
			(self coverAll:
				{228 to: 231}) cannotTransferToSourceAccountErrorMesssage ] valueCoveringAll:
				{233 to: 274}) ] valueCoveringAll:
			{221 to: 226} ]] valueCoveringAll:
		{207 to: 213}.
	^ [
	([
	(self coverAll:
		{284 to: 287}) new ] valueCoveringAll:
		{289 to: 291})
		initializeFor:
			(anAmount
				cover: (308 to: 315)
				declaredAt: (11 to: 18))
		from:
			(aSourceReceptiveAccount
				cover: (323 to: 345)
				declaredAt: (26 to: 48))
		to:
			(aDestinationReceptiveAccount
				cover: (351 to: 378)
				declaredAt: (54 to: 81)) ] valueCoveringAll:
		{293 to: 306. 317 to: 321. 347 to: 349}.! !
!Behavior method!
initializeFor: anAmount from: aSourceReceptiveAccount to: aDestinationReceptiveAccount
	(value _ anAmount
		cover: (100 to: 107)
		declaredAt: (16 to: 23))
		cover: (91 to: 95)
		declaredAt: (91 to: 95).
	(source _ [
	(TransferFromSource
		cover: (121 to: 138)
		declaredAt: (121 to: 138)) for:
		(self coverAll:
			{145 to: 148}) ] valueCoveringAll:
		{140 to: 143})
		cover: (111 to: 116)
		declaredAt: (111 to: 116).
	(destination _ [
	(TransferToDestination
		cover: (168 to: 188)
		declaredAt: (168 to: 188)) for:
		(self coverAll:
			{195 to: 198}) ] valueCoveringAll:
		{190 to: 193})
		cover: (152 to: 162)
		declaredAt: (152 to: 162).
	[
	(aSourceReceptiveAccount
		cover: (204 to: 226)
		declaredAt: (31 to: 53)) register:
		(source
			cover: (238 to: 243)
			declaredAt: (111 to: 116)) ] valueCoveringAll:
		{228 to: 236}.
	[
	(aDestinationReceptiveAccount
		cover: (247 to: 274)
		declaredAt: (59 to: 86)) register:
		(destination
			cover: (286 to: 296)
			declaredAt: (152 to: 162)) ] valueCoveringAll:
		{276 to: 284}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (40 to: 48)
		declaredAt: (16 to: 24))
		cover: (28 to: 35)
		declaredAt: (28 to: 35).! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (40 to: 48)
		declaredAt: (16 to: 24))
		cover: (28 to: 35)
		declaredAt: (28 to: 35).! !
!Behavior method!
affectReport: anAccountReporter
	[
	(anAccountReporter
		cover: (34 to: 50)
		declaredAt: (15 to: 31)) addFromTransferSource:
		(self coverAll:
			{75 to: 78}) ] valueCoveringAll:
		{52 to: 73}.! !
!Behavior method!
addFromTransferSource: anAmount
	^ [
	(report
		cover: (36 to: 41)
		declaredAt: (36 to: 41)) add:
		([
		([
		('Salida por transferencia de ' coverAll:
			{48 to: 77}) ,
			([
			([
			(anAmount
				cover: (80 to: 87)
				declaredAt: (24 to: 31)) value ] valueCoveringAll:
				{89 to: 93}) asString ] valueCoveringAll:
				{95 to: 102}) ] valueCoveringAll:
			{78 to: 78}) ,
			('.' coverAll:
				{105 to: 107}) ] valueCoveringAll:
			{103 to: 103}) ] valueCoveringAll:
		{43 to: 46}.! !
!Behavior method!
value
	^ [
	(transfer
		cover: (11 to: 18)
		declaredAt: (11 to: 18)) value ] valueCoveringAll:
		{20 to: 24}.! !
!Behavior method!
value
	^ value
		cover: (10 to: 14)
		declaredAt: (10 to: 14).! !

!testRun: #ReportTest #test04 stamp: 'AC 10/23/2021 15:14:56'!
PASSED!
!Behavior method!
affectReport: anAccountReporter
	[
	(anAccountReporter
		cover: (34 to: 50)
		declaredAt: (15 to: 31)) addFromTransferDestination:
		(self coverAll:
			{80 to: 83}) ] valueCoveringAll:
		{52 to: 78}.! !
!Behavior method!
addFromTransferDestination: anAmount
	^ [
	(report
		cover: (41 to: 46)
		declaredAt: (41 to: 46)) add:
		([
		([
		('Entrada por transferencia de ' coverAll:
			{53 to: 83}) ,
			([
			([
			(anAmount
				cover: (86 to: 93)
				declaredAt: (29 to: 36)) value ] valueCoveringAll:
				{95 to: 99}) asString ] valueCoveringAll:
				{101 to: 108}) ] valueCoveringAll:
			{84 to: 84}) ,
			('.' coverAll:
				{111 to: 113}) ] valueCoveringAll:
			{109 to: 109}) ] valueCoveringAll:
		{48 to: 51}.! !
!Behavior method!
value
	^ [
	(transfer
		cover: (11 to: 18)
		declaredAt: (11 to: 18)) value ] valueCoveringAll:
		{20 to: 24}.! !

!testRun: #ReportTest #test05 stamp: 'AC 10/23/2021 15:14:56'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 15:14:56'!
PASSED!
!Behavior method!
affectReport: anAccountReporter
	[
	(accounts
		cover: (34 to: 41)
		declaredAt: (34 to: 41)) do: [ :anAccount |
		[
		(anAccount
			cover: (61 to: 69)
			declaredAt: (49 to: 57)) affectReport:
			(anAccountReporter
				cover: (85 to: 101)
				declaredAt: (15 to: 31)) ] valueCoveringAll:
			{71 to: 83} ]] valueCoveringAll:
		{43 to: 45}.! !

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 15:14:56'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'AC 10/23/2021 15:14:56'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'AC 10/23/2021 15:14:56'!
PASSED!
!Behavior method!
for: anAccount
	^ [
	([
	(self coverAll:
		{18 to: 21}) new ] valueCoveringAll:
		{23 to: 25}) initializeWith:
		(anAccount
			cover: (43 to: 51)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{27 to: 41}.! !
!Behavior method!
initializeWith: anAccount
	(transferNet _ 0 coverAll:
		{44 to: 44})
		cover: (29 to: 39)
		declaredAt: (29 to: 39).
	[
	(anAccount
		cover: (48 to: 56)
		declaredAt: (17 to: 25)) affectReport:
		(self coverAll:
			{72 to: 75}) ] valueCoveringAll:
		{58 to: 70}.
	^ transferNet
		cover: (80 to: 90)
		declaredAt: (29 to: 39).! !

!testRun: #ReportTest #test10 stamp: 'AC 10/23/2021 15:14:56'!
PASSED!
!Behavior method!
addFromTransferDestination: anTransferToDestination
	^ (transferNet _ [
	(transferNet
		cover: (56 to: 66)
		declaredAt: (56 to: 66)) +
		([
		(anTransferToDestination
			cover: (85 to: 107)
			declaredAt: (29 to: 51)) value ] valueCoveringAll:
			{109 to: 113}) ] valueCoveringAll:
		{83 to: 83})
		cover: (71 to: 81)
		declaredAt: (56 to: 66).! !

!testRun: #ReportTest #test11 stamp: 'AC 10/23/2021 15:14:56'!
PASSED!
!Behavior method!
addFromTransferSource: aTransferFromSource
	^ (transferNet _ [
	(transferNet
		cover: (47 to: 57)
		declaredAt: (47 to: 57)) -
		([
		(aTransferFromSource
			cover: (76 to: 94)
			declaredAt: (24 to: 42)) value ] valueCoveringAll:
			{96 to: 100}) ] valueCoveringAll:
		{74 to: 74})
		cover: (62 to: 72)
		declaredAt: (47 to: 57).! !

!testRun: #ReportTest #test12 stamp: 'AC 10/23/2021 15:14:56'!
PASSED!
!Behavior method!
addFromDeposit: anAmount
	^ self.! !
!Behavior method!
addFromWithdraw: anAmount
	^ self.! !

!testRun: #ReportTest #test13 stamp: 'AC 10/23/2021 15:14:56'!
PASSED!
!Behavior method!
transferCannotBeNull
	^ 'Transfer cannot be null' coverAll:
		{25 to: 49}.! !

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 15:14:56'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 15:14:56'!
PASSED!
!Behavior method!
cannotTransferToSourceAccountErrorMesssage
	^ 'An account cannot transfer to himself' coverAll:
		{46 to: 84}.! !

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 15:14:56'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 15:14:56'!
PASSED!
!Behavior method!
destination
	^ destination
		cover: (16 to: 26)
		declaredAt: (16 to: 26).! !
!Behavior method!
source
	^ source
		cover: (11 to: 16)
		declaredAt: (11 to: 16).! !
!Behavior method!
other
	^ [
	(transfer
		cover: (9 to: 16)
		declaredAt: (9 to: 16)) destination ] valueCoveringAll:
		{18 to: 28}.! !
!Behavior method!
other
	^ [
	(transfer
		cover: (9 to: 16)
		declaredAt: (9 to: 16)) source ] valueCoveringAll:
		{18 to: 23}.! !

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 15:14:56'!
PASSED!

!methodRemoval: ReceptiveAccount #addedTo: stamp: 'AC 10/23/2021 15:15:44'!
addedTo: aPortfolio 
	
	!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 15:15:47'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 15:15:47'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 15:15:47'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 15:15:47'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 15:15:47'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 15:15:47'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 15:15:47'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 15:15:47'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 15:15:47'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 15:15:47'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 15:15:47'!
ERROR!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 15:15:47'!
ERROR!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 15:15:47'!
ERROR!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 15:15:47'!
ERROR!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 15:15:47'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 15:15:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 15:15:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 15:15:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 15:15:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 15:15:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 15:15:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 15:15:47'!
PASSED!

!testRun: #ReportTest #test01anAccountWithNoTransactionsReturnsCeroBalance stamp: 'AC 10/23/2021 15:15:47'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'AC 10/23/2021 15:15:47'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 15:15:47'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'AC 10/23/2021 15:15:47'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'AC 10/23/2021 15:15:47'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 15:15:47'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 15:15:47'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'AC 10/23/2021 15:15:47'!
ERROR!

!testRun: #ReportTest #test09 stamp: 'AC 10/23/2021 15:15:47'!
ERROR!

!testRun: #ReportTest #test10 stamp: 'AC 10/23/2021 15:15:47'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'AC 10/23/2021 15:15:47'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'AC 10/23/2021 15:15:47'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'AC 10/23/2021 15:15:47'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 15:15:47'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 15:15:47'!
PASSED!

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 15:15:47'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 15:15:47'!
PASSED!

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 15:15:47'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 15:15:53'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 15:16:14'!
ERROR!

!methodRemoval: Account #addedTo: stamp: 'AC 10/23/2021 15:16:24'!
addedTo: aPortfolio

	self subclassResponsibility !

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 15:16:29'!
ERROR!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 15:16:33'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 15:16:33'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 15:16:33'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 15:16:33'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 15:16:33'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 15:16:33'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 15:16:33'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 15:16:33'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 15:16:33'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 15:16:33'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 15:16:33'!
ERROR!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 15:16:33'!
ERROR!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 15:16:33'!
ERROR!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 15:16:33'!
ERROR!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 15:16:33'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 15:16:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 15:16:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 15:16:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 15:16:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 15:16:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 15:16:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 15:16:33'!
PASSED!

!testRun: #ReportTest #test01anAccountWithNoTransactionsReturnsCeroBalance stamp: 'AC 10/23/2021 15:16:33'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'AC 10/23/2021 15:16:33'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 15:16:33'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'AC 10/23/2021 15:16:33'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'AC 10/23/2021 15:16:33'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 15:16:33'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 15:16:33'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'AC 10/23/2021 15:16:33'!
ERROR!

!testRun: #ReportTest #test09 stamp: 'AC 10/23/2021 15:16:33'!
ERROR!

!testRun: #ReportTest #test10 stamp: 'AC 10/23/2021 15:16:33'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'AC 10/23/2021 15:16:33'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'AC 10/23/2021 15:16:33'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'AC 10/23/2021 15:16:33'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 15:16:33'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 15:16:33'!
PASSED!

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 15:16:33'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 15:16:33'!
PASSED!

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 15:16:33'!
PASSED!
!Account methodsFor: 'transactions' stamp: 'AC 10/23/2021 15:17:28'!
addedTo: anAccount
	self subclassResponsibility ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AC 10/23/2021 15:17:42' overrides: 50924705!
addedTo: anAccount
! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #ReportTest #test01anAccountWithNoTransactionsReturnsCeroBalance stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 15:17:44'!
PASSED!

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 15:17:44'!
PASSED!
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (26 to: 42)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{44 to: 46})
		cover: (14 to: 21)
		declaredAt: (14 to: 21).
	(parents _ [
	(OrderedCollection
		cover: (61 to: 77)
		declaredAt: (26 to: 42)) new ] valueCoveringAll:
		{79 to: 81})
		cover: (50 to: 56)
		declaredAt: (50 to: 56).! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (13 to: 20)
		declaredAt: (13 to: 20))
		sum: [ :anAccount |
			[
			(anAccount
				cover: (42 to: 50)
				declaredAt: (30 to: 38)) balance ] valueCoveringAll:
				{52 to: 58} ]
		ifEmpty: [
			0 coverAll:
				{73 to: 73} ]] valueCoveringAll:
		{22 to: 25. 62 to: 69}.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 15:17:49'!
PASSED!
!Behavior method!
initialize
	[ super initialize ] valueCoveringAll:
		{20 to: 29}.
	(transactions _ [
	(OrderedCollection
		cover: (49 to: 65)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{67 to: 69})
		cover: (33 to: 44)
		declaredAt: (33 to: 44).
	(tranfers _ [
	(OrderedCollection
		cover: (85 to: 101)
		declaredAt: (49 to: 65)) new ] valueCoveringAll:
		{103 to: 105})
		cover: (73 to: 80)
		declaredAt: (73 to: 80).! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
with: anAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{20 to: 23}) new ] valueCoveringAll:
		{25 to: 27}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{32 to: 45}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{50 to: 57} ] value.! !
!Behavior method!
add: accountToAdd
	[
	(self coverAll:
		{21 to: 24}) assertCanAdd:
		(accountToAdd
			cover: (40 to: 51)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{26 to: 38}.
	[
	(accounts
		cover: (58 to: 65)
		declaredAt: (58 to: 65)) add:
		(accountToAdd
			cover: (72 to: 83)
			declaredAt: (6 to: 17)) ] valueCoveringAll:
		{67 to: 70}.
	[
	(accountToAdd
		cover: (87 to: 98)
		declaredAt: (6 to: 17)) addedTo:
		(self coverAll:
			{109 to: 112}) ] valueCoveringAll:
		{100 to: 107}.! !
!Behavior method!
assertCanAdd: accountToAdd
	[
	([
	(self coverAll:
		{31 to: 34}) anyRootParentIsComposedBy:
		(accountToAdd
			cover: (63 to: 74)
			declaredAt: (15 to: 26)) ] valueCoveringAll:
		{36 to: 61}) ifTrue: [
		[
		(self coverAll:
			{87 to: 90}) signalCanNotAddAccount ] valueCoveringAll:
			{92 to: 113} ]] valueCoveringAll:
		{77 to: 83}.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	^ [
	([
	(self coverAll:
		{44 to: 47}) rootParents ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :aParent |
		[
		(aParent
			cover: (86 to: 92)
			declaredAt: (76 to: 82)) isComposedBy:
			(accountToAdd
				cover: (108 to: 119)
				declaredAt: (28 to: 39)) ] valueCoveringAll:
			{94 to: 106} ]] valueCoveringAll:
		{61 to: 71}.! !
!Behavior method!
rootParents
	| rootParents |
	(rootParents _ [
	(Set
		cover: (50 to: 52)
		declaredAt: (50 to: 52)) new ] valueCoveringAll:
		{54 to: 56})
		cover: (35 to: 45)
		declaredAt: (18 to: 28).
	[
	(self coverAll:
		{60 to: 63}) addRootParentsTo:
		(rootParents
			cover: (83 to: 93)
			declaredAt: (18 to: 28)) ] valueCoveringAll:
		{65 to: 81}.
	^ rootParents
		cover: (101 to: 111)
		declaredAt: (18 to: 28).! !
!Behavior method!
addRootParentsTo: rootParents
	[
	(parents
		cover: (33 to: 39)
		declaredAt: (33 to: 39))
		ifEmpty: [
			[
			(rootParents
				cover: (55 to: 65)
				declaredAt: (19 to: 29)) add:
				(self coverAll:
					{72 to: 75}) ] valueCoveringAll:
				{67 to: 70} ]
		ifNotEmpty: [
			[
			(parents
				cover: (96 to: 102)
				declaredAt: (33 to: 39)) do: [ :aParent |
				[
				(aParent
					cover: (121 to: 127)
					declaredAt: (111 to: 117)) addRootParentsTo:
					(rootParents
						cover: (147 to: 157)
						declaredAt: (19 to: 29)) ] valueCoveringAll:
					{129 to: 145} ]] valueCoveringAll:
				{104 to: 106} ]] valueCoveringAll:
		{44 to: 51. 82 to: 92}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	([
	(self coverAll:
		{29 to: 32}) =
		(anAccount
			cover: (36 to: 44)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{34 to: 34}) or: [
		[
		(accounts
			cover: (52 to: 59)
			declaredAt: (52 to: 59)) anySatisfy: [ :composedAccount |
			[
			([
			(composedAccount
				cover: (95 to: 109)
				declaredAt: (76 to: 90)) isComposedBy:
				(anAccount
					cover: (125 to: 133)
					declaredAt: (15 to: 23)) ] valueCoveringAll:
				{111 to: 123}) or: [
				[
				(anAccount
					cover: (142 to: 150)
					declaredAt: (15 to: 23)) isComposedBy:
					(composedAccount
						cover: (166 to: 180)
						declaredAt: (76 to: 90)) ] valueCoveringAll:
					{152 to: 164} ]] valueCoveringAll:
				{136 to: 138} ]] valueCoveringAll:
			{61 to: 71} ]] valueCoveringAll:
		{46 to: 48}.! !
!Behavior method!
addedTo: anAccount
	^ self.! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		inject:
			(0 coverAll:
				{36 to: 36})
		into: [ :currentBalance :transaction |
			[
			(transaction
				cover: (79 to: 89)
				declaredAt: (65 to: 75)) affectBalance:
				(currentBalance
					cover: (106 to: 119)
					declaredAt: (49 to: 62)) ] valueCoveringAll:
				{91 to: 104} ]] valueCoveringAll:
		{28 to: 34. 40 to: 44}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) +
		([
		(self coverAll:
			{39 to: 42}) value ] valueCoveringAll:
			{44 to: 48}) ] valueCoveringAll:
		{37 to: 37}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 15:17:49'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
with: anAccount with: anotherAccount
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(self coverAll:
		{41 to: 44}) new ] valueCoveringAll:
		{46 to: 48}.
	[ cascadeReceiver add: anAccount ] valueCoveringAll:
		{53 to: 66}.
	[ cascadeReceiver add: anotherAccount ] valueCoveringAll:
		{71 to: 89}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{94 to: 101} ] value.! !
!Behavior method!
addedTo: aPortfolio
	[
	(parents
		cover: (25 to: 31)
		declaredAt: (25 to: 31)) add:
		(aPortfolio
			cover: (38 to: 47)
			declaredAt: (10 to: 19)) ] valueCoveringAll:
		{33 to: 36}.! !
!Behavior method!
isComposedBy: anAccount
	^ [
	(self coverAll:
		{28 to: 31}) =
		(anAccount
			cover: (35 to: 43)
			declaredAt: (15 to: 23)) ] valueCoveringAll:
		{33 to: 33}.! !
!Behavior method!
affectBalance: aBalance
	^ [
	(aBalance
		cover: (28 to: 35)
		declaredAt: (16 to: 23)) -
		([
		(self coverAll:
			{39 to: 42}) value ] valueCoveringAll:
			{44 to: 48}) ] valueCoveringAll:
		{37 to: 37}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 15:17:49'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :anAccount |
		[
		(anAccount
			cover: (68 to: 76)
			declaredAt: (56 to: 64)) hasRegistered:
			(aTransaction
				cover: (93 to: 104)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{78 to: 91} ]] valueCoveringAll:
		{41 to: 51}.! !

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 15:17:49'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 15:17:49'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 15:17:49'!
PASSED!
!Behavior method!
transactions
	| transactions |
	(transactions _ [
	(OrderedCollection
		cover: (53 to: 69)
		declaredAt: (53 to: 69)) new ] valueCoveringAll:
		{71 to: 73})
		cover: (37 to: 48)
		declaredAt: (19 to: 30).
	[
	(accounts
		cover: (77 to: 84)
		declaredAt: (77 to: 84)) do: [ :anAccount |
		[
		(anAccount
			cover: (105 to: 113)
			declaredAt: (93 to: 101)) addTransactionsTo:
			(transactions
				cover: (134 to: 145)
				declaredAt: (19 to: 30)) ] valueCoveringAll:
			{115 to: 132} ]] valueCoveringAll:
		{86 to: 88}.
	^ transactions
		cover: (154 to: 165)
		declaredAt: (19 to: 30).! !

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 15:17:49'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(aCollectionOfTransactions
		cover: (48 to: 72)
		declaredAt: (20 to: 44)) addAll:
		(transactions
			cover: (82 to: 93)
			declaredAt: (82 to: 93)) ] valueCoveringAll:
		{74 to: 80}.! !

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 15:17:49'!
PASSED!
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	[
	(accounts
		cover: (48 to: 55)
		declaredAt: (48 to: 55)) do: [ :anAccount |
		[
		(anAccount
			cover: (76 to: 84)
			declaredAt: (64 to: 72)) addTransactionsTo:
			(aCollectionOfTransactions
				cover: (105 to: 129)
				declaredAt: (20 to: 44)) ] valueCoveringAll:
			{86 to: 103} ]] valueCoveringAll:
		{57 to: 59}.! !

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 15:17:49'!
PASSED!
!Behavior method!
signalCanNotAddAccount
	[
	(self coverAll:
		{27 to: 30}) error:
		([
		([
		(self coverAll:
			{39 to: 42}) class ] valueCoveringAll:
			{44 to: 48}) canNotAddAccountErrorMessage ] valueCoveringAll:
			{50 to: 77}) ] valueCoveringAll:
		{32 to: 37}.! !
!Behavior method!
canNotAddAccountErrorMessage
	^ 'Can not add repeated account to a portfolio' coverAll:
		{34 to: 78}.! !
!Behavior method!
accountsSize
	^ [
	(accounts
		cover: (18 to: 25)
		declaredAt: (18 to: 25)) size ] valueCoveringAll:
		{27 to: 30}.! !
!Behavior method!
accountsIncludes: anAccount
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) includes:
		(anAccount
			cover: (51 to: 59)
			declaredAt: (19 to: 27)) ] valueCoveringAll:
		{41 to: 49}.! !

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 15:17:49'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 15:17:49'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 15:17:49'!
PASSED!
!Behavior method!
accountsIsEmpty
	^ [
	(accounts
		cover: (21 to: 28)
		declaredAt: (21 to: 28)) isEmpty ] valueCoveringAll:
		{30 to: 36}.! !

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 15:17:49'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 15:17:49'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 15:17:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 15:17:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 15:17:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 15:17:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 15:17:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 15:17:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 15:17:49'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 15:17:49'!
PASSED!
!Behavior method!
for: anAccount
	^ [
	([
	(self coverAll:
		{19 to: 22}) new ] valueCoveringAll:
		{24 to: 26}) initializeFor:
		(anAccount
			cover: (43 to: 51)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{28 to: 41}.! !
!Behavior method!
initializeFor: anAccount
	(report _ [
	(OrderedCollection
		cover: (39 to: 55)
		declaredAt: (39 to: 55)) new ] valueCoveringAll:
		{57 to: 59})
		cover: (29 to: 34)
		declaredAt: (29 to: 34).
	[
	(anAccount
		cover: (63 to: 71)
		declaredAt: (16 to: 24)) affectReport:
		(self coverAll:
			{87 to: 90}) ] valueCoveringAll:
		{73 to: 85}.
	[
	(report
		cover: (94 to: 99)
		declaredAt: (29 to: 34)) add:
		([
		('Balance = ' coverAll:
			{106 to: 117}) ,
			([
			([
			(anAccount
				cover: (120 to: 128)
				declaredAt: (16 to: 24)) balance ] valueCoveringAll:
				{130 to: 136}) asString ] valueCoveringAll:
				{138 to: 145}) ] valueCoveringAll:
			{118 to: 118}) ] valueCoveringAll:
		{101 to: 104}.! !
!Behavior method!
affectReport: anAccountReporter
	[
	(transactions
		cover: (35 to: 46)
		declaredAt: (35 to: 46)) do: [ :aTransaction |
		[
		(aTransaction
			cover: (69 to: 80)
			declaredAt: (54 to: 65)) affectReport:
			(anAccountReporter
				cover: (96 to: 112)
				declaredAt: (15 to: 31)) ] valueCoveringAll:
			{82 to: 94} ]] valueCoveringAll:
		{48 to: 50}.! !
!Behavior method!
report
	^ report
		cover: (11 to: 16)
		declaredAt: (11 to: 16).! !

!testRun: #ReportTest #test01anAccountWithNoTransactionsReturnsCeroBalance stamp: 'AC 10/23/2021 15:17:49'!
PASSED!
!Behavior method!
affectReport: anAccountReporter
	[
	(anAccountReporter
		cover: (34 to: 50)
		declaredAt: (15 to: 31)) addFromDeposit:
		(self coverAll:
			{68 to: 71}) ] valueCoveringAll:
		{52 to: 66}.! !
!Behavior method!
addFromDeposit: aDeposit
	^ [
	(report
		cover: (30 to: 35)
		declaredAt: (30 to: 35)) add:
		([
		([
		('Dep�sito por ' coverAll:
			{42 to: 56}) ,
			([
			([
			(aDeposit
				cover: (59 to: 66)
				declaredAt: (17 to: 24)) value ] valueCoveringAll:
				{68 to: 72}) asString ] valueCoveringAll:
				{74 to: 81}) ] valueCoveringAll:
			{57 to: 57}) ,
			('.' coverAll:
				{84 to: 86}) ] valueCoveringAll:
			{82 to: 82}) ] valueCoveringAll:
		{37 to: 40}.! !

!testRun: #ReportTest #test02 stamp: 'AC 10/23/2021 15:17:49'!
PASSED!
!Behavior method!
affectReport: anAccountReporter
	[
	(anAccountReporter
		cover: (34 to: 50)
		declaredAt: (15 to: 31)) addFromWithdraw:
		(self coverAll:
			{69 to: 72}) ] valueCoveringAll:
		{52 to: 67}.! !
!Behavior method!
addFromWithdraw: aWithdraw
	^ [
	(report
		cover: (32 to: 37)
		declaredAt: (32 to: 37)) add:
		([
		([
		('Extracci�n por ' coverAll:
			{44 to: 60}) ,
			([
			([
			(aWithdraw
				cover: (63 to: 71)
				declaredAt: (18 to: 26)) value ] valueCoveringAll:
				{73 to: 77}) asString ] valueCoveringAll:
				{79 to: 86}) ] valueCoveringAll:
			{61 to: 61}) ,
			('.' coverAll:
				{89 to: 91}) ] valueCoveringAll:
			{87 to: 87}) ] valueCoveringAll:
		{39 to: 42}.! !

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 15:17:49'!
PASSED!
!Behavior method!
transfer: aValue to: aReceptiveAccount
	^ [
	(Transfer
		cover: (44 to: 51)
		declaredAt: (44 to: 51))
		transfer:
			(aValue
				cover: (63 to: 68)
				declaredAt: (11 to: 16))
		from:
			(self coverAll:
				{76 to: 79})
		to:
			(aReceptiveAccount
				cover: (85 to: 101)
				declaredAt: (22 to: 38)) ] valueCoveringAll:
		{53 to: 61. 70 to: 74. 81 to: 83}.! !
!Behavior method!
transfer: anAmount from: aSourceReceptiveAccount to: aDestinationReceptiveAccount
	[
	([
	(anAmount
		cover: (86 to: 93)
		declaredAt: (11 to: 18)) <=
		(0 coverAll:
			{98 to: 98}) ] valueCoveringAll:
		{95 to: 96}) ifTrue: [
		[
		(self coverAll:
			{109 to: 112}) error:
			([
			(self coverAll:
				{121 to: 124}) transferCannotBeNull ] valueCoveringAll:
				{126 to: 145}) ] valueCoveringAll:
			{114 to: 119} ]] valueCoveringAll:
		{100 to: 106}.
	[
	([
	(aSourceReceptiveAccount
		cover: (151 to: 173)
		declaredAt: (26 to: 48)) =
		(aDestinationReceptiveAccount
			cover: (177 to: 204)
			declaredAt: (54 to: 81)) ] valueCoveringAll:
		{175 to: 175}) ifTrue: [
		[
		(self coverAll:
			{216 to: 219}) error:
			([
			(self coverAll:
				{228 to: 231}) cannotTransferToSourceAccountErrorMesssage ] valueCoveringAll:
				{233 to: 274}) ] valueCoveringAll:
			{221 to: 226} ]] valueCoveringAll:
		{207 to: 213}.
	^ [
	([
	(self coverAll:
		{284 to: 287}) new ] valueCoveringAll:
		{289 to: 291})
		initializeFor:
			(anAmount
				cover: (308 to: 315)
				declaredAt: (11 to: 18))
		from:
			(aSourceReceptiveAccount
				cover: (323 to: 345)
				declaredAt: (26 to: 48))
		to:
			(aDestinationReceptiveAccount
				cover: (351 to: 378)
				declaredAt: (54 to: 81)) ] valueCoveringAll:
		{293 to: 306. 317 to: 321. 347 to: 349}.! !
!Behavior method!
initializeFor: anAmount from: aSourceReceptiveAccount to: aDestinationReceptiveAccount
	(value _ anAmount
		cover: (100 to: 107)
		declaredAt: (16 to: 23))
		cover: (91 to: 95)
		declaredAt: (91 to: 95).
	(source _ [
	(TransferFromSource
		cover: (121 to: 138)
		declaredAt: (121 to: 138)) for:
		(self coverAll:
			{145 to: 148}) ] valueCoveringAll:
		{140 to: 143})
		cover: (111 to: 116)
		declaredAt: (111 to: 116).
	(destination _ [
	(TransferToDestination
		cover: (168 to: 188)
		declaredAt: (168 to: 188)) for:
		(self coverAll:
			{195 to: 198}) ] valueCoveringAll:
		{190 to: 193})
		cover: (152 to: 162)
		declaredAt: (152 to: 162).
	[
	(aSourceReceptiveAccount
		cover: (204 to: 226)
		declaredAt: (31 to: 53)) register:
		(source
			cover: (238 to: 243)
			declaredAt: (111 to: 116)) ] valueCoveringAll:
		{228 to: 236}.
	[
	(aDestinationReceptiveAccount
		cover: (247 to: 274)
		declaredAt: (59 to: 86)) register:
		(destination
			cover: (286 to: 296)
			declaredAt: (152 to: 162)) ] valueCoveringAll:
		{276 to: 284}.! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (40 to: 48)
		declaredAt: (16 to: 24))
		cover: (28 to: 35)
		declaredAt: (28 to: 35).! !
!Behavior method!
initializeFor: aTransfer
	(transfer _ aTransfer
		cover: (40 to: 48)
		declaredAt: (16 to: 24))
		cover: (28 to: 35)
		declaredAt: (28 to: 35).! !
!Behavior method!
affectReport: anAccountReporter
	[
	(anAccountReporter
		cover: (34 to: 50)
		declaredAt: (15 to: 31)) addFromTransferSource:
		(self coverAll:
			{75 to: 78}) ] valueCoveringAll:
		{52 to: 73}.! !
!Behavior method!
addFromTransferSource: anAmount
	^ [
	(report
		cover: (36 to: 41)
		declaredAt: (36 to: 41)) add:
		([
		([
		('Salida por transferencia de ' coverAll:
			{48 to: 77}) ,
			([
			([
			(anAmount
				cover: (80 to: 87)
				declaredAt: (24 to: 31)) value ] valueCoveringAll:
				{89 to: 93}) asString ] valueCoveringAll:
				{95 to: 102}) ] valueCoveringAll:
			{78 to: 78}) ,
			('.' coverAll:
				{105 to: 107}) ] valueCoveringAll:
			{103 to: 103}) ] valueCoveringAll:
		{43 to: 46}.! !
!Behavior method!
value
	^ [
	(transfer
		cover: (11 to: 18)
		declaredAt: (11 to: 18)) value ] valueCoveringAll:
		{20 to: 24}.! !
!Behavior method!
value
	^ value
		cover: (10 to: 14)
		declaredAt: (10 to: 14).! !

!testRun: #ReportTest #test04 stamp: 'AC 10/23/2021 15:17:49'!
PASSED!
!Behavior method!
affectReport: anAccountReporter
	[
	(anAccountReporter
		cover: (34 to: 50)
		declaredAt: (15 to: 31)) addFromTransferDestination:
		(self coverAll:
			{80 to: 83}) ] valueCoveringAll:
		{52 to: 78}.! !
!Behavior method!
addFromTransferDestination: anAmount
	^ [
	(report
		cover: (41 to: 46)
		declaredAt: (41 to: 46)) add:
		([
		([
		('Entrada por transferencia de ' coverAll:
			{53 to: 83}) ,
			([
			([
			(anAmount
				cover: (86 to: 93)
				declaredAt: (29 to: 36)) value ] valueCoveringAll:
				{95 to: 99}) asString ] valueCoveringAll:
				{101 to: 108}) ] valueCoveringAll:
			{84 to: 84}) ,
			('.' coverAll:
				{111 to: 113}) ] valueCoveringAll:
			{109 to: 109}) ] valueCoveringAll:
		{48 to: 51}.! !
!Behavior method!
value
	^ [
	(transfer
		cover: (11 to: 18)
		declaredAt: (11 to: 18)) value ] valueCoveringAll:
		{20 to: 24}.! !

!testRun: #ReportTest #test05 stamp: 'AC 10/23/2021 15:17:49'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 15:17:49'!
PASSED!
!Behavior method!
affectReport: anAccountReporter
	[
	(accounts
		cover: (34 to: 41)
		declaredAt: (34 to: 41)) do: [ :anAccount |
		[
		(anAccount
			cover: (61 to: 69)
			declaredAt: (49 to: 57)) affectReport:
			(anAccountReporter
				cover: (85 to: 101)
				declaredAt: (15 to: 31)) ] valueCoveringAll:
			{71 to: 83} ]] valueCoveringAll:
		{43 to: 45}.! !

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 15:17:49'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'AC 10/23/2021 15:17:49'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'AC 10/23/2021 15:17:49'!
PASSED!
!Behavior method!
for: anAccount
	^ [
	([
	(self coverAll:
		{18 to: 21}) new ] valueCoveringAll:
		{23 to: 25}) initializeWith:
		(anAccount
			cover: (43 to: 51)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{27 to: 41}.! !
!Behavior method!
initializeWith: anAccount
	(transferNet _ 0 coverAll:
		{44 to: 44})
		cover: (29 to: 39)
		declaredAt: (29 to: 39).
	[
	(anAccount
		cover: (48 to: 56)
		declaredAt: (17 to: 25)) affectReport:
		(self coverAll:
			{72 to: 75}) ] valueCoveringAll:
		{58 to: 70}.
	^ transferNet
		cover: (80 to: 90)
		declaredAt: (29 to: 39).! !

!testRun: #ReportTest #test10 stamp: 'AC 10/23/2021 15:17:49'!
PASSED!
!Behavior method!
addFromTransferDestination: anTransferToDestination
	^ (transferNet _ [
	(transferNet
		cover: (56 to: 66)
		declaredAt: (56 to: 66)) +
		([
		(anTransferToDestination
			cover: (85 to: 107)
			declaredAt: (29 to: 51)) value ] valueCoveringAll:
			{109 to: 113}) ] valueCoveringAll:
		{83 to: 83})
		cover: (71 to: 81)
		declaredAt: (56 to: 66).! !

!testRun: #ReportTest #test11 stamp: 'AC 10/23/2021 15:17:49'!
PASSED!
!Behavior method!
addFromTransferSource: aTransferFromSource
	^ (transferNet _ [
	(transferNet
		cover: (47 to: 57)
		declaredAt: (47 to: 57)) -
		([
		(aTransferFromSource
			cover: (76 to: 94)
			declaredAt: (24 to: 42)) value ] valueCoveringAll:
			{96 to: 100}) ] valueCoveringAll:
		{74 to: 74})
		cover: (62 to: 72)
		declaredAt: (47 to: 57).! !

!testRun: #ReportTest #test12 stamp: 'AC 10/23/2021 15:17:49'!
PASSED!
!Behavior method!
addFromDeposit: anAmount
	^ self.! !
!Behavior method!
addFromWithdraw: anAmount
	^ self.! !

!testRun: #ReportTest #test13 stamp: 'AC 10/23/2021 15:17:49'!
PASSED!
!Behavior method!
transferCannotBeNull
	^ 'Transfer cannot be null' coverAll:
		{25 to: 49}.! !

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 15:17:49'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 15:17:49'!
PASSED!
!Behavior method!
cannotTransferToSourceAccountErrorMesssage
	^ 'An account cannot transfer to himself' coverAll:
		{46 to: 84}.! !

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 15:17:49'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 15:17:49'!
PASSED!
!Behavior method!
destination
	^ destination
		cover: (16 to: 26)
		declaredAt: (16 to: 26).! !
!Behavior method!
source
	^ source
		cover: (11 to: 16)
		declaredAt: (11 to: 16).! !
!Behavior method!
other
	^ [
	(transfer
		cover: (9 to: 16)
		declaredAt: (9 to: 16)) destination ] valueCoveringAll:
		{18 to: 28}.! !
!Behavior method!
other
	^ [
	(transfer
		cover: (9 to: 16)
		declaredAt: (9 to: 16)) source ] valueCoveringAll:
		{18 to: 23}.! !

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 15:17:49'!
PASSED!

!methodRemoval: TransferToDestination #transfer stamp: 'AC 10/23/2021 15:18:17'!
transfer

	^transfer.!

!methodRemoval: TransferFromSource #transfer stamp: 'AC 10/23/2021 15:18:25'!
transfer

	^transfer.!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #ReportTest #test01anAccountWithNoTransactionsReturnsCeroBalance stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 15:18:32'!
PASSED!

----STARTUP---- (23 October 2021 15:49:00) as /home/alex/Downloads/linux64-Ejercitacion/CuisUniversity-4913.image!


!classRemoval: #ReceptiveAccount stamp: 'AC 10/23/2021 15:49:07'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'AC 10/23/2021 15:49:07'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts childrenPortfolios parentPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'AC 10/23/2021 15:49:08'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'AC 10/23/2021 15:49:08'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'AC 10/23/2021 15:49:08'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'AC 10/23/2021 15:49:08'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'AC 10/23/2021 15:49:08'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of /home/alex/Downloads/linux64-Ejercitacion/Portfolio-Solucion.st----!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'AC 10/23/2021 15:50:24'!
for: aValue

	^ self new initializeFor: aValue ! !

!methodRemoval: Deposit class #for: stamp: 'AC 10/23/2021 15:50:27'!
for: aValue

	^ self new initializeFor: aValue !

!methodRemoval: Withdraw class #for: stamp: 'AC 10/23/2021 15:50:30'!
for: aValue

	^ self new initializeFor: aValue !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #ReportTest #test01anAccountWithNoTransactionsReturnsCeroBalance stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 15:50:32'!
PASSED!

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 15:50:32'!
PASSED!
!TransferNet methodsFor: 'initialization' stamp: 'AC 10/23/2021 15:53:28' prior: 50919358 overrides: 50919259!
addFromTransferSource: aTransferFromSource

	transferNet := transferNet - aTransferFromSource value.! !
!TransferNet methodsFor: 'initialization' stamp: 'AC 10/23/2021 15:53:34' prior: 50919351 overrides: 50919254!
addFromTransferDestination: anTransferToDestination

	transferNet := transferNet + anTransferToDestination value.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #ReportTest #test01anAccountWithNoTransactionsReturnsCeroBalance stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 15:53:39'!
PASSED!

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 15:53:39'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 15:53:51' prior: 50919282 overrides: 50919249!
addFromDeposit: aDeposit
	
	report add: 'Dep�sito por ', aDeposit value asString, '.'.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 15:53:56' prior: 50919289 overrides: 50919254!
addFromTransferDestination: anAmount

	report add: 'Entrada por transferencia de ', anAmount value asString, '.'

! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 15:54:00' prior: 50919296 overrides: 50919259!
addFromTransferSource: anAmount

	report add: 'Salida por transferencia de ', anAmount value asString, '.'.
! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 15:54:03' prior: 50919303 overrides: 50919264!
addFromWithdraw: aWithdraw
	
	report add: 'Extracci�n por ', aWithdraw value asString, '.'.
	! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 15:56:19'!
test02anAccountWithOneTransactionReturnsThatTransactionAndItsBalance

	|account accountSummary expectedReport|
	
	account := ReceptiveAccount new.
	Deposit register:100 on:account .
	accountSummary := AccountSummary for: account.
	expectedReport := OrderedCollection with:'Dep�sito por 100.' with: 'Balance = 100'.
		
	self assert: expectedReport equals: accountSummary report.
	! !

!methodRemoval: ReportTest #test02anAccountWithOneTransactionReturnsThatTransactionAndItsBalance stamp: 'AC 10/23/2021 15:56:31'!
test02anAccountWithOneTransactionReturnsThatTransactionAndItsBalance

	|account accountSummary expectedReport|
	
	account := ReceptiveAccount new.
	Deposit register:100 on:account .
	accountSummary := AccountSummary for: account.
	expectedReport := OrderedCollection with:'Dep�sito por 100.' with: 'Balance = 100'.
		
	self assert: expectedReport equals: accountSummary report.
	!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 15:56:37'!
test02anAccountWithOneTransactionReturnsThatTransactionAndItsBalance

	|account accountSummary expectedReport|
	
	account := ReceptiveAccount new.
	Deposit register:100 on:account .
	accountSummary := AccountSummary for: account.
	expectedReport := OrderedCollection with:'Dep�sito por 100.' with: 'Balance = 100'.
		
	self assert: expectedReport equals: accountSummary report.
	! !

!methodRemoval: ReportTest #test02 stamp: 'AC 10/23/2021 15:56:37'!
test02

	|account accountSummary expectedReport|
	
	account := ReceptiveAccount new.
	Deposit register:100 on:account .
	accountSummary := AccountSummary for: account.
	expectedReport := OrderedCollection with:'Dep�sito por 100.' with: 'Balance = 100'.
		
	self assert: expectedReport equals: accountSummary report.
	!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 15:57:45'!
test01anAccountWithNoTransactionsReturnsAccountSummaryWithCeroBalance
	|account accountSummary|
	
	account := ReceptiveAccount new.
	accountSummary := AccountSummary for: account.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary report.! !

!methodRemoval: ReportTest #test01anAccountWithNoTransactionsReturnsAccountSummaryWithCeroBalance stamp: 'AC 10/23/2021 15:57:55'!
test01anAccountWithNoTransactionsReturnsAccountSummaryWithCeroBalance
	|account accountSummary|
	
	account := ReceptiveAccount new.
	accountSummary := AccountSummary for: account.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary report.!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 15:58:18'!
test01anAccountWithNoTransactionsReturnsAccountSummaryWithCeroBalance
	|account accountSummary|
	
	account := ReceptiveAccount new.
	accountSummary := AccountSummary for: account.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary report.! !

!methodRemoval: ReportTest #test01anAccountWithNoTransactionsReturnsCeroBalance stamp: 'AC 10/23/2021 15:58:18'!
test01anAccountWithNoTransactionsReturnsCeroBalance
	|account accountSummary|
	
	account := ReceptiveAccount new.
	accountSummary := AccountSummary for: account.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary report.!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 15:58:56'!
test02anAccountWithOneTransactionReturnsAccountSummaryWithThatTransactionAndItsBalance

	|account accountSummary expectedReport|
	
	account := ReceptiveAccount new.
	Deposit register:100 on:account .
	accountSummary := AccountSummary for: account.
	expectedReport := OrderedCollection with:'Dep�sito por 100.' with: 'Balance = 100'.
		
	self assert: expectedReport equals: accountSummary report.
	! !

!methodRemoval: ReportTest #test02anAccountWithOneTransactionReturnsThatTransactionAndItsBalance stamp: 'AC 10/23/2021 15:58:56'!
test02anAccountWithOneTransactionReturnsThatTransactionAndItsBalance

	|account accountSummary expectedReport|
	
	account := ReceptiveAccount new.
	Deposit register:100 on:account .
	accountSummary := AccountSummary for: account.
	expectedReport := OrderedCollection with:'Dep�sito por 100.' with: 'Balance = 100'.
		
	self assert: expectedReport equals: accountSummary report.
	!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 16:00:07'!
test02anAccountWithOneDepositReturnsAccountSummaryWithThatTransactionAndItsBalance

	|account accountSummary expectedReport|
	
	account := ReceptiveAccount new.
	Deposit register:100 on:account .
	accountSummary := AccountSummary for: account.
	expectedReport := OrderedCollection with:'Dep�sito por 100.' with: 'Balance = 100'.
		
	self assert: expectedReport equals: accountSummary report.
	! !

!methodRemoval: ReportTest #test02anAccountWithOneTransactionReturnsAccountSummaryWithThatTransactionAndItsBalance stamp: 'AC 10/23/2021 16:00:07'!
test02anAccountWithOneTransactionReturnsAccountSummaryWithThatTransactionAndItsBalance

	|account accountSummary expectedReport|
	
	account := ReceptiveAccount new.
	Deposit register:100 on:account .
	accountSummary := AccountSummary for: account.
	expectedReport := OrderedCollection with:'Dep�sito por 100.' with: 'Balance = 100'.
		
	self assert: expectedReport equals: accountSummary report.
	!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 16:00:50'!
test03anAccountWithOneWithdrawReturnsAccountSummaryWithThatTransactionAndItsBalance

	|account accountSummary expectedReport|
	
	account := ReceptiveAccount new.
	Withdraw register:100 on:account.
	accountSummary := AccountSummary for: account.
	expectedReport := OrderedCollection with:'Extracci�n por 100.' with: 'Balance = -100'.
		
	self assert: expectedReport equals: accountSummary report.
	! !

!methodRemoval: ReportTest #test03 stamp: 'AC 10/23/2021 16:00:50'!
test03

	|account accountSummary expectedReport|
	
	account := ReceptiveAccount new.
	Withdraw register:100 on:account.
	accountSummary := AccountSummary for: account.
	expectedReport := OrderedCollection with:'Extracci�n por 100.' with: 'Balance = -100'.
		
	self assert: expectedReport equals: accountSummary report.
	!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 16:03:03'!
test04anSourceAccountWithOneTransferReturnsAccountSummaryWithThatTransferAndItsBalance

	|sourceAccount destinationAccount sourceAccountSummary expectedReport|
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	sourceAccount transfer: 100 to: destinationAccount .
	sourceAccountSummary := AccountSummary for: sourceAccount.
	expectedReport := OrderedCollection with:'Salida por transferencia de 100.' with: 'Balance = -100'.
		
	self assert: expectedReport equals: sourceAccountSummary report.
	! !

!methodRemoval: ReportTest #test04 stamp: 'AC 10/23/2021 16:03:03'!
test04

	|sourceAccount destinationAccount sourceAccountSummary expectedReport|
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	sourceAccount transfer: 100 to: destinationAccount .
	sourceAccountSummary := AccountSummary for: sourceAccount.
	expectedReport := OrderedCollection with:'Salida por transferencia de 100.' with: 'Balance = -100'.
		
	self assert: expectedReport equals: sourceAccountSummary report.
	!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 16:03:34'!
test05anDestinationAccountTransferReturnsAccountSummaryWithThatTransferAndItsBalance

	|sourceAccount destinationAccount destinationAccountSummary expectedReport |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	sourceAccount transfer: 100 to: destinationAccount .
	destinationAccountSummary := AccountSummary for: destinationAccount.
	expectedReport := OrderedCollection with:'Entrada por transferencia de 100.' with: 'Balance = 100'.
		
	self assert: (expectedReport ) equals: destinationAccountSummary report.
	! !

!methodRemoval: ReportTest #test05 stamp: 'AC 10/23/2021 16:03:34'!
test05

	|sourceAccount destinationAccount destinationAccountSummary expectedReport |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	sourceAccount transfer: 100 to: destinationAccount .
	destinationAccountSummary := AccountSummary for: destinationAccount.
	expectedReport := OrderedCollection with:'Entrada por transferencia de 100.' with: 'Balance = 100'.
		
	self assert: (expectedReport ) equals: destinationAccountSummary report.
	!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 16:04:08'!
test05anDestinationAccountWithOneTransferOutReturnsAccountSummaryWithThatTransferAndItsBalance

	|sourceAccount destinationAccount destinationAccountSummary expectedReport |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	sourceAccount transfer: 100 to: destinationAccount .
	destinationAccountSummary := AccountSummary for: destinationAccount.
	expectedReport := OrderedCollection with:'Entrada por transferencia de 100.' with: 'Balance = 100'.
		
	self assert: (expectedReport ) equals: destinationAccountSummary report.
	! !

!methodRemoval: ReportTest #test05anDestinationAccountTransferReturnsAccountSummaryWithThatTransferAndItsBalance stamp: 'AC 10/23/2021 16:04:08'!
test05anDestinationAccountTransferReturnsAccountSummaryWithThatTransferAndItsBalance

	|sourceAccount destinationAccount destinationAccountSummary expectedReport |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	sourceAccount transfer: 100 to: destinationAccount .
	destinationAccountSummary := AccountSummary for: destinationAccount.
	expectedReport := OrderedCollection with:'Entrada por transferencia de 100.' with: 'Balance = 100'.
		
	self assert: (expectedReport ) equals: destinationAccountSummary report.
	!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 16:04:26'!
test04anSourceAccountWithOneTransferOutReturnsAccountSummaryWithThatTransferAndItsBalance

	|sourceAccount destinationAccount sourceAccountSummary expectedReport|
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	sourceAccount transfer: 100 to: destinationAccount .
	sourceAccountSummary := AccountSummary for: sourceAccount.
	expectedReport := OrderedCollection with:'Salida por transferencia de 100.' with: 'Balance = -100'.
		
	self assert: expectedReport equals: sourceAccountSummary report.
	! !

!methodRemoval: ReportTest #test04anSourceAccountWithOneTransferReturnsAccountSummaryWithThatTransferAndItsBalance stamp: 'AC 10/23/2021 16:04:26'!
test04anSourceAccountWithOneTransferReturnsAccountSummaryWithThatTransferAndItsBalance

	|sourceAccount destinationAccount sourceAccountSummary expectedReport|
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	sourceAccount transfer: 100 to: destinationAccount .
	sourceAccountSummary := AccountSummary for: sourceAccount.
	expectedReport := OrderedCollection with:'Salida por transferencia de 100.' with: 'Balance = -100'.
		
	self assert: expectedReport equals: sourceAccountSummary report.
	!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 16:04:36'!
test05anDestinationAccountWithOneTransferInReturnsAccountSummaryWithThatTransferAndItsBalance

	|sourceAccount destinationAccount destinationAccountSummary expectedReport |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	sourceAccount transfer: 100 to: destinationAccount .
	destinationAccountSummary := AccountSummary for: destinationAccount.
	expectedReport := OrderedCollection with:'Entrada por transferencia de 100.' with: 'Balance = 100'.
		
	self assert: (expectedReport ) equals: destinationAccountSummary report.
	! !

!methodRemoval: ReportTest #test05anDestinationAccountWithOneTransferOutReturnsAccountSummaryWithThatTransferAndItsBalance stamp: 'AC 10/23/2021 16:04:36'!
test05anDestinationAccountWithOneTransferOutReturnsAccountSummaryWithThatTransferAndItsBalance

	|sourceAccount destinationAccount destinationAccountSummary expectedReport |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	sourceAccount transfer: 100 to: destinationAccount .
	destinationAccountSummary := AccountSummary for: destinationAccount.
	expectedReport := OrderedCollection with:'Entrada por transferencia de 100.' with: 'Balance = 100'.
		
	self assert: (expectedReport ) equals: destinationAccountSummary report.
	!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 16:05:47'!
test06anAccountWithAllFourTypeOfTransactionsReturnsAllFourTransactionAndItsBalance

	|sourceAccount destinationAccount sourceAccountSummary expectedReport |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	Deposit register: 100  on: sourceAccount .
	Withdraw register: 50 on: sourceAccount.
	sourceAccount transfer: 20 to: destinationAccount .
	destinationAccount transfer: 30 to: sourceAccount.
	sourceAccountSummary := AccountSummary for: sourceAccount .
	expectedReport := OrderedCollection 
		with: 'Dep�sito por 100.'
		with: 'Extracci�n por 50.'
		with:'Salida por transferencia de 20.' 
		with:'Entrada por transferencia de 30.'
		with: 'Balance = 60'.
		
	self assert: expectedReport equals: sourceAccountSummary report .
	! !

!methodRemoval: ReportTest #test06 stamp: 'AC 10/23/2021 16:05:47'!
test06

	|sourceAccount destinationAccount sourceAccountSummary expectedReport |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	Deposit register: 100  on: sourceAccount .
	Withdraw register: 50 on: sourceAccount.
	sourceAccount transfer: 20 to: destinationAccount .
	destinationAccount transfer: 30 to: sourceAccount.
	sourceAccountSummary := AccountSummary for: sourceAccount .
	expectedReport := OrderedCollection 
		with: 'Dep�sito por 100.'
		with: 'Extracci�n por 50.'
		with:'Salida por transferencia de 20.' 
		with:'Entrada por transferencia de 30.'
		with: 'Balance = 60'.
		
	self assert: expectedReport equals: sourceAccountSummary report .
	!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 16:06:35'!
test07anEmptyPortfolioReturnsCeroBalance
	|portfolio accountSummary expectedReport|
	
	portfolio := Portfolio new.
	accountSummary := AccountSummary for: portfolio.
	
	expectedReport := OrderedCollection with: 'Balance = 0'.
	
	self assert: expectedReport equals: accountSummary report.! !

!methodRemoval: ReportTest #test07 stamp: 'AC 10/23/2021 16:06:35'!
test07
	|portfolio accountSummary expectedReport|
	
	portfolio := Portfolio new.
	accountSummary := AccountSummary for: portfolio.
	
	expectedReport := OrderedCollection with: 'Balance = 0'.
	
	self assert: expectedReport equals: accountSummary report.!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 16:06:45'!
test01anAccountWithNoTransactionsReturnsCeroBalance
	|account accountSummary|
	
	account := ReceptiveAccount new.
	accountSummary := AccountSummary for: account.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary report.! !

!methodRemoval: ReportTest #test01anAccountWithNoTransactionsReturnsAccountSummaryWithCeroBalance stamp: 'AC 10/23/2021 16:06:45'!
test01anAccountWithNoTransactionsReturnsAccountSummaryWithCeroBalance
	|account accountSummary|
	
	account := ReceptiveAccount new.
	accountSummary := AccountSummary for: account.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary report.!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 16:06:58'!
test02anAccountWithOneDepositReturnsThatTransactionAndItsBalance

	|account accountSummary expectedReport|
	
	account := ReceptiveAccount new.
	Deposit register:100 on:account .
	accountSummary := AccountSummary for: account.
	expectedReport := OrderedCollection with:'Dep�sito por 100.' with: 'Balance = 100'.
		
	self assert: expectedReport equals: accountSummary report.
	! !

!methodRemoval: ReportTest #test02anAccountWithOneDepositReturnsAccountSummaryWithThatTransactionAndItsBalance stamp: 'AC 10/23/2021 16:06:58'!
test02anAccountWithOneDepositReturnsAccountSummaryWithThatTransactionAndItsBalance

	|account accountSummary expectedReport|
	
	account := ReceptiveAccount new.
	Deposit register:100 on:account .
	accountSummary := AccountSummary for: account.
	expectedReport := OrderedCollection with:'Dep�sito por 100.' with: 'Balance = 100'.
		
	self assert: expectedReport equals: accountSummary report.
	!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 16:07:05'!
test03anAccountWithOneWithdrawReturnsThatTransactionAndItsBalance

	|account accountSummary expectedReport|
	
	account := ReceptiveAccount new.
	Withdraw register:100 on:account.
	accountSummary := AccountSummary for: account.
	expectedReport := OrderedCollection with:'Extracci�n por 100.' with: 'Balance = -100'.
		
	self assert: expectedReport equals: accountSummary report.
	! !

!methodRemoval: ReportTest #test03anAccountWithOneWithdrawReturnsAccountSummaryWithThatTransactionAndItsBalance stamp: 'AC 10/23/2021 16:07:05'!
test03anAccountWithOneWithdrawReturnsAccountSummaryWithThatTransactionAndItsBalance

	|account accountSummary expectedReport|
	
	account := ReceptiveAccount new.
	Withdraw register:100 on:account.
	accountSummary := AccountSummary for: account.
	expectedReport := OrderedCollection with:'Extracci�n por 100.' with: 'Balance = -100'.
		
	self assert: expectedReport equals: accountSummary report.
	!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 16:07:15'!
test04anSourceAccountWithOneTransferOutReturnsThatTransferAndItsBalance

	|sourceAccount destinationAccount sourceAccountSummary expectedReport|
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	sourceAccount transfer: 100 to: destinationAccount .
	sourceAccountSummary := AccountSummary for: sourceAccount.
	expectedReport := OrderedCollection with:'Salida por transferencia de 100.' with: 'Balance = -100'.
		
	self assert: expectedReport equals: sourceAccountSummary report.
	! !

!methodRemoval: ReportTest #test04anSourceAccountWithOneTransferOutReturnsAccountSummaryWithThatTransferAndItsBalance stamp: 'AC 10/23/2021 16:07:15'!
test04anSourceAccountWithOneTransferOutReturnsAccountSummaryWithThatTransferAndItsBalance

	|sourceAccount destinationAccount sourceAccountSummary expectedReport|
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	sourceAccount transfer: 100 to: destinationAccount .
	sourceAccountSummary := AccountSummary for: sourceAccount.
	expectedReport := OrderedCollection with:'Salida por transferencia de 100.' with: 'Balance = -100'.
		
	self assert: expectedReport equals: sourceAccountSummary report.
	!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 16:07:26'!
test05anDestinationAccountWithOneTransferInReturnsThatTransferAndItsBalance

	|sourceAccount destinationAccount destinationAccountSummary expectedReport |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	sourceAccount transfer: 100 to: destinationAccount .
	destinationAccountSummary := AccountSummary for: destinationAccount.
	expectedReport := OrderedCollection with:'Entrada por transferencia de 100.' with: 'Balance = 100'.
		
	self assert: (expectedReport ) equals: destinationAccountSummary report.
	! !

!methodRemoval: ReportTest #test05anDestinationAccountWithOneTransferInReturnsAccountSummaryWithThatTransferAndItsBalance stamp: 'AC 10/23/2021 16:07:26'!
test05anDestinationAccountWithOneTransferInReturnsAccountSummaryWithThatTransferAndItsBalance

	|sourceAccount destinationAccount destinationAccountSummary expectedReport |
	
	sourceAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	sourceAccount transfer: 100 to: destinationAccount .
	destinationAccountSummary := AccountSummary for: destinationAccount.
	expectedReport := OrderedCollection with:'Entrada por transferencia de 100.' with: 'Balance = 100'.
		
	self assert: (expectedReport ) equals: destinationAccountSummary report.
	!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 16:09:27'!
test08aPortfolioWithOneAccountReturnsThatAccountsAccountSummary
	|portfolio account  accountSummary expectedReport|
		
	account := ReceptiveAccount new.
	Deposit register: 100  on: account .
	Withdraw register: 50 on: account.
	expectedReport := OrderedCollection 
		with:'Dep�sito por 100.' 
		with: 'Extracci�n por 50.'
		with: 'Balance = 50'.
	portfolio := Portfolio with: account.
	accountSummary := AccountSummary for: portfolio.
		
	self assert: expectedReport equals: accountSummary report .! !

!methodRemoval: ReportTest #test08 stamp: 'AC 10/23/2021 16:09:27'!
test08
	|portfolio account  accountSummary expectedReport|
		
	account := ReceptiveAccount new.
	Deposit register: 100  on: account .
	Withdraw register: 50 on: account.
	expectedReport := OrderedCollection 
		with:'Dep�sito por 100.' 
		with: 'Extracci�n por 50.'
		with: 'Balance = 50'.
	portfolio := Portfolio with: account.
	accountSummary := AccountSummary for: portfolio.
		
	self assert: expectedReport equals: accountSummary report .!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 16:10:48'!
test09aPortfolioWithTwoAccountsReturnsAllTransactionsAndTheCombinedBalance
	|portfolio account1 account2 portfolioSummary expectedReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100  on: account1 .
	account1 transfer: 20 to: account2 .
	account2 transfer: 30 to: account1.
	portfolio := Portfolio with: account1.
	portfolio add: account2.
	
	portfolioSummary := AccountSummary for: portfolio .
	expectedReport := OrderedCollection 
		with: 'Dep�sito por 100.'
		with:'Salida por transferencia de 20.' 
		with:'Entrada por transferencia de 30.'
		with:'Entrada por transferencia de 20.'
		with:'Salida por transferencia de 30.' 
		with: 'Balance = 100'.
		
	self assert: expectedReport equals: portfolioSummary report .! !

!methodRemoval: ReportTest #test09 stamp: 'AC 10/23/2021 16:10:48'!
test09
	|portfolio account1 account2 portfolioSummary expectedReport |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100  on: account1 .
	account1 transfer: 20 to: account2 .
	account2 transfer: 30 to: account1.
	portfolio := Portfolio with: account1.
	portfolio add: account2.
	
	portfolioSummary := AccountSummary for: portfolio .
	expectedReport := OrderedCollection 
		with: 'Dep�sito por 100.'
		with:'Salida por transferencia de 20.' 
		with:'Entrada por transferencia de 30.'
		with:'Entrada por transferencia de 20.'
		with:'Salida por transferencia de 30.' 
		with: 'Balance = 100'.
		
	self assert: expectedReport equals: portfolioSummary report .!

TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTest category: 'Portfolio-Solucion' stamp: 'AC 10/23/2021 16:11:52'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountSummaryTest stamp: 'AC 10/23/2021 16:12:00'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRenamed: #ReportTest as: #AccountSummaryTest stamp: 'AC 10/23/2021 16:12:09'!
Smalltalk renameClassNamed: #ReportTest as: #AccountSummaryTest!

!classRenamed: #AccountSummaryTest as: #ReportTest stamp: 'AC 10/23/2021 16:12:32'!
Smalltalk renameClassNamed: #AccountSummaryTest as: #ReportTest!
!ReportTest methodsFor: 'transferNetTest' stamp: 'AC 10/23/2021 16:16:22'!
test01anAccountWithoutTransactionsReturnCero
	|account|
	
	account := ReceptiveAccount new.
	
	self assert: 0 equals: (TransferNet for: account).! !

!methodRemoval: ReportTest #test10 stamp: 'AC 10/23/2021 16:16:22'!
test10
	|account|
	
	account := ReceptiveAccount new.
	
	self assert: 0 equals: (TransferNet for: account).!
!ReportTest methodsFor: 'accountSummaryTest' stamp: 'AC 10/23/2021 16:16:32'!
test01anAccountWithoutTransactionsReturnsCeroBalance
	|account accountSummary|
	
	account := ReceptiveAccount new.
	accountSummary := AccountSummary for: account.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary report.! !

!methodRemoval: ReportTest #test01anAccountWithNoTransactionsReturnsCeroBalance stamp: 'AC 10/23/2021 16:16:32'!
test01anAccountWithNoTransactionsReturnsCeroBalance
	|account accountSummary|
	
	account := ReceptiveAccount new.
	accountSummary := AccountSummary for: account.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: accountSummary report.!
!ReportTest methodsFor: 'transferNetTest' stamp: 'AC 10/23/2021 16:18:14'!
test02anAccountWithOneTransferInReturnsIsTransferValue
	|account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer transfer: 100 from: account1  to: account2.
	 
	self assert: 100 equals: (TransferNet for: account2).! !

!methodRemoval: ReportTest #test11 stamp: 'AC 10/23/2021 16:18:14'!
test11
	|account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer transfer: 100 from: account1  to: account2.
	 
	self assert: 100 equals: (TransferNet for: account2).!
!ReportTest methodsFor: 'transferNetTest' stamp: 'AC 10/23/2021 16:18:51'!
test03anAccountWithOneTransferOutReturnIsTransferNetValue
	|account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer transfer: 100 from: account2  to: account1.
	 
	self assert: -100 equals: (TransferNet for: account2).! !

!methodRemoval: ReportTest #test12 stamp: 'AC 10/23/2021 16:18:51'!
test12
	|account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer transfer: 100 from: account2  to: account1.
	 
	self assert: -100 equals: (TransferNet for: account2).!
!ReportTest methodsFor: 'transferNetTest' stamp: 'AC 10/23/2021 16:19:06'!
test02anAccountWithOneTransferInReturnsIsTransferNetValue
	|account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer transfer: 100 from: account1  to: account2.
	 
	self assert: 100 equals: (TransferNet for: account2).! !

!methodRemoval: ReportTest #test02anAccountWithOneTransferInReturnsIsTransferValue stamp: 'AC 10/23/2021 16:19:06'!
test02anAccountWithOneTransferInReturnsIsTransferValue
	|account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer transfer: 100 from: account1  to: account2.
	 
	self assert: 100 equals: (TransferNet for: account2).!
!ReportTest methodsFor: 'transferNetTest' stamp: 'AC 10/23/2021 16:19:37'!
test03anAccountWithOneTransferOutReturnNegativeTransferNet
	|account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer transfer: 100 from: account2  to: account1.
	 
	self assert: -100 equals: (TransferNet for: account2).! !

!methodRemoval: ReportTest #test03anAccountWithOneTransferOutReturnIsTransferNetValue stamp: 'AC 10/23/2021 16:19:37'!
test03anAccountWithOneTransferOutReturnIsTransferNetValue
	|account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer transfer: 100 from: account2  to: account1.
	 
	self assert: -100 equals: (TransferNet for: account2).!
!ReportTest methodsFor: 'transferNetTest' stamp: 'AC 10/23/2021 16:19:51'!
test02anAccountWithOneTransferInReturnsPositiveTransferNet
	|account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer transfer: 100 from: account1  to: account2.
	 
	self assert: 100 equals: (TransferNet for: account2).! !

!methodRemoval: ReportTest #test02anAccountWithOneTransferInReturnsIsTransferNetValue stamp: 'AC 10/23/2021 16:19:51'!
test02anAccountWithOneTransferInReturnsIsTransferNetValue
	|account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer transfer: 100 from: account1  to: account2.
	 
	self assert: 100 equals: (TransferNet for: account2).!
!ReportTest methodsFor: 'transferNetTest' stamp: 'AC 10/23/2021 16:20:52'!
test04depositAndWithdrawShouldntAffectAccountTransferNet
	
	|account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer transfer: 100 from: account2  to: account1.
	Deposit register:1000  on: account1.
	Withdraw register: 500 on: account1.
	 
	self assert: 100 equals: (TransferNet for: account1).! !

!methodRemoval: ReportTest #test13 stamp: 'AC 10/23/2021 16:20:52'!
test13
	
	|account1 account2|
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer transfer: 100 from: account2  to: account1.
	Deposit register:1000  on: account1.
	Withdraw register: 500 on: account1.
	 
	self assert: 100 equals: (TransferNet for: account1).!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #ReportTest #test01anAccountWithoutTransactionsReturnCero stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #ReportTest #test01anAccountWithoutTransactionsReturnsCeroBalance stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #ReportTest #test02anAccountWithOneDepositReturnsThatTransactionAndItsBalance stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #ReportTest #test02anAccountWithOneTransferInReturnsPositiveTransferNet stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #ReportTest #test03anAccountWithOneTransferOutReturnNegativeTransferNet stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #ReportTest #test03anAccountWithOneWithdrawReturnsThatTransactionAndItsBalance stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #ReportTest #test04anSourceAccountWithOneTransferOutReturnsThatTransferAndItsBalance stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #ReportTest #test04depositAndWithdrawShouldntAffectAccountTransferNet stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #ReportTest #test05anDestinationAccountWithOneTransferInReturnsThatTransferAndItsBalance stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #ReportTest #test06anAccountWithAllFourTypeOfTransactionsReturnsAllFourTransactionAndItsBalance stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #ReportTest #test07anEmptyPortfolioReturnsCeroBalance stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #ReportTest #test08aPortfolioWithOneAccountReturnsThatAccountsAccountSummary stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #ReportTest #test09aPortfolioWithTwoAccountsReturnsAllTransactionsAndTheCombinedBalance stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 16:20:55'!
PASSED!

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 16:20:55'!
PASSED!


----STARTUP---- (23 October 2021 23:06:34) as /home/alex/Downloads/linux64-Ejercitacion/CuisUniversity-4913.image!


!classRemoval: #TreeStructure stamp: 'AC 10/23/2021 23:06:40'!
Object subclass: #TreeStructure
	instanceVariableNames: 'account report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Transfer stamp: 'AC 10/23/2021 23:06:40'!
Object subclass: #Transfer
	instanceVariableNames: 'value source destination'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferFromSource stamp: 'AC 10/23/2021 23:06:40'!
Withdraw subclass: #TransferFromSource
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Withdraw stamp: 'AC 10/23/2021 23:06:40'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferToDestination stamp: 'AC 10/23/2021 23:06:41'!
Deposit subclass: #TransferToDestination
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Deposit stamp: 'AC 10/23/2021 23:06:41'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransaction stamp: 'AC 10/23/2021 23:06:41'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferNet stamp: 'AC 10/23/2021 23:06:41'!
AccountReporter subclass: #TransferNet
	instanceVariableNames: 'account transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountSummary stamp: 'AC 10/23/2021 23:06:41'!
AccountReporter subclass: #AccountSummary
	instanceVariableNames: 'report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountReporter stamp: 'AC 10/23/2021 23:06:42'!
Object subclass: #AccountReporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'AC 10/23/2021 23:06:42'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions tranfers name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Portfolio stamp: 'AC 10/23/2021 23:06:42'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Account stamp: 'AC 10/23/2021 23:06:42'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TreeStructureTest stamp: 'AC 10/23/2021 23:06:43'!
TestCase subclass: #TreeStructureTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferTest stamp: 'AC 10/23/2021 23:06:43'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReportTest stamp: 'AC 10/23/2021 23:06:43'!
TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccountTest stamp: 'AC 10/23/2021 23:06:43'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTest stamp: 'AC 10/23/2021 23:06:44'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----End fileIn of /home/alex/Downloads/linux64-Ejercitacion/Portfolio-Solucion.st----!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #ReportTest #test01anAccountWithoutTransactionsReturnCero stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #ReportTest #test01anAccountWithoutTransactionsReturnsCeroBalance stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #ReportTest #test02anAccountWithOneDepositReturnsThatTransactionAndItsBalance stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #ReportTest #test02anAccountWithOneTransferInReturnsPositiveTransferNet stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #ReportTest #test03anAccountWithOneTransferOutReturnNegativeTransferNet stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #ReportTest #test03anAccountWithOneWithdrawReturnsThatTransactionAndItsBalance stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #ReportTest #test04anSourceAccountWithOneTransferOutReturnsThatTransferAndItsBalance stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #ReportTest #test04depositAndWithdrawShouldntAffectAccountTransferNet stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #ReportTest #test05anDestinationAccountWithOneTransferInReturnsThatTransferAndItsBalance stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #ReportTest #test06anAccountWithAllFourTypeOfTransactionsReturnsAllFourTransactionAndItsBalance stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #ReportTest #test07anEmptyPortfolioReturnsCeroBalance stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #ReportTest #test08aPortfolioWithOneAccountReturnsThatAccountsAccountSummary stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #ReportTest #test09aPortfolioWithTwoAccountsReturnsAllTransactionsAndTheCombinedBalance stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 23:07:04'!
PASSED!

TestCase subclass: #TreeStructureTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TreeStructureTest category: 'Portfolio-Solucion' stamp: 'AC 10/23/2021 23:07:35'!
TestCase subclass: #TreeStructureTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TreeStructureTest methodsFor: 'nil' stamp: 'AC 10/23/2021 23:07:54'!
test01
	|portfolio treeStructure expectedReport|
	
	portfolio :=  Portfolio named: 'Portfolio' .
	treeStructure := treeStructure for: portfolio .
	expectedReport := OrderedCollection with: 'Portfolio'.
	
	self assert: expectedReport equals: treeStructure report.! !

!testRun: #TreeStructureTest #test01 stamp: 'AC 10/23/2021 23:08:04'!
ERROR!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 23:08:29'!
named: aString 
	self shouldBeImplemented.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 23:08:57' prior: 50922947!
named: aName
	^self new initializeWithName: aName! !

!testRun: #TreeStructureTest #test01 stamp: 'AC 10/23/2021 23:08:58'!
ERROR!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'AC 10/23/2021 23:09:04'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'initialization' stamp: 'AC 10/23/2021 23:09:04'!
initializeWithName: aName 
	self shouldBeImplemented.
	name := aName.! !
!Portfolio methodsFor: 'initialization' stamp: 'AC 10/23/2021 23:09:24' prior: 50922967!
initializeWithName: aName 
	name := aName.
	self initialize .! !

!testRun: #TreeStructureTest #test01 stamp: 'AC 10/23/2021 23:09:35'!
ERROR!
!Object methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 23:09:55'!
for: aPortfolio 
	self shouldBeImplemented.! !

!testRun: #TreeStructureTest #test01 stamp: 'AC 10/23/2021 23:10:08'!
ERROR!

!testRun: #TreeStructureTest #test01 stamp: 'AC 10/23/2021 23:10:08'!
ERROR!

!methodRemoval: Object #for: stamp: 'AC 10/23/2021 23:11:14'!
for: aPortfolio 
	self shouldBeImplemented.!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #ReportTest #test01anAccountWithoutTransactionsReturnCero stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #ReportTest #test01anAccountWithoutTransactionsReturnsCeroBalance stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #ReportTest #test02anAccountWithOneDepositReturnsThatTransactionAndItsBalance stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #ReportTest #test02anAccountWithOneTransferInReturnsPositiveTransferNet stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #ReportTest #test03anAccountWithOneTransferOutReturnNegativeTransferNet stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #ReportTest #test03anAccountWithOneWithdrawReturnsThatTransactionAndItsBalance stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #ReportTest #test04anSourceAccountWithOneTransferOutReturnsThatTransferAndItsBalance stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #ReportTest #test04depositAndWithdrawShouldntAffectAccountTransferNet stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #ReportTest #test05anDestinationAccountWithOneTransferInReturnsThatTransferAndItsBalance stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #ReportTest #test06anAccountWithAllFourTypeOfTransactionsReturnsAllFourTransactionAndItsBalance stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #ReportTest #test07anEmptyPortfolioReturnsCeroBalance stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #ReportTest #test08aPortfolioWithOneAccountReturnsThatAccountsAccountSummary stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #ReportTest #test09aPortfolioWithTwoAccountsReturnsAllTransactionsAndTheCombinedBalance stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 23:11:28'!
PASSED!

!testRun: #TreeStructureTest #test01 stamp: 'AC 10/23/2021 23:11:28'!
ERROR!

!testRun: #TreeStructureTest #test01 stamp: 'AC 10/23/2021 23:11:28'!
ERROR!

Object subclass: #TreeStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TreeStructure category: 'Portfolio-Solucion' stamp: 'AC 10/23/2021 23:11:52'!
Object subclass: #TreeStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #TreeStructureTest #test01 stamp: 'AC 10/23/2021 23:11:54'!
ERROR!

!testRun: #TreeStructureTest #test01 stamp: 'AC 10/23/2021 23:11:54'!
ERROR!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 23:12:04' prior: 50922933!
test01
	|portfolio treeStructure expectedReport|
	
	portfolio :=  Portfolio named: 'Portfolio' .
	treeStructure := TreeStructure for: portfolio .
	expectedReport := OrderedCollection with: 'Portfolio'.
	
	self assert: expectedReport equals: treeStructure report.! !

!testRun: #TreeStructureTest #test01 stamp: 'AC 10/23/2021 23:12:14'!
ERROR!
!TreeStructure class methodsFor: 'instance creation' stamp: 'AC 10/23/2021 23:12:21'!
for: aPortfolio 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aPortfolio ! !
!TreeStructure class methodsFor: 'instance creation' stamp: 'AC 10/23/2021 23:12:28' prior: 50923181!
for: anAccount
	^self new initializeWith: anAccount .! !

!testRun: #TreeStructureTest #test01 stamp: 'AC 10/23/2021 23:12:30'!
ERROR!

!classDefinition: #TreeStructure category: 'Portfolio-Solucion' stamp: 'AC 10/23/2021 23:12:49'!
Object subclass: #TreeStructure
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TreeStructure methodsFor: 'category-name' stamp: 'AC 10/23/2021 23:12:49'!
initializeWith: anAccount 
	self shouldBeImplemented.
	account := anAccount.! !
!TreeStructure methodsFor: 'category-name' stamp: 'AC 10/23/2021 23:13:06' prior: 50923204!
initializeWith: aPortfolio
	^'Portfolio'! !

!testRun: #TreeStructureTest #test01 stamp: 'AC 10/23/2021 23:13:07'!
ERROR!

!classDefinition: #TreeStructure category: 'Portfolio-Solucion' stamp: 'AC 10/23/2021 23:13:41'!
Object subclass: #TreeStructure
	instanceVariableNames: 'account report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TreeStructure methodsFor: 'category-name' stamp: 'AC 10/23/2021 23:13:39' prior: 50923210!
initializeWith: aPortfolio
	report := OrderedCollection with: 'Portfolio'! !

!testRun: #TreeStructureTest #test01 stamp: 'AC 10/23/2021 23:13:48'!
ERROR!

!testRun: #TreeStructureTest #test01 stamp: 'AC 10/23/2021 23:13:48'!
ERROR!
!TreeStructure methodsFor: 'category-name' stamp: 'AC 10/23/2021 23:13:52'!
report
	self shouldBeImplemented.
	^report! !
!TreeStructure methodsFor: 'category-name' stamp: 'AC 10/23/2021 23:13:55' prior: 50923235!
report
	^report! !

!testRun: #TreeStructureTest #test01 stamp: 'AC 10/23/2021 23:13:57'!
PASSED!

!testRun: #TreeStructureTest #test01 stamp: 'AC 10/23/2021 23:13:58'!
PASSED!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 23:14:06'!
test02
	|portfolio account treeStructure expectedReport|
	
	portfolio :=  Portfolio named: 'Portfolio' .
	account := ReceptiveAccount named: 'Account'.
	portfolio add: account.
	treeStructure := TreeStructure for: portfolio .
	expectedReport := OrderedCollection 
		with: 'Portfolio'
		with: '   Account'.
	
	self assert: expectedReport equals: treeStructure report.! !

!testRun: #TreeStructureTest #test02 stamp: 'AC 10/23/2021 23:14:08'!
ERROR!
!ReceptiveAccount class methodsFor: 'instance creation' stamp: 'AC 10/23/2021 23:14:17'!
named: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString ! !
!ReceptiveAccount class methodsFor: 'instance creation' stamp: 'AC 10/23/2021 23:14:29' prior: 50923266!
named: aName 
	
	^self new initializeWithName: aName! !

!testRun: #TreeStructureTest #test02 stamp: 'AC 10/23/2021 23:14:31'!
ERROR!

!testRun: #TreeStructureTest #test01 stamp: 'AC 10/23/2021 23:15:07'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'AC 10/23/2021 23:15:07'!
ERROR!

!testRun: #TreeStructureTest #test02 stamp: 'AC 10/23/2021 23:15:07'!
ERROR!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'AC 10/23/2021 23:15:17'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions tranfers name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'AC 10/23/2021 23:15:17'!
initializeWithName: aName 
	self shouldBeImplemented.
	name := aName.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'AC 10/23/2021 23:15:20' prior: 50923298!
initializeWithName: aName 
	name := aName.
	self initialize.! !

!testRun: #TreeStructureTest #test02 stamp: 'AC 10/23/2021 23:15:23'!
FAILURE!
!TreeStructure methodsFor: 'category-name' stamp: 'AC 10/23/2021 23:16:46' prior: 50923225!
initializeWith: aPortfolio
	report := OrderedCollection with: 'Portfolio'.
	aPortfolio accountsIsEmpty not ifTrue:[report add: '   ', 'Account'
	]! !

!testRun: #TreeStructureTest #test01 stamp: 'AC 10/23/2021 23:16:48'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'AC 10/23/2021 23:16:48'!
PASSED!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 23:17:00'!
test03
	|portfolio account1 account2 treeStructure expectedReport|
	
	portfolio :=  Portfolio named: 'Portfolio' .
	account1 := ReceptiveAccount named: 'Account1'.
	account2 := ReceptiveAccount named: 'Account2'.
	
	portfolio add: account1.
	portfolio add: account2.
	treeStructure := TreeStructure for: portfolio .
	expectedReport := OrderedCollection 
		with: 'Portfolio'
		with: '   Account1'
		with: '   Account2'.
	
	self assert: expectedReport equals: treeStructure report.! !

!testRun: #TreeStructureTest #test03 stamp: 'AC 10/23/2021 23:17:01'!
FAILURE!
!TreeStructure methodsFor: 'category-name' stamp: 'AC 10/23/2021 23:18:52' prior: 50923312!
initializeWith: aPortfolio
	report := OrderedCollection new.
	aPortfolio treeStructure: self.! !

!testRun: #TreeStructureTest #test01 stamp: 'AC 10/23/2021 23:18:57'!
ERROR!

!testRun: #TreeStructureTest #test02 stamp: 'AC 10/23/2021 23:18:57'!
ERROR!

!testRun: #TreeStructureTest #test03 stamp: 'AC 10/23/2021 23:18:57'!
ERROR!

!testRun: #TreeStructureTest #test01 stamp: 'AC 10/23/2021 23:19:02'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 23:19:07'!
treeStructure: aTreeStructure 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 23:20:02' prior: 50923362!
treeStructure: aTreeStructure 
	aTreeStructure printPortfolio: self.
	accounts do: [:anAccount |anAccount treeStructure: aTreeStructure]! !

!testRun: #TreeStructureTest #test01 stamp: 'AC 10/23/2021 23:20:05'!
ERROR!
!TreeStructure methodsFor: 'category-name' stamp: 'AC 10/23/2021 23:20:12'!
printPortfolio: aPortfolio 
	self shouldBeImplemented.! !
!TreeStructure methodsFor: 'category-name' stamp: 'AC 10/23/2021 23:20:47' prior: 50923377!
printPortfolio: aPortfolio 
	report add: aPortfolio name.! !

!testRun: #TreeStructureTest #test01 stamp: 'AC 10/23/2021 23:20:48'!
FAILURE!
!Portfolio methodsFor: 'accounts management' stamp: 'AC 10/23/2021 23:20:59' overrides: 16882612!
name
	^name.! !

!testRun: #TreeStructureTest #test01 stamp: 'AC 10/23/2021 23:21:01'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'AC 10/23/2021 23:21:01'!
ERROR!

!testRun: #TreeStructureTest #test03 stamp: 'AC 10/23/2021 23:21:01'!
ERROR!

!testRun: #TreeStructureTest #test02 stamp: 'AC 10/23/2021 23:21:04'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 23:21:09'!
treeStructure: aTreeStructure 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 23:21:20' prior: 50923403!
treeStructure: aTreeStructure 
	
	aTreeStructure printReceptiveAccount: self.! !

!testRun: #TreeStructureTest #test02 stamp: 'AC 10/23/2021 23:21:22'!
ERROR!
!TreeStructure methodsFor: 'category-name' stamp: 'AC 10/23/2021 23:21:29'!
printReceptiveAccount: aReceptiveAccount 
	self shouldBeImplemented.! !
!TreeStructure methodsFor: 'category-name' stamp: 'AC 10/23/2021 23:22:00' prior: 50923417!
printReceptiveAccount: aReceptiveAccount 
	report add: '   ', aReceptiveAccount name.! !

!testRun: #TreeStructureTest #test02 stamp: 'AC 10/23/2021 23:22:01'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AC 10/23/2021 23:22:24' overrides: 16882612!
name
	^name! !

!testRun: #TreeStructureTest #test01 stamp: 'AC 10/23/2021 23:22:26'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'AC 10/23/2021 23:22:26'!
PASSED!

!testRun: #TreeStructureTest #test03 stamp: 'AC 10/23/2021 23:22:26'!
PASSED!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 23:22:44'!
test04
	|portfolio1 account portfolio2  treeStructure expectedReport|
	
	portfolio1 :=  Portfolio named: 'PortfolioFather' .
	portfolio2 := Portfolio named: 'PortfolioSon'.
	account := ReceptiveAccount named: 'Account'.
	portfolio1 add: account.
	portfolio1 add: portfolio2 .
	
	treeStructure := TreeStructure for: portfolio1 .
	expectedReport := OrderedCollection 
		with: 'PortfolioFather'
		with: '   Account'
		with: '   PortfolioSon'.
	
	self assert: expectedReport equals: treeStructure report.! !

!testRun: #TreeStructureTest #test04 stamp: 'AC 10/23/2021 23:22:53'!
FAILURE!

!testRun: #TreeStructureTest #test04 stamp: 'AC 10/23/2021 23:22:53'!
FAILURE!

treeStructure report!

'a' * 2!

'a' * '4'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 23:32:39'!
treeStructure: aTreeStructure withIndent: anIndent
	aTreeStructure printPortfolio: self.
	accounts do: [:anAccount |anAccount treeStructure: aTreeStructure withIndent: anIndent, '   ']! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 23:33:32' prior: 50923468!
treeStructure: aTreeStructure withIndent: anIndent
	aTreeStructure printPortfolio: self withIndent: anIndent.
	accounts do: [:anAccount |anAccount treeStructure: aTreeStructure withIndent: anIndent, '   ']! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 23:33:50'!
treeStructure: aTreeStructure withIndent: anIndent
	
	aTreeStructure printReceptiveAccount: self withIndent: anIndent.! !

!methodRemoval: ReceptiveAccount #treeStructure: stamp: 'AC 10/23/2021 23:33:55'!
treeStructure: aTreeStructure 
	
	aTreeStructure printReceptiveAccount: self.!

!methodRemoval: Portfolio #treeStructure: stamp: 'AC 10/23/2021 23:33:58'!
treeStructure: aTreeStructure 
	aTreeStructure printPortfolio: self.
	accounts do: [:anAccount |anAccount treeStructure: aTreeStructure]!
!TreeStructure methodsFor: 'category-name' stamp: 'AC 10/23/2021 23:34:24'!
printPortfolio: aPortfolio withIndent: anIndent
	report add: anIndent, aPortfolio name.! !

!methodRemoval: TreeStructure #printPortfolio: stamp: 'AC 10/23/2021 23:34:26'!
printPortfolio: aPortfolio 
	report add: aPortfolio name.!
!TreeStructure methodsFor: 'category-name' stamp: 'AC 10/23/2021 23:34:39'!
printReceptiveAccount: aReceptiveAccount withIndent: anIndent
	report add: anIndent, aReceptiveAccount name.! !

!methodRemoval: TreeStructure #printReceptiveAccount: stamp: 'AC 10/23/2021 23:34:41'!
printReceptiveAccount: aReceptiveAccount 
	report add: '   ', aReceptiveAccount name.!
!TreeStructure methodsFor: 'category-name' stamp: 'AC 10/23/2021 23:34:52' prior: 50923346!
initializeWith: aPortfolio
	report := OrderedCollection new.
	aPortfolio treeStructure: self withIndent: ''.! !

!testRun: #TreeStructureTest #test01 stamp: 'AC 10/23/2021 23:34:54'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'AC 10/23/2021 23:34:54'!
PASSED!

!testRun: #TreeStructureTest #test03 stamp: 'AC 10/23/2021 23:34:54'!
PASSED!

!testRun: #TreeStructureTest #test04 stamp: 'AC 10/23/2021 23:34:54'!
PASSED!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 23:36:05'!
test05
	|portfolio1 account1 portfolio2 account2  treeStructure expectedReport|
	
	portfolio1 :=  Portfolio named: 'PortfolioFather' .
	portfolio2 := Portfolio named: 'PortfolioSon'.
	account1 := ReceptiveAccount named: 'Account1'.
	account2 := ReceptiveAccount named: 'Account2'.
	portfolio1 add: account1.
	portfolio1 add: portfolio2.
	portfolio2 add: account2.
	
	treeStructure := TreeStructure for: portfolio1 .
	expectedReport := OrderedCollection 
		with: 'PortfolioFather'
		with: '   Account1'
		with: '   PortfolioSon'
		with: '      Account2'.
	
	self assert: expectedReport equals: treeStructure report.! !

!testRun: #TreeStructureTest #test05 stamp: 'AC 10/23/2021 23:36:07'!
PASSED!

!testRun: #TreeStructureTest #test01 stamp: 'AC 10/23/2021 23:36:07'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'AC 10/23/2021 23:36:07'!
PASSED!

!testRun: #TreeStructureTest #test03 stamp: 'AC 10/23/2021 23:36:07'!
PASSED!

!testRun: #TreeStructureTest #test04 stamp: 'AC 10/23/2021 23:36:07'!
PASSED!

!testRun: #TreeStructureTest #test05 stamp: 'AC 10/23/2021 23:36:07'!
PASSED!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 23:36:16'!
test06
	|portfolio1 account1 portfolio2 account2  treeStructure expectedReport|
	
	portfolio1 :=  Portfolio named: 'PortfolioFather' .
	portfolio2 := Portfolio named: 'PortfolioSon'.
	account1 := ReceptiveAccount named: 'Account1'.
	account2 := ReceptiveAccount named: 'Account2'.
	portfolio2 add: account2.
	portfolio1 add: portfolio2.
	portfolio1 add: account1.
	
	
	treeStructure := TreeStructure for: portfolio1 .
	expectedReport := OrderedCollection 
		with: 'PortfolioFather'
		with: '   PortfolioSon'
		with: '      Account2'
		with: '   Account1'.
	
	self assert: expectedReport equals: treeStructure report.! !

!testRun: #TreeStructureTest #test06 stamp: 'AC 10/23/2021 23:36:17'!
PASSED!

!testRun: #TreeStructureTest #test01 stamp: 'AC 10/23/2021 23:36:17'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'AC 10/23/2021 23:36:17'!
PASSED!

!testRun: #TreeStructureTest #test03 stamp: 'AC 10/23/2021 23:36:17'!
PASSED!

!testRun: #TreeStructureTest #test04 stamp: 'AC 10/23/2021 23:36:17'!
PASSED!

!testRun: #TreeStructureTest #test05 stamp: 'AC 10/23/2021 23:36:17'!
PASSED!

!testRun: #TreeStructureTest #test06 stamp: 'AC 10/23/2021 23:36:17'!
PASSED!
!TreeStructureTest methodsFor: 'as yet unclassified' stamp: 'AC 10/23/2021 23:36:24'!
test07
	|portfolio1  portfolio2 portfolio3 account1 account2 account3 treeStructure expectedReport|
	
	portfolio1 :=  Portfolio named: 'PortfolioFather' .
	portfolio2 := Portfolio named: 'PortfolioSon'.
	portfolio3 := Portfolio named: 'PortfolioGrandson'.
	account1 := ReceptiveAccount named: 'Account1'.
	account2 := ReceptiveAccount named: 'Account2'.
	account3 := ReceptiveAccount named: 'Account3'.
	
	portfolio1 add: portfolio2.
	portfolio1 add: account3.
	portfolio2 add: portfolio3.
	portfolio2 add: account1.
	portfolio2 add: account2.
	
	
	treeStructure := TreeStructure for: portfolio1 .
	expectedReport := OrderedCollection 
		with: 'PortfolioFather'
		with: '   PortfolioSon'
		with: '      PortfolioGrandson'
		with: '      Account1'
		with: '      Account2' 
		with: '   Account3'
		.
	
	self assert: expectedReport equals: treeStructure report.! !

!testRun: #TreeStructureTest #test07 stamp: 'AC 10/23/2021 23:36:25'!
PASSED!

!testRun: #TreeStructureTest #test01 stamp: 'AC 10/23/2021 23:36:25'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'AC 10/23/2021 23:36:25'!
PASSED!

!testRun: #TreeStructureTest #test03 stamp: 'AC 10/23/2021 23:36:25'!
PASSED!

!testRun: #TreeStructureTest #test04 stamp: 'AC 10/23/2021 23:36:25'!
PASSED!

!testRun: #TreeStructureTest #test05 stamp: 'AC 10/23/2021 23:36:25'!
PASSED!

!testRun: #TreeStructureTest #test06 stamp: 'AC 10/23/2021 23:36:25'!
PASSED!

!testRun: #TreeStructureTest #test07 stamp: 'AC 10/23/2021 23:36:25'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #ReportTest #test01anAccountWithoutTransactionsReturnCero stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #ReportTest #test01anAccountWithoutTransactionsReturnsCeroBalance stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #ReportTest #test02anAccountWithOneDepositReturnsThatTransactionAndItsBalance stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #ReportTest #test02anAccountWithOneTransferInReturnsPositiveTransferNet stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #ReportTest #test03anAccountWithOneTransferOutReturnNegativeTransferNet stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #ReportTest #test03anAccountWithOneWithdrawReturnsThatTransactionAndItsBalance stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #ReportTest #test04anSourceAccountWithOneTransferOutReturnsThatTransferAndItsBalance stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #ReportTest #test04depositAndWithdrawShouldntAffectAccountTransferNet stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #ReportTest #test05anDestinationAccountWithOneTransferInReturnsThatTransferAndItsBalance stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #ReportTest #test06anAccountWithAllFourTypeOfTransactionsReturnsAllFourTransactionAndItsBalance stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #ReportTest #test07anEmptyPortfolioReturnsCeroBalance stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #ReportTest #test08aPortfolioWithOneAccountReturnsThatAccountsAccountSummary stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #ReportTest #test09aPortfolioWithTwoAccountsReturnsAllTransactionsAndTheCombinedBalance stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #TreeStructureTest #test01 stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #TreeStructureTest #test03 stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #TreeStructureTest #test04 stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #TreeStructureTest #test05 stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #TreeStructureTest #test06 stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

!testRun: #TreeStructureTest #test07 stamp: 'AC 10/23/2021 23:37:36'!
PASSED!

AccountReporter subclass: #TreeStructure
	instanceVariableNames: 'account report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TreeStructure category: 'Portfolio-Solucion' stamp: 'AC 10/23/2021 23:40:30'!
AccountReporter subclass: #TreeStructure
	instanceVariableNames: 'account report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #ReportTest #test01anAccountWithoutTransactionsReturnCero stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #ReportTest #test01anAccountWithoutTransactionsReturnsCeroBalance stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #ReportTest #test02anAccountWithOneDepositReturnsThatTransactionAndItsBalance stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #ReportTest #test02anAccountWithOneTransferInReturnsPositiveTransferNet stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #ReportTest #test03anAccountWithOneTransferOutReturnNegativeTransferNet stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #ReportTest #test03anAccountWithOneWithdrawReturnsThatTransactionAndItsBalance stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #ReportTest #test04anSourceAccountWithOneTransferOutReturnsThatTransferAndItsBalance stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #ReportTest #test04depositAndWithdrawShouldntAffectAccountTransferNet stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #ReportTest #test05anDestinationAccountWithOneTransferInReturnsThatTransferAndItsBalance stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #ReportTest #test06anAccountWithAllFourTypeOfTransactionsReturnsAllFourTransactionAndItsBalance stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #ReportTest #test07anEmptyPortfolioReturnsCeroBalance stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #ReportTest #test08aPortfolioWithOneAccountReturnsThatAccountsAccountSummary stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #ReportTest #test09aPortfolioWithTwoAccountsReturnsAllTransactionsAndTheCombinedBalance stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #TransferTest #test01canNotTransferZeroAsAmount stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #TransferTest #test02canNotTransferANegativeValueAsAmount stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #TransferTest #test03canNotTransferToSameAccount stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #TransferTest #test04aTransferMustAffectBothBalances stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #TransferTest #test05canNavigateThroughTransfer stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #TreeStructureTest #test01 stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #TreeStructureTest #test02 stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #TreeStructureTest #test03 stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #TreeStructureTest #test04 stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #TreeStructureTest #test05 stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #TreeStructureTest #test06 stamp: 'AC 10/23/2021 23:40:56'!
PASSED!

!testRun: #TreeStructureTest #test07 stamp: 'AC 10/23/2021 23:40:56'!
PASSED!