

----QUIT----(13 October 2021 15:20:10) CuisUniversity-4913.image priorSource: 14638157!

----STARTUP---- (13 October 2021 15:20:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4913.image!


----QUIT----(13 October 2021 15:20:10) CuisUniversity-4913.image priorSource: 18661767!

----STARTUP---- (13 October 2021 15:21:02) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4913.image!


----QUIT----(13 October 2021 15:21:02) CuisUniversity-4913.image priorSource: 18661997!

----QUIT----(13 October 2021 15:26:07) CuisUniversity-4913.image priorSource: 14638157!

----STARTUP---- (13 October 2021 15:26:08) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4913.image!


----QUIT----(13 October 2021 15:26:08) CuisUniversity-4913.image priorSource: 18661767!

----STARTUP---- (25 October 2021 20:49:39) as /home/goon/Desktop/inge1/new cuis/CuisUniversity-4913.image!


----End fileIn of /home/goon/Desktop/inge1/ejsCatedra/2021-2c/19-MarsRover-ElRegreso/MarsRover-WithHeading.st----!

Object subclass: #xx
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverRegreso'!

Object subclass: #Xx
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverRegreso'!

!classDefinition: #Xx category: 'MarsRoverRegreso' stamp: 'goc 10/25/2021 20:51:36'!
Object subclass: #Xx
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverRegreso'!

TestCase subclass: #TestsXx
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverRegreso'!

!classDefinition: #TestsXx category: 'MarsRoverRegreso' stamp: 'goc 10/25/2021 20:52:19'!
TestCase subclass: #TestsXx
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverRegreso'!
!TestsXx methodsFor: 'nil' stamp: 'goc 10/25/2021 20:52:43'!
test0

! !
!TestsXx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 20:56:52' prior: 50915357!
test0
	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: self north.
	
	
	
	self deny: (marsRover isAt: 1@2 heading: self north)
! !

TestCase subclass: #MarsRoverRegresoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverRegresoTest category: 'MarsRover-WithHeading' stamp: 'goc 10/25/2021 20:57:53'!
TestCase subclass: #MarsRoverRegresoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverRegresoTest methodsFor: 'nil' stamp: 'goc 10/25/2021 20:58:14'!
east

	^ MarsRoverHeadingEast! !
!MarsRoverRegresoTest methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 20:58:24'!
west

	^ MarsRoverHeadingWest! !
!MarsRoverRegresoTest methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 20:58:35'!
north

	^ MarsRoverHeadingNorth! !
!MarsRoverRegresoTest methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 20:59:32'!
test0
	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: self north.
	
	
	
	self deny: (marsRover isAt: 1@2 heading: self north)! !
!MarsRoverRegresoTest methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 20:59:53'!
south

	^ MarsRoverHeadingSouth! !

!methodRemoval: MarsRoverRegresoTest #test0 stamp: 'goc 10/25/2021 21:00:16'!
test0
	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: self north.
	
	
	
	self deny: (marsRover isAt: 1@2 heading: self north)!
!MarsRoverRegresoTest methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 21:00:20'!
test0
	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: self north.
	
	
	
	self deny: (marsRover isAt: 1@2 heading: self north)! !
!MarsRoverRegresoTest methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 21:03:34' prior: 50915412!
test0
	| marsRover resLog |
	
	marsRover := MarsRover at: 1@1 heading: self north.
	
	resLog := marsRover returnLogs.
	
	
	self assert:( resLog isEmpty).! !

!testRun: #MarsRoverRegresoTest #test0 stamp: 'goc 10/25/2021 21:03:39'!
ERROR!
!MarsRover methodsFor: 'heading' stamp: 'goc 10/25/2021 21:04:53'!
returnLog

	^ OrderedCollection new.! !

!classRemoval: #Xx stamp: 'goc 10/25/2021 21:06:10'!
Object subclass: #Xx
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverRegreso'!

!classRemoval: #TestsXx stamp: 'goc 10/25/2021 21:06:10'!
TestCase subclass: #TestsXx
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverRegreso'!

!testRun: #MarsRoverRegresoTest #test0 stamp: 'goc 10/25/2021 21:06:26'!
ERROR!

!testRun: #MarsRoverRegresoTest #test0 stamp: 'goc 10/25/2021 21:06:26'!
ERROR!
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/25/2021 21:06:46'!
returnLogs

	^ OrderedCollection new.! !

!methodRemoval: MarsRover #returnLog stamp: 'goc 10/25/2021 21:06:48'!
returnLog

	^ OrderedCollection new.!

!testRun: #MarsRoverRegresoTest #test0 stamp: 'goc 10/25/2021 21:06:53'!
PASSED!
!MarsRoverRegresoTest methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 21:08:27' prior: 50915420!
test0
	| marsRover resLog |
	
	marsRover := MarsRover at: 1@1 heading: self north.
	
	resLog := marsRover returnLogsBoth.
	
	
	self assert:( resLog isEmpty).! !
!MarsRoverRegresoTest methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 21:11:07' prior: 50915462!
test0
	| marsRover resLogBoth resLogPos resLogDir |
	
	marsRover := MarsRover at: 1@1 heading: self north.
	
	resLogBoth := marsRover returnLogsBoth.
	
	resLogPos := marsRover returnLogsPos.
	
	resLogDir := marsRover returnLogsDir.
	
	self assert:( resLogBoth isEmpty).
	self assert:( resLogPos isEmpty).
	self assert:( resLogDir isEmpty).! !
!MarsRoverRegresoTest methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 21:11:13'!
test00
	| marsRover resLogBoth resLogPos resLogDir |
	
	marsRover := MarsRover at: 1@1 heading: self north.
	
	resLogBoth := marsRover returnLogsBoth.
	
	resLogPos := marsRover returnLogsPos.
	
	resLogDir := marsRover returnLogsDir.
	
	self assert:( resLogBoth isEmpty).
	self assert:( resLogPos isEmpty).
	self assert:( resLogDir isEmpty).! !

!methodRemoval: MarsRoverRegresoTest #test0 stamp: 'goc 10/25/2021 21:11:15'!
test0
	| marsRover resLogBoth resLogPos resLogDir |
	
	marsRover := MarsRover at: 1@1 heading: self north.
	
	resLogBoth := marsRover returnLogsBoth.
	
	resLogPos := marsRover returnLogsPos.
	
	resLogDir := marsRover returnLogsDir.
	
	self assert:( resLogBoth isEmpty).
	self assert:( resLogPos isEmpty).
	self assert:( resLogDir isEmpty).!

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:11:18'!
ERROR!

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:11:22'!
ERROR!

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:11:23'!
ERROR!

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:11:24'!
ERROR!

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:11:24'!
ERROR!

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:11:25'!
ERROR!

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:11:26'!
ERROR!

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:11:26'!
ERROR!
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/25/2021 21:11:42'!
returnLogsBoth
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/25/2021 21:12:02' prior: 50915532!
returnLogsBoth
	^ OrderedCollection new.! !

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:12:03'!
ERROR!
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/25/2021 21:12:08'!
returnLogsPos
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/25/2021 21:12:10' prior: 50915544!
returnLogsPos
	^ OrderedCollection new.! !

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:12:11'!
ERROR!
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/25/2021 21:12:16'!
returnLogsDir
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/25/2021 21:12:19' prior: 50915556!
returnLogsDir
	^ OrderedCollection new.! !

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:12:19'!
PASSED!

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:12:20'!
PASSED!
!MarsRoverRegresoTest methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 21:26:12'!
test01
	| marsRover resLogBoth resLogPos resLogDir |
	
	marsRover := MarsRover at: 1@1 heading: self north.
	marsRover  process: 'f'.
	
	resLogBoth := marsRover returnLogsBoth.
	
	resLogPos := marsRover returnLogsPos.
	
	resLogDir := marsRover returnLogsDir.
	
	self assert:( resLogBoth isEmpty).
	
	self assert:( resLogPos at:1) equals:(1@2).
	self assert: resLogPos size equals:1.
	
	self assert:( resLogDir isEmpty).! !

!classDefinition: #LogsMarsRover category: 'MarsRover-WithHeading' stamp: 'goc 10/25/2021 21:28:58'!
Object subclass: #LogsMarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverRegresoTest methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 21:28:41' prior: 50915485!
test00
	| marsRover resLogBoth resLogPos resLogDir logs |
	
	marsRover := MarsRover at: 1@1 heading: self north.
	
	logs := LogsMarsRover with: marsRover.
	
	
	resLogBoth := logs returnLogsBoth.
	
	resLogPos := logs returnLogsPos.
	
	resLogDir := logs returnLogsDir.
	
	self assert:( resLogBoth isEmpty).
	self assert:( resLogPos isEmpty).
	self assert:( resLogDir isEmpty).! !

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:29:07'!
ERROR!
!LogsMarsRover class methodsFor: 'instance creation' stamp: 'goc 10/25/2021 21:29:18'!
with: aMarsRover 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aMarsRover ! !
!LogsMarsRover class methodsFor: 'instance creation' stamp: 'goc 10/25/2021 21:29:37' prior: 50915614!
with: aMarsRover 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	
	^self new initializeWith: aMarsRover ! !

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:29:52'!
ERROR!

!classDefinition: #LogsMarsRover category: 'MarsRover-WithHeading' stamp: 'goc 10/25/2021 21:30:11'!
Object subclass: #LogsMarsRover
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!LogsMarsRover methodsFor: 'unclasiffied' stamp: 'goc 10/25/2021 21:30:11'!
initializeWith: aMarsRover 
	self shouldBeImplemented.
	marsRover := aMarsRover.! !
!LogsMarsRover methodsFor: 'unclasiffied' stamp: 'goc 10/25/2021 21:30:23' prior: 50915640!
initializeWith: aMarsRover 
	
	marsRover := aMarsRover.! !

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:30:24'!
ERROR!
!LogsMarsRover methodsFor: 'unclasiffied' stamp: 'goc 10/25/2021 21:30:33'!
returnLogsBoth
	self shouldBeImplemented.! !
!LogsMarsRover methodsFor: 'unclasiffied' stamp: 'goc 10/25/2021 21:31:05' prior: 50915653!
returnLogsBoth
	
	^ OrderedCollection new.! !

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:31:06'!
ERROR!
!LogsMarsRover methodsFor: 'unclasiffied' stamp: 'goc 10/25/2021 21:31:12'!
returnLogsPos
	self shouldBeImplemented.! !
!LogsMarsRover methodsFor: 'unclasiffied' stamp: 'goc 10/25/2021 21:31:14' prior: 50915665!
returnLogsPos
	^ OrderedCollection new.! !

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:31:15'!
ERROR!
!LogsMarsRover methodsFor: 'unclasiffied' stamp: 'goc 10/25/2021 21:31:20'!
returnLogsDir
	self shouldBeImplemented.! !
!LogsMarsRover methodsFor: 'unclasiffied' stamp: 'goc 10/25/2021 21:31:22' prior: 50915677!
returnLogsDir
	^ OrderedCollection new.! !

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:31:23'!
PASSED!

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:31:23'!
PASSED!

!testRun: #MarsRoverRegresoTest #test01 stamp: 'goc 10/25/2021 21:31:23'!
ERROR!

!testRun: #MarsRoverRegresoTest #test01 stamp: 'goc 10/25/2021 21:31:23'!
ERROR!

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:31:42'!
PASSED!

----STARTUP---- (25 October 2021 22:13:49) as /home/goon/Desktop/inge1/new cuis/CuisUniversity-4913.image!


----End fileIn of /home/goon/Desktop/inge1/ejsCatedra/2021-2c/19-MarsRover-ElRegreso/MarsRover-WithHeading.st----!

TestCase subclass: #TestXxx
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #TestXxx category: 'MarsRover-WithHeading' stamp: 'goc 10/25/2021 22:15:07'!
TestCase subclass: #TestXxx
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!TestXxx methodsFor: 'nil' stamp: 'goc 10/25/2021 22:18:06'!
test01
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'f'.
	
	logReadStream _ ReadStream on: x contents.
	
	self assert:'1@2' equals: logReadStream nextLine.
	self assert: logReadStream atEnd.! !

!testRun: #TestXxx #test01 stamp: 'goc 10/25/2021 22:18:42'!
ERROR!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:18:57'!
trackPositionChangesOf: aMarsRover 
	self shouldBeImplemented.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:19:53' prior: 50915358!
trackPositionChangesOf: aMarsRover 
	| logger |
	
	logger _ WriteStream on: ''.
	aMarsRover trackPositionChangesTo: logger.
	
	^ logger.! !

!testRun: #TestXxx #test01 stamp: 'goc 10/25/2021 22:19:58'!
ERROR!
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/25/2021 22:21:25'!
trackPositionChangesTo: aWriteStream 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'goc 10/25/2021 22:22:13'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionChangesLogger'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/25/2021 22:21:56' prior: 50915372!
trackPositionChangesTo: aLogger
	
	positionChangesLogger _ aLogger.! !

!testRun: #TestXxx #test01 stamp: 'goc 10/25/2021 22:22:16'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'goc 10/25/2021 22:25:49' prior: 50915097!
moveNorth
	
	position := position + (0@1).
	
	positionChangesLogger  ifNotNil:[positionChangesLogger nextPutAll: position printString; newLine].
	! !

!testRun: #TestXxx #test01 stamp: 'goc 10/25/2021 22:25:56'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'goc 10/25/2021 22:25:56'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:27:59'!
test02
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'ff'.
	
	logReadStream _ ReadStream on: x contents.
	
	self assert:'1@2' equals: logReadStream nextLine.
	self assert: logReadStream atEnd.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:28:31' prior: 50915405!
test02
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'b'.
	
	logReadStream _ ReadStream on: x contents.
	
	self assert:'1@0' equals: logReadStream nextLine.
	self assert: logReadStream atEnd.! !

!testRun: #TestXxx #test02 stamp: 'goc 10/25/2021 22:28:33'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'goc 10/25/2021 22:30:31' prior: 50915101!
moveSouth
	
	position := position + (0@-1).
	
	positionChangesLogger ifNotNil:[positionChangesLogger nextPutAll: position printString; newLine].! !

!testRun: #TestXxx #test02 stamp: 'goc 10/25/2021 22:30:38'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'goc 10/25/2021 22:30:38'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'goc 10/25/2021 22:30:38'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:31:46'!
test03
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'ff'.
	
	logReadStream _ ReadStream on: x contents.
	
	self assert: logReadStream atEnd.! !

!testRun: #TestXxx #test03 stamp: 'goc 10/25/2021 22:31:49'!
FAILURE!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:32:09' prior: 50915447!
test03
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'ff'.
	
	logReadStream _ ReadStream on: x contents.
	
	self assert: logReadStream atEnd.! !

!testRun: #TestXxx #test03 stamp: 'goc 10/25/2021 22:32:15'!
ERROR!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:32:25'!
trackHeadingChangesOf: aMarsRover 
	self shouldBeImplemented.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:33:22' prior: 50915474!
trackHeadingChangesOf: aMarsRover 
	| logger |
	
	logger _ WriteStream on: ''.
	aMarsRover trackHeadingChangesTo: logger.
	
	^logger.! !

!testRun: #TestXxx #test03 stamp: 'goc 10/25/2021 22:33:28'!
ERROR!
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/25/2021 22:33:35'!
trackHeadingChangesTo: aWriteStream 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'goc 10/25/2021 22:34:15'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionChangesLogger headingChangesLogger'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/25/2021 22:34:31' prior: 50915488!
trackHeadingChangesTo: aLogger 
	
	headingChangesLogger _ aLogger.! !

!testRun: #TestXxx #test03 stamp: 'goc 10/25/2021 22:34:32'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'goc 10/25/2021 22:34:32'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'goc 10/25/2021 22:34:32'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'goc 10/25/2021 22:34:32'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:35:51' prior: 50915461!
test03
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	logReadStream _ ReadStream on: x contents.
	
	self assert: 'East' equals: logReadStream nextLine .
	self assert: logReadStream atEnd.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:35:51' prior: 50915516!
test03
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	logReadStream _ ReadStream on: x contents.
	
	self assert: 'East' equals: logReadStream nextLine .
	self assert: logReadStream atEnd.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:31:46' prior: 50915529!
test03
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'ff'.
	
	logReadStream _ ReadStream on: x contents.
	
	self assert: logReadStream atEnd.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:37:04'!
test04
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	logReadStream _ ReadStream on: x contents.
	
	self assert: 'East' equals: logReadStream nextLine .
	self assert: logReadStream atEnd.! !

!testRun: #TestXxx #test03 stamp: 'goc 10/25/2021 22:37:07'!
FAILURE!

!testRun: #TestXxx #test03 stamp: 'goc 10/25/2021 22:37:07'!
FAILURE!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:37:55' prior: 50915542!
test03
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'ff'.
	
	logReadStream _ ReadStream on: x contents.
	
	self assert: logReadStream atEnd.! !

!testRun: #TestXxx #test03 stamp: 'goc 10/25/2021 22:37:56'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'goc 10/25/2021 22:37:56'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'goc 10/25/2021 22:37:56'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'goc 10/25/2021 22:37:56'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'goc 10/25/2021 22:37:56'!
FAILURE!

!testRun: #TestXxx #test04 stamp: 'goc 10/25/2021 22:37:56'!
FAILURE!

!testRun: #TestXxx #test03 stamp: 'goc 10/25/2021 22:38:41'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'goc 10/25/2021 22:38:41'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'goc 10/25/2021 22:38:41'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'goc 10/25/2021 22:38:41'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'goc 10/25/2021 22:38:41'!
FAILURE!

!testRun: #TestXxx #test04 stamp: 'goc 10/25/2021 22:38:41'!
FAILURE!

!testRun: #TestXxx #test03 stamp: 'goc 10/25/2021 22:38:56'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'goc 10/25/2021 22:39:13'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'goc 10/25/2021 22:40:30' prior: 50915039!
headEast
	
	head := MarsRoverHeadingEast for: self.
	
	headingChangesLogger nextPutAll: head printString; newLine.! !

!testRun: #TestXxx #test04 stamp: 'goc 10/25/2021 22:40:36'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'goc 10/25/2021 22:41:56' prior: 50915613!
headEast
	
	head := MarsRoverHeadingEast for: self.
	
	headingChangesLogger ifNotNil:[headingChangesLogger nextPutAll: head printString; newLine].! !

!testRun: #TestXxx #test04 stamp: 'goc 10/25/2021 22:42:02'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'goc 10/25/2021 22:42:36' prior: 50915622!
headEast
	
	head := MarsRoverHeadingEast for: self.
	
	headingChangesLogger ifNotNil:[ headingChangesLogger nextPutAll: head printString; newLine ].! !
!MarsRover methodsFor: 'heading' stamp: 'goc 10/25/2021 22:43:46' prior: 50915632!
headEast
	
	head := MarsRoverHeadingEast for: self.
	
	headingChangesLogger ifNotNil:[ headingChangesLogger nextPutAll: head printString; newLine ]! !

head _ MarsRoverHeadingEast for: MarsRover new.!

head printString !
!MarsRoverHeading methodsFor: 'heading' stamp: 'goc 10/25/2021 22:47:28' overrides: 50773773!
printString

	self subclassResponsibility ! !
!MarsRoverHeadingEast methodsFor: 'nil' stamp: 'goc 10/25/2021 22:47:59' overrides: 50915650!
printString

	^'East'.! !
!MarsRoverHeadingNorth methodsFor: 'nil' stamp: 'goc 10/25/2021 22:48:13' overrides: 50915650!
printString

	^'North'.! !
!MarsRoverHeadingSouth methodsFor: 'nil' stamp: 'goc 10/25/2021 22:48:22' overrides: 50915650!
printString

	^'South'.! !
!MarsRoverHeadingWest methodsFor: 'nil' stamp: 'goc 10/25/2021 22:48:31' overrides: 50915650!
printString

	^'West'.! !

!testRun: #TestXxx #test04 stamp: 'goc 10/25/2021 22:48:36'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'goc 10/25/2021 22:48:36'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'goc 10/25/2021 22:48:36'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'goc 10/25/2021 22:48:36'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'goc 10/25/2021 22:48:36'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:49:52'!
test05
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionAndHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	logReadStream _ ReadStream on: x contents.
	
	
	self assert: '1@2' equals: logReadStream nextLine.
	self assert: '1@3' equals: logReadStream nextLine.
	self assert: 'East' equals: logReadStream nextLine .
	self assert: logReadStream atEnd.! !

!testRun: #TestXxx #test05 stamp: 'goc 10/25/2021 22:50:30'!
ERROR!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:50:36'!
trackPositionAndHeadingChangesOf: aMarsRover 
	self shouldBeImplemented.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:51:22' prior: 50915701!
trackPositionAndHeadingChangesOf: aMarsRover 
	
	| logger|
	
	logger _ WriteStream on: ''.
	aMarsRover  trackHeadingChangesTo: logger.
	aMarsRover  trackPositionChangesTo: logger.
	
	^logger.! !

!testRun: #TestXxx #test05 stamp: 'goc 10/25/2021 22:51:23'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'goc 10/25/2021 22:51:23'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'goc 10/25/2021 22:51:23'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'goc 10/25/2021 22:51:23'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'goc 10/25/2021 22:51:23'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'goc 10/25/2021 22:51:23'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:54:01'!
test06
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionAndHeadingChangesOf: marsRover.
	
	marsRover process: 'frfrfr'.
	
	logReadStream _ ReadStream on: x contents.
	
	
	self assert: '2@1' equals: logReadStream nextLine.
	self assert: 'South' equals: logReadStream nextLine .
	self assert: '2@0' equals: logReadStream nextLine.
	self assert: 'West' equals: logReadStream nextLine .
	self assert: '1@0' equals: logReadStream nextLine .
	self assert: 'North' equals: logReadStream nextLine .
	self assert: logReadStream atEnd.! !

!testRun: #TestXxx #test06 stamp: 'goc 10/25/2021 22:54:15'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'goc 10/25/2021 22:55:53'!
movePositionWith: anOffset
	
	position := position + anOffset .
	
	positionChangesLogger  ifNotNil:[positionChangesLogger nextPutAll: position printString; newLine].
	! !
!MarsRover methodsFor: 'moving' stamp: 'goc 10/25/2021 22:56:45' prior: 50915089!
moveEast
	
	self movePositionWith: (1@0).! !
!MarsRover methodsFor: 'moving' stamp: 'goc 10/25/2021 22:57:05' prior: 50915393!
moveNorth
	
	self movePositionWith: (0@1).
	
	! !
!MarsRover methodsFor: 'moving' stamp: 'goc 10/25/2021 22:57:17' prior: 50915433!
moveSouth
	
	self movePositionWith: (0@-1).
	
	! !
!MarsRover methodsFor: 'moving' stamp: 'goc 10/25/2021 22:57:28' prior: 50915105!
moveWest
	
	self movePositionWith: (-1@0).! !
!MarsRover methodsFor: 'heading' stamp: 'goc 10/25/2021 22:59:08'!
changeHeadTo: aMarsRoverHeadingaDirection
	
	head := aMarsRoverHeadingaDirection.
	
	headingChangesLogger ifNotNil:[ headingChangesLogger nextPutAll: head printString; newLine ]! !
!MarsRover methodsFor: 'heading' stamp: 'goc 10/25/2021 22:59:44' prior: 50915640!
headEast
	
	self changeHeadTo: (MarsRoverHeadingEast for: self).! !
!MarsRover methodsFor: 'heading' stamp: 'goc 10/25/2021 22:59:54' prior: 50915043!
headNorth
	
	self changeHeadTo: (MarsRoverHeadingNorth for: self).! !
!MarsRover methodsFor: 'heading' stamp: 'goc 10/25/2021 23:00:01' prior: 50915047!
headSouth
	
	self changeHeadTo: (MarsRoverHeadingSouth for: self).! !
!MarsRover methodsFor: 'heading' stamp: 'goc 10/25/2021 23:00:10' prior: 50915051!
headWest
	
	self changeHeadTo: (MarsRoverHeadingWest for: self).! !

!testRun: #TestXxx #test06 stamp: 'goc 10/25/2021 23:00:19'!
FAILURE!

!testRun: #TestXxx #test01 stamp: 'goc 10/25/2021 23:01:59'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'goc 10/25/2021 23:02:01'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'goc 10/25/2021 23:02:05'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'goc 10/25/2021 23:02:08'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'goc 10/25/2021 23:02:12'!
PASSED!

!testRun: #TestXxx #test06 stamp: 'goc 10/25/2021 23:02:15'!
FAILURE!

!testRun: #TestXxx #test06 stamp: 'goc 10/25/2021 23:02:15'!
FAILURE!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 23:02:48' prior: 50915729!
test06
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingEast.
	
	x _ self trackPositionAndHeadingChangesOf: marsRover.
	
	marsRover process: 'frfrfr'.
	
	logReadStream _ ReadStream on: x contents.
	
	
	self assert: '2@1' equals: logReadStream nextLine.
	self assert: 'South' equals: logReadStream nextLine .
	self assert: '2@0' equals: logReadStream nextLine.
	self assert: 'West' equals: logReadStream nextLine .
	self assert: '1@0' equals: logReadStream nextLine .
	self assert: 'North' equals: logReadStream nextLine .
	self assert: logReadStream atEnd.! !

!testRun: #TestXxx #test06 stamp: 'goc 10/25/2021 23:02:53'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'goc 10/25/2021 23:02:53'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'goc 10/25/2021 23:02:53'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'goc 10/25/2021 23:02:53'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'goc 10/25/2021 23:02:53'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'goc 10/25/2021 23:02:53'!
PASSED!

!testRun: #TestXxx #test06 stamp: 'goc 10/25/2021 23:02:53'!
PASSED!

----SNAPSHOT----(25 October 2021 23:05:01) CuisUniversity-4913.image priorSource: 18661997!

----STARTUP---- (26 October 2021 12:10:08) as /home/goon/Desktop/inge1/new cuis/CuisUniversity-4913.image!


!testRun: #TestXxx #test06 stamp: 'goc 10/26/2021 12:10:13'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'goc 10/26/2021 12:10:25'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'goc 10/26/2021 12:10:28'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'goc 10/26/2021 12:10:28'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'goc 10/26/2021 12:10:28'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'goc 10/26/2021 12:10:28'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'goc 10/26/2021 12:10:28'!
PASSED!

!testRun: #TestXxx #test06 stamp: 'goc 10/26/2021 12:10:28'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:21:20'!
test07
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInWindowPositionAndHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	
	
	
	self assert: '1@3' equals: x positionTextFieldModel.
	self assert: MarsRoverHeadingEast equals: x headingTextFieldModel.
	! !

!testRun: #TestXxx #test07 stamp: 'goc 10/26/2021 12:21:37'!
ERROR!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:21:46'!
trackInWindowPositionAndHeadingChangesOf: aMarsRover 
	self shouldBeImplemented.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:24:08' prior: 50915887!
test07
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInWindowPositionChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: '1@3' equals: x positionTextFieldModel.
	"self assert: MarsRoverHeadingEast equals: x headingTextFieldModel."
	! !

!testRun: #TestXxx #test07 stamp: 'goc 10/26/2021 12:24:13'!
ERROR!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:24:26'!
trackInWindowPositionChangesOf: aMarsRover 
	self shouldBeImplemented.! !

!classDefinition: #MarsRoverStatusView category: 'MarsRover-WithHeading' stamp: 'goc 10/26/2021 12:24:42'!
Object subclass: #MarsRoverStatusView
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:24:33' prior: 50915923!
trackInWindowPositionChangesOf: aMarsRover 
	|x|
	
	x _ MarsRoverStatusView new.
	aMarsRover  trackPositionChangesToStatusView: x.
	
	^ x.! !

!testRun: #TestXxx #test07 stamp: 'goc 10/26/2021 12:24:50'!
ERROR!
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/26/2021 12:24:58'!
trackPositionChangesToStatusView: aMarsRoverStatusView 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'goc 10/26/2021 12:25:38'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionChangesLogger headingChangesLogger positionChangesStatusView'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/26/2021 12:25:35' prior: 50915946!
trackPositionChangesToStatusView: aMarsRoverStatusView 
	
	positionChangesStatusView _ aMarsRoverStatusView.! !

!testRun: #TestXxx #test07 stamp: 'goc 10/26/2021 12:25:41'!
ERROR!
!MarsRoverStatusView methodsFor: 'unclassified' stamp: 'goc 10/26/2021 12:26:12'!
positionTextFieldModel
	self shouldBeImplemented.! !

!testRun: #TestXxx #test07 stamp: 'goc 10/26/2021 12:26:41'!
ERROR!

!classDefinition: #MarsRoverStatusView category: 'MarsRover-WithHeading' stamp: 'goc 10/26/2021 12:28:09'!
Object subclass: #MarsRoverStatusView
	instanceVariableNames: 'positionTextFieldModel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverStatusView methodsFor: 'unclassified' stamp: 'goc 10/26/2021 12:28:08'!
positionTextFieldModel: aPosition
	
	positionTextFieldModel _ aPosition.! !

!methodRemoval: MarsRoverStatusView #positionTextFieldModel stamp: 'goc 10/26/2021 12:28:13'!
positionTextFieldModel
	self shouldBeImplemented.!
!MarsRover methodsFor: 'moving' stamp: 'goc 10/26/2021 12:31:14' prior: 50915753!
movePositionWith: anOffset
	
	position := position + anOffset .
	
	positionChangesLogger  ifNotNil:[positionChangesLogger nextPutAll: position printString; newLine].
	positionChangesStatusView ifNotNil:[positionChangesStatusView positionTextFieldModel: position].
	! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:31:57' prior: 50915908!
test07
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInWindowPositionChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: '1@3' equals: x positionTextFieldModel.
	"self assert: MarsRoverHeadingEast equals: x headingTextFieldModel."
	! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:32:26'!
trackInStatusViewPositionChangesOf: aMarsRover 
	|x|
	
	x _ MarsRoverStatusView new.
	aMarsRover  trackPositionChangesToStatusView: x.
	
	^ x.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:32:26' prior: 50916009!
test07
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: '1@3' equals: x positionTextFieldModel.
	"self assert: MarsRoverHeadingEast equals: x headingTextFieldModel."
	! !

!methodRemoval: TestXxx #trackInWindowPositionChangesOf: stamp: 'goc 10/26/2021 12:32:26'!
trackInWindowPositionChangesOf: aMarsRover 
	|x|
	
	x _ MarsRoverStatusView new.
	aMarsRover  trackPositionChangesToStatusView: x.
	
	^ x.!

!testRun: #TestXxx #test07 stamp: 'goc 10/26/2021 12:32:35'!
ERROR!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:33:13' prior: 50916029!
test07
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: '1@3' equals: x getPositionTextFieldModel.
	"self assert: MarsRoverHeadingEast equals: x headingTextFieldModel."
	! !

!testRun: #TestXxx #test07 stamp: 'goc 10/26/2021 12:33:17'!
ERROR!
!MarsRoverStatusView methodsFor: 'unclassified' stamp: 'goc 10/26/2021 12:33:23'!
getPositionTextFieldModel
	self shouldBeImplemented.! !
!MarsRoverStatusView methodsFor: 'unclassified' stamp: 'goc 10/26/2021 12:33:34' prior: 50916066!
getPositionTextFieldModel
	^ positionTextFieldModel .! !

!testRun: #TestXxx #test07 stamp: 'goc 10/26/2021 12:33:37'!
FAILURE!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:34:00' prior: 50916051!
test07
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: 1@3 equals: x getPositionTextFieldModel.
	"self assert: MarsRoverHeadingEast equals: x headingTextFieldModel."
	! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:33:13' prior: 50916078!
test07
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: '1@3' equals: x getPositionTextFieldModel.
	"self assert: MarsRoverHeadingEast equals: x headingTextFieldModel."
	! !
!MarsRoverStatusView methodsFor: 'unclassified' stamp: 'goc 10/26/2021 12:35:45' prior: 50916071!
getPositionTextFieldModel
	^ positionTextFieldModel printString.! !

!testRun: #TestXxx #test07 stamp: 'goc 10/26/2021 12:35:51'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'goc 10/26/2021 12:35:51'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'goc 10/26/2021 12:35:51'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'goc 10/26/2021 12:35:51'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'goc 10/26/2021 12:35:51'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'goc 10/26/2021 12:35:51'!
PASSED!

!testRun: #TestXxx #test06 stamp: 'goc 10/26/2021 12:35:51'!
PASSED!

!testRun: #TestXxx #test07 stamp: 'goc 10/26/2021 12:35:51'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:36:46'!
test08
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: MarsRoverHeadingEast equals: x headingTextFieldModel.
	! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:37:03' prior: 50916127!
test08
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: MarsRoverHeadingEast equals: x getHeadingTextFieldModel.
	! !

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 12:37:07'!
ERROR!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:37:14'!
trackInStatusViewHeadingChangesOf: aMarsRover 
	self shouldBeImplemented.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:38:09' prior: 50916151!
trackInStatusViewHeadingChangesOf: aMarsRover 
	|x|
	
	x _ MarsRoverStatusView new.
	aMarsRover trackHeadingChangesToStatusView: x.
	
	^x.! !

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 12:38:14'!
ERROR!
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/26/2021 12:38:23'!
trackHeadingChangesToStatusView: aMarsRoverStatusView 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'goc 10/26/2021 12:38:56'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionChangesLogger headingChangesLogger positionChangesStatusView headingChangesStatusView'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/26/2021 12:38:54' prior: 50916166!
trackHeadingChangesToStatusView: aMarsRoverStatusView 
	
	headingChangesStatusView _ aMarsRoverStatusView .! !

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 12:38:58'!
ERROR!
!MarsRoverStatusView methodsFor: 'unclassified' stamp: 'goc 10/26/2021 12:39:06'!
getHeadingTextFieldModel
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'heading' stamp: 'goc 10/26/2021 12:41:03' prior: 50915779!
changeHeadTo: aMarsRoverHeadingaDirection
	
	head := aMarsRoverHeadingaDirection.
	
	headingChangesLogger ifNotNil:[ headingChangesLogger nextPutAll: head printString; newLine ].
	headingChangesStatusView ifNotNil:[headingChangesStatusView headingTextFieldModel: head].! !

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 12:41:18'!
ERROR!
!MarsRoverStatusView methodsFor: 'unclassified' stamp: 'goc 10/26/2021 12:41:23'!
headingTextFieldModel: aMarsRoverHeadingEast 
	self shouldBeImplemented.! !

!classDefinition: #MarsRoverStatusView category: 'MarsRover-WithHeading' stamp: 'goc 10/26/2021 12:41:56'!
Object subclass: #MarsRoverStatusView
	instanceVariableNames: 'positionTextFieldModel headingTextFieldModel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverStatusView methodsFor: 'unclassified' stamp: 'goc 10/26/2021 12:41:54' prior: 50916211!
headingTextFieldModel: aMarsRoverHeading
	
	headingTextFieldModel _ aMarsRoverHeading.! !

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 12:41:59'!
ERROR!
!MarsRoverStatusView methodsFor: 'unclassified' stamp: 'goc 10/26/2021 12:42:17' prior: 50916192!
getHeadingTextFieldModel
	^ headingTextFieldModel.! !

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 12:42:19'!
FAILURE!

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 12:42:31'!
FAILURE!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:42:59' prior: 50916138!
test08
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: (MarsRoverHeadingEast = x getHeadingTextFieldModel).
	! !

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 12:42:59'!
FAILURE!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:43:04' prior: 50916245!
test08
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: (MarsRoverHeadingEast == x getHeadingTextFieldModel).
	! !

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 12:43:04'!
FAILURE!

a _ MarsRoverHeadingEast for: MarsRover new.!

b _ MarsRoverHeadingEast for: MarsRover new.!

b _ MarsRoverHeadingEast for: MarsRover new.!

a==b!

a=b!

a is: b!

a == b!

a isKindOf: b!

a == b!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:37:03' prior: 50916258!
test08
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: MarsRoverHeadingEast equals: x getHeadingTextFieldModel.
	! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:48:55' prior: 50916278!
test08
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: MarsRoverHeadingEast printString equals: x getHeadingTextFieldModel printString.
	! !

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 12:48:55'!
FAILURE!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:50:06' prior: 50916289!
test08
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: 'East' printString equals: x getHeadingTextFieldModel.
	! !

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 12:50:08'!
FAILURE!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:50:20' prior: 50916303!
test08
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: 'East' printString equals: x getHeadingTextFieldModel printString.
	! !

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 12:50:21'!
FAILURE!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:50:42' prior: 50916316!
test08
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: 'East' equals: x getHeadingTextFieldModel printString.
	! !

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 12:50:42'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'goc 10/26/2021 12:50:42'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'goc 10/26/2021 12:50:42'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'goc 10/26/2021 12:50:42'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'goc 10/26/2021 12:50:42'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'goc 10/26/2021 12:50:42'!
PASSED!

!testRun: #TestXxx #test06 stamp: 'goc 10/26/2021 12:50:42'!
PASSED!

!testRun: #TestXxx #test07 stamp: 'goc 10/26/2021 12:50:42'!
PASSED!

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 12:50:42'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:52:29'!
test09
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionAndHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: 1@3 equals: x getPositionTextFieldModel .
	self assert: 'East' equals: x getHeadingTextFieldModel printString.
	! !

!testRun: #TestXxx #test09 stamp: 'goc 10/26/2021 12:52:30'!
ERROR!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:52:42'!
trackInStatusViewPositionAndHeadingChangesOf: aMarsRover 
	self shouldBeImplemented.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:53:47' prior: 50916375!
trackInStatusViewPositionAndHeadingChangesOf: aMarsRover 
	| x |
	
	x _ MarsRoverStatusView new.
	
	aMarsRover  trackPositionAndHeadingChangesToStatusView: x.
	
	^ x.! !

!testRun: #TestXxx #test09 stamp: 'goc 10/26/2021 12:53:51'!
ERROR!
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/26/2021 12:53:57'!
trackPositionAndHeadingChangesToStatusView: aMarsRoverStatusView 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/26/2021 12:54:41' prior: 50916391!
trackPositionAndHeadingChangesToStatusView: aMarsRoverStatusView 
	
	positionChangesStatusView _ aMarsRoverStatusView .
	headingChangesStatusView _ aMarsRoverStatusView .! !

!testRun: #TestXxx #test09 stamp: 'goc 10/26/2021 12:54:43'!
FAILURE!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:55:14' prior: 50916360!
test09
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionAndHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: '1@3' equals: x getPositionTextFieldModel .
	self assert: 'East' equals: x getHeadingTextFieldModel printString.
	! !

!testRun: #TestXxx #test09 stamp: 'goc 10/26/2021 12:55:15'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'goc 10/26/2021 12:55:15'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'goc 10/26/2021 12:55:15'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'goc 10/26/2021 12:55:15'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'goc 10/26/2021 12:55:15'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'goc 10/26/2021 12:55:15'!
PASSED!

!testRun: #TestXxx #test06 stamp: 'goc 10/26/2021 12:55:15'!
PASSED!

!testRun: #TestXxx #test07 stamp: 'goc 10/26/2021 12:55:15'!
PASSED!

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 12:55:15'!
PASSED!

!testRun: #TestXxx #test09 stamp: 'goc 10/26/2021 12:55:15'!
PASSED!

----SNAPSHOT----(26 October 2021 12:55:48) CuisUniversity-4913.image priorSource: 18694785!

----SNAPSHOT----(26 October 2021 12:58:23) CuisUniversity-4913.image priorSource: 18713340!

----QUIT----(26 October 2021 12:58:35) CuisUniversity-4913.image priorSource: 18713433!

----STARTUP---- (26 October 2021 13:07:26) as /home/goon/Desktop/inge1/new cuis/CuisUniversity-4913.image!

!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 13:11:13'!
test10
	| marsRover x y |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	y _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'fffr'.
	
	self assert: '1@4' equals: x getPositionTextFieldModel.
	self assert: 'East' equals: x getHeadingTextFieldModel printString.
	! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 13:13:20' prior: 50916455!
test10
	| marsRover x y logReadStream|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	y _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'fffr'.
	
	logReadStream _ ReadStream on: x contents.
	
	
	self assert: '1@4' equals: x getPositionTextFieldModel.
	
	self assert: '1@2' equals: logReadStream nextLine.
	self assert: '1@3' equals: logReadStream nextLine.
	self assert: '1@4' equals: logReadStream nextLine.
	! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 13:13:29' prior: 50916470!
test10
	| marsRover x y logReadStream|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	y _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'fffr'.
	
	logReadStream _ ReadStream on: y contents.
	
	
	self assert: '1@4' equals: x getPositionTextFieldModel.
	
	self assert: '1@2' equals: logReadStream nextLine.
	self assert: '1@3' equals: logReadStream nextLine.
	self assert: '1@4' equals: logReadStream nextLine.
	! !

!testRun: #TestXxx #test10 stamp: 'goc 10/26/2021 13:13:30'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'goc 10/26/2021 13:13:30'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'goc 10/26/2021 13:13:30'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'goc 10/26/2021 13:13:30'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'goc 10/26/2021 13:13:30'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'goc 10/26/2021 13:13:30'!
PASSED!

!testRun: #TestXxx #test06 stamp: 'goc 10/26/2021 13:13:30'!
PASSED!

!testRun: #TestXxx #test07 stamp: 'goc 10/26/2021 13:13:30'!
PASSED!

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 13:13:30'!
PASSED!

!testRun: #TestXxx #test09 stamp: 'goc 10/26/2021 13:13:30'!
PASSED!

!testRun: #TestXxx #test10 stamp: 'goc 10/26/2021 13:13:30'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 13:14:30' prior: 50916489!
test10
	| marsRover x y logReadStream|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	y _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'fffr'.
	
	logReadStream _ ReadStream on: y contents.
	
	
	self assert: '1@4' equals: x getPositionTextFieldModel.
	
	self assert: '1@2' equals: logReadStream nextLine.
	self assert: '1@3' equals: logReadStream nextLine.
	self assert: '1@4' equals: logReadStream nextLine.
	self assert: logReadStream atEnd.
	! !

!testRun: #TestXxx #test10 stamp: 'goc 10/26/2021 13:14:32'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'goc 10/26/2021 13:14:32'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'goc 10/26/2021 13:14:32'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'goc 10/26/2021 13:14:32'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'goc 10/26/2021 13:14:32'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'goc 10/26/2021 13:14:32'!
PASSED!

!testRun: #TestXxx #test06 stamp: 'goc 10/26/2021 13:14:32'!
PASSED!

!testRun: #TestXxx #test07 stamp: 'goc 10/26/2021 13:14:32'!
PASSED!

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 13:14:32'!
PASSED!

!testRun: #TestXxx #test09 stamp: 'goc 10/26/2021 13:14:32'!
PASSED!

!testRun: #TestXxx #test10 stamp: 'goc 10/26/2021 13:14:32'!
PASSED!

----SNAPSHOT----(26 October 2021 13:21:45) CuisUniversity-4913.image priorSource: 18713526!

----QUIT----(26 October 2021 13:22:50) CuisUniversity-4913.image priorSource: 18717600!

----STARTUP---- (28 October 2021 21:27:13) as /home/goon/Desktop/inge1/new cuis/CuisUniversity-4913.image!


----End fileIn of /home/goon/Desktop/inge1/new cuis/Packages/TerseGuide.pck.st----!

Dictionary!

Dictionary!

----STARTUP---- (1 November 2021 17:33:51) as /home/goon/Desktop/inge1/new cuis/CuisUniversity-4913.image!


!classDefinition: #TerseGuideHelp category: 'TerseGuide' stamp: 'goc 11/1/2021 17:34:03'!
Workspace subclass: #TerseGuideHelp
	instanceVariableNames: 'topics topicListIndex selectedTopic topicList window textPane'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerseGuide'!

!classDefinition: #TerseGuideHelp category: 'TerseGuide' stamp: 'goc 11/1/2021 17:34:03'!
Workspace subclass: #TerseGuideHelp
	instanceVariableNames: 'topics topicListIndex selectedTopic topicList window textPane'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerseGuide'!

!classDefinition: 'TerseGuideHelp class' category: 'TerseGuide' stamp: 'goc 11/1/2021 17:34:03'!
TerseGuideHelp class
	instanceVariableNames: 'topics'!

!classDefinition: 'TerseGuideHelp class' category: 'TerseGuide' stamp: 'goc 11/1/2021 17:34:03'!
TerseGuideHelp class
	instanceVariableNames: 'topics'!

!classDefinition: #TerseGuideWindow category: 'TerseGuide' stamp: 'goc 11/1/2021 17:34:03'!
WorkspaceWindow subclass: #TerseGuideWindow
	instanceVariableNames: 'textModelM list1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerseGuide'!

!classDefinition: #TerseGuideWindow category: 'TerseGuide' stamp: 'goc 11/1/2021 17:34:03'!
WorkspaceWindow subclass: #TerseGuideWindow
	instanceVariableNames: 'textModelM list1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerseGuide'!

!classDefinition: 'TerseGuideWindow class' category: 'TerseGuide' stamp: 'goc 11/1/2021 17:34:03'!
TerseGuideWindow class
	instanceVariableNames: ''!

!classDefinition: 'TerseGuideWindow class' category: 'TerseGuide' stamp: 'goc 11/1/2021 17:34:03'!
TerseGuideWindow class
	instanceVariableNames: ''!

!classDefinition: #TerseGuideTopic category: 'TerseGuide' stamp: 'goc 11/1/2021 17:34:03'!
Object subclass: #TerseGuideTopic
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerseGuide'!

!classDefinition: #TerseGuideTopic category: 'TerseGuide' stamp: 'goc 11/1/2021 17:34:03'!
Object subclass: #TerseGuideTopic
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerseGuide'!

!classDefinition: 'TerseGuideTopic class' category: 'TerseGuide' stamp: 'goc 11/1/2021 17:34:03'!
TerseGuideTopic class
	instanceVariableNames: ''!

!classDefinition: 'TerseGuideTopic class' category: 'TerseGuide' stamp: 'goc 11/1/2021 17:34:03'!
TerseGuideTopic class
	instanceVariableNames: ''!
!TerseGuideHelp commentStamp: 'dhn 3/7/2015 13:20' prior: 0!
TerseGuideHelp is adapted from the Squeak terse guide by Chris Rathman (http://www.angelfire.com/tx4/cus/notes/smalltalk.html), maintained on the swiki at http://wiki.squeak.org/squeak/5699. Copyrights and credit for the original document belong to Chris Rathman.

Examples of use include:

TerseGuideHelp display: #arithmetic
TerseGuideHelp display: #array
TerseGuideHelp display: #transcript

TerseGuideHelp also serves as the model for TerseGuideWindow, which can be opened by:

TerseGuideWindow openTerseGuide
!
!TerseGuideWindow commentStamp: 'dhn 3/5/2016 21:50' prior: 0!
Show a terse guide to Cuis in a system window. The window has a text pane with a list pane beside it. The text pane is a kind of Workspace which has the behavior that statements in it can be Done (Cmd-d) or Printed (Cmd-p) in order to observe their effect.

TerseGuideWindow openTerseGuide
!
!TerseGuideTopic commentStamp: '<historical>' prior: 0!
I represent a topic that can be added to the TerseGuide. Subclasses of me should implement #title and #examples. For instance:

>>title
    ^ 'Numbers'

>> examples
     ^ {
            { #code -> '4 factorial' . #category -> 'Common functions' . #description -> 'factorial' } as: Dictionary.
            { #code -> '2 even' . #category -> 'Common functions' . #description -> 'check if a number is even' } as: Dictionary.
        }!
!TerseGuideHelp methodsFor: 'topics' stamp: 'RNG 7/15/2018 01:31:53'!
addAdditionalTopicsTo: topicsList
	
	self class additionalTopics do: [ :each |
		topicsList at: each title put: each
	].! !
!TerseGuideHelp methodsFor: 'topics' stamp: 'jmv 5/6/2020 11:10:35'!
coreTopics
	
	^ `Dictionary new
	at: 'Arithmetic' put: #arithmetic;
	at: 'Arrays' put: #array;
	at: 'Assignment' put: #assignment;
	at: 'Associations' put: #association;
	at: 'Bags' put: #bag;
	at: 'Bit-Wise' put: #bitwise;
	at: 'Blocks' put: #block;
	at: 'Booleans' put: #boolean;
	at: 'Canvas' put: #canvas;
	at: 'Character' put: #character;
	at: 'Coding' put: #coding;
	at: 'Colors' put: #colors;
	at: 'Conditional Statements' put: #conditionalStatement;
	at: 'Conversion' put: #conversion;
	at: 'Date' put: #date;
	at: 'Debugging' put: #debugging;
	at: 'Dictionary' put: #dictionary;
	at: 'Dynamic Messages' put: #dynamic;
	at: 'Exceptions' put: #exceptions;
	at: 'Features' put: #feature;
	at: 'File Operations' put: #fileMan;
	at: 'Fonts' put: #font;
	at: 'Forms' put: #form;
	at: 'Heap' put: #heap;
	at: 'Internal Streams' put: #internalStream;
	at: 'Intervals' put: #interval;
	at: 'Introduction' put: #introduction;
	at: 'Iterations' put: #iterationStatement;
	at: 'Layout Morph' put: #layoutMorph;
	at: 'Layout Spec' put: #layoutSpec;
	at: 'Literals' put: #literals;
	at: 'Metaclass' put: #metaclass;
	at: 'Method Calls' put: #methodCall;
	at: 'Miscellaneous' put: #misc;
	at: 'Morphs' put: #morph;
	at: 'Object' put: #anObject;
	at: 'Ordered Collections' put: #orderedCollection;
	at: 'Point' put: #point;
	at: 'PopUpMenu' put: #popUpMenu;
	at: 'Primitives' put: #primitive;
	at: 'Rectangle' put: #rectangle;
	at: 'Sets' put: #set;
	at: 'Sorted Collections' put: #sortedCollection;
	at: 'Strings' put: #string;
	at: 'Symbols' put: #symbol;
	at: 'Syntax' put: #syntax;
	at: 'Time' put: #time;
	at: 'Transcript' put: #transcript;	
	at: 'Trie' put: #trie;
	at: 'Custom Browsers' put: #customBrowsers;
	yourself`! !
!TerseGuideHelp methodsFor: 'topics' stamp: 'RNG 7/15/2018 01:31:23'!
terseTopics
	"Translate a list item to a class method selector"
	|allTopics|
	allTopics _ self coreTopics.
	self addAdditionalTopicsTo: allTopics.
	^ allTopics! !
!TerseGuideHelp methodsFor: 'initialization' stamp: 'dhn 5/17/2016 16:50' overrides: 50730358!
initialize
	super initialize.
	topics _ self terseTopics.
	topicList _ self class pages.
! !
!TerseGuideHelp methodsFor: 'user interface support' stamp: 'dhn 6/15/2016 18:29'!
selectedTopic: aTopic
	"Set the value of selectedTopic and set the contents of the text pane"
	
	selectedTopic _ aTopic.
	textPane model actualContents: self updateTopicText.
	self triggerEvent: #topicListIndex! !
!TerseGuideHelp methodsFor: 'user interface support' stamp: 'dhn 2/26/2015 07:59'!
topicList
	^ topicList! !
!TerseGuideHelp methodsFor: 'user interface support' stamp: 'dhn 2/26/2015 08:42'!
topicListIndex
	topicList ifNil: [ ^ topicListIndex _ 0 ].
	^ topicList indexOf: selectedTopic! !
!TerseGuideHelp methodsFor: 'user interface support' stamp: 'dhn 10/18/2015 20:20'!
topicListIndex: index
	"Set the vakue of topicListIndex and set the value of selectedTopic"
	
	topicListIndex _ index.
	self selectedTopic: 
		(topicList at: index ifAbsent: nil)! !
!TerseGuideHelp methodsFor: 'user interface support' stamp: 'RNG 7/15/2018 01:45:10'!
updateTopicText
	"Answer the text of the selected topic and change the window label accordingly"
	| topic topicTitle |
	
	topicListIndex = 0 ifTrue: [ window setLabel: 'Terse Guide'. ^ ''].
	topic _ topics at: selectedTopic.
	topicTitle _ topic isSymbol ifTrue: [ self terseTopics keyAtValue: topic ] ifFalse: [ topic title ].
	window setLabel: ('Terse Guide to ', topicTitle).
	^ topic isSymbol ifTrue: [ self class perform: topic ] ifFalse: [ topic script ]! !
!TerseGuideHelp methodsFor: 'accessing' stamp: 'dhn 10/18/2015 20:01'!
textPane: anObject
	"Set the value of textPane"
	
	textPane _ anObject! !
!TerseGuideHelp methodsFor: 'accessing' stamp: 'dhn 2/27/2015 21:07'!
window: anObject
	"Set the value of window"

	window _ anObject! !
!TerseGuideHelp methodsFor: 'testing' stamp: 'jmv 5/29/2020 16:30:16' overrides: 50694262!
styleByParagraphs
	"Answer true if each paragraph should be styled independent of the others.
	We want to allow mutil-paragraph comments, and we are careful for our contents to be valid Smalltalk."

	^false! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 13:18:04'!
anObject
	"Object"
	^
'| x y |
x _ self activeHand.
	"Answer a hand for the morphic world that is the current UI focus.
	This is the UI root animated by the active Process.
	This method could answer nil, if not in a UI process!!"

y _ self as: HandMorph.
	"Create an object of class aSimilarClass that has similar contents to the receiver."

y _ x asString.
	"Answer a string that represents the receiver."

x _ #foo.
y become: x. 
	"Swap the object pointers of the receiver and the argument.
	Fails if either object is a SmallInteger"

self break.
	"This is a simple message to use for inserting breakpoints during debugging.
	The debugger is opened by sending a signal. This gives a chance to restore
	invariants related to multiple processes."

y changed.
	"Receiver changed in a general way; inform all the dependents by 
	sending each dependent an update: message."

x class.
	"Answer the object which is the receiver''s class."

x className.
	"Answer a string characterizing the receiver''s class, for use in list views for example"

nil confirm: ''Are you hungry?''.	
	"Put up a yes/no menu with a caption. Answer true if the response 
	is yes, false if no. This is a modal question--the user must respond 
	yes or no."

x _ nil confirm: ''Are you hungry?'' orCancel: [x _ ''perhaps''].
	"Put up a yes/no/cancel menu with caption aString. Answer true if  
	the response is yes, false if no. If cancel is chosen, evaluate  
	cancelBlock. This is a modal question--the user must respond yes, no, or cancel."

y disableCode: [nil confirm: ''Is this necessary?''.].
	"Use this method instead of commenting temporarily disabled code.
	This way, it will be accessible with senders, references to variables, etc.
	Besides, you''ll avoid problems when the code to disable has comments!!"

y disableCode: [self executeMethod: #fullPrintString. "Execute compiledMethod against the receiver with no args"].

x fullPrintString.
	"Answer a String whose characters are a description of the receiver."

self halt.
	"This is the typical message to use for inserting breakpoints during 
	debugging. It behaves like halt:, but does not call on halt: in order to 
	avoid putting this message on the stack. Halt is especially useful when 
	the breakpoint message is an arbitrary one."

self halt: ''something to aid debugging''.
	"This is the typical message to use for inserting breakpoints during 
	debugging. It creates and schedules a Notifier with a label."

self inboundPointers.  "Answers a collection of all objects in the system that point to myself"

self inboundPointersExcluding: #().  "Answer a list of all objects in the system that point to me, excluding those in the collection of objectsToExclude. I do my best to avoid creating any temporary objects that point to myself"

nil inform: ''Nothing exceeds like excess.''.  "Display a message for the user to read and then dismiss."

x inspectWithLabel: ''Interesting Instance''.  "Create and schedule an Inspector labelled aLabel."

x isKindOf: Set. 	"Answer whether the argument is a superclass or class of the receiver."

y isMemberOf: Symbol. 
	"Answer whether the receiver is an instance of the argument class"

y longPrintString.
	"Answer a String whose characters are a description of the receiver."

nil notify: ''this is a notice''. 
	"Create and schedule a Notifier with the argument as the message in 
	order to request confirmation before a process can proceed."

x _ y outboundPointers.
"Answers a list of all objects I am causing not to be garbage-collected"

x perform: #asBag. 
	"Send the unary selector, a symbol, to the receiver.
	Fail if the number of arguments expected by the selector is not zero."

x perform: #at: with: 2. 
	"Send the selector, a symbol, to the receiver with an argument.
	Fail if the number of arguments expected by the selector is not one."

x perform: #at:put: with: 2 with: ''bar''. 
	"Send the selector, a symbol, to the receiver with the given arguments.
	Fail if the number of arguments expected by the selector is not two."

x perform: #at:put: withArguments: {2. 17.6}. 
	"Send the selector, a symbol, to the receiver with arguments in an array.
	Fail if the number of arguments expected by the selector does not match 
	the size of the array."

y printOn: String new writeStream.
	"Append to the argument, a stream, a sequence of characters that  
	identifies the receiver."

nil shouldBeImplemented.
	"Announce that this message should be implemented"

nil shouldNotImplement.
	"Announce that, although the receiver inherits this message, it should 
	not implement it."

y storeOn: String new writeStream. 
	"Append to the argument a sequence of characters that is an 
	expression whose evaluation creates an object similar to the receiver."

y storeString.
	"Answer a String representation of the receiver from which the receiver 
	can be reconstructed."

self subclassResponsibility.
	"This message sets up a framework for the behavior of the class'' subclasses.
	 Announce that the subclass should have implemented this message."

self triggerEvent: #mouseOver.
	"Evaluate all actions registered for the argument, an EventSelector. Return the 
	value of the last registered action."

x yourself.

y ~= #foo. 
	"Answer whether the receiver and the argument do not represent the 
	same object."

y ~~ #foo. 
	"Answer whether the receiver and the argument are not the same object 
	(do not have the same object pointer)."

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 13:43:44'!
arithmetic
	"Arithmetic Expressions"
	^
'| x y |
x _ 6 + 3.								"addition"
x _ 6 - 3.								"subtraction"
x _ 6 * 3.								"multiplication"
x _ 1 + 2 * 3.							"evaluation always left to right (1 + 2) * 3"
x _ 5 / 3.								"division with fractional result"
x _ 5 / 3.0.							"division with float result"
x _ 5.0 // 3.0.						"integer divide"
x _ 5.0 \\ 3.0.						"integer remainder"
x _ -5.									"unary minus"
x _ 5 sign.								"numeric sign (1, -1 or 0)"
x _ 5 negated.							"negate receiver"
x _ 1.2 integerPart.					"integer part of number (1.0)"
x _ 1.2 fractionPart.				"fractional part of number (0.2)"
x _ 5 reciprocal.						"reciprocal function"
x _ 6 * 3.1.							"auto convert to float"
x _ 5 squared.							"square function"
x _ 25 sqrt.							"square root"
x _ 5 raisedTo: 2.					"power function"
x _ 5 raisedToInteger: 2.			"power function with integer"
x _ 5 exp.								"exponential"
x _ -5 abs.								"absolute value"
x _ 3.99 rounded.						"round"
x _ 3.99 truncated.					"truncate"
x _ 3.99 roundTo: 1.					"round to specified decimal places"
x _ 3.99 truncateTo: 1.				"truncate to specified decimal places"
x _ 3.99 floor.						"integer nearest the receiver toward negative infinity"
x _ 3.99 ceiling.						"integer nearest the receiver toward  infinity"
x _ 5 factorial.						"factorial"
x _ -5 quo: 3.							"integer divide rounded toward zero"
x _ -5 rem: 3.							"integer remainder rounded toward zero"
x _ 28 gcd: 12.						"greatest common divisor"
x _ 28 lcm: 12.						"least common multiple"
x _ 28 mod: 12.						"modulo"
x _ 100 ln.								"natural logarithm"
x _ 100 log.							"base 10 logarithm"
x _ 100 log: 10	.					"logarithm with specified base"
x _ 100 floorLog: 10.				"floor of the log"
x _ 180 degreesToRadians.			"convert degrees to radians"
x _ 3.14 radiansToDegrees.			"convert radians to degrees"
x _ 0.7 sin.							"sine"
x _ 0.7 cos.							"cosine"
x _ 0.7 tan.							"tangent"
x _ 0.7 arcSin.						"arcsine"
x _ 0.7 arcCos.						"arccosine"
x _ 0.7 arcTan.						"arctangent"
x _ 10 max: 20.						"get maximum of two numbers"
x _ 10 min: 20.						"get minimum of two numbers"
x _ Float pi.							"pi"
x _ Float e.							"exp constant"
x _ Float infinity.					"infinity"
x _ Float nan.							"not-a-number"
x _ Random new next; yourself.	"establish a local pseudo-random number generator"
x next.									"random number on the interval (0.0,1.0)"
y _ 100 atRandom.						"random integer on the interval (1,receiver)"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 14:04:52'!
array
	"Arrays"
	^
'"
	Array:              Fixed length collection
	ByteArray:     Array limited to byte elements (0-255)
	WordArray:    Array limited to word elements (0-2^32)
"
| b x y sum max |	"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
x _ #(4 3 2 1).								"constant array"
x _ Array with: 5 with: 4 with: 3 with: 2.         "create array with 4 elements"
x _ Array new: 4.								"allocate an array with specified size"
x													"set array elements"
   at: 1 put: 5;
   at: 2 put: 4;
   at: 3 put: 3;
   at: 4 put: 7;
   yourself.									"without this, x will be 7 (the last element)"

b _ x isEmpty.									"test if array is empty"
y _ x size.										"array size"
y _ x at: 4.									"get array element at index"
b _ x includes: 3.							"test if element is in array"
y _ x copyFrom: 2 to: 4.					"subarray"
y _ x indexOf: 3 ifAbsent: [0].			"first position of element within array"
y _ x occurrencesOf: 3.						"number of times object in collection"
x do: [:a | Transcript show: a printString; newLine].  "iterate over the array"
b _ x allSatisfy: [:a | (a >= 1) & (a <= 4)].	"test if all elements meet condition"
y _ x select: [:a | a > 2].				"return collection of elements that pass test"
y _ x reject: [:a | a < 2].				"return collection of elements that fail test"
y _ x collect: [:a | a + a].				"transform each element for new collection"
y _ x detect: [:a | a > 3] ifNone: [].	"return first element that passes test"
y _ x findFirst: [:a | a < 3].			"find position of first element that passes test"
sum _ 0. x do: [:a | sum _ sum + a]. sum.	"sum array elements"
sum _ 0. 1 to: (x size) do: [:a | sum _ sum + (x at: a)].  "sum array elements"
sum _ x inject: 0 into: [:a :c | a + c].	"sum array elements"
max _ x inject: 0 into: [:a :c | (a > c)	"find max element in array"
   ifTrue: [a]
   ifFalse: [c]].
y _ x shuffled.								"randomly shuffle collection"
y _ x asArray.									"convert to array"
y _ x asByteArray.							"convert to byte array"
y _ x asWordArray.							"convert to word array"
y _ x asOrderedCollection.					"convert to ordered collection"
y _ x asSortedCollection.					"convert to sorted collection"
y _ x asBag.									"convert to bag collection"
y _ x asSet.									"convert to set collection"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 5/11/2020 17:09:56'!
assignment
	"Assignment"
	^
'| x y z |
"either the Cuis or the ASCII convention can be used for assignment"
x _ 4.								"assignment (Cuis) using the underline character ($_)"
z := 7.								"assignment (ASCII)"
x _ y _ z _ 6.						"compound assignment"
x _ (y _ 6) + 1.
x _ Object new.					"bind to an allocated instance of a class"
x _ 123 class.						"discover the class of the object"
x _ Integer superclass.			"discover the superclass of a class"
x _ Object allInstances.		"get an array of all instances of a class"
x _ Integer allSuperclasses.	"get all superclasses of a class"
x _ 1.2 hash.						"hash value for object"
y _ x copy.							"copy the object"
y _ x shallowCopy.				"copy the object (not overridden)"
y _ x veryDeepCopy.				"complete tree copy using a dictionary"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 6/7/2015 12:37'!
association
	"Associations"
	^
'| x y |
x _ #myVar->''hello''.		"Create an association"
y _ x key.
y _ x value.

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 14:11:33'!
bag
	"Bags"
	^
'| b x y sum max |
x _ Bag with: 4 with: 3 with: 2 with: 1.	"create a Bag collection with 4 elements"
x _ Bag new.										"allocate collection"
x add: 4; add: 3; add: 1; add: 2; yourself.	"add element to collection; see NOTE"
x add: 3 withOccurrences: 2.					"add multiple copies to collection"
y _ x addAll: #(7 8 9).							"add elements to the collection and answer the added elements; see NOTE"
y _ x removeAll: #(7 8 9).						"remove elements from the collection and answer the removed elements; see NOTE"
y _ x remove: 4 ifAbsent: [].					"remove element from collection"
b _ x isEmpty.										"test if empty"
y _ x size.											"number of elements"
b _ x includes: 3.								"test if element is in collection"
y _ x occurrencesOf: 3.							"number of times object in collection"
x do: [:a | Transcript show: a printString; newLine].	"iterate over the collection"
b _ x allSatisfy: [:a | (a >= 1) & (a <= 4)].	"test if all elements meet condition"
y _ x select: [:a | a > 2].					"return collection of elements that pass test"
y _ x reject: [:a | a < 2].					"return collection of elements that fail test"
y _ x collect: [:a | a + a].					"transform each element for new collection"
y _ x detect: [:a | a > 3] ifNone: [].		"return first element that passes test"
sum _ 0. x do: [:a | sum _ sum + a]. sum.	"sum elements"
sum _ x inject: 0 into: [:a :c | a + c].	"sum elements"
max _ x inject: 0 into: [:a :c | (a > c)	"find max element in collection"
   ifTrue: [a]
   ifFalse: [c]].
y _ x asOrderedCollection.						"convert to ordered collection"
y _ x asSortedCollection.						"convert to sorted collection"
y _ x asBag.										"convert to bag collection"
y _ x asSet.										"convert to set collection"

"NOTE: methods in subclasses of Collection, of which Bag is one, answer
 the ARGUMENT instead of the resulting collection. Examples of such 
 methods are #addAll: and #removeAll:. Sending #yourself to the collection
 will answer the collection instead of the argument."

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 9/5/2015 20:34'!
bitwise
	"Bitwise Manipulation"
	^
'| b x |
x _ 16rFF bitAnd: 16r0F.			"and bits"
x _ 16rF0 bitOr: 16r0F.				"or bits"
x _ 16rFF bitXor: 16r0F.			"xor bits"
x _ 16rFF bitInvert.					"invert bits"
x _ 16r0F bitShift: 4.				"left shift"
x _ 16rF0 bitShift: -4.				"right shift"
x _ 16r80 bitAt: 8.					"bit at position (0|1)"
x _ 16r80 highBit.					"position of highest bit set"
b _ 16rFF allMask: 16r0F.			"test if all bits set in mask are set in receiver"
b _ 16rFF anyMask: 16r0F.			"test if any bits set in mask are set in receiver"
b _ 16rFF noMask: 16r0F.			"test if all bits set in mask are clear in receiver"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 14:17:04'!
block
	"Blocks"
	^
'"
	Blocks:
		- blocks are objects and may be assigned to a variable
		- value is last expression evaluated unless explicit return
		- blocks may be nested
		- specification [ arguments | | localvars | expressions ]	
		- ^expression terminates block & method (exits all nested blocks)
		- blocks intended for long term storage should not contain ^
"
| x y z fac |
x _ [ y _ 1. z _ 2. ]. x value.					"simple block usage"
x _ [ :argOne :argTwo |   argOne, '' and '' , argTwo.].     "set up block with argument passing"
Transcript show: (x value: ''First'' value: ''Second''); newLine.  "use block with argument passing"
x _ [:e | | v | v _ 1. e + v] value: 2.		"localvar in a block"
fac _ [ :n | n > 1 ifTrue:  [n * (fac value: n-1)] ifFalse: [1]].  "closure on block variable"
fac value: 5.											"closure variable scoped to its block"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 14:19:28'!
boolean
	"Booleans"
	^
'| b x y |
x _ 1. y _ 2.
b _ (x = y).							"equals"
b _ (x ~= y).							"not equals"
b _ (x == y).							"identical"
b _ (x ~~ y).							"not identical"
b _ (x > y).							"greater than"
b _ (x < y).							"less than"
b _ (x >= y).							"greater than or equal"
b _ (x <= y).							"less than or equal"
b _ b not.								"boolean not"
b _ (x < 5) & (y > 1).				"boolean and"
b _ (x < 5) | (y > 1).				"boolean or"
b _ (x < 5) and: [y > 1].			"boolean and (short-circuit)"
b _ (x < 5) or: [y > 1].			"boolean or (short-circuit)"
b _ (x < 5) eqv: (y > 1).			"test if both true or both false"
b _ (x < 5) xor: (y > 1).			"test if one true and other false"
b _ 5 between: 3 and: 12.			"between (inclusive)"
b _ 123 isKindOf: Number.			"test if object is class or subclass of"
b _ 123 isMemberOf: SmallInteger.	"test if object is type of class"
b _ 123 respondsTo: #sqrt.			"test if object responds to message"
b _ x isNil.							"test if object is nil"
b _ x isZero.							"test if number is zero"
b _ x positive.						"test if number is positive"
b _ x strictlyPositive.				"test if number is greater than zero"
b _ x negative.						"test if number is negative"
b _ x even.								"test if number is even"
b _ x odd.								"test if number is odd"
b _ x isLiteral.						"test if literal constant"
b _ x isInteger.						"test if object is integer"
b _ x isFloat.							"test if object is float"
b _ x isNumber.						"test if object is number"
b _ x isSymbol.						"test if object is a Symbol"
b _ $A isUppercase.					"test if upper case character"
b _ $A isLowercase.					"test if lower case character"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 2/19/2016 20:44'!
canvas
	"Canvas"
	^
'| x y |

"
	There is no Canvas class.
	
	A canvas is produced by sending #getCanvas to a Form.
"

x _ Form extent: 200@100 depth: 32.	"Answer a form with color depth 32"

y _ x getCanvas.							"convert form to canvas (a BitBltCanvas)"
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 14:20:26'!
character
	"Character"
	^
'| x y b |
x _ $A.										"character assignment"
y _ x isLowercase.						"test if lower case"
y _ x isUppercase.						"test if upper case"
y _ x isLetter.							"test if letter"
y _ x isDigit.								"test if digit"
y _ x isAlphaNumeric.					"test if alphanumeric"
y _ x isSeparator.						"test if seperator char"
y _ x isVowel.								"test if vowel"
y _ x digitValue.							"convert to numeric digit value"
y _ x asLowercase.						"convert to lower case"
y _ x asUppercase.						"convert to upper case"
y _ x asciiValue.							"convert to numeric ascii value"
y _ x asString.							"convert to string"
b _ $A <= $B.								"comparison"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 3/9/2019 11:52:37'!
coding
	"Code Patterns"
	^
'"
These are Cuis code patterns intended to help the programmer exploit some of the features of Cuis classes. The examples separate the model from the view and feature two styles: coupled and decoupled.

The coupled style employs the ''dependency mechanism'' and requires the model to change when the view changes and when views which use the model are added. The primary methods of the dependency mechanism are #changed: and #update: .

The decoupled style employs the ''observer pattern'' which ensures that the model can remain unaffected by changes to the view or by additional views. The primary methods of the observer pattern are #triggerEvent: and #when:send:to: . This is the preferred style for Cuis, although both styles can be found in the base.
"
| b n |

"To examine the patterns, in the parent directory which contains Cuis-Smalltalk-Dev* do the following:
	''git clone https://github.com/Cuis-Smalltalk/CodeExamples''
	
then, do the following:	
"
Feature require: #''Code-Patterns''.				"load the package"

"To browse the examples, do (Cmd-d) these statements..."

b _ BrowserWindow openBrowser.					"open a browser"
n _ b model systemCategoryList findFirst: [:a | a = #''Code-Patterns''].  "index to the above package"
b model systemCategoryListIndex: n.				"go to the system category"

"The following statements execute the examples..."

DependencyExamples relatedViews. 				"a decoupled example"
DependencyExamples unrelatedViews. 				"another decoupled example"
DependencyExamples coupledView. 					"a coupled example"
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 14:38:36'!
colors
	"Colors"
	^
'
| x t arr |			"For efficient viewing, have a Transcript open and use Cmd-d on these statements"

x _ (Color r: 0 g: 0 b: 0) name.		"answer the name of the color, if possible"
x _ (Color r: 1.0 g: 1.0 b: 1.0) name.

arr _ #((0.0 0.0 0.0) (0.0 0.0 1.0) (0.0 1.0 0.0) (0.0 1.0 1.0) (1.0 0.0 0.0) (1.0 0.0 1.0) (1.0 1.0 0.0) (1.0 1.0 1.0)).
(arr collect: [:a | Color colorFrom: a]) explore.

"In the parent directory which contains Cuis-Smalltalk-Dev* do the following:
	''git clone https://github.com/KenDickey/Cuis-Smalltalk-ColorEditor''
	''git clone https://github.com/KenDickey/Cuis-Smalltalk-NamedColors''
	''git clone https://github.com/KenDickey/Cuis-Smalltalk-Morphic-Misc1''

then, do the following:
"
Feature require: #''Morphic-ColorEditor''.	"load the ColorEditor feature and its dependencies"

"From the menu ''World>New morph...>ColorEditor'' select ColorEditorPanel or ColorPallet"
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 16:27:14'!
conditionalStatement
	"Conditional Statements"
	^
'| x switch result |
x _ 11.
x > 10 ifTrue: [Transcript show: ''ifTrue''; newLine].		"if then"
x > 10 ifFalse: [Transcript show: ''ifFalse''; newLine].	"if else"
x > 10										"if then else"
   ifTrue: [Transcript show: ''ifTrue''; newLine]
   ifFalse: [Transcript show: ''ifFalse''; newLine].
x > 10										"if else then"
   ifFalse: [Transcript show: ''ifFalse''; newLine]
   ifTrue: [Transcript show: ''ifTrue''; newLine].
Transcript
   show:
      (x > 10
         ifTrue: [''ifTrue'']
         ifFalse: [''ifFalse'']);
   newLine.
Transcript																"nested if then else"
   show:
      (x > 10
         ifTrue: [x > 5
            ifTrue: [''A'']
            ifFalse: [''B'']]
         ifFalse: [''C'']);
   newLine.
switch _ Dictionary new.											"switch (case) functionality"
switch at: $A put: [Transcript show: ''Case A''; newLine].
switch at: $B put: [Transcript show: ''Case B''; newLine].
switch at: $C put: [Transcript show: ''Case C''; newLine].
result _ (switch at: $B) value.

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 16:33:43'!
conversion
	"Conversion"
	^
'| x |
x _ 3.99 asInteger.			"convert number to integer (truncates in Cuis)"
x _ 3.99 asFraction.			"convert number to fraction"
x _ 3 asFloat.					"convert number to float"
x _ 65 asCharacter.			"convert integer to character"
x _ $A asciiValue.			"convert character to integer"
x _ 3.99 printString.		"convert object to string via printOn:"
x _ 3.99 storeString.		"convert object to string via storeOn:"
x _ 15 printStringBase: 16.
x _ 15 storeStringBase: 16.

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'RNG 12/13/2019 13:07:13'!
customBrowsers
	"Custom Browsers"
	^
'"Open a window with all methods from a particular category"
Smalltalk 
	browseMessageList: (Smalltalk allMethodsInCategory: ''testing'')
	name: ''Testing methods''
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 16:38:28'!
date
	"Date"
	^
'| w x y b block str fmt |		"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
x _ Date today.								"create date for today"
w _ Date dateAndTimeNow.					"create array with current date and time"
x _ Date newDay: 12 month: #July year: 1999.	"create date from parts"
x _ Date fromDays: 36002.					"create date from elapsed days since 1/1/1901"
y _ Date dayOfWeek: #Monday.				"day of week as int (1-7)"
y _ Date indexOfMonth: #August.			"month of year as int (1-12)"
y _ Date daysInMonth: 2 forYear: 1996.	"day of month as int (1-31)"
y _ Date daysInYear: 1996.					"days in year (365|366)"
y _ Date nameOfDay: 1.						"weekday name (#Monday,...)"
y _ Date nameOfMonth: 3.					"month name (#January,...)"
y _ Date leapYear: 1997.					"1 if leap year; 0 if not leap year"
y _ x weekday.									"day of week (#Monday,...)"
y _ x previous: #Monday.					"date for previous day of week (one week ago)"
y _ x dayOfMonth.								"day of month (1-31)"
y _ x firstDayOfMonth.						"day of year for first day of month"
y _ x monthName.								"month of year (#January,...)"
y _ x monthIndex.								"month of year (1-12)"
y _ x daysInMonth.							"days in month (1-31)"
y _ x year.										"year (19xx)"
y _ x daysInYear.								"days in year (365|366)"
y _ x daysLeftInYear.						"days left in year (364|365)"
y _ x printFormat: #(2 1 3 $/ 1 1).		"print formatted date"
b _ (x < Date today).						"comparison"
y _ x julianDayNumber.
y _ x mmddyyyy.	"Answer the receiver rendered in standard fmt mm/dd/yyyy. Note that the name #mmddyyyy is slightly misleading -- the month and day numbers don''t show leading zeros, so that for example feb 1 1996 is 2/1/96"
y _ x month.
y _ x monthAbbreviation.
y _ x monthIndex.
y _ x monthName.
fmt _ #(1 2 3 $  3 1 ).		"Specify a format for the date, in the following scheme:"
									"#(item item item sep monthfmt yearfmt twoDigits) 
									items: 1=day 2=month 3=year will appear in the order given, 
									separated by sep which is either an ascii code or character. 
									monthFmt: 1=09 2=Sep 3=September 
									yearFmt: 1=1996 2=96 
									digits: (missing or)1=9 2=09. 
									See the examples in printOn: and mmddyy"
y _ x printFormat: fmt.	 	"Answer a String describing the receiver using the format denoted by the argument, fmt"
str _ ReadWriteStream on: String new.	"Specify a stream"
y _ x printOn: str.

str _ String new writeStream.	
y _ x printOn: str format: #(3 2 1 $.  1 2 ).  "the stream, not the receiver, contains the date in the specified format"
str contents.

y _ x secondsSinceSqueakEpoch.	"Answer the seconds since the Squeak epoch: 1 January 1901"
y _ x storeOn: str.
y _ x week.
y _ x weekday. 			"Answer the name of the day of the week on which the receiver falls."
y _ x weekdayIndex. 		"Sunday=1, ... , Saturday=7"
y _ x year.
y _ x yearNumber.
y _ x yyyymmdd. 			"Format the date in ISO 8601 standard like ''2002-10-22''."
block _ [ :d :m :y | {d. m. y} ].  "Specify an order for the date"
y _ x dayMonthYearDo: block. "Supply integers for day, month and year to aBlock and return the result"
y _ x dayMonthYearDo: [ :d :m :y | {y. m. d.} ].  "Order determined by block, not method name"
y _ x dayOfMonth. 		"Answer the day of the month represented by the receiver."
y _ x dayOfWeek. 			"Answer the day of the week represented by the receiver."
y _ x dayOfWeekName. 	"Answer the day of the week represented by the receiver."
y _ x dayOfYear.			"Answer the day of the year represented by the receiver."
y _ x daysInMonth.		"Answer the number of days in the month represented by the receiver."
y _ x daysInYear.			"Answer the number of days in the year represented by the receiver."
y _ x daysLeftInYear.
y _ x firstDayOfMonth.
y _ x isLeapYear.

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 4/12/2019 14:50:40'!
debugging
	"Debugging"
	^
'| a b x |
	"Some statements in this topic are designed to cause an error."
x _ Object new.
x yourself.									"returns receiver"
x inspect.									"open object inspector window"
x confirm: ''Is this correct?''.
x halt.										"breakpoint to open debugger window"
x halt: ''Halt message''.
x notify: ''Notify text''.
x error: ''Error string''.				"open up error window with title"
Smalltalk beep.
x shouldNotImplement.					"flag message should not be implemented"
x subclassResponsibility.				"flag message as abstract"
x errorImproperStore.					"flag an improper store into indexable object"
x errorNonIntegerIndex.					"flag only integers should be used as index"
x errorSubscriptBounds: 13.			"flag subscript out of bounds"
x primitiveFailed.						"system primitive failed"

a _ ''A1''. b _ ''B2''. a become: b.		"switch two objects, if neither is a SmallInteger"
Transcript show: a, b; newLine.

"Doing ''self halt.'' in Morphic code can be risky, because it can open an infinite sequence of debuggers."
{2. x. a.} print. 						"alternative to ''self halt.''"
thisContext printStack: 10.			"alternative to ''self halt.'' showing n lines of the call stack"

x doesNotUnderstand: (Message selector: #foo).  "flag that the message is not handled"

"Writing to-do notes to yourself can be done as follows:"
self flag: #someSymbol  "a reminder comment"
"...where you choose #someSymbol to be something you will not forget (your initials?)."
"Then, to retrieve all such messages, browse senders of #someSymbol using Cmd-n or the SmalltalkEditor menu."
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 16:52:18'!
dictionary
	"Dictionary"
	^
'"	
	Dictionary:
	IdentityDictionary:   uses identity test (== rather than =)
"
| b x y sum max aDx |		"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
x _ Dictionary new.							"allocate collection"
x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.	"add element to collection"
x at: #e put: 3.								"set element at index; see NOTE"
b _ x isEmpty.									"test if empty"
y _ x size.										"number of elements"
y _ x at: #a ifAbsent: [].					"retrieve value for key #a"
y _ x keyAtValue: 3 ifAbsent: [].		"retrieve key for given value with error block"
y _ x removeKey: #e ifAbsent: [].		"remove element from collection"
b _ x includes: 3.							"test if element is in values collection"
b _ x includesKey: #a.						"test if element is in keys collection"
y _ x occurrencesOf: 3.						"number of times object in collection"
y _ x keys.										"set of keys"
y _ x values.									"bag of values"
x do: [:a | Transcript show: a printString; newLine].  "iterate over the values collection"
x keysDo: [:a | Transcript show: a printString; newLine].  "iterate over the keys collection"
x associationsDo: [:a | Transcript show: a printString; newLine].  "iterate over the associations"
x keysAndValuesDo: [:aKey :aValue | Transcript	"iterate over keys and values"
   show: aKey printString; space;
   show: aValue printString; newLine].
b _ x allSatisfy: [:a | (a >= 1) & (a <= 4)].  "test if all elements meet condition"
y _ x select: [:a | a > 2].				"return a dictionary with values that pass test"
y _ x reject: [:a | a < 2].				"return a dictionary with values that fail test"
y _ x collect: [:a | a + a].				"transform each element for new dictionary"
y _ x detect: [:a | a > 3] ifNone: [].	"return first value that passes test"
sum _ 0. x do: [:a | sum _ sum + a]. sum.	"sum the values"
sum _ x inject: 0 into: [:a :c | a + c].	"sum the values"
max _ x inject: 0 into: [:a :c | (a > c)	"find max value in collection"
   ifTrue: [a]
   ifFalse: [c]].
y _ x asArray.									"collect values in an array"
y _ x asOrderedCollection.					"collect values in an ordered collection"
y _ x asSortedCollection.					"collect values in a sorted collection"
y _ x asBag.									"collect values in a bag"
y _ x asSet.									"collect values in a set"

Smalltalk at: #CuisGlobal put: ''Cuis entry''.	"put global in Smalltalk Dictionary"
x _ Smalltalk at: #CuisGlobal.					"read global from Smalltalk Dictionary"
Transcript show: (CuisGlobal printString).	"entries are directly accessible by name"
Smalltalk keys do: [ :k |						"print out all non-class globals"
   ((Smalltalk at: k) isKindOf: Class)
      ifFalse: [Transcript show: k printString; newLine]].
aDx _ Dictionary new.						"set up user defined dictionary"
aDx at: #MyVar1 put: ''hello1''.			"put entry in dictionary; see NOTE"
aDx add: #MyVar2->''hello2''.				"add entry to dictionary use key->value combo; see NOTE"
aDx size.		"dictionary size"
aDx keys do: [ :k |							"print out keys in dictionary"
   Transcript show: k printString; newLine].
aDx values do: [ :k |						"print out values in dictionary"
   Transcript show: k printString; newLine].
aDx keysAndValuesDo: [:aKey :aValue |	"print out keys and values"
   Transcript
      show: aKey printString;
      space;
      show: aValue printString;
      newLine].
aDx associationsDo: [:aKeyValue |		"another iterator for printing key values"
   Transcript show: aKeyValue printString; newLine].
Smalltalk removeKey: #CuisGlobal ifAbsent: [].  "remove entry from Smalltalk dictionary"

"NOTE: methods in subclasses of Collection, of which Dictionary is one, answer
 the ARGUMENT instead of the resulting collection. Examples of such 
 methods are #add: and #at:put:. Sending #yourself to the collection
 will answer the collection instead of the argument."

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 2/24/2015 14:38'!
dynamic
	"Dynamic Message Calling/Compiling"
	^
'| receiver message result argument keyword1 keyword2 argument1 argument2 |

"unary message"
receiver _ 5.
message _ ''factorial'' asSymbol.
result _ receiver perform: message.
result _ Compiler evaluate: ((receiver storeString), '' '', message).
result _ (Message new setSelector: message arguments: #()) sentTo: receiver.

"binary message"
receiver _ 1.
message _ ''+'' asSymbol.
argument _ 2.
result _ receiver perform: message withArguments: (Array with: argument).
result _ Compiler evaluate: ((receiver storeString), '' '', message, '' '', (argument storeString)).
result _ (Message new setSelector: message arguments: (Array with: argument)) sentTo: receiver.

"keyword messages"
receiver _ 12.
keyword1 _ ''between:'' asSymbol.
keyword2 _ ''and:'' asSymbol.
argument1 _ 10.
argument2 _ 20.
result _ receiver
   perform: (keyword1, keyword2) asSymbol
   withArguments: (Array with: argument1 with: argument2).
result _ Compiler evaluate:
   ((receiver storeString), '' '', keyword1, (argument1 storeString) , '' '', keyword2, (argument2 storeString)).
result _ (Message
   new
      setSelector: (keyword1, keyword2) asSymbol
      arguments: (Array with: argument1 with: argument2))
   sentTo: receiver.

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 12/7/2015 15:50'!
exceptions
	"Exceptions"
	^
'"
To see the variety of exceptions that can be useful in Cuis, open a hierarchy browser on Error.
"
| x y |

x _  1. y _ 0.
[x / y] on: ZeroDivide do: [^ ''that is big''].

[''testFile.txt'' asFileEntry fileContents] on: MessageNotUnderstood do: [^ nil].	"avoid the exception for Cancel during the dialog"	

[''testFile.txt'' asFileEntry fileContents] on: FileDoesNotExistException do: [nil confirm: ''Rather do it yourself?''].	"avoid the file-does-not-exist dialog"	

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 2/23/2016 12:15'!
feature
	"Features"
	^
'"Part of the Cuis strategy to keep a clean, small kernel is the separation of system features into smaller, more easily understood Packages.

The basic idea is that a Feature is implemented by the Package(s) it contains.

You can load Features in your code or by..."

Feature require: #''Feature-Name''.

"You can also use the File List window to install a feature which can be in any directory (World Menu -> Open-> File List). After selecting a feature, click on ''installPackage''.

A feature may depend on other features and particular versions of those features.  Cuis checks for dependencies and if all dependencies are satisfied will load packages in the proper order.

You can create your own packages and add/remove feature requirements using the Package Browser.  World Menu -> Open -> Installed Packages


There are many features for Cuis available at GitHub.

In a web browser, 
1. view https://github.com
2. type ''Cuis-Smalltalk'' in the search box
3. see the number of features available.

When you invoke:"

Feature require: #''Feature-Name''.

"Cuis will search for packages (*.pck.st) which supply the feature in...

1. the image directory and its subdirectories ''Packages'' and ''CompatibilityPackages'' 
2. siblings of the image directory whose names start with ''Cuis-Smalltalk*'' and their subdirectories named ''Packages'' and ''CompatibilityPackages''.
"

Smalltalk imagePath.		"Cuis image directory"


"Additional information is available on the web page:

''https://github.com/Cuis-Smalltalk/Cuis-Smalltalk-Dev/blob/master/Documentation/CuisAndGitHub.md''


For an example of specifying feature requirements, consider the package file ''Cuis-Smalltalk-Dev/Packages/Graphics-Files-Additional.pck.st'' which can be viewed with the File List browser. It provides feature ''Graphics-Files-Additional'' and requires Feature ''Compression''. If in code or in a Workspace you invoke (Cmd-d):"

Feature require: #''Graphics-Files-Additional''.

"...then the Compression package will be loaded, followed by Graphics-Files-Additional."


Feature require: #''Core-Packages''. 		"load all core Cuis Packages"
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 16:59:23'!
fileMan
	"File Operations"
	^
'| b c file dirEntry fullPath |	"For efficient viewing, have a Transcript open and use Cmd-d on these statements"

DirectoryEntry roots.						"answer the drive or drives"
c _ DirectoryEntry currentDirectory.	"answer the current directory"
''testFile.txt'' asFileEntry fileContents: ''Test me now''.  "answer the directory and name of a new file; set its contents"
''testFile.txt'' asFileEntry fileContents.	"print contents of a file"

''testFile.txt'' asFileEntry
	forceWriteStreamDo: [ :ios |			"overwrite old file contents"
		ios nextPut: $M.
		ios nextPutAll: ''y text ''.
		ios nextPutAll: ''data''.
		].
''testFile.txt'' asFileEntry fileContents.	"print contents of a file"

''testFile.txt'' asFileEntry appendStreamDo: [ :fileStream |
	fileStream newLine.
	fileStream nextPutAll: ''Second text line''; newLine.
	].
''testFile.txt'' asFileEntry fileContents. 	"print it"

''testFile.txt'' asFileEntry appendContents: ''The quick red fox''.

''testFile.txt'' asFileEntry fileContents. 	"print it"

''testFile.txt'' asFileEntry forceWriteStreamDo: [ :fileStream |  "overwrite the file"
	| refStyream sharedPoint input |
	"Construct the test data."
	refStyream _ ReferenceStream on: fileStream.
	input _ Array new: 9.
	input at: 1 put: nil.
	input at: 2 put: true.
	input at: 3 put: false.
	input at: 4 put: #(-4 -4.0 ''four'' four).
	input at: 5 put: (Form extent: 63 @ 50 depth: 8).
	(input at: 5) fillWithColor: Color lightOrange.
	input at: 6 put: 1024 @ -2048.
	input at: 7 put: input.							"a cycle"
	input at: 8 put: (Array with: (sharedPoint _ 0 @ -30000)).
	input at: 9 put: sharedPoint.
	refStyream nextPut: input
	].
(''testFile.txt'' asFileEntry readStreamDo: [ :fileStream |
	(ReferenceStream on: fileStream) next.
	]) explore.

''testFile.txt'' asFileEntry delete.			"remove the test file"

b _ ''testFile.txt'' asFileEntry exists.		"test for existence of the file"

''testFile.txt'' asFileEntry fileContents.	"get the file-not-found dialog; note what Cancel does"

[''testFile.txt'' asFileEntry fileContents] on: MessageNotUnderstood do: [^ nil].  "avoid the exception for Cancel during the dialog"	

''testFile.txt'' asFileEntry assureExistence.	"put it back empty"

''testFile.txt'' asFileEntry fileContents. 		"print it"

''testFile.txt'' asFileEntry delete.				"remove the test file"

fullPath _ c pathName, ''\TestDir''.				"identify a directory"
FileIOAccessor new createDirectory: fullPath.	"create a directory"
FileIOAccessor new deleteDirectory: fullPath.	"delete directory; must be empty"
FileIOAccessor new createDirectory: ''./\TestDir''.	"another way, using regex"
FileIOAccessor new deleteDirectory: fullPath.	"delete directory; must be empty"

"The following statements show one way to either create an empty file, or use the file as-is if it already exists"
c _ DirectoryEntry currentDirectory.				"answer the current directory"
dirEntry _ c pathName asDirectoryEntry / ''testFile.txt''.  "create a system-independent path expression"
fullPath _ dirEntry asString.							"convert path expression to string"
fullPath asFileEntry assureExistence.				"create testFile.txt if it does not exist"
fullPath asFileEntry assureExistence.				"do nothing if testFile.txt already exists"
''testFile.txt'' asFileEntry delete.					"remove the test file"

DirectoryEntry smalltalkImageDirectory.			"answer the Smalltalk image directory"
DirectoryEntry vmDirectory.							"answer the VM directory"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'jmv 6/11/2020 17:04:45'!
font
	"Fonts"
	^
'"
Cuis includes by default one StrikeFont, but can also use TrueType fonts.

To add additional included fonts
"

FontFamily readAdditionalTrueTypeFonts.

FontFamily familyNames.				"list the installed fonts"

((LabelMorph contents: ''Text in the selected font.'') changeFont) openInHand. "look at an example"
"
The selection of currently installed fonts may be viewed from the text editor:

World > Open... > Text Editor
...then use (Cmd-k) to see a list of installed fonts.

To use any TrueTypeFont, just open the FileList, select any .ttf file, and click on [read font].
"
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 17:01:26'!
form
	"Forms"
	^
'| x y |
x _ Form dotOfSize: 20.	"Make a form containing a dot (as yet unseen)."
x displayAt: 500@200.	"Cause the form to appear at a point on the display."
Display restore.			"Erase what was displayed."

x _ Form extent: 22@18.
	"Answer a Form with a blank bitmap of depth 1."

x _ Form extent: 22@18 depth: 8.
	"Answer a Form with blank bitmap 22 pixels wide and 18 pixels deep having color depth 8."
	
y _ x getCanvas.			"convert form to canvas (a BitBltCanvas)"

WidgetMorph new drawOn: y; morphExtent: 300@200; openInWorld.
	"Display a morph on a canvas"

x _ Form fromUser.
	"Answer a Form with bitmap initialized from the area of the display screen designated by the user."

x _ Form toothpaste: 15.
	"Draw with mouse button down; terminate by option-click."

x _ Form 
		verticalGradient: 120
		topColor: Color white
		bottomColor: (Color gray: 0.65).
	"Answer a fixed-width form, 120 pixels high, which illustrates shading."

x fillColor: Color green.
	"Set all pixels in the receiver to green."

y _ x icon.
	"Answer a 16 x 16 icon of the receiver"

y _ x magnifyBy: 1.5. 
	"Answer a Form created as a scaling of the receiver. Scale may be a Float, and may be greater or less than 1.0."

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 17:02:59'!
heap
	"Heap"
	^
'| x n sort |
x _ Heap new.						"Answer a heap of default size"
x _ Heap new: (n _ 7).			"Answer a heap of size n"
x _ Heap with: #purple with: #green.	"Answer a Heap with the two arguments as elements."
sort _ [:a :c | a > c].		"Define a sorting order"
x _ Heap withAll: #(11 32 19 21).	"Create a new heap with all the elements from a collection"
x sortBlock: sort.						"Specify how to sort the heap"
x _ Heap withAll: #(11 32 19 21) sortBlock: sort.	"Create a new heap sorted according to a sortBlock"
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 5/11/2020 17:59:02'!
internalStream
	"Internal  Streams"
	^
'| b x ios str |			"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
ios _ ReadStream on: ''Hello read stream''.
ios _ ReadStream on: ''Hello read stream'' from: 1 to: 5.
[(x _ ios nextLine) notNil]
   whileTrue: [Transcript show: x; newLine].
ios position: 3.
ios position.
x _ ios next.
x _ ios peek.
x _ ios contents.
b _ ios atEnd.

ios _ ReadWriteStream on: ''Hello read stream''.
ios _ ReadWriteStream on: String new.
ios _ ReadWriteStream on: ''Hello read stream'' from: 1 to: 5.
ios _ ReadWriteStream with: ''Hello read stream''.
ios _ ReadWriteStream with: ''Hello read stream'' from: 1 to: 10.
ios position: 0.
[(x _ ios nextLine) notNil]
   whileTrue: [Transcript show: x; newLine].
ios position: 6.
ios position.
ios nextPutAll: ''Chris''.
x _ ios next.
x _ ios peek.
x _ ios contents.
b _ ios atEnd.

str _ String new writeStream.				"use a stream to form a string"
str nextPutAll: ''As of ''.					"more efficient than concatenation"
str nextPutAll: Date today asString.
str nextPut: $,; space.						"newLine and tab are also possible"
str nextPutAll: Float pi printString, '' radians = ''.  "concatenation can be used"
str nextPutAll: Float pi radiansToDegrees printString.
str nextPutAll: '' degrees.''; newLine.  "complete the formation"
x _ str contents.								"to get the results"

x _ String streamContents: [:string |	"a more compact way"
	string 
		nextPutAll: ''As of '';
		nextPutAll: Date today asString;
		nextPut: $,; space;
		nextPutAll: Float twoPi printString, '' radians = '';  "concatenation can be used"
		nextPutAll: Float twoPi radiansToDegrees printString;
		nextPutAll: '' degrees.''; newLine].  "complete the formation"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 17:07:36'!
interval
	"Intervals"
	^
'| b x y sum max |
x _ Interval from: 5 to: 10.					"create interval object"
x _ 5 to: 10.
x _ Interval from: 5 to: 10 by: 2.			"create interval object with specified increment"
x _ 5 to: 10 by: 2.
b _ x isEmpty.										"test if empty"
y _ x size.											"number of elements"
x includes: 9.										"test if element is in collection"
x do: [:k | Transcript show: k printString; newLine].	"iterate over interval"
b _ x allSatisfy: [:a | (a >= 1) & (a <= 4)].	"test if all elements meet condition"
y _ x select: [:a | a > 7].					"return collection of elements that pass test"
y _ x reject: [:a | a < 2].					"return collection of elements that fail test"
y _ x collect: [:a | a + a].					"transform each element for new collection"
y _ x detect: [:a | a > 3] ifNone: [].		"return first element that passes test"
y _ x findFirst: [:a | a > 6].				"find position of first element that passes test"
sum _ 0. x do: [:a | sum _ sum + a]. sum.	"sum elements"
sum _ 0. 1 to: (x size) do: [:a | sum _ sum + (x at: a)]. sum.	"sum elements"
sum _ x inject: 0 into: [:a :c | a + c].	"sum elements"
max _ x inject: 0 into: [:a :c | (a > c)	"find max element in collection"
   ifTrue: [a]
   ifFalse: [c]].
y _ x asArray.										"convert to array"
y _ x asOrderedCollection.						"convert to ordered collection"
y _ x asSortedCollection.						"convert to sorted collection"
y _ x asBag.										"convert to bag collection"
y _ x asSet.										"convert to set collection"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 5/11/2020 20:36:28'!
introduction
	"Using Terse Guide"
	^
'"
You are reading this in the text pane of the Terse Guide window. This pane is a kind of Workspace and is managed by the SmalltalkEditor of Cuis. This means that you can Do (Cmd-d) or Print (Cmd-p) statements in order to see the result. If you have a Transcript open, the result will appear in it.

The SmalltalkEditor enables you to Do or Print a statement when the cursor is in the statement. It is not necessary to first highlight the entire statement, unless it continues on more than one line.

This text pane is refreshed each time it is accessed. You can change the examples and run them without hurting anything. Go ahead and experiment!!

The Terse Guide does not attempt to provide the entire protocol of a topic. You are encouraged to explore further by using the Protocol Browser as follows:

Button 1>World>Open...>Browser 
then in the upper right pane:
Button 2>Message List>browse protocol

You can narrow the scope of protocol browsing by selecting a class in the upper left pane of the Protocol Browser.
"
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 17:12:40'!
iterationStatement
	"Iterations"
	^
'| x y |		"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
x _ 4. y _ 1.

#(5 4 3) do: [:a | x _ x + a].					"iterate over a sequenceable collection"
x.

[x > 0] whileTrue: [x _ x - 1. y _ y * 2].	"while true loop"
y.

[x >= 4] whileFalse: [x _ x + 1. y _ y * 2].	"while false loop"
y.

x timesRepeat: [y _ y * 2].						"times repeat loop (i _ 1 to x)"
y.

1 to: x do: [:a | y _ y * 2].						"for loop"
y.

1 to: x by: 2 do: [:a | y _ y / 2].				"for loop with specified increment"
y.
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'KenD 6/2/2020 20:59:34'!
layoutMorph
	"Layout Morph"
	^
'| myLayout |
myLayout _ LayoutMorph new.		"this illustrates a mistake"

"A LayoutMorph places its submorphs in a horizontal Row or a vertical Column"
myLayout _ LayoutMorph newColumn.
myLayout _ LayoutMorph newRow color: Color cyan.
myLayout openInWorld.
myLayout morphExtent: (6 * myLayout morphExtent). "Make larger to hold submorphs"

myLayout addAllMorphs: { WidgetMorph initializedInstance. ImageMorph initializedInstance. WidgetMorph initializedInstance. }.

"When there is space left over, the submorphs can be shifted
 along the layout axis.  This is the axisEdgeWeight, a number from
 0 to 1, which can also be specified by a symbol."

myLayout axisEdgeWeight: #rowRight.
myLayout axisEdgeWeight: #center.
myLayout axisEdgeWeight: #rowLeft.

myLayout beColumn.
myLayout direction." #vertical "
myLayout axisEdgeWeight: #columnBottom.
myLayout axisEdgeWeight: #center.
myLayout axisEdgeWeight: #columnTop.

myLayout beRow.
myLayout direction. " #horizontal "

myLayout separation: 10@20. "set the amount of separation for submorphs"	
myLayout xSeparation.			"answer the x component of the specified separation"
myLayout ySeparation.			"answer the y component of the specified separation"
myLayout beColumn.

"Submorphs may also have a LayoutSpec to specify proportion and offAxis placement"
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'KenD 6/3/2020 15:31:03'!
layoutSpec
	"Layout Specification"
	^
'| layout image interiorLayout rect |
"A LayoutMorph places its submorphs along the layout axis.
 The submorphs may use a LayoutSpec to specify, for width and height,
 a fixed or porportional extent, a minimum extent, an offAxisEdgeWeight."

"Some Morphs to use"
rect _ WidgetMorph initializedInstance.
image _ ImageMorph initializedInstance.
rect layoutSpec: (LayoutSpec fixedWidth: 80 proportionalHeight: 0.6 offAxisEdgeWeight: #center).
"Layouts can contain layouts"
interiorLayout _ LayoutMorph newColumn.
interiorLayout separation: 10@20.
interiorLayout layoutSpec: (LayoutSpec proportionalWidth: 0.3 proportionalHeight: 60).
interiorLayout addMorph: WidgetMorph initializedInstance.
interiorLayout addAdjusterAndMorph: (WidgetMorph new) proportionalWidth: 1.0.
"A LayoutMorph to contain them"
layout _ LayoutMorph newRow.
layout addAllMorphs: { image. interiorLayout. rect. }.
layout openInWorld.
"Make it bigger"
layout morphExtent: (3 * layout morphExtent).
"Make it colorful"
interiorLayout color: Color cyan.
layout color: Color green lighter lighter.
"add handles; mouse grab lower-right yellow circle with tooltip Change Size."
layout addHalo.
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'jmv 5/6/2020 11:14:41'!
literals
	"Literals"
	^
'"Literals are objects that are created when you compile a method. They are always available when the method is run, and the same instance is used each time. Remember that when a method is run, the source code, compiled to create it, is no longer used at all. This includes the source code for the literals. In the example below, the CompiledMethod will not have a string ''3.14'', but the Float object built after it.
Note: It is considered bad practice to later modify them, as they would no longer match their source code."
| b x |
b _ true.									"true pseudo-variable"
b _ false.									"false pseudo-variable"
x _ nil.										"nil object pseudo-variable"
x _ 1.										"SmallInteger literal"
x _ 3.14.									"Float literal"
x _ 2e-2.									"Fraction literal"
x _ 2.0e-2.									"Float literal"
x _ 7/8.										"Fraction literal"
x _ 16r0F.									"SmallInteger literal".
x _ 16rFFFFFFFF.							"LargePositiveInteger literal".
x _ 16rFFFFFFFF negated.				"LargeNegativeInteger literal".
x _ -1.										"negative SmallInteger literal"
x _ ''Hello''.								"String literal"
x _ ''I''''m here''.							"single quote escape"
x _ $A.										"Character literal"
x _ $ .										"Character literal (space)"
x _ #aSymbol.								"Symbol literal"
x _ #(3 2 1).								"Array literal"
x _ #(''abc'' 2 $a).						"mixing of types allowed (all literal)"
x _ #[3 2 1 0].							"ByteArray literal"
x _ #[1.0 3.141592 6.02e23].			"Float64Array literal"

x _ {''Hello'' size. Float pi. 1.0 arcTan }.    "Warning: NOT a literal. Created on each run"
x _ `{''Hello'' size. Float pi. 1.0 arcTan }`.  "Backtick syntax. Anything can be a literal!!"
x _ `{ 1. 3. 5. 7. 11. 13. 17} asSet`.          "A literal Set"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 17:49:15'!
metaclass
	"Class / Metaclass"
	^
'| b x |
x _ String name.							"class name"
x _ String category.						"organization category"
x _ String comment.						"class comment"
x _ String kindOfSubclass.				"subclass type - subclass: variableSubclass, etc"
x _ String definition.					"class definition"
x _ String instVarNames.				"immediate instance variable names"
x _ String allInstVarNames.			"accumulated instance variable names"
x _ String classVarNames.				"immediate class variable names"
x _ String allClassVarNames.			"accumulated class variable names"
x _ String sharedPools.					"immediate dictionaries used as shared pools"
x _ String allSharedPools.				"accumulated dictionaries used as shared pools"
x _ String selectors.					"message selectors for class"
x _ String sourceCodeAt: #indexOf:.	"source code for specified method"
x _ String allInstances.				"collection of all instances of class"
x _ String superclass.					"immediate superclass"
x _ String allSuperclasses.			"accumulated superclasses"
x _ String withAllSuperclasses.		"receiver class and accumulated superclasses"
x _ String subclasses.					"immediate subclasses"
x _ String allSubclasses.				"accumulated subclasses"
x _ String withAllSubclasses.			"receiver class and accumulated subclasses"
b _ String instSize.						"number of named instance variables"
b _ String isFixed.						"true if no indexed instance variables"
b _ String isVariable.					"true if has indexed instance variables"
b _ String isPointers.					"true if index instance vars contain objects"
b _ String isBits.						"true if index instance vars contain bytes/words"
b _ String isBytes.						"true if index instance vars contain bytes"
b _ String isWords.						"true if index instance vars contain words"
Object withAllSubclasses size.		"get total number of class entries"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'KenD 5/1/2020 16:49:17'!
methodCall
	"Method Calls"
	^
'"
	Method calls:
		- unary methods are messages with no arguments	
		- binary methods
		- keyword methods are messages with selectors including colons
 
	standard categories/protocols:
		- initialize-release    (methods called for new instance)
		- accessing             (get/set methods)
		- testing               (boolean tests - is)
		- comparing             (boolean tests with parameter
		- displaying            (gui related methods)
		- printing              (methods for printing)
		- updating              (receive notification of changes)
		- private               (methods private to class)
		- instance-creation     (class methods for creating instance)
"
| x |
x _ 2 sqrt.									"unary message"
x _ 2 raisedTo: 10.						"keyword message"
x _ 194 * 9.								"binary message"
Transcript show: (194 * 9) printString; newLine.	"combination (chaining)"
x _ 2 perform: #sqrt.					"indirect method invocation"
Transcript									"cascading ; send multiple messages to first receiver"
   show: ''hello '' ;
   show: ''world'' ;
   newLine.
"Without semicolon cascading"
x := WidgetMorph new.
x color: Color yellow.
x openInWorld.
"Using semicolon cascade -- we don''t need the variable, x"
WidgetMorph new
	color: Color yellow; 
	openInWorld.
3 + 2; * 100.							"result=300. Sends message to same receiver (3)"
"Parentheses are used for grouping.  In many cases parentheses can be replaced by ::"
3 squared ; + 5.  " 8 -- semicolon -> cascade to _original_ receiver (3)"
(3 squared) + 5. " 14 -- use parens to group"
3 squared :: + 5. " 14 -- same but double-colon -> cascade to _result_ of expression at left (9)"
"The double colon is useful in eliding parens from complex keyword expressions"
(3 squared between: 2 squared and: 4 squared) ifTrue: [ #Great ] ifFalse: [ #Oops ].
3 squared between: 2 squared and: 4 squared :: ifTrue: [ #Great ] ifFalse: [ #Oops ].

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 3/5/2015 11:34'!
misc
	"Miscellaneous"
	^
'| x |
Smalltalk condenseChanges.					"compress the change file"
x _ FillInTheBlankMorph request: ''Prompt Me''.		"prompt user for input"
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 17:53:32'!
morph
	"Morphs"
	^
'| x y z w v |			"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
x _ Morph new.				"a new but invisible morph"
x openInWorld.				"make visible in upper left of screen"
x openInHand.				"make visible at cursor location"
								"drag with the left button; show halos with the middle button"
x name: #MyName.			"used in the halos"
x name: ''My Name''.		"alternative, allowing imbedded blanks"
x morphPosition: 100@65.	"set the morph location"
y _ FillInTheBlankMorph request: ''Please Enter Something''.	"prompt user for input"
Feature require: #''Morphic-Widgets-Extras''.	"ensure a requirement is available for the following plot"
x _ FunctionGraphMorph initializedInstance openInHand.	"example, plotting two functions"
x _ SystemWindow new openInWorld.	"open a window"
x setLabel: ''Label for It''.
y _ LayoutMorph example10.				"organizing several morphs"
x addMorph: y.								"place morphs in a SystemWindow"

z _ x submorphs at: 1 :: submorphs at: 1 :: submorphs at: 2 :: submorphs at: 2.  "select a deep submorph"
	"The ''::'' syntax avoids nested parentheses"
z name.						"name of the deep submorph"
w _ z owningWindow.		"answer the first enclosing morph that is a kind of Window"
w class.
v _ x findDeepSubmorphThat: [:m | m name = #G] ifAbsent: [nil].	"find the submorph named #F"
v == z.						"verify that v and z are identical"

LayoutMorph includeInNewMorphMenu.
	"Return true for all classes that can be instantiated from the menu"

y _ Morph initializedInstance openInHand.
	"Answer an instance of the receiver which in some sense is initialized.  In the case of Morphs, this will yield an instance that can be attached to the Hand after having received the same kind of basic initialization that would be obtained from an instance chosen from the ''new morph'' menu.
	Return nil if the receiver is reluctant for some reason to return such a thing"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 17:56:38'!
orderedCollection
	"Ordered Collections"
	^
'| b x y sum max |			"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
x _ OrderedCollection with: 4 with: 3 with: 2 with: 1.	"create collection with 4 elements"
x _ OrderedCollection new.						"allocate a collection"
x add: 3; add: 2; add: 1; add: 4; yourself.	"add element to collection"
y _ x addFirst: 5; yourself.					"add element at beginning of collection"
y _ x removeFirst;	yourself.				"remove first element in collection"
y _ x addLast: 6; yourself.					"add element at end of collection"
y _ x removeLast;	yourself.					"remove last element in collection"
y _ x addAll: #(7 8 9); yourself.			"add elements to the collection"
y _ x removeAll: #(1 8 7).						"remove elements from the collection and answer the removed elements"
x at: 2 put: 3; yourself.						"set element at index"
y _ x remove: 5 ifAbsent: [].					"remove element from collection"
b _ x isEmpty.										"test if empty"
y _ x size.											"number of elements"
y _ x at: 2.										"retrieve element at index"
y _ x first.										"retrieve first element in collection"
y _ x last.											"retrieve last element in collection"
b _ x includes: 5.								"test if element is in collection"
y _ x copyFrom: 2 to: 3.						"subcollection"
y _ x indexOf: 3 ifAbsent: [0].				"first position of element within collection"
y _ x occurrencesOf: 3.						"number of times object in collection"
x do: [:a | Transcript show: a printString; newLine].	"iterate over the collection"
b _ x allSatisfy: [:a | (a >= 1) & (a <= 4)].	"test if all elements meet condition"
y _ x select: [:a | a > 2].					"return collection of elements that pass test"
y _ x reject: [:a | a < 2].					"return collection of elements that fail test"
y _ x collect: [:a | a + a].					"transform each element for new collection"
y _ x detect: [:a | a > 3] ifNone: [].		"return first element that passes test"
y _ x findFirst: [:a | a < 2].				"find position of first element that passes test"
sum _ 0. x do: [:a | sum _ sum + a]. sum.	"sum elements"
sum _ 0. 1 to: (x size) do: [:a | sum _ sum + (x at: a)]. sum.  "sum elements"
sum _ x inject: 0 into: [:a :c | a + c].	"sum elements"
max _ x inject: 0 into: [:a :c | (a > c)	"find max element in collection"
   ifTrue: [a]
   ifFalse: [c]].
y _ x shuffled.									"randomly shuffle collection"
y _ x asArray.										"convert to array"
y _ x asOrderedCollection.						"convert to ordered collection"
y _ x asSortedCollection.						"convert to sorted collection"
y _ x asBag.										"convert to bag collection"
y _ x asSet.										"convert to set collection"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 17:57:06'!
point
	"Point"
	^
'| x y |
x _ 200@100.									"obtain a new point"
y _ x x.											"x coordinate"
y _ x y.											"y coordinate"
x _ 200@100 negated.							"negates y"
x _ (200@100) negated.						"negates x and y"
x _ (-200@ -100) abs.						"absolute value of x and y"
x _ (200.5@100.5) rounded.					"round x and y"
x _ (200.5@100.5) truncated.				"truncate x and y"
x _ 200@100 + 100.							"add scale to both x and y"
x _ 200@100 - 100.							"subtract scale from both x and y"
x _ 200@100 * 2.								"multiply x and y by scale"
x _ 200@100 / 2.								"divide x and y by scale"
x _ 200@100 // 2.								"divide x and y by scale"
x _ 200@100 \\ 3.								"remainder of x and y by scale"
x _ 200@100 + (50@25).						"add points"
x _ 200@100 - (50@25).						"subtract points"
x _ 200@100 * (3@4).							"multiply points"
x _ 200@100 // (3@4).						"divide points"
x _ 200@100 max: 50@200.					"max x and y"
x _ 200@100 min: 50@200.					"min x and y"
x _ 20@5 dotProduct: 10@2.					"sum of product (x1*x2 + y1*y2)"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 8/10/2018 18:30:51'!
popUpMenu
	"PopUpMenu"
	^
'| x y b arr lin |
b _ PopUpMenu confirm: ''Are you hungry?''.
b _ PopUpMenu confirm: ''Reboot universe'' orCancel: [''Nevermind''].
b _ PopUpMenu 
		confirm: ''Are you hungry?''
		trueChoice: ''yes, I''''m famished''
		falseChoice: ''no, I just ate''.
PopUpMenu inform: ''I like Cuis''.
arr _ #(''Alpha'' ''Beta'' ''Gamma'' ''something else'').
x _ (PopUpMenu labelArray: arr) startUpWithCaption: ''Please pick one.''.
lin _ #(3).
x _ (PopUpMenu labelArray: arr lines: lin) 
	startUpWithCaption: nil 
	at: 450@200
	allowKeyboard: false.
y _ (PopUpMenu withCaption: ''Special'' chooseFrom: ''Alpha\Beta\Gamma\something else'').

x _ FillInTheBlankMorph request: ''Enter the (whatever)'' initialAnswer: ''the default''.
		"when it is not possible to pre-determine an answer"
		
"For potentially long menus, the following includes ''more...'' and ''start over...'' behavior"
x _ (PopUpMenu labels: (String streamContents: [:s | 1 to: 100 do: [:i | s print: i; newLine]])
		lines: (5 to: 100 by: 5)) startUpWithCaption: ''Long Menu Example''.		
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 3/1/2015 12:58'!
primitive
	"Primitive"
	^
'	"Some messages in the system are responded to primitively. A primitive   
	response is performed directly by the interpreter rather than by evaluating   
	expressions in a method. The methods for these messages indicate the   
	presence of a primitive response by including <primitive: xx> before the   
	first expression in the method.   
	  
	Primitives exist for several reasons. Certain basic or ''primitive'' 
	operations cannot be performed in any other way. Smalltalk without 
	primitives can move values from one variable to another, but cannot add two 
	SmallIntegers together. Many methods for arithmetic and comparison 
	between numbers are primitives. Some primitives allow Smalltalk to 
	communicate with I/O devices such as the disk, the display, and the keyboard. 
	Some primitives exist only to make the system run faster; each does the same 
	thing as a certain Smalltalk method, and its implementation as a primitive is 
	optional.  
	  
	When the Smalltalk interpreter begins to execute a method which specifies a 
	primitive response, it tries to perform the primitive action and to return a 
	result. If the routine in the interpreter for this primitive is successful, 
	it will return a value and the expressions in the method will not be evaluated. 
	If the primitive routine is not successful, the primitive ''fails'', and the 
	Smalltalk expressions in the method are executed instead. These 
	expressions are evaluated as though the primitive routine had not been 
	called.  
	  
	The Smalltalk code that is evaluated when a primitive fails usually 
	anticipates why that primitive might fail. If the primitive is optional, the 
	expressions in the method do exactly what the primitive would have done (See 
	Number @). If the primitive only works on certain classes of arguments, the 
	Smalltalk code tries to coerce the argument or appeals to a superclass to find 
	a more general way of doing the operation (see SmallInteger +). If the 
	primitive is never supposed to fail, the expressions signal an error (see 
	SmallInteger asFloat).  
	  
	Each method that specifies a primitive has a comment in it. If the primitive is 
	optional, the comment will say ''Optional''. An optional primitive that is not 
	implemented always fails, and the Smalltalk expressions do the work 
	instead.  
	 
	If a primitive is not optional, the comment will say, ''Essential''. Some 
	methods will have the comment, ''No Lookup''. See Object 
	howToModifyPrimitives for an explanation of special selectors which are 
	not looked up.  
	  
	For the primitives for +, -, *, and bitShift: in SmallInteger, and truncated 
	in Float, the primitive constructs and returns a 16-bit 
	LargePositiveInteger when the result warrants it. Returning 16-bit 
	LargePositiveIntegers from these primitives instead of failing is 
	optional in the same sense that the LargePositiveInteger arithmetic 
	primitives are optional. The comments in the SmallInteger primitives say, 
	''Fails if result is not a SmallInteger'', even though the implementor has the 
	option to construct a LargePositiveInteger. For further information on 
	primitives, see the ''Primitive Methods'' part of the chapter on the formal 
	specification of the interpreter in the Smalltalk book."'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 17:58:02'!
rectangle
	"Rectangle"
	^
'| x y b |
x _ Rectangle fromUser.	"Have the user designate the top left and bottom right corners of a rectangle."
y _ Form fromDisplay: x.	"Create a virtual bit map from the rectangle." 
y display.						"Show the rectangle at 0@0 on the display."
Display restore.				"Erase the rectangle."
		
b _ x containsPoint: 195@150.
y _ x encompass: 195@150.

y _ x expandBy: 20.
	"Answer a Rectangle that is outset from the receiver by a Rectangle, Point, or scalar."

y _ x extendBy: 55@77.
	"Answer a Rectangle with the same origin as the receiver, but whose corner is offset by a Rectangle, Point, or scalar."
	
y _ x extent.
	"Answer the receiver''s width @ the receiver''s height."

y _ x flippedBy: #vertical centerAt: 220@330. 
	"Answer a copy of the receiver flipped #vertical or #horizontal, about aPoint."

y _ x insetBy: 60. 
	"Answer a Rectangle that is inset from the receiver by delta. delta is a Rectangle, Point, or scalar."

y _ x insetOriginBy: 20 cornerBy: 20@60. 
	"Answer a Rectangle that is inset from the receiver by a given amount from the origin and corner."

y _ x left.
	"Answer the position of the receiver''s left vertical line."

y _ x left: 70.
	"Answer the receiver with it''s left side at the argument."
	
x _ Rectangle center: 40@50 extent: 200@150. 
	"Answer a rectangle whose center is at a point and whose width by height is a point.  "

x _ Rectangle encompassing: {(55@44). (33@22). (300@122)}.
	"Answer a rectangle which encompasses a list of points."

x _ Rectangle left: 65 right: 300 top: 120 bottom: 350. 
	"Answer a rectangle whose left, right, top, and bottom coordinates are determined by the arguments."

x _ Rectangle origin: 100@80 corner: 400@500. 
	"Answer a rectangle whose corners (top left and bottom right) are determined by the arguments."

x _ Rectangle origin: 100@80 extent: 300@200. 
	"Answer a rectangle whose top left corner is at a point and width by height is specified by a point."

x _ Rectangle originFromUser: 400@300.
	"Answer a rectangle that is determined by having the user designate the top left corner. The width and height are determined by the argument."

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 17:59:42'!
set
	"Sets"
	^
'| b x y sum max |
x _ Set with: 4 with: 3 with: 2 with: 1.	"create collection with 4 elements"
x _ Set new.										"allocate collection"
x add: 4; add: 3; add: 1; add: 2; yourself.	"add element to collection"
y _ x addAll: #(7 8 9).							"add elements to the collection and answer the added elements"
y _ x removeAll: #(7 8 9).						"remove elements from the collection and answer the removed elements"
y _ x remove: 4 ifAbsent: [].					"remove element from collection"
b _ x isEmpty.										"test if empty"
y _ x size.											"number of elements"
x includes: 4.										"test if element is in collection"
x do: [:a | Transcript show: a printString; newLine].	"iterate over the collection"
b _ x allSatisfy: [:a | (a >= 1) & (a <= 4)].	"test if all elements meet condition"
y _ x select: [:a | a > 2].					"return collection of elements that pass test"
y _ x reject: [:a | a < 2].					"return collection of elements that fail test"
y _ x collect: [:a | a + a].					"transform each element for new collection"
y _ x detect: [:a | a > 3] ifNone: [].		"return first element that passes test"
sum _ 0. x do: [:a | sum _ sum + a]. sum.	"sum elements"
sum _ x inject: 0 into: [:a :c | a + c].	"sum elements"
max _ x inject: 0 into: [:a :c | (a > c)	"find max element in collection"
   ifTrue: [a]
   ifFalse: [c]].
y _ x asArray.										"convert to array"
y _ x asOrderedCollection.						"convert to ordered collection"
y _ x asSortedCollection.						"convert to sorted collection"
y _ x asBag.										"convert to bag collection"
y _ x asSet.										"convert to set collection"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 18:03:26'!
sortedCollection
	"Sorted Collections"
	^
'| b x y sum max |		"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
x _ SortedCollection with: 4 with: 3 with: 2 with: 1.	"create collection with 4 elements"
x _ SortedCollection new.						"allocate collection"
x _ SortedCollection sortBlock: [:a :c | a > c]."set sort criteria"
x add: 3; add: 2; add: 1; add: 4; yourself.	"add element to collection"
y _ x addFirst: 5.								"Error: Not Appropriate for a SortedCollection"
y _ x removeFirst.								"remove first element in collection"
y _ x addLast: 6.									"add element at end of collection"
y _ x removeLast.									"remove last element in collection"
y _ x addAll: #(7 8 9).							"add elements to the collection and answer the added elements"
x sortBlock: [:a :c | a > c].					"sort in descending order"
y _ x removeAll: #(7 8 9).						"remove elements from the collection and answer the removed elements"
y _ x remove: 5 ifAbsent: [].					"remove element from collection"
b _ x isEmpty.										"test if empty"
y _ x size.											"number of elements"
y _ x at: 2.											"retrieve element at index"
y _ x first.											"retrieve first element in collection"
y _ x last.											"retrieve last element in collection"
b _ x includes: 4.									"test if element is in collection"
y _ x copyFrom: 2 to: 3.							"subcollection"
y _ x indexOf: 3 ifAbsent: [0].				"first position of element within collection"
y _ x occurrencesOf: 3.							"number of times object in collection"
x do: [:a | Transcript show: a printString; newLine].	"iterate over the collection"
b _ x allSatisfy: [:a | (a >= 1) & (a <= 4)].	"test if all elements meet condition"
y _ x select: [:a | a > 2].					"return collection of elements that pass test"
y _ x reject: [:a | a < 2].					"return collection of elements that fail test"
y _ x collect: [:a | a + a].					"transform each element for new collection"
y _ x detect: [:a | a > 3] ifNone: [].		"return first element that passes test"
y _ x findFirst: [:a | a < 3].				"find position of first element that passes test"
sum _ 0. x do: [:a | sum _ sum + a]. sum.	"sum elements"
sum _ 0. 1 to: (x size) do: [:a | sum _ sum + (x at: a)]. sum.	"sum elements"
sum _ x inject: 0 into: [:a :c | a + c].	"sum elements"
max _ x inject: 0 into: [:a :c | (a > c)	"find max element in collection"
   ifTrue: [a]
   ifFalse: [c]].
y _ x asArray.										"convert to array"
y _ x asOrderedCollection.						"convert to ordered collection"
y _ x asSortedCollection.						"convert to sorted collection"
y _ x asBag.										"convert to bag collection"
y _ x asSet.										"convert to set collection"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 18:05:11'!
string
	"Strings"
	^
'| b x y |
x _ ''This is a string''.						"string assignment"
x _ ''String'', ''Concatenation''.			"string concatenation"
b _ x isEmpty.									"test if string is empty"
y _ x size.										"string size"
y _ x at: 2.									"char at location"
y _ x copyFrom: 2 to: 4.					"substring"
y _ x indexOf: $a ifAbsent: [0].			"first position of character within string"
x _ String new: 4.							"allocate string object"
x													"set string elements"
   at: 1 put: $a;
   at: 2 put: $b;
   at: 3 put: $c;
   at: 4 put: $e;
   yourself.
x _ String with: $a with: $b with: $c with: $d.	"set up 4 elements at a time"
x do: [:a | Transcript show: a printString; newLine].	"iterate over the string"
b _ x allSatisfy: [:a | (a >= $a) & (a <= $z)].	"test if all elements meet condition"
y _ x select: [:a | a > $a].				"return all elements that meet condition"

x _ String streamContents: [:str |		"using a stream to form a string"
	str 											"more efficient than concatenation"
		nextPutAll: ''This string'';
		nextPutAll: '' is formed today, '';
		nextPutAll: Date today asString;
		nextPutAll: '', without using concatenation.''].

y _ x asSymbol.								"convert string to symbol"
y _ x asArray.									"convert string to array"
x _ ''KAAPED'' asByteArray.					"convert string to byte array"
y _ x asOrderedCollection.					"convert string to ordered collection"
y _ x asSortedCollection.					"convert string to sorted collection"
y _ x asBag.									"convert string to bag collection"
y _ x asSet.									"convert string to set collection"
y _ ''world'' shuffled.						"randomly shuffle string"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 18:06:34'!
symbol
	"Symbols"
	^
'| b x y |
x _ #Hello.									"symbol assignment"
y _ #String , #Concatenation.			"symbol concatenation (result is string)"
b _ x isEmpty.								"test if symbol is empty"
y _ x size.									"string size"
y _ x at: 2.								"char at location"
y _ x copyFrom: 2 to: 4.				"substring"
y _ x indexOf: $e ifAbsent: [0].		"first position of character within string"
x do: [:a | Transcript show: a printString; newLine].	"iterate over the string"
b _ x allSatisfy: [:a | (a >= $a) & (a <= $z)].	"test if all elements meet condition"
y _ x select: [:a | a > $a].			"return all elements that meet condition"
y _ x asString.							"convert symbol to string"
y _ x asText.								"convert symbol to text"
y _ x asArray.								"convert symbol to array"
y _ x asOrderedCollection.				"convert symbol to ordered collection"
y _ x asSortedCollection.				"convert symbol to sorted collection"
y _ x asBag.								"convert symbol to bag collection"
y _ x asSet.								"convert symbol to set collection"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 5/11/2020 17:05:02'!
syntax
	"Syntax Notes"
	^
'"
	Statement form (basic binary):
		<receiver> <message selector> [<argument>]
		There are also unary and keyword forms.

	Allowable characters:
		- a-z
		- A-Z
		- 0-9
		- .+/\*~<=>@%|&?;:''#()[]{}_
		- blank, tab, cr, ff, lf

	Variables:
		- variables must be declared before use
		- shared vars must begin with uppercase
		- local vars must begin with lowercase
		- reserved names: nil, true, false, self, super, and Smalltalk

	Variable scope:
		- Global: defined in Dictionary Smalltalk and accessible by all objects in system
		- Special: (reserved) Smalltalk, super, self, true, false, & nil
		- Method Temporary: local to a method
		- Block Temporary: local to a block
		- Pool: variables in a Dictionary object
		- Method Parameters: automatic local vars created as a result of message call with params
		- Block Parameters: automatic local vars created as a result of value: message call	
		- Class: shared with all instances of one class & its subclasses
		- Class Instance: unique to each instance of a class
		- Instance Variables: unique to each instance

	Comments are enclosed in quotes
	Period (.) is the statement separator
	
	Expressions are evaluated left-to-right.
	Message precedence: unary, binary, then keyword.
	
	A message within parentheses is sent before any messages outside the parentheses.
	Expressions with parentheses can alternatively be written with ''::'' as in the following examples..."
	
BrowserWindow fullOnClass: Parser class selector: #chainExamplesDoubleColon.
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 18:07:25'!
time
	"Time"
	^
'| x y b d1 d2 w |		"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
x _ Time dateAndTimeNow.			"answer the current date and time"
x _ Time now.							"answer the current time"
b _ (555 factorial) > 1.			"expend some time"
y _ Time now - x.						"time difference"
b _ x < Time now.						"compare times"
b _ y = x.								"check if equal"
d1 _ Time now asDurationSinceMidnight.
d2 _ Time now asDurationSinceMidnight.
y _ x hhmm24.							"Return a string of the form 2154 (for 9:54 pm), of exactly 4 digits"
y _ x hour.								"answer the number of hours in the receiver"
y _ x hour12.
y _ x hour24.
y _ x meridianAbbreviation.		"answer ''AM'' or ''PM''"
y _ x minute.							"answer the number of minutes in the receiver"
y _ x nanoSecond.						"answer the number of nanoSeconds in the receiver"
y _ x print24.							"Return microseconds expressed in 24-hour format"
String streamContents: [:s | Time now print24: true on: s].	"Format is ''hh:mm:ss'' if true or ''h:mm:ss am'' if false"
y _ x printMinutes.						"Return as string ''hh:mm pm''  "
String streamContents: [:s | Time now printOn: s].
y _ x second.							"answer the number of seconds in the receiver"
String streamContents: [:s | Time now storeOn: s].
x _ Time millisecondsToRun: [		"timing facility"
   1 to: 1000 do: [:index | y _ 400 factorial * index]].

w _ Time localMillisecondClock.	"milliseconds since the Smalltalk epoch"
"The Smalltalk epoch began at 00:00 on the morning of January 1, 1901, in the local host time zone."
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 18:08:36'!
transcript
	"Transcript"
	^
'TranscriptWindow openTranscript.	"in case one is not open already"
Transcript clear.						"clear the transcript window"
Transcript show: ''Hello World''.	"output string in transcript window"
Transcript nextPutAll: ''Hello World''.	"output string in transcript window"
Transcript nextPut: $A.				"output character in transcript window"
Transcript space.						"output space character in transcript window"
Transcript tab.						"output tab character in transcript window"
Transcript newLine.					"linefeed"
''Hello'' printOn: Transcript.		"append print string into the window"
''Hello'' storeOn: Transcript.		"append store string into the window"
Transcript endEntry.					"flush the output buffer"

"NOTE: from the pop-up menu, you can open a snapshot of the transcript in a workspace window."
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 2/23/2016 12:21'!
trie
	"Trie"
	^
'| t |		"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
t _ Trie new.
t add: ''car''.
t at: ''car'' put: Float pi.
t at: ''cat'' put: Date today.
t explore.
(t includesKey: ''car'') print.
(t includes: ''cat'') print.
t at: ''crow'' put: 7.
t forPrefix: ''c'' keysAndValuesDo: [:key :val | {key} print].
t forPrefix: ''ca'' keysAndValuesDo: [:key :val | {key} print].

t _ Trie new.
Smalltalk allImplementedMessages do: [ :s | t add: s ].
t explore.

'
! !
!TerseGuideHelp class methodsFor: 'displaying' stamp: 'dhn 11/14/2015 13:08'!
display: aSelector    
	"Open a Workspace on the text in aSelector"    
	| window |
	  
	window _ TerseGuideHelp new.    
	window 	actualContents: (self perform: aSelector).    
	window	openLabel: ('Terse Guide to ', (self class firstPrecodeCommentFor: aSelector))! !
!TerseGuideHelp class methodsFor: 'accessing' stamp: 'RNG 7/15/2018 01:33:41'!
additionalTopicTitles

	^ (self additionalTopics collect: [ :topic | topic title ]) asArray! !
!TerseGuideHelp class methodsFor: 'accessing' stamp: 'RNG 7/15/2018 01:34:27'!
additionalTopics
	"Topics that can be dynamically added by creating subclasses of TerseGuideTopic"

	^ TerseGuideTopic allSubclasses collect: [ :topicClass | topicClass new ]! !
!TerseGuideHelp class methodsFor: 'accessing' stamp: 'jmv 5/6/2020 11:11:26'!
pages
	"Answer the topics, in order, for the window list pane"
	^ #(
		'Introduction'
		'Syntax'
		'Transcript'
		'Assignment'
		'Literals'
		'Booleans'
		'Arithmetic'
		'Bit-Wise'
		'Conversion'
		'Blocks'
		'Exceptions'
		'Method Calls'
		'Conditional Statements'
		'Iterations'
		'Character'
		'Symbols'
		'Strings'
		'Fonts'
		'Arrays'
		'Ordered Collections'
		'Sorted Collections'
		'Bags'
		'Sets'
		'Intervals'
		'Associations'
		'Dictionary'
		'Trie'
		'Heap'
		'Internal Streams'
		'Coding'
		'File Operations'
		'Features'
		'Date'
		'Time'
		'Point'
		'Rectangle'
		'Forms'
		'Canvas'
		'Colors'
		'Morphs'
		'Layout Morph'
		'Layout Spec'
		'PopUpMenu'
		'Dynamic Messages'
		'Object'
		'Metaclass'
		'Debugging'
		'Miscellaneous'
		'Primitives'
		'Custom Browsers'
	) , self additionalTopicTitles! !
!TerseGuideWindow methodsFor: 'initialization' stamp: 'dhn 6/15/2016 19:03'!
buildMorphicWindow
	"Define the window layout for Terse Guide"
	| row |
	
	list1 _ (PluggableListMorph
				model: model
				listGetter: #topicList
				indexGetter: #topicListIndex
				indexSetter: #topicListIndex:
				mainView: self
				menuGetter: nil
				keystrokeAction: nil)
					name: 'Topic List'.
	textModelM _ TextModelMorph withModel: model.
	textModelM
		askBeforeDiscardingEdits: false;
		name: 'Work Space'.
	model when: #topicListIndex send: #update: to: list1 withArguments: #(#topicListIndex).
	row _ LayoutMorph newRow.
	row
		name: #Row;
		addMorph: list1 proportionalWidth: 0.2;
		addAdjusterAndMorph: textModelM proportionalWidth: 0.8.
	self layoutMorph
		addMorph: row.
	self setLabel: 'Terse Guide'! !
!TerseGuideWindow methodsFor: 'accessing' stamp: 'dhn 5/17/2016 21:21'!
textModelM
	"Answer the value of textModelM"

	^ textModelM! !
!TerseGuideWindow class methodsFor: 'instance creation' stamp: 'dhn 5/17/2016 21:21'!
openTerseGuide
"
	TerseGuideWindow openTerseGuide.
"
	| window help |

	(window _ TerseGuideWindow open: (help _ TerseGuideHelp new) label: 'Terse Guide')
		setWindowColor:  Theme current workspace.
	help textPane: window textModelM.
	help 
		contents: '';
		window: window! !
!TerseGuideTopic methodsFor: 'accessing' stamp: 'RNG 7/15/2018 01:02:39'!
examples

	^ #()! !
!TerseGuideTopic methodsFor: 'accessing' stamp: 'RNG 7/15/2018 01:37:27'!
script

	^ String streamContents: [ :stream |
		self examples do: [ :example |
			self append: example toScript: stream
		]
	]! !
!TerseGuideTopic methodsFor: 'accessing' stamp: 'RNG 7/15/2018 01:02:32'!
title

	self subclassResponsibility! !
!TerseGuideTopic methodsFor: 'private - script building' stamp: 'RNG 7/15/2018 01:38:22'!
append: example toScript: stream

	stream
		nextPutAll: (example at: #code);
		nextPutAll: '. ';
		nextPutAll: (self commentFor: example);
		newLine! !
!TerseGuideTopic methodsFor: 'private - script building' stamp: 'RNG 7/15/2018 01:38:32'!
commentFor: example

	^ '"' , (example at: #category) , ' - ' , (example at: #description) , '"'! !

----End fileIn of /home/goon/Desktop/inge1/ejsCatedra/2021-2c/20-TusLibros/Iteracion1/TusLibros-18.st----!

x _ Date today!

x _ GregorianDate today !

x _ GregorianDate today.!

x _ GregorianMonthOfYear today !

GregorianMonthOfYear!

x _ GregorianMonthOfYear current !

----STARTUP---- (4 November 2021 19:51:54) as /home/goon/Desktop/inge1/new cuis/CuisUniversity-4913.image!


----End fileIn of /home/goon/Desktop/inge1/ejsCatedra/2021-2c/20-TusLibros/Iteracion2/TusLibros-33.st----!

TestCase subclass: #TusLibrosFacadeTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosFacadeTest category: 'TusLibros' stamp: 'goc 11/4/2021 19:53:46'!
TestCase subclass: #TusLibrosFacadeTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'goc 11/4/2021 19:54:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'goc 11/4/2021 19:54:05'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'goc 11/4/2021 19:54:05'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'goc 11/4/2021 19:54:05'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'goc 11/4/2021 19:54:05'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'goc 11/4/2021 19:54:05'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'goc 11/4/2021 19:54:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'goc 11/4/2021 19:54:05'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'goc 11/4/2021 19:54:05'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'goc 11/4/2021 19:54:05'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'goc 11/4/2021 19:54:05'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'goc 11/4/2021 19:54:05'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'goc 11/4/2021 19:54:05'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'goc 11/4/2021 19:54:05'!
PASSED!

a :=Dictionary new at:'ValidUser1' put:'ValidPassword1' ; at:'ValidUser2' put:'ValidPassword2' ; yourself.!

a :=Dictionary new at:'ValidUser1' put:'ValidPassword1' ; at:'ValidUser2' put:'ValidPassword2' ; yourself.!

!classDefinition: #TusLibrosFacadeTest category: 'TusLibros' stamp: 'goc 11/4/2021 20:05:35'!
TestCase subclass: #TusLibrosFacadeTest
	instanceVariableNames: 'interface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosFacade category: 'TusLibros' stamp: 'goc 11/4/2021 20:05:47'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFacadeTest methodsFor: 'nil' stamp: 'goc 11/4/2021 20:05:59' overrides: 16927572!
setUp
	| validUsersAndPasswords|
	
	validUsersAndPasswords := Dictionary new at:'ValidUser1' put:'ValidPassword1' ; at:'ValidUser2' put:'ValidPassword2' ; yourself.
	
	interface := TusLibrosFacade withUsers: validUsersAndPasswords	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/4/2021 20:06:18' prior: 50920149 overrides: 16927572!
setUp
	| validUsersAndPasswords|
	
	validUsersAndPasswords := Dictionary new at:'ValidUser1' put:'ValidPassword1' ; at:'ValidUser2' put:'ValidPassword2' ; yourself.
	
	interface := TusLibrosFacade withUsers: validUsersAndPasswords	 
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/4/2021 20:07:56' prior: 50920161 overrides: 16927572!
setUp
	| validUsersAndPasswords|
	
	validUsersAndPasswords := Dictionary new at:'ValidUser1' put:'ValidPassword1' ; at:'ValidUser2' put:'ValidPassword2' ; yourself.
	
	interface := TusLibrosFacade withUsers: validUsersAndPasswords	 withCatalog: StoreTestObjectsFactory new defaultCatalog.
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/4/2021 20:09:21' prior: 50920173 overrides: 16927572!
setUp
	|catalog validUsersAndPasswords|
	
	validUsersAndPasswords := Dictionary new at:'ValidUser1' put:'ValidPassword1' ; at:'ValidUser2' put:'ValidPassword2' ; yourself.
	
	catalog:= StoreTestObjectsFactory new defaultCatalog.
	
	interface := TusLibrosFacade withUsers: validUsersAndPasswords	 withCatalog: catalog.
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/4/2021 20:12:18' prior: 50920187 overrides: 16927572!
setUp
	|catalog validUsersAndPasswords|
	
	validUsersAndPasswords := Dictionary new at:'ValidUser1' put:'ValidPassword1' ; at:'ValidUser2' put:'ValidPassword2' ; yourself.
	
	catalog:= StoreTestObjectsFactory new defaultCatalog.
	
	interface := TusLibrosFacade withUsers: validUsersAndPasswords	 withCatalog: catalog withSalesBook: OrderedCollection new withMerchantProcessor: self.
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/4/2021 20:18:34'!
test01
	
	| anInvalidUser aPassword|
	
	anInvalidUser := 'InvalidUser'.
	aPassword := 'pw'.
	
	self should:[ interface createCartFor: anInvalidUser with: aPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError | self assert: anError messageText equals: interface invalidUserErrorDescription]
	
	
	! !
!TusLibrosFacade class methodsFor: 'class initialization' stamp: 'goc 11/4/2021 20:19:18'!
withUsers: aDictionary withCatalog: aDictionary2 withSalesBook: anOrderedCollection withMerchantProcessor: aTusLibrosFacadeTest 
	self shouldBeImplemented.! !
!TusLibrosFacade class methodsFor: 'class initialization' stamp: 'goc 11/4/2021 20:22:29' prior: 50920229!
withUsers: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor 
	
	^ self new initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor.! !

!classDefinition: #TusLibrosFacade category: 'TusLibros' stamp: 'goc 11/4/2021 20:23:01'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'usersWithPasswords_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosFacade category: 'TusLibros' stamp: 'goc 11/4/2021 20:23:01'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'usersWithPasswords_CHANGE_ME catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosFacade category: 'TusLibros' stamp: 'goc 11/4/2021 20:23:01'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'usersWithPasswords_CHANGE_ME catalog salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosFacade category: 'TusLibros' stamp: 'goc 11/4/2021 20:23:02'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'usersWithPasswords_CHANGE_ME catalog salesBook merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 20:23:02'!
initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor 
	self shouldBeImplemented.
	usersWithPasswords_CHANGE_ME := usersWithPasswords.
	catalog := aCatalog.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.! !

!classDefinition: #TusLibrosFacade category: 'TusLibros' stamp: 'goc 11/4/2021 20:24:16'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'usersWithPasswords_CHANGE_ME catalog salesBook merchantProcessor validUsers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 20:24:14' prior: 50920282!
initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor 
	self shouldBeImplemented.
	validUsers := usersWithPasswords.
	catalog := aCatalog.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 20:24:21' prior: 50920304!
initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor 
	
	validUsers := usersWithPasswords.
	catalog := aCatalog.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.! !

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/4/2021 20:24:26'!
ERROR!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 20:24:37'!
createCartFor: aString with: aString2 
	self shouldBeImplemented.! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 20:25:54' prior: 50920329!
createCartFor: aString with: aString2 
	
	self error: self invalidUserErrorDescription.! !

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/4/2021 20:25:57'!
ERROR!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 20:26:04'!
invalidUserErrorDescription
	self shouldBeImplemented.! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 20:26:22' prior: 50920343!
invalidUserErrorDescription
	^'Invalid User'.! !

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/4/2021 20:26:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/4/2021 20:26:23'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/4/2021 20:27:03'!
test02
	
	| aValidUser aPassword|
	
	aValidUser := 'ValidUser1'.
	aPassword := 'ValidPassword1'.
	
	self should:[ interface createCartFor: aValidUser with: aPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError | self assert: anError messageText equals: interface invalidUserErrorDescription]
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/4/2021 20:28:17' prior: 50920358!
test02
	
	| aValidUser anInvalidPassword|
	
	aValidUser := 'ValidUser1'.
	anInvalidPassword := 'InvalidPassword1'.
	
	self should:[ interface createCartFor: aValidUser with: anInvalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError | self assert: anError messageText equals: interface invalidUserOrPasswordErrorDescription]
	
	
	! !

!testRun: #TusLibrosFacadeTest #test02 stamp: 'goc 11/4/2021 20:28:24'!
ERROR!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 20:28:30'!
invalidUserOrPasswordErrorDescription
	self shouldBeImplemented.! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 20:28:48' prior: 50920389!
invalidUserOrPasswordErrorDescription
	^ 'Invalid User Or Password'.! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 20:28:57' prior: 50920395!
invalidUserOrPasswordErrorDescription
	^ 'Invalid user or password'.! !

!testRun: #TusLibrosFacadeTest #test02 stamp: 'goc 11/4/2021 20:28:58'!
FAILURE!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 20:29:27' prior: 50920335!
createCartFor: aString with: aString2 
	
	self error: self invalidUserOrPasswordErrorDescription.! !

!methodRemoval: TusLibrosFacade #invalidUserErrorDescription stamp: 'goc 11/4/2021 20:29:34'!
invalidUserErrorDescription
	^'Invalid User'.!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/4/2021 20:29:44' prior: 50920216!
test01
	
	| anInvalidUser aPassword|
	
	anInvalidUser := 'InvalidUser'.
	aPassword := 'pw'.
	
	self should:[ interface createCartFor: anInvalidUser with: aPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError | self assert: anError messageText equals: interface invalidUserOrPasswordErrorDescription]
	
	
	! !

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/4/2021 20:29:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/4/2021 20:29:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02 stamp: 'goc 11/4/2021 20:29:45'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/4/2021 20:30:10'!
test03
	
	| aValidUser aValidPassword|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'InvalidPassword1'.
	
	self should:[ interface createCartFor: aValidUser with: aValidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError | self assert: anError messageText equals: interface invalidUserOrPasswordErrorDescription]
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/4/2021 20:32:36' prior: 50920441!
test03
	
	| aValidUser aValidPassword|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	self should:[ interface createCartFor: aValidUser with: aValidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError | self assert: anError messageText equals: interface invalidUserOrPasswordErrorDescription]
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/4/2021 20:36:55' prior: 50920456!
test03
	
	| aValidUser aValidPassword cartId|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	"self assert: "
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/4/2021 20:38:59' prior: 50920471!
test03
	
	| aValidUser aValidPassword cartId|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	self assert: (interface listCart: cartId) isEmpty.
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test03 stamp: 'goc 11/4/2021 20:39:08'!
ERROR!

!testRun: #TusLibrosFacadeTest #test03 stamp: 'goc 11/4/2021 20:39:33'!
ERROR!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 20:40:47' prior: 50920409!
createCartFor: aUser with: aUserPassword 
	
	self error: self invalidUserOrPasswordErrorDescription.! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 20:40:54' prior: 50920497!
createCartFor: aUser with: aUserPassword 
	
	
	
	
	
	
	self error: self invalidUserOrPasswordErrorDescription.! !

Object subclass: #TusLibrosFacade
	instanceVariableNames: 'catalog salesBook merchantProcessor validUsers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosFacade category: 'TusLibros' stamp: 'goc 11/4/2021 20:41:02'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'catalog salesBook merchantProcessor validUsers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #TusLibrosFacadeTest #test02 stamp: 'goc 11/4/2021 20:41:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/4/2021 20:41:07'!
PASSED!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 20:45:00' prior: 50920504!
createCartFor: aUser with: aUserPassword 
	
	|password|
	
	"validUsers at: aUser ifAbsent :[self error: self invalidUserOrPasswordErrorDescription]."
	
	password := validUsers at: aUser.
	
	( password = aUserPassword ) ifFalse:[self error: self invalidUserOrPasswordErrorDescription]
	
	
	
	"self error: self invalidUserOrPasswordErrorDescription."! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 20:45:41' prior: 50920530!
createCartFor: aUser with: aUserPassword 
	
	|password|
	
	validUsers at: aUser ifAbsent:[self error: self invalidUserOrPasswordErrorDescription].
	
	password := validUsers at: aUser.
	
	( password = aUserPassword ) ifFalse:[self error: self invalidUserOrPasswordErrorDescription].
	
	
	
	
	
	"self error: self invalidUserOrPasswordErrorDescription."! !

Object subclass: #TusLibrosFacade
	instanceVariableNames: 'catalog salesBook merchantProcessor validUsers cartIdCounter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosFacade category: 'TusLibros' stamp: 'goc 11/4/2021 20:46:28'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'catalog salesBook merchantProcessor validUsers cartIdCounter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 20:46:39' prior: 50920316!
initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor 
	
	validUsers := usersWithPasswords.
	catalog := aCatalog.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.
	cartIdCounter := 0.! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 20:47:14' prior: 50920544!
createCartFor: aUser with: aUserPassword 
	
	|password|
	
	validUsers at: aUser ifAbsent:[self error: self invalidUserOrPasswordErrorDescription].
	
	password := validUsers at: aUser.
	
	( password = aUserPassword ) ifFalse:[self error: self invalidUserOrPasswordErrorDescription].
	
	cartIdCounter = cartIdCounter + 1.
	
	^cartIdCounter.
	
	
	
	"self error: self invalidUserOrPasswordErrorDescription."! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 20:47:23' prior: 50920585!
createCartFor: aUser with: aUserPassword 
	
	|password|
	
	validUsers at: aUser ifAbsent:[self error: self invalidUserOrPasswordErrorDescription].
	
	password := validUsers at: aUser.
	
	( password = aUserPassword ) ifFalse:[self error: self invalidUserOrPasswordErrorDescription].
	
	cartIdCounter = cartIdCounter + 1.
	
	^cartIdCounter.
	! !

!testRun: #TusLibrosFacadeTest #test03 stamp: 'goc 11/4/2021 20:47:48'!
ERROR!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 20:48:23' prior: 50920601!
createCartFor: aUser with: aUserPassword 
	
	|password|
	
	validUsers at: aUser ifAbsent:[self error: self invalidUserOrPasswordErrorDescription].
	
	password := validUsers at: aUser.
	
	( password = aUserPassword ) ifFalse:[self error: self invalidUserOrPasswordErrorDescription].
	
	cartIdCounter := cartIdCounter + 1.
	
	^cartIdCounter.
	! !

!testRun: #TusLibrosFacadeTest #test03 stamp: 'goc 11/4/2021 20:48:25'!
ERROR!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 20:48:30'!
listCart: aSmallInteger 
	self shouldBeImplemented.! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 20:48:43' prior: 50920634!
listCart: aSmallInteger 
	^OrderedCollection new.! !

!testRun: #TusLibrosFacadeTest #test03 stamp: 'goc 11/4/2021 20:48:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/4/2021 20:48:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02 stamp: 'goc 11/4/2021 20:48:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03 stamp: 'goc 11/4/2021 20:48:44'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/4/2021 20:48:55'!
test04
	
	| aValidUser aValidPassword cartId|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	self assert: (interface listCart: cartId) isEmpty.
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/4/2021 20:50:24' prior: 50920654!
test04
	
	| aValidUser aValidPassword cartId|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	"interface addToCart: "
	self assert: (interface listCart: cartId) isEmpty.
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/4/2021 20:52:27' prior: 50920666!
test04
	
	| aValidUser aValidPassword cartId|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	interface addToCart: cartId book:'anInvalidBook' bookQuantity:1.
	self assert: (interface listCart: cartId) isEmpty.
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/4/2021 20:54:48' prior: 50920678!
test04
	
	| aValidUser aValidPassword cartId|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	
	
	self should:[ interface addToCart: cartId book:'anInvalidBook' bookQuantity:1 ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError |
		self assert: anError messageText equals: interface invalidItemErrorMessage.
		self assert: (interface listCart: cartId) isEmpty.]
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/4/2021 20:54:54'!
ERROR!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 20:55:01'!
addToCart: aSmallInteger book: aString bookQuantity: aSmallInteger3 
	self shouldBeImplemented.! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 20:56:02' prior: 50920713!
addToCart: cartId book: aBook bookQuantity: aQuantity 
	
	^ self error: self invalidItemErrorMessage. ! !

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/4/2021 20:56:03'!
ERROR!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 20:56:09'!
invalidItemErrorMessage
	self shouldBeImplemented.! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 20:56:30' prior: 50920728!
invalidItemErrorMessage
	^ 'Invalid item'.! !

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/4/2021 20:56:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/4/2021 20:56:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02 stamp: 'goc 11/4/2021 20:56:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03 stamp: 'goc 11/4/2021 20:56:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/4/2021 20:56:32'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/4/2021 20:57:24'!
test05
	
	| aValidUser aValidPassword cartId|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	
	
	self should:[ interface addToCart: cartId book:'anInvalidBook' bookQuantity:1 ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError |
		self assert: anError messageText equals: interface invalidItemErrorMessage.
		self assert: (interface listCart: cartId) isEmpty.]
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/4/2021 20:59:50' prior: 50920750!
test05
	
	
	self should:[ interface addToCart: -50 book:'anInvalidBook' bookQuantity:1 ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError |
		self assert: anError messageText equals: interface invalidCartId.
		]
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/4/2021 20:59:58'!
ERROR!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 21:00:04'!
invalidCartId
	self shouldBeImplemented.! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 21:01:11' prior: 50920782!
invalidCartId
	
	^ 'Invalid Cart Id'.! !

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/4/2021 21:01:12'!
FAILURE!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/4/2021 21:03:16' prior: 50920769!
test05
	
	
	self should:[ interface addToCart: -50 book:'anInvalidBook' bookQuantity:1 ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError |
		self assert: anError messageText equals: interface invalidCartIdErrorMessage.
		]
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/4/2021 21:03:21'!
ERROR!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 21:03:25'!
invalidCartIdErrorMessage
	self shouldBeImplemented.! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 21:03:40' prior: 50920808!
invalidCartIdErrorMessage
	^ 'Invalid CartId'.! !

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/4/2021 21:03:42'!
FAILURE!

!methodRemoval: TusLibrosFacade #invalidCartId stamp: 'goc 11/4/2021 21:03:58'!
invalidCartId
	
	^ 'Invalid Cart Id'.!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 21:05:32' prior: 50920719!
addToCart: cartId book: aBook bookQuantity: aQuantity 
	
	(self isValidCartId: cartId) ifFalse:[^ self error: self invalidItemErrorMessage].
	
	
	^ self error: self invalidItemErrorMessage. ! !

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/4/2021 21:05:40'!
ERROR!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 21:05:47'!
isValidCartId: aSmallInteger 
	self shouldBeImplemented.! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 21:07:47' prior: 50920835!
isValidCartId: aCartId 
	
	
	^ (aCartId < cartIdCounter) and: (aCartId > 0) .! !

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/4/2021 21:07:50'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/4/2021 21:07:55'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/4/2021 21:07:55'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02 stamp: 'goc 11/4/2021 21:07:55'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03 stamp: 'goc 11/4/2021 21:07:55'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/4/2021 21:07:55'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/4/2021 21:07:55'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/4/2021 21:07:55'!
FAILURE!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 21:08:39' prior: 50920824!
addToCart: cartId book: aBook bookQuantity: aQuantity 
	
	(self isValidCartId: cartId) ifFalse:[^ self error: self invalidCartIdErrorMessage].
	
	
	^ self error: self invalidItemErrorMessage. ! !

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/4/2021 21:09:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/4/2021 21:09:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02 stamp: 'goc 11/4/2021 21:09:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03 stamp: 'goc 11/4/2021 21:09:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/4/2021 21:09:10'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/4/2021 21:09:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/4/2021 21:09:10'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/4/2021 21:09:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/4/2021 21:09:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02 stamp: 'goc 11/4/2021 21:09:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03 stamp: 'goc 11/4/2021 21:09:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/4/2021 21:09:42'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/4/2021 21:09:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/4/2021 21:09:42'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/4/2021 21:10:07'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test03 stamp: 'goc 11/4/2021 21:10:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/4/2021 21:10:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02 stamp: 'goc 11/4/2021 21:10:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03 stamp: 'goc 11/4/2021 21:10:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/4/2021 21:10:34'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/4/2021 21:10:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/4/2021 21:10:34'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test03 stamp: 'goc 11/4/2021 21:10:49'!
PASSED!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/4/2021 21:12:43' prior: 50920840!
isValidCartId: aCartId 
	
	
	^ (aCartId <= cartIdCounter) and: (aCartId > 0) .! !

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/4/2021 21:12:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/4/2021 21:12:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02 stamp: 'goc 11/4/2021 21:12:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03 stamp: 'goc 11/4/2021 21:12:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/4/2021 21:12:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/4/2021 21:12:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/4/2021 21:12:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/4/2021 21:12:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02 stamp: 'goc 11/4/2021 21:12:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03 stamp: 'goc 11/4/2021 21:12:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/4/2021 21:12:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/4/2021 21:12:50'!
PASSED!

----SNAPSHOT----(4 November 2021 21:20:14) CuisUniversity-4913.image priorSource: 18717693!

----QUIT----(4 November 2021 21:20:17) CuisUniversity-4913.image priorSource: 18858205!

----STARTUP---- (8 November 2021 10:49:11) as /home/goon/Desktop/inge1/new cuis/CuisUniversity-4913.image!


!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/8/2021 10:51:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/8/2021 10:51:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02 stamp: 'goc 11/8/2021 10:51:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03 stamp: 'goc 11/8/2021 10:51:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/8/2021 10:51:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/8/2021 10:51:27'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 10:53:31'!
test06
	
	| aValidUser aValidPassword cartId|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	interface addToCart: cartId book:'aValidBook' bookQuantity:1.
	
	
	
	
	
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 10:54:19' prior: 50920639!
listCart: aCartId 
	^OrderedCollection new.! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 10:56:46' prior: 50920994!
test06
	
	| aValidUser aValidPassword cartId booksInCart|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	interface addToCart: cartId book:'aValidBook' bookQuantity:1.
	
	booksInCart := interface listCart: cartId.
	
	self assert: Dictionary.
	
	
	
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 10:57:53' prior: 50921011!
test06
	
	| aValidUser aValidPassword cartId booksInCart|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	interface addToCart: cartId book:'aValidBook' bookQuantity:1.
	
	booksInCart := interface listCart: cartId.
	
	self assert: (Dictionary new at:'aValidBook' put:1; yourself).
	"validUsersAndPasswords := Dictionary new at:'ValidUser1' put:'ValidPassword1' ; at:'ValidUser2' put:'ValidPassword2' ; yourself."
	
	
	
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 10:58:23' prior: 50921026!
test06
	
	| aValidUser aValidPassword cartId booksInCart|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	interface addToCart: cartId book:'aValidBook' bookQuantity:1.
	
	booksInCart := interface listCart: cartId.
	
	self assert: (Dictionary new at:'aValidBook' put:1; yourself) equals: booksInCart.
	
	
	
	
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 10:58:58' prior: 50921046!
test06
	
	| aValidUser aValidPassword cartId booksInCart|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:1.
	
	booksInCart := interface listCart: cartId.
	
	self assert: (Dictionary new at:'validBook' put:1; yourself) equals: booksInCart.
	
	
	
	
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test06 stamp: 'goc 11/8/2021 10:59:00'!
ERROR!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 11:02:13' prior: 50920866!
addToCart: cartId book: aBook bookQuantity: aQuantity 
	
	(self isValidCartId: cartId) ifFalse:[^ self error: self invalidCartIdErrorMessage].
	
	
	(catalog includes: aBook) ifFalse:[^ self error: self invalidItemErrorMessage].
	
	
	
	
	
	
	 ! !

!classDefinition: #TusLibrosFacade category: 'TusLibros' stamp: 'goc 11/8/2021 11:05:13'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'catalog salesBook merchantProcessor validUsers cartIdCounter cartIdToCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 11:05:08' prior: 50920573!
initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor 
	
	validUsers := usersWithPasswords.
	catalog := aCatalog.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.
	cartIdToCart := Dictionary new.
	cartIdCounter := 0.! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 11:06:28' prior: 50920618!
createCartFor: aUser with: aUserPassword 
	
	|password|
	
	validUsers at: aUser ifAbsent:[self error: self invalidUserOrPasswordErrorDescription].
	
	password := validUsers at: aUser.
	
	( password = aUserPassword ) ifFalse:[self error: self invalidUserOrPasswordErrorDescription].
	
	cartIdCounter := cartIdCounter + 1.
	
	^cartIdCounter.
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 11:06:37'!
test09
	
	| aValidUser aValidPassword cartId booksInCart|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:1.
	
	booksInCart := interface listCart: cartId.
	
	self assert: (Dictionary new at:'validBook' put:1; yourself) equals: booksInCart.
	
	
	
	
	
	
	
	
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 11:07:29' prior: 50921115!
createCartFor: aUser with: aUserPassword 
	
	|password|
	
	validUsers at: aUser ifAbsent:[self error: self invalidUserOrPasswordErrorDescription].
	
	password := validUsers at: aUser.
	
	( password = aUserPassword ) ifFalse:[self error: self invalidUserOrPasswordErrorDescription].
	
	cartIdCounter := cartIdCounter + 1.
	
	^cartIdCounter.
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 11:10:42' prior: 50920795!
test05
	
	
	self should:[ interface addToCart: -50 book:'validBook' bookQuantity:1 ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError |
		self assert: anError messageText equals: interface invalidCartIdErrorMessage.
		]
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/8/2021 11:10:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/8/2021 11:10:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02 stamp: 'goc 11/8/2021 11:10:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03 stamp: 'goc 11/8/2021 11:10:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/8/2021 11:10:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/8/2021 11:10:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06 stamp: 'goc 11/8/2021 11:10:44'!
ERROR!

!testRun: #TusLibrosFacadeTest #test09 stamp: 'goc 11/8/2021 11:10:44'!
ERROR!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 11:12:34'!
test03aNewCartIsEmpty
	
	| aValidUser aValidPassword cartId|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	self assert: (interface listCart: cartId) isEmpty.
	
	
	
	! !

!methodRemoval: TusLibrosFacadeTest #test03 stamp: 'goc 11/8/2021 11:12:38'!
test03
	
	| aValidUser aValidPassword cartId|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	self assert: (interface listCart: cartId) isEmpty.
	
	
	
	!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 11:13:48' prior: 50921145!
createCartFor: aUser with: aUserPassword 
	
	|password cart|
	
	validUsers at: aUser ifAbsent:[self error: self invalidUserOrPasswordErrorDescription].
	
	password := validUsers at: aUser.
	
	( password = aUserPassword ) ifFalse:[self error: self invalidUserOrPasswordErrorDescription].
	
	cartIdCounter := cartIdCounter + 1.
	
	cart := Cart new.
	
	cartIdToCart at: cartIdCounter put:cart.
	
	^cartIdCounter.
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 11:14:37' prior: 50921213!
createCartFor: aUser with: aUserPassword 
	
	|password cart|
	
	validUsers at: aUser ifAbsent:[self error: self invalidUserOrPasswordErrorDescription].
	
	password := validUsers at: aUser.
	
	( password = aUserPassword ) ifFalse:[self error: self invalidUserOrPasswordErrorDescription].
	
	cartIdCounter := cartIdCounter + 1.
	
	cart := Cart new.
	
	cartIdToCart at: cartIdCounter put:cart.
	
	^cartIdCounter.
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 11:15:05' prior: 50921229!
createCartFor: aUser with: aUserPassword 
	
	|password cart|
	
	validUsers at: aUser ifAbsent:[self error: self invalidUserOrPasswordErrorDescription].
	
	password := validUsers at: aUser.
	
	( password = aUserPassword ) ifFalse:[self error: self invalidUserOrPasswordErrorDescription].
	
	cartIdCounter := cartIdCounter + 1.
	
	cart := Cart acceptingItemsOf: catalog.
	
	cartIdToCart at: cartIdCounter put:cart.
	
	^cartIdCounter.
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 11:17:27' prior: 50921082!
addToCart: cartId book: aBook bookQuantity: aQuantity 
	
	|cart|
	
	(self isValidCartId: cartId) ifFalse:[^ self error: self invalidCartIdErrorMessage].
	
	
	(catalog includes: aBook) ifFalse:[^ self error: self invalidItemErrorMessage].
	
	
	cart := cartIdToCart at: cartId.
	
	
	
	
	
	
	
	 ! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 11:18:07' prior: 50921262!
addToCart: cartId book: aBook bookQuantity: aQuantity 
	
	|cart|
	
	(self isValidCartId: cartId) ifFalse:[^ self error: self invalidCartIdErrorMessage].
	
	
	(catalog includes: aBook) ifFalse:[^ self error: self invalidItemErrorMessage].
	
	
	cart := cartIdToCart at: cartId.
	
	cart add: aQuantity of: aBook.
	
	
	
	
	
	
	
	
	 ! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 11:19:58' prior: 50921006!
listCart: aCartId 
	^OrderedCollection new.! !
!Cart methodsFor: 'total' stamp: 'goc 11/8/2021 11:21:53'!
getItems

	^ items copy.! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 11:22:44' prior: 50921289!
listCart: aCartId 
	
	^ (cartIdToCart at: aCartId) getItems.! !

!testRun: #TusLibrosFacadeTest #test06 stamp: 'goc 11/8/2021 11:22:49'!
ERROR!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 11:25:28' prior: 50921275!
addToCart: cartId book: aBook bookQuantity: aQuantity 
	
	|cart|
	
	(self isValidCartId: cartId) ifFalse:[^ self error: self invalidCartIdErrorMessage].
	
	
	"(catalog includes: aBook) ifFalse:[]."
	
	
	cart := cartIdToCart at: cartId ifAbsent:[^ self error: self invalidItemErrorMessage].
	
	cart add: aQuantity of: aBook.
	
	
	
	
	
	
	
	
	 ! !

!testRun: #TusLibrosFacadeTest #test06 stamp: 'goc 11/8/2021 11:25:32'!
FAILURE!
!Cart methodsFor: 'initialization' stamp: 'goc 11/8/2021 11:27:09' prior: 50919549!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'goc 11/8/2021 11:27:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'goc 11/8/2021 11:27:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'goc 11/8/2021 11:27:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'goc 11/8/2021 11:27:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'goc 11/8/2021 11:27:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'goc 11/8/2021 11:27:26'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'goc 11/8/2021 11:27:26'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'goc 11/8/2021 11:27:26'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'goc 11/8/2021 11:27:33'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'goc 11/8/2021 11:27:33'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'goc 11/8/2021 11:27:33'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'goc 11/8/2021 11:27:33'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'goc 11/8/2021 11:27:33'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'goc 11/8/2021 11:27:33'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/8/2021 11:27:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02 stamp: 'goc 11/8/2021 11:27:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03aNewCartIsEmpty stamp: 'goc 11/8/2021 11:27:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/8/2021 11:27:42'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/8/2021 11:27:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06 stamp: 'goc 11/8/2021 11:27:42'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test09 stamp: 'goc 11/8/2021 11:27:42'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/8/2021 11:28:24'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/8/2021 11:29:04'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/8/2021 11:30:10'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/8/2021 11:30:10'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/8/2021 11:31:23'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/8/2021 11:31:23'!
FAILURE!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 11:33:17' prior: 50921305!
addToCart: cartId book: aBook bookQuantity: aQuantity 
	
	|cart|
	
	(self isValidCartId: cartId) ifFalse:[^ self error: self invalidCartIdErrorMessage].
	
	
	(catalog includes: aBook) ifFalse:[^ self error: self invalidItemErrorMessage].
	
	
	cart := cartIdToCart at: cartId ifAbsent:[^ self error: self invalidItemErrorMessage].
	
	cart add: aQuantity of: aBook.
	
	
	
	
	
	
	
	
	 ! !

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/8/2021 11:33:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/8/2021 11:33:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02 stamp: 'goc 11/8/2021 11:33:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03aNewCartIsEmpty stamp: 'goc 11/8/2021 11:33:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/8/2021 11:33:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/8/2021 11:33:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06 stamp: 'goc 11/8/2021 11:33:21'!
ERROR!

!testRun: #TusLibrosFacadeTest #test09 stamp: 'goc 11/8/2021 11:33:21'!
ERROR!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 11:34:15' prior: 50921406!
addToCart: cartId book: aBook bookQuantity: aQuantity 
	
	|cart|
	
	"(self isValidCartId: cartId) ifFalse:[^ self error: self invalidCartIdErrorMessage]."
	
	
	(catalog includes: aBook) ifFalse:[^ self error: self invalidItemErrorMessage].
	
	
	cart := cartIdToCart at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	cart add: aQuantity of: aBook.
	
	
	
	
	
	
	
	
	 ! !

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/8/2021 11:34:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/8/2021 11:34:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02 stamp: 'goc 11/8/2021 11:34:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03aNewCartIsEmpty stamp: 'goc 11/8/2021 11:34:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/8/2021 11:34:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/8/2021 11:34:19'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test06 stamp: 'goc 11/8/2021 11:34:19'!
ERROR!

!testRun: #TusLibrosFacadeTest #test09 stamp: 'goc 11/8/2021 11:34:19'!
ERROR!

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/8/2021 11:34:36'!
FAILURE!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 11:35:40' prior: 50921442!
addToCart: cartId book: aBook bookQuantity: aQuantity 
	
	|cart|
	
	"(self isValidCartId: cartId) ifFalse:[^ self error: self invalidCartIdErrorMessage]."
	
	cart := cartIdToCart at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	(catalog includes: aBook) ifFalse:[^ self error: self invalidItemErrorMessage].
	
	
	
	
	cart add: aQuantity of: aBook.
	
	
	
	
	
	
	
	
	 ! !

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/8/2021 11:35:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02 stamp: 'goc 11/8/2021 11:35:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03aNewCartIsEmpty stamp: 'goc 11/8/2021 11:35:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/8/2021 11:35:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/8/2021 11:35:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06 stamp: 'goc 11/8/2021 11:35:43'!
ERROR!

!testRun: #TusLibrosFacadeTest #test09 stamp: 'goc 11/8/2021 11:35:43'!
ERROR!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 11:37:14' prior: 50921481!
addToCart: cartId book: aBook bookQuantity: aQuantity 
	
	|cart|
	
	"(self isValidCartId: cartId) ifFalse:[^ self error: self invalidCartIdErrorMessage]."
	
	cart := cartIdToCart at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(catalog includes: aBook) ifFalse:[^ self error: self invalidItemErrorMessage].
	
	
	
	
	
	cart add: aQuantity of: aBook.
	
	
	
	
	
	
	
	
	 ! !

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/8/2021 11:37:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/8/2021 11:37:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02 stamp: 'goc 11/8/2021 11:37:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03aNewCartIsEmpty stamp: 'goc 11/8/2021 11:37:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/8/2021 11:37:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/8/2021 11:37:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06 stamp: 'goc 11/8/2021 11:37:19'!
ERROR!

!testRun: #TusLibrosFacadeTest #test09 stamp: 'goc 11/8/2021 11:37:19'!
ERROR!

!testRun: #TusLibrosFacadeTest #test06 stamp: 'goc 11/8/2021 11:37:27'!
ERROR!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 11:37:45' prior: 50921063!
test06
	
	| aValidUser aValidPassword cartId booksInCart|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:1.
	
	booksInCart := interface listCart: cartId.
	
	self assert: (Bag new at:'validBook') equals: booksInCart.
	
	
	
	
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test06 stamp: 'goc 11/8/2021 11:37:47'!
ERROR!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 11:40:40' prior: 50921515!
addToCart: cartId book: aBook bookQuantity: aQuantity 
	
	|cart|
	
	"(self isValidCartId: cartId) ifFalse:[^ self error: self invalidCartIdErrorMessage]."
	
	cart := cartIdToCart at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	catalog at: aBook ifAbsent:[^ self error: self invalidItemErrorMessage].
	
	
	
	
	
	cart add: aQuantity of: aBook.
	
	
	
	
	
	
	
	
	 ! !

!testRun: #TusLibrosFacadeTest #test06 stamp: 'goc 11/8/2021 11:40:47'!
ERROR!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 11:41:30' prior: 50921554!
test06
	
	| aValidUser aValidPassword cartId booksInCart|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:1.
	
	booksInCart := interface listCart: cartId.
	
	self assert: (Bag new add:'validBook') equals: booksInCart.
	
	
	
	
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test06 stamp: 'goc 11/8/2021 11:41:32'!
FAILURE!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 11:43:18' prior: 50921590!
test06
	
	| aValidUser aValidPassword cartId booksInCart bag|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:1.
	
	booksInCart := interface listCart: cartId.
	
	bag := Bag new.
	bag add:'validBook'.
	
	self assert: bag equals: booksInCart.
	
	
	
	
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test06 stamp: 'goc 11/8/2021 11:43:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/8/2021 11:43:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02 stamp: 'goc 11/8/2021 11:43:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03aNewCartIsEmpty stamp: 'goc 11/8/2021 11:43:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/8/2021 11:43:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/8/2021 11:43:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06 stamp: 'goc 11/8/2021 11:43:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09 stamp: 'goc 11/8/2021 11:43:19'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test09 stamp: 'goc 11/8/2021 11:43:19'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test06 stamp: 'goc 11/8/2021 11:43:32'!
PASSED!

!methodRemoval: TusLibrosFacadeTest #test09 stamp: 'goc 11/8/2021 11:43:44'!
test09
	
	| aValidUser aValidPassword cartId booksInCart|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:1.
	
	booksInCart := interface listCart: cartId.
	
	self assert: (Dictionary new at:'validBook' put:1; yourself) equals: booksInCart.
	
	
	
	
	
	
	
	
	!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 11:45:15'!
test07
	
	| aValidUser aValidPassword cartId booksInCart bag|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:1.
	interface addToCart: cartId book:'validBook' bookQuantity:1.
	
	
	booksInCart := interface listCart: cartId.
	
	bag := Bag new.
	bag add:'validBook'.
	bag add:'validBook'.
	
	self assert: bag equals: booksInCart.
	
	
	
	
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test07 stamp: 'goc 11/8/2021 11:45:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/8/2021 11:45:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02 stamp: 'goc 11/8/2021 11:45:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03aNewCartIsEmpty stamp: 'goc 11/8/2021 11:45:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/8/2021 11:45:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/8/2021 11:45:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06 stamp: 'goc 11/8/2021 11:45:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07 stamp: 'goc 11/8/2021 11:45:17'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 11:45:44' prior: 50921666!
test07
	
	| aValidUser aValidPassword cartId booksInCart bag|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:3.
	
	booksInCart := interface listCart: cartId.
	
	bag := Bag new.
	bag add:'validBook'.
	bag add:'validBook'.
	bag add:'validBook'.
	
	self assert: bag equals: booksInCart.
	
	
	
	
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test07 stamp: 'goc 11/8/2021 11:45:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/8/2021 11:45:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02 stamp: 'goc 11/8/2021 11:45:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03aNewCartIsEmpty stamp: 'goc 11/8/2021 11:45:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/8/2021 11:45:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/8/2021 11:45:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06 stamp: 'goc 11/8/2021 11:45:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07 stamp: 'goc 11/8/2021 11:45:45'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 11:46:35'!
test08
	
	| aValidUser aValidPassword cartId booksInCart bag|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:1.
	interface addToCart: cartId book:'validBook2' bookQuantity:1.
	
	booksInCart := interface listCart: cartId.
	
	bag := Bag new.
	bag add:'validBook'.
	bag add:'validBook2'.
	
	
	self assert: bag equals: booksInCart.
	
	
	
	
	
	
	
	
	! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'goc 11/8/2021 11:48:27' prior: 50920038!
defaultCatalog
	
	^ Dictionary new
		at: self itemSellByTheStore put: self itemSellByTheStorePrice;
		at: self anotherItemSellByTheStore put: self anotherItemSellByTheStorePrice;
		yourself ! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'goc 11/8/2021 11:48:46'!
anotherItemSellByTheStore
	
	^ 'validBook2'! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'goc 11/8/2021 11:48:59'!
anotherItemSellByTheStorePrice
	
	^ 20! !

!testRun: #TusLibrosFacadeTest #test08 stamp: 'goc 11/8/2021 11:49:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/8/2021 11:49:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02 stamp: 'goc 11/8/2021 11:49:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03aNewCartIsEmpty stamp: 'goc 11/8/2021 11:49:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/8/2021 11:49:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/8/2021 11:49:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06 stamp: 'goc 11/8/2021 11:49:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07 stamp: 'goc 11/8/2021 11:49:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08 stamp: 'goc 11/8/2021 11:49:15'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 11:50:35' prior: 50921744!
test08
	
	| aValidUser aValidPassword cartId booksInCart bag|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:2.
	interface addToCart: cartId book:'validBook2' bookQuantity:3.
	
	booksInCart := interface listCart: cartId.
	
	bag := Bag new.
	bag add:'validBook' withOcurrences:2.
	bag add:'validBook2' withOcurrences:3.
	
	
	self assert: bag equals: booksInCart.
	
	
	
	
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test08 stamp: 'goc 11/8/2021 11:50:37'!
ERROR!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 11:51:03' prior: 50921804!
test08
	
	| aValidUser aValidPassword cartId booksInCart bag|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:2.
	interface addToCart: cartId book:'validBook2' bookQuantity:3.
	
	booksInCart := interface listCart: cartId.
	
	bag := Bag new.
	bag add:'validBook' withOccurrences:2.
	bag add:'validBook2' withOccurrences:3.
	
	
	self assert: bag equals: booksInCart.
	
	
	
	
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test08 stamp: 'goc 11/8/2021 11:51:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/8/2021 11:51:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02 stamp: 'goc 11/8/2021 11:51:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03aNewCartIsEmpty stamp: 'goc 11/8/2021 11:51:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/8/2021 11:51:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/8/2021 11:51:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06 stamp: 'goc 11/8/2021 11:51:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07 stamp: 'goc 11/8/2021 11:51:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08 stamp: 'goc 11/8/2021 11:51:04'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 11:53:45'!
test09
	
	| aValidUser aValidPassword cartId booksInCart bag|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:2.
	interface addToCart: cartId book:'validBook2' bookQuantity:3.
	
	booksInCart := interface listCart: cartId.
	
	bag := Bag new.
	bag add:'validBook' withOccurrences:2.
	bag add:'validBook2' withOccurrences:3.
	
	
	self assert: bag equals: booksInCart.
	
	
	
	
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 11:55:29' prior: 50921870!
test09
	
	self should:[ interface checkOut: -50 withCreditCardNumber: 44 ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError |
		self assert: anError messageText equals: interface invalidCartIdErrorMessage.
		]
	
	
	
	
	
	
	
	
	! !

!classDefinition: #TusLibrosFacadeTest category: 'TusLibros' stamp: 'goc 11/8/2021 11:58:22'!
TestCase subclass: #TusLibrosFacadeTest
	instanceVariableNames: 'interface testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 11:58:19' prior: 50920201 overrides: 16927572!
setUp
	|catalog validUsersAndPasswords|
	
	validUsersAndPasswords := Dictionary new at:'ValidUser1' put:'ValidPassword1' ; at:'ValidUser2' put:'ValidPassword2' ; yourself.
	
	catalog:= StoreTestObjectsFactory new defaultCatalog.
	
	interface := TusLibrosFacade withUsers: validUsersAndPasswords	 withCatalog: catalog withSalesBook: OrderedCollection new withMerchantProcessor: self.
	
	testObjectsFactory := StoreTestObjectsFactory new.! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 12:00:49' prior: 50921891!
test09
	
	self should:[ interface checkOut: -50 withCreditCardNumber: testObjectsFactory notExpiredCreditCard ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError |
		self assert: anError messageText equals: interface invalidCartIdErrorMessage.
		]
	
	
	
	
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 12:03:02' prior: 50921928!
test09
	
	self should:[ interface checkOut: -50 withCreditCardNumber: testObjectsFactory notExpiredCreditCard]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError |
		self assert: anError messageText equals: interface invalidCartIdErrorMessage.
		]
	
	
	
	
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test09 stamp: 'goc 11/8/2021 12:03:04'!
ERROR!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 12:03:11'!
checkOut: aSmallInteger withCreditCardNumber: aCreditCard 
	self shouldBeImplemented.! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 12:03:36' prior: 50921955!
checkOut: cartId withCreditCardNumber: aCreditCard 
	self invalidCartIdErrorMessage.! !

!testRun: #TusLibrosFacadeTest #test09 stamp: 'goc 11/8/2021 12:03:37'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test09 stamp: 'goc 11/8/2021 12:03:55'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test09 stamp: 'goc 11/8/2021 12:05:43'!
FAILURE!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 12:06:16' prior: 50921961!
checkOut: cartId withCreditCardNumber: aCreditCard 
	^self invalidCartIdErrorMessage.! !

!testRun: #TusLibrosFacadeTest #test09 stamp: 'goc 11/8/2021 12:06:19'!
FAILURE!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 12:06:42' prior: 50921975!
checkOut: cartId withCreditCardNumber: aCreditCard 
	^self error: self invalidCartIdErrorMessage.! !

!testRun: #TusLibrosFacadeTest #test09 stamp: 'goc 11/8/2021 12:06:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/8/2021 12:06:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02 stamp: 'goc 11/8/2021 12:06:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03aNewCartIsEmpty stamp: 'goc 11/8/2021 12:06:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/8/2021 12:06:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/8/2021 12:06:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06 stamp: 'goc 11/8/2021 12:06:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07 stamp: 'goc 11/8/2021 12:06:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08 stamp: 'goc 11/8/2021 12:06:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09 stamp: 'goc 11/8/2021 12:06:46'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 12:07:06'!
test10
	
	self should:[ interface checkOut: -50 withCreditCardNumber: testObjectsFactory notExpiredCreditCard]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError |
		self assert: anError messageText equals: interface invalidCartIdErrorMessage.
		]
	
	
	
	
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 12:08:14' prior: 50922016!
test10
	| aValidUser aValidPassword cartId bag|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	self should:[ interface checkOut: cartId withCreditCardNumber: testObjectsFactory expiredCreditCard ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError |
		self assert: anError messageText equals: interface invalidCartIdErrorMessage.
		]
	
	
	
	
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 12:08:27' prior: 50922029!
test10
	| aValidUser aValidPassword cartId |
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	self should:[ interface checkOut: cartId withCreditCardNumber: testObjectsFactory expiredCreditCard ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError |
		self assert: anError messageText equals: interface invalidCartIdErrorMessage.
		]
	
	
	
	
	
	
	
	
	! !

----SNAPSHOT----(8 November 2021 12:17:53) CuisUniversity-4913.image priorSource: 18858298!

Object subclass: #TusLibrosFacade
	instanceVariableNames: 'catalog salesBook merchantProcessor validUsers cartIdCounter cartIdToCart transactionsId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosFacade category: 'TusLibros' stamp: 'goc 11/8/2021 12:24:30'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'catalog salesBook merchantProcessor validUsers cartIdCounter cartIdToCart transactionsId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #TusLibrosFacadeTest #test10 stamp: 'goc 11/8/2021 12:24:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/8/2021 12:24:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02 stamp: 'goc 11/8/2021 12:24:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03aNewCartIsEmpty stamp: 'goc 11/8/2021 12:24:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/8/2021 12:24:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/8/2021 12:24:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06 stamp: 'goc 11/8/2021 12:24:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07 stamp: 'goc 11/8/2021 12:24:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08 stamp: 'goc 11/8/2021 12:24:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09 stamp: 'goc 11/8/2021 12:24:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10 stamp: 'goc 11/8/2021 12:24:43'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 12:25:54' prior: 50922047!
test10
	| aValidUser aValidPassword cartId |
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	self should:[ interface checkOut: cartId withCreditCardNumber: testObjectsFactory expiredCreditCard ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError |
		self assert: anError messageText equals: interface invalidCartIdErrorMessage.
		]
	
	
	
	
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 12:26:54' prior: 50922113!
test10
	| aValidUser aValidPassword cartId |
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	self should:[ interface checkOut: cartId withCreditCardNumber: testObjectsFactory expiredCreditCard ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError |
		self assert: anError messageText equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
		]
	
	
	
	
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test10 stamp: 'goc 11/8/2021 12:26:56'!
FAILURE!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 12:27:40' prior: 50921984!
checkOut: cartId withCreditCardNumber: aCreditCard 

	^self error: self invalidCartIdErrorMessage.! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 12:28:16' prior: 50922152!
checkOut: cartId withCreditCardNumber: aCreditCard 
	
	|cart|
	
	cart := cartIdToCart at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].

	^self error: self invalidCartIdErrorMessage.! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 12:29:07' prior: 50922159!
checkOut: cartId withCreditCardNumber: aCreditCard 
	
	|cart|
	
	cart := cartIdToCart at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].

	! !

!testRun: #TusLibrosFacadeTest #test10 stamp: 'goc 11/8/2021 12:29:16'!
FAILURE!
!TusLibrosFacade methodsFor: 'error handling' stamp: 'goc 11/8/2021 12:31:04'!
canNotChargeAnExpiredCreditCardErrorMessage
	^ Cashier canNotChargeAnExpiredCreditCardErrorMessage.! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 12:31:12' prior: 50922131!
test10
	| aValidUser aValidPassword cartId |
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	self should:[ interface checkOut: cartId withCreditCardNumber: testObjectsFactory expiredCreditCard ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError |
		self assert: anError messageText equals: interface canNotChargeAnExpiredCreditCardErrorMessage.
		]
	
	
	
	
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test10 stamp: 'goc 11/8/2021 12:31:14'!
FAILURE!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 12:32:18' prior: 50922169!
checkOut: cartId withCreditCardNumber: aCreditCard 
	
	|cart|
	
	cart := cartIdToCart at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	self canNotChargeAnExpiredCreditCardErrorMessage.

	! !

!testRun: #TusLibrosFacadeTest #test10 stamp: 'goc 11/8/2021 12:32:25'!
FAILURE!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 12:33:05' prior: 50922208!
checkOut: cartId withCreditCardNumber: aCreditCard 
	
	|cart|
	
	cart := cartIdToCart at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	self error: self canNotChargeAnExpiredCreditCardErrorMessage.

	! !

!testRun: #TusLibrosFacadeTest #test10 stamp: 'goc 11/8/2021 12:33:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/8/2021 12:33:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02 stamp: 'goc 11/8/2021 12:33:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03aNewCartIsEmpty stamp: 'goc 11/8/2021 12:33:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/8/2021 12:33:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/8/2021 12:33:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06 stamp: 'goc 11/8/2021 12:33:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07 stamp: 'goc 11/8/2021 12:33:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08 stamp: 'goc 11/8/2021 12:33:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09 stamp: 'goc 11/8/2021 12:33:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10 stamp: 'goc 11/8/2021 12:33:10'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 12:35:00' prior: 50922187!
test10
	| aValidUser aValidPassword cartId |
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	interface addToCart: cartId book:'validBook'  bookQuantity: 1.
	
	self should:[ interface checkOut: cartId withCreditCardNumber: testObjectsFactory expiredCreditCard ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError |
		self assert: anError messageText equals: interface canNotChargeAnExpiredCreditCardErrorMessage.
		]
	
	
	
	
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test10 stamp: 'goc 11/8/2021 12:35:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/8/2021 12:35:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02 stamp: 'goc 11/8/2021 12:35:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03aNewCartIsEmpty stamp: 'goc 11/8/2021 12:35:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/8/2021 12:35:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/8/2021 12:35:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06 stamp: 'goc 11/8/2021 12:35:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07 stamp: 'goc 11/8/2021 12:35:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08 stamp: 'goc 11/8/2021 12:35:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09 stamp: 'goc 11/8/2021 12:35:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10 stamp: 'goc 11/8/2021 12:35:02'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 12:35:09'!
test11
	| aValidUser aValidPassword cartId |
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	interface addToCart: cartId book:'validBook'  bookQuantity: 1.
	
	self should:[ interface checkOut: cartId withCreditCardNumber: testObjectsFactory expiredCreditCard ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError |
		self assert: anError messageText equals: interface canNotChargeAnExpiredCreditCardErrorMessage.
		]
	
	
	
	
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 12:35:16' prior: 50922260!
test10
	| aValidUser aValidPassword cartId |
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	
	self should:[ interface checkOut: cartId withCreditCardNumber: testObjectsFactory expiredCreditCard ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError |
		self assert: anError messageText equals: interface canNotChargeAnExpiredCreditCardErrorMessage.
		]
	
	
	
	
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 12:36:12' prior: 50922330!
test10
	| aValidUser aValidPassword cartId |
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	
	self should:[ interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError |
		self assert: anError messageText equals: interface canNotCheckOutAnEmptyCart.
		]
	
	
	
	
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test10 stamp: 'goc 11/8/2021 12:36:18'!
ERROR!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 12:36:22'!
canNotCheckOutAnEmptyCart
	self shouldBeImplemented.! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 12:36:50' prior: 50922369!
canNotCheckOutAnEmptyCart
	
	^ 'Can not checkout a empty cart'.! !

!testRun: #TusLibrosFacadeTest #test10 stamp: 'goc 11/8/2021 12:36:51'!
FAILURE!
!TusLibrosFacade methodsFor: 'error handling' stamp: 'goc 11/8/2021 12:37:54'!
cartCanNotBeEmptyErrorMessage
	^ Cashier cartCanNotBeEmptyErrorMessage.! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 12:38:23' prior: 50922221!
checkOut: cartId withCreditCardNumber: aCreditCard 
	
	|cart|
	
	cart := cartIdToCart at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	
	
	self error: self canNotChargeAnExpiredCreditCardErrorMessage.

	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 12:39:04' prior: 50922388!
checkOut: cartId withCreditCardNumber: aCreditCard 
	
	|cart|
	
	cart := cartIdToCart at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[^self error: self cartCanNotBeEmptyErrorMessage].
	
	self error: self canNotChargeAnExpiredCreditCardErrorMessage.

	! !

!testRun: #TusLibrosFacadeTest #test10 stamp: 'goc 11/8/2021 12:39:10'!
FAILURE!

!methodRemoval: TusLibrosFacade #canNotCheckOutAnEmptyCart stamp: 'goc 11/8/2021 12:39:43'!
canNotCheckOutAnEmptyCart
	
	^ 'Can not checkout a empty cart'.!

!testRun: #TusLibrosFacadeTest #test10 stamp: 'goc 11/8/2021 12:39:47'!
ERROR!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 12:40:03' prior: 50922349!
test10
	| aValidUser aValidPassword cartId |
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	
	self should:[ interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError |
		self assert: anError messageText equals: interface cartCanNotBeEmptyErrorMessage.
		]
	
	
	
	
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test10 stamp: 'goc 11/8/2021 12:40:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/8/2021 12:40:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02 stamp: 'goc 11/8/2021 12:40:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03aNewCartIsEmpty stamp: 'goc 11/8/2021 12:40:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/8/2021 12:40:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/8/2021 12:40:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06 stamp: 'goc 11/8/2021 12:40:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07 stamp: 'goc 11/8/2021 12:40:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08 stamp: 'goc 11/8/2021 12:40:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09 stamp: 'goc 11/8/2021 12:40:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10 stamp: 'goc 11/8/2021 12:40:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11 stamp: 'goc 11/8/2021 12:40:05'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 12:42:04'!
test12
	
	| aValidUser aValidPassword cartId booksInCart bag|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:1.
	
	booksInCart := interface listCart: cartId.
	
	bag := Bag new.
	bag add:'validBook' withOccurrences:1.
	
	
	interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard.
	
	
	
	
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 12:47:36' prior: 50922471!
test12
	
	| aValidUser aValidPassword cartId booksInCart bag purchases|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:1.
	
	booksInCart := interface listCart: cartId.
	
	bag := Bag new.
	bag add:'validBook' withOccurrences:1.
	
	
	interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard.
	
	purchases :=interface listPurchases: aValidUser withPassword: aValidPassword.
	
	self assert: purchases equals: bag.
	
	
	
	
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test12 stamp: 'goc 11/8/2021 12:47:47'!
ERROR!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 12:49:24' prior: 50922399!
checkOut: cartId withCreditCardNumber: aCreditCard 
	
	|cart cashier |
	
	cart := cartIdToCart at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[^self error: self cartCanNotBeEmptyErrorMessage].
	
	"self error: self canNotChargeAnExpiredCreditCardErrorMessage."
	
	cashier := Cashier new.

	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 12:53:56'!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier |
	
	cart := cartIdToCart at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[^self error: self cartCanNotBeEmptyErrorMessage].
	
	"self error: self canNotChargeAnExpiredCreditCardErrorMessage."
	"toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook"
	cashier := Cashier toCheckout: cart charging: aCreditCard  throught: merchantProcessor on: aDate registeringOn: salesBook.

	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 12:54:41' prior: 50922490!
test12
	
	| aValidUser aValidPassword cartId booksInCart bag purchases|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:1.
	
	booksInCart := interface listCart: cartId.
	
	bag := Bag new.
	bag add:'validBook' withOccurrences:1.
	
	
	interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today.
	
	purchases :=interface listPurchases: aValidUser withPassword: aValidPassword.
	
	self assert: purchases equals: bag.
	
	
	
	
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 12:54:59' prior: 50922309!
test11
	| aValidUser aValidPassword cartId |
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	interface addToCart: cartId book:'validBook'  bookQuantity: 1.
	
	self should:[ interface checkOut: cartId withCreditCardNumber: testObjectsFactory expiredCreditCard on: testObjectsFactory today]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError |
		self assert: anError messageText equals: interface canNotChargeAnExpiredCreditCardErrorMessage.
		]
	
	
	
	
	
	
	
	
	! !

!methodRemoval: TusLibrosFacade #checkOut:withCreditCardNumber: stamp: 'goc 11/8/2021 12:55:06'!
checkOut: cartId withCreditCardNumber: aCreditCard 
	
	|cart cashier |
	
	cart := cartIdToCart at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[^self error: self cartCanNotBeEmptyErrorMessage].
	
	"self error: self canNotChargeAnExpiredCreditCardErrorMessage."
	
	cashier := Cashier new.

	!

!testRun: #TusLibrosFacadeTest #test10 stamp: 'goc 11/8/2021 12:55:24'!
ERROR!

!testRun: #TusLibrosFacadeTest #test10 stamp: 'goc 11/8/2021 12:55:24'!
ERROR!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 12:55:38' prior: 50922422!
test10
	| aValidUser aValidPassword cartId |
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	
	self should:[ interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError |
		self assert: anError messageText equals: interface cartCanNotBeEmptyErrorMessage.
		]
	
	
	
	
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test10 stamp: 'goc 11/8/2021 12:55:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/8/2021 12:55:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02 stamp: 'goc 11/8/2021 12:55:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03aNewCartIsEmpty stamp: 'goc 11/8/2021 12:55:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/8/2021 12:55:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/8/2021 12:55:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06 stamp: 'goc 11/8/2021 12:55:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07 stamp: 'goc 11/8/2021 12:55:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08 stamp: 'goc 11/8/2021 12:55:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09 stamp: 'goc 11/8/2021 12:55:40'!
ERROR!

!testRun: #TusLibrosFacadeTest #test10 stamp: 'goc 11/8/2021 12:55:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11 stamp: 'goc 11/8/2021 12:55:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'goc 11/8/2021 12:55:40'!
ERROR!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 12:55:53' prior: 50921941!
test09
	
	self should:[ interface checkOut: -50 withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError |
		self assert: anError messageText equals: interface invalidCartIdErrorMessage.
		]
	
	
	
	
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test09 stamp: 'goc 11/8/2021 12:55:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/8/2021 12:55:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02 stamp: 'goc 11/8/2021 12:55:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03aNewCartIsEmpty stamp: 'goc 11/8/2021 12:55:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/8/2021 12:55:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/8/2021 12:55:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06 stamp: 'goc 11/8/2021 12:55:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07 stamp: 'goc 11/8/2021 12:55:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08 stamp: 'goc 11/8/2021 12:55:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09 stamp: 'goc 11/8/2021 12:55:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10 stamp: 'goc 11/8/2021 12:55:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11 stamp: 'goc 11/8/2021 12:55:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'goc 11/8/2021 12:55:54'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'goc 11/8/2021 12:55:54'!
ERROR!

!testRun: #TusLibrosFacadeTest #test09 stamp: 'goc 11/8/2021 12:55:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'goc 11/8/2021 12:56:15'!
ERROR!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 12:56:22'!
listPurchases: aString withPassword: aString2 
	self shouldBeImplemented.! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 12:59:58' prior: 50922720!
listPurchases: aUser withPassword: aPassword 
	
	^ Bag new add: 'validBook'.! !

!testRun: #TusLibrosFacadeTest #test12 stamp: 'goc 11/8/2021 12:59:59'!
FAILURE!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 13:00:38' prior: 50922726!
listPurchases: aUser withPassword: aPassword 
	|bag|
	
	bag:= Bag new.
	bag add: 'validBook'.
	^bag.! !

!testRun: #TusLibrosFacadeTest #test12 stamp: 'goc 11/8/2021 13:00:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01 stamp: 'goc 11/8/2021 13:00:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02 stamp: 'goc 11/8/2021 13:00:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03aNewCartIsEmpty stamp: 'goc 11/8/2021 13:00:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04 stamp: 'goc 11/8/2021 13:00:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05 stamp: 'goc 11/8/2021 13:00:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06 stamp: 'goc 11/8/2021 13:00:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07 stamp: 'goc 11/8/2021 13:00:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08 stamp: 'goc 11/8/2021 13:00:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09 stamp: 'goc 11/8/2021 13:00:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10 stamp: 'goc 11/8/2021 13:00:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11 stamp: 'goc 11/8/2021 13:00:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'goc 11/8/2021 13:00:43'!
PASSED!

----SNAPSHOT----(8 November 2021 13:01:51) CuisUniversity-4913.image priorSource: 18893229!

----QUIT----(8 November 2021 13:09:27) CuisUniversity-4913.image priorSource: 18915923!

----STARTUP---- (8 November 2021 19:29:57) as /home/goon/Desktop/inge1/new cuis/CuisUniversity-4913.image!


!classRemoval: #TusLibrosFacade stamp: 'goc 11/8/2021 19:30:42'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'catalog salesBook merchantProcessor validUsers cartIdCounter cartIdToCart transactionsId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreTestObjectsFactory stamp: 'goc 11/8/2021 19:30:42'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Sale stamp: 'goc 11/8/2021 19:30:43'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'goc 11/8/2021 19:30:43'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'goc 11/8/2021 19:30:44'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'goc 11/8/2021 19:30:44'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #TusLibrosFacadeTest stamp: 'goc 11/8/2021 19:30:44'!
TestCase subclass: #TusLibrosFacadeTest
	instanceVariableNames: 'interface testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'goc 11/8/2021 19:30:45'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'goc 11/8/2021 19:30:45'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/goon/Desktop/inge1/Ingenieria-de-Software-I/20 - TusLibros/Iteracion3/TusLibros.st----!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'goc 11/8/2021 19:35:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'goc 11/8/2021 19:35:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'goc 11/8/2021 19:35:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'goc 11/8/2021 19:35:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'goc 11/8/2021 19:35:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'goc 11/8/2021 19:35:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'goc 11/8/2021 19:35:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'goc 11/8/2021 19:35:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'goc 11/8/2021 19:35:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'goc 11/8/2021 19:35:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'goc 11/8/2021 19:35:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'goc 11/8/2021 19:35:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'goc 11/8/2021 19:35:17'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 19:36:08' prior: 50923311!
test12
	
	| aValidUser aValidPassword cartId booksInCart bag purchases|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:5.
	interface addToCart: cartId book:'validBook2' bookQuantity:5.
	
	booksInCart := interface listCart: cartId.
	
	bag := Bag new.
	bag add:'validBook' withOccurrences:5.
	bag add:'validBook2' withOccurrences:5.
	
	
	
	interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today.
	
	purchases :=interface listPurchases: aValidUser withPassword: aValidPassword.
	
	self assert: purchases equals: bag.
	
	
	
	
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 19:36:38' prior: 50923841!
test12
	
	| aValidUser aValidPassword cartId bag purchases|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:5.
	interface addToCart: cartId book:'validBook2' bookQuantity:5.
	
	bag := Bag new.
	bag add:'validBook' withOccurrences:5.
	bag add:'validBook2' withOccurrences:5.
	
	
	
	interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today.
	
	purchases :=interface listPurchases: aValidUser withPassword: aValidPassword.
	
	self assert: purchases equals: bag.
	
	
	
	
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test12 stamp: 'goc 11/8/2021 19:36:44'!
FAILURE!

Object subclass: #Sale
	instanceVariableNames: 'total customer itemsBought'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: 'TusLibros' stamp: 'goc 11/8/2021 19:45:25'!
Object subclass: #Sale
	instanceVariableNames: 'total customer itemsBought'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #CreditCard
	instanceVariableNames: 'expiration name expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'goc 11/8/2021 19:48:52'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration name expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #CreditCard
	instanceVariableNames: 'expiration customerName expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'goc 11/8/2021 19:49:55'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration customerName expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 19:51:33' prior: 50923705!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier |
	
	cart := cartIdToCart at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[^self error: self cartCanNotBeEmptyErrorMessage].
	
	"self error: self canNotChargeAnExpiredCreditCardErrorMessage."
	"toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook"
	cashier := Cashier toCheckout: cart charging: aCreditCard  throught: merchantProcessor on: aDate registeringOn: salesBook withCustomerName: aCreditCard .

	! !
!CreditCard methodsFor: 'testing' stamp: 'goc 11/8/2021 19:51:52'!
customerName

	^ customerName .! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 19:52:02' prior: 50923933!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier |
	
	cart := cartIdToCart at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[^self error: self cartCanNotBeEmptyErrorMessage].
	
	"self error: self canNotChargeAnExpiredCreditCardErrorMessage."
	"toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook"
	cashier := Cashier toCheckout: cart charging: aCreditCard  throught: merchantProcessor on: aDate registeringOn: salesBook withCustomerName: aCreditCard customerName.

	! !
!CreditCard methodsFor: 'testing' stamp: 'goc 11/8/2021 19:52:25'!
expirationDate

	^ expirationDate.! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 20:01:10' prior: 50923958!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier |
	
	cart := cartIdToCart at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[^self error: self cartCanNotBeEmptyErrorMessage].
	
	"self error: self canNotChargeAnExpiredCreditCardErrorMessage."
	"toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook"
	cashier := Cashier toCheckout: cart charging: aCreditCard  throught: merchantProcessor on: aDate registeringOn: salesBook.

	! !

Object subclass: #CreditCard
	instanceVariableNames: 'expiration customerName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'goc 11/8/2021 20:01:25'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration customerName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: CreditCard #expirationDate stamp: 'goc 11/8/2021 20:01:31'!
expirationDate

	^ expirationDate.!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'goc 11/8/2021 20:07:17'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total customer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'goc 11/8/2021 20:07:12'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook withUser: aUsername
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook.
	customer := aUsername.! !
!Cashier class methodsFor: 'instance creation' stamp: 'goc 11/8/2021 20:08:00'!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook withUser: aUsername
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook withUser: aUsername.! !
!Cashier methodsFor: 'checkout - private' stamp: 'goc 11/8/2021 20:08:36' prior: 50923432!
createSale

	^ Sale of: total withUser: customer.
! !
!Sale class methodsFor: 'instance creation' stamp: 'goc 11/8/2021 20:09:13'!
of: aTotal with: aUsername

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal withUser: aUsername! !
!Sale methodsFor: 'initialization' stamp: 'goc 11/8/2021 20:10:24'!
initializeTotal: aTotal with: aUsername

	total := aTotal.
	customer := aUsername.
	! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'goc 11/8/2021 20:10:48'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'goc 11/8/2021 20:10:48'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'goc 11/8/2021 20:10:48'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'goc 11/8/2021 20:10:48'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'goc 11/8/2021 20:10:48'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'goc 11/8/2021 20:10:48'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'goc 11/8/2021 20:11:23'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'goc 11/8/2021 20:11:36'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'goc 11/8/2021 20:11:36'!
ERROR!
!Sale methodsFor: 'initialization' stamp: 'goc 11/8/2021 20:13:13'!
initializeTotal: aTotal withUser: aUsername

	total := aTotal.
	customer := aUsername.
	! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'goc 11/8/2021 20:13:15'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'goc 11/8/2021 20:13:15'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'goc 11/8/2021 20:13:15'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'goc 11/8/2021 20:13:15'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'goc 11/8/2021 20:13:15'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'goc 11/8/2021 20:13:15'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'goc 11/8/2021 20:13:22'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'goc 11/8/2021 20:13:22'!
ERROR!
!Sale class methodsFor: 'instance creation' stamp: 'goc 11/8/2021 20:13:47'!
of: aTotal withUser: aUsername

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal withUser: aUsername! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'goc 11/8/2021 20:13:52'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'goc 11/8/2021 20:13:52'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'goc 11/8/2021 20:13:52'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'goc 11/8/2021 20:13:52'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'goc 11/8/2021 20:13:52'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'goc 11/8/2021 20:13:52'!
PASSED!

!methodRemoval: Sale #initializeTotal:with: stamp: 'goc 11/8/2021 20:14:51'!
initializeTotal: aTotal with: aUsername

	total := aTotal.
	customer := aUsername.
	!

!methodRemoval: Sale class #of:with: stamp: 'goc 11/8/2021 20:15:05'!
of: aTotal with: aUsername

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal withUser: aUsername!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'goc 11/8/2021 20:15:12'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'goc 11/8/2021 20:15:12'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'goc 11/8/2021 20:15:12'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'goc 11/8/2021 20:15:12'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'goc 11/8/2021 20:15:12'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'goc 11/8/2021 20:15:12'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'goc 11/8/2021 20:15:14'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'goc 11/8/2021 20:15:14'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'goc 11/8/2021 20:15:14'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'goc 11/8/2021 20:15:14'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'goc 11/8/2021 20:15:14'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'goc 11/8/2021 20:15:14'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'goc 11/8/2021 20:15:14'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'goc 11/8/2021 20:15:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'goc 11/8/2021 20:15:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'goc 11/8/2021 20:15:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'goc 11/8/2021 20:15:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'goc 11/8/2021 20:15:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'goc 11/8/2021 20:15:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'goc 11/8/2021 20:15:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'goc 11/8/2021 20:15:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'goc 11/8/2021 20:15:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'goc 11/8/2021 20:15:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'goc 11/8/2021 20:15:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'goc 11/8/2021 20:15:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'goc 11/8/2021 20:15:21'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'goc 11/8/2021 20:15:21'!
FAILURE!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 20:16:47' prior: 50923765!
listPurchases: aUser withPassword: aPassword 
	|bag|
	
	"bag:= Bag new.
	bag add: 'validBook'.
	^bag."
	
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 20:19:36' prior: 50924261!
listPurchases: aUser withPassword: aPassword 
	|salesByUser|
	
	"bag:= Bag new.
	bag add: 'validBook'.
	^bag."
	
	salesByUser := salesBook select:[:aSale| aSale isFrom:aUser].
	
	! !
!Sale methodsFor: 'total' stamp: 'goc 11/8/2021 20:20:05'!
isFrom: aUser
	
	^ aUser == customer.! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 20:22:37' prior: 50924268!
listPurchases: aUser withPassword: aPassword 
	|salesByUser items|
	
	"bag:= Bag new.
	bag add: 'validBook'.
	^bag."
	
	salesByUser := salesBook select:[:aSale| aSale isFrom:aUser].
	items:= Bag new.
	salesByUser do:[:aSale| items add: aSale ]
	
	! !
!Sale methodsFor: 'total' stamp: 'goc 11/8/2021 20:22:48'!
itemsBought
	
	^ itemsBought! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'goc 11/8/2021 20:23:06' prior: 50924281!
listPurchases: aUser withPassword: aPassword 
	|salesByUser items|
	
	"bag:= Bag new.
	bag add: 'validBook'.
	^bag."
	
	salesByUser := salesBook select:[:aSale| aSale isFrom:aUser].
	items:= Bag new.
	salesByUser do:[:aSale| items add: aSale itemsBought ].
	
	^ items.
	
	! !

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'goc 11/8/2021 20:23:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'goc 11/8/2021 20:23:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'goc 11/8/2021 20:23:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'goc 11/8/2021 20:23:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'goc 11/8/2021 20:23:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'goc 11/8/2021 20:23:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'goc 11/8/2021 20:23:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'goc 11/8/2021 20:23:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'goc 11/8/2021 20:23:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'goc 11/8/2021 20:23:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'goc 11/8/2021 20:23:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'goc 11/8/2021 20:23:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'goc 11/8/2021 20:23:14'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'goc 11/8/2021 20:23:14'!
FAILURE!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'goc 11/8/2021 20:24:22' prior: 50923868!
test12
	
	| aValidUser aValidPassword cartId bag purchases|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:5.
	interface addToCart: cartId book:'validBook2' bookQuantity:5.
	
	bag := Bag new.
	bag add:'validBook' withOccurrences:5.
	bag add:'validBook2' withOccurrences:5.
	
	interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today.
	
	purchases :=interface listPurchases: aValidUser withPassword: aValidPassword.
	
	self assert: purchases equals: bag.
	
	
	
	
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test12 stamp: 'goc 11/8/2021 20:24:22'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'goc 11/8/2021 20:27:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'goc 11/8/2021 20:27:07'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'goc 11/8/2021 20:27:07'!
FAILURE!

----SNAPSHOT----(8 November 2021 20:31:59) CuisUniversity-4913.image priorSource: 18916016!

----SNAPSHOT----(8 November 2021 20:32:36) CuisUniversity-4913.image priorSource: 18967740!

----QUIT----(8 November 2021 20:32:41) CuisUniversity-4913.image priorSource: 18967833!

----End fileIn of /home/matias/Downloads/Inge-TPs/Ingenieria-de-Software-I/20 - TusLibros/Iteracion3/TusLibros.st----!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 17:47:07'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 17:47:07'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 17:47:07'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 17:47:07'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 17:47:07'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 17:47:07'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 17:47:07'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 17:47:07'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 17:47:07'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 17:47:07'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 17:47:07'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 17:47:07'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 17:47:07'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/10/2021 17:47:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/10/2021 17:47:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/10/2021 17:47:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/10/2021 17:47:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/10/2021 17:47:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/10/2021 17:47:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/10/2021 17:47:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/10/2021 17:47:10'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/10/2021 17:47:10'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 17:47:10'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/10/2021 17:47:10'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/10/2021 17:47:10'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/10/2021 17:47:10'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/10/2021 17:47:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 17:47:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 17:47:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 17:47:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 17:47:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 17:47:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 17:47:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 17:47:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 17:47:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 17:47:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 17:47:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 17:47:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 17:47:10'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 17:47:10'!
FAILURE!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/10/2021 18:04:09' prior: 50968417!
test12
	
	| aValidUser aValidPassword cartId bag purchases|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:2.
	interface addToCart: cartId book:'validBook2' bookQuantity:5.
	
	bag := Bag new.
	bag add:'validBook' withOccurrences:2.
	bag add:'validBook2' withOccurrences:5.
	
	interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today.
	
	purchases := interface listPurchases: aValidUser withPassword: aValidPassword.
	
	self assert: purchases equals: bag.
	
	
	
	
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/10/2021 18:04:25' prior: 50969098!
test12
	
	| aValidUser aValidPassword cartId bag purchases|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:2.
	interface addToCart: cartId book:'validBook2' bookQuantity:5.
	
	bag := Bag new.
	bag add:'validBook' withOccurrences:2.
	bag add:'validBook2' withOccurrences:5.
	
	interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today.
	
	purchases := interface listPurchases: aValidUser withPassword: aValidPassword.
	
	self assert: purchases equals: bag.
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/10/2021 18:07:26' prior: 50969123!
test12
	
	| aValidUser aValidPassword cartId bag purchases|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:2.
	interface addToCart: cartId book:'validBook2' bookQuantity:5.
	
	bag := Dictionary new.
	bag add:'validBook' withOccurrences:2.
	bag add:'validBook2' withOccurrences:5.
	
	interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today.
	
	purchases := interface listPurchases: aValidUser withPassword: aValidPassword.
	
	self assert: purchases equals: bag.
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/10/2021 18:07:43' prior: 50969148!
test12
	
	| aValidUser aValidPassword cartId expected purchases|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:2.
	interface addToCart: cartId book:'validBook2' bookQuantity:5.
	
	expected := Dictionary new.
	expected add:'validBook' withOccurrences:2.
	expected add:'validBook2' withOccurrences:5.
	
	interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today.
	
	purchases := interface listPurchases: aValidUser withPassword: aValidPassword.
	
	self assert: purchases equals: expected.
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/10/2021 18:08:50' prior: 50968212 overrides: 16927572!
setUp
	|catalog validUsersAndPasswords|
	
	validUsersAndPasswords := Dictionary new 
		at:'ValidUser1' put:'ValidPassword1' ; 
		at:'ValidUser2' put:'ValidPassword2' ; 
		yourself.
	
	catalog:= StoreTestObjectsFactory new defaultCatalog.
	
	interface := TusLibrosFacade withUsers: validUsersAndPasswords	 withCatalog: catalog withSalesBook: OrderedCollection new withMerchantProcessor: self.
	
	testObjectsFactory := StoreTestObjectsFactory new.! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/10/2021 18:10:04' prior: 50969173!
test12
	
	| aValidUser aValidPassword cartId expected purchases|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:2.
	interface addToCart: cartId book:'validBook2' bookQuantity:5.
	
	expected := Dictionary new
		at: 'validBook' put: 2;
		at: 'validBook2' put: 5;
		at: 'Total' put: 626;
		yourself.
	
	interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today.
	
	purchases := interface listPurchases: aValidUser withPassword: aValidPassword.
	
	self assert: purchases equals: expected.
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/10/2021 18:11:42' prior: 50969217!
test12
	
	| aValidUser aValidPassword cartId expected purchases|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:2.
	interface addToCart: cartId book:'validBook2' bookQuantity:5.
	
	expected := Dictionary new
		at: 'validBook' put: 2;
		at: 'validBook2' put: 5;
		at: 'Total' put: (20+100);
		yourself.
	
	interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today.
	
	purchases := interface listPurchases: aValidUser withPassword: aValidPassword.
	
	self assert: purchases equals: expected.
	! !

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 18:11:48'!
FAILURE!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 18:12:34' prior: 50968926!
listPurchases: aUser withPassword: aPassword 
	|salesByUser items|
	
	salesByUser := salesBook select:[:aSale| aSale isFrom:aUser].
	items:= Dictionary new.
	salesByUser do:[:aSale| items add: aSale itemsBought ].
	
	^ items.
	
	! !

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 18:21:00'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 18:21:00'!
FAILURE!
!Sale methodsFor: 'total' stamp: 'MS 11/10/2021 18:23:11' prior: 50968697!
isFrom: aUser
	
	^ aUser = customer.! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 18:40:32' prior: 50969271!
listPurchases: aUser withPassword: aPassword 
	|salesByUser items total|
	
	salesByUser := salesBook select:[:aSale| aSale isFrom:aUser].
	items:= Dictionary new.
	salesByUser do:[:aSale| items add: aSale itemsBought ].
	
	^ items.
	
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 18:40:43' prior: 50969291!
listPurchases: aUser withPassword: aPassword 
	|salesByUser items total|
	
	salesByUser := salesBook select:[:aSale| aSale isFrom:aUser].
	total := 0.
	items:= Dictionary new.
	salesByUser do:[:aSale| items add: aSale itemsBought ].
	
	^ items.
	
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 18:41:28' prior: 50969302!
listPurchases: aUser withPassword: aPassword 
	|salesByUser items total|
	
	salesByUser := salesBook select:[:aSale| aSale isFrom:aUser].
	total := 0.
	items:= Dictionary new.
	
	salesByUser do:[:aSale| items add: aSale itemsBought ].
	
	^ items.
	
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 18:44:58' prior: 50969313!
listPurchases: aUser withPassword: aPassword 
	|salesByUser items total|
	
	salesByUser := salesBook select:[:aSale| aSale isFrom:aUser].
	total := 0.
	items:= Dictionary new.
	
	salesByUser do:[:aSale| 
		aSale items associationsDo: [:aSaleItem | | quantity |
			quantity := items at: aSaleItem key ifAbsent: [0].
			items at: aSaleItem key put: quantity + aSaleItem value
			].
		total := total + aSale total.
	].
	
	^ items.
	
	! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 18:45:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 18:45:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 18:45:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 18:45:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 18:45:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 18:45:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 18:45:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 18:45:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 18:45:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 18:45:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 18:45:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 18:45:01'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 18:45:01'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 18:54:28'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 18:54:28'!
FAILURE!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 19:02:17' prior: 50969324!
listPurchases: aUser withPassword: aPassword 
	|salesByUser items total|
	
	salesByUser := salesBook at: aUser ifAbsent: [OrderedCollection new].
	salesByUser := salesBook select:[:aSale| aSale isFrom:aUser].
	total := 0.
	items:= Dictionary new.
	
	salesByUser do:[:aSale| 
		aSale items associationsDo: [:aSaleItem | | quantity |
			quantity := items at: aSaleItem key ifAbsent: [0].
			items at: aSaleItem key put: quantity + aSaleItem value
			].
		total := total + aSale total.
	].
	
	^ items.
	
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 19:03:22' prior: 50969392!
listPurchases: aUser withPassword: aPassword 
	|salesByUser items total|
	
	salesByUser := salesBook select:[:aSale| aSale isFrom:aUser].
	total := 0.
	items:= Dictionary new.
	
	salesByUser do:[:aSale| 
		aSale items associationsDo: [:aSaleItem | | quantity |
			quantity := items at: aSaleItem key ifAbsent: [0].
			items at: aSaleItem key put: quantity + aSaleItem value
			].
		total := total + aSale total.
	].
	
	^ items.
	
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 19:12:26' prior: 50968866!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier |
	
	cart := cartIdToCart at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[^self error: self cartCanNotBeEmptyErrorMessage].
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook.
		
	
	! !

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 19:12:44'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 19:12:44'!
FAILURE!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 19:16:40' prior: 50968851!
addToCart: cartId book: aBook bookQuantity: aQuantity 
	
	|cart|
	
	cart := cartIdToCart at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	catalog at: aBook ifAbsent:[^ self error: self invalidItemErrorMessage].
	
	
	
	
	
	cart add: aQuantity of: aBook.
	
	
	
	
	
	
	
	
	 ! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 19:16:44' prior: 50969449!
addToCart: cartId book: aBook bookQuantity: aQuantity 
	
	|cart|
	
	cart := cartIdToCart at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	catalog at: aBook ifAbsent:[^ self error: self invalidItemErrorMessage].
	
	cart add: aQuantity of: aBook.
	
	
	
	
	
	
	
	
	 ! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/10/2021 19:18:22' prior: 50969243!
test12
	
	| aValidUser aValidPassword cartId expected purchases|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:2.
	interface addToCart: cartId book:'validBook2' bookQuantity:1.
	
	expected := Dictionary new
		at: 'validBook' put: 2;
		at: 'validBook2' put: 5;
		at: 'Total' put: (20+100);
		yourself.
	
	interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today.
	
	purchases := interface listPurchases: aValidUser withPassword: aValidPassword.
	
	self assert: purchases equals: expected.
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/10/2021 19:19:24' prior: 50969475!
test12
	
	| aValidUser aValidPassword cartId expected purchases|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:2.
	interface addToCart: cartId book:'validBook2' bookQuantity:1.
	
	expected := Dictionary new
		at: 'validBook' put: 2;
		at: 'validBook2' put: 5;
		at: 'Total' put: (20+100);
		yourself.
	
	interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today.
	
	purchases := interface listPurchases: aValidUser withPassword: aValidPassword.
		
	self assert: purchases equals: expected.
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 19:20:56' prior: 50969462!
addToCart: cartId book: aBook bookQuantity: aQuantity 
	
	|cart|
	
	cart := cartIdToCart at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	catalog at: aBook ifAbsent:[^ self error: self invalidItemErrorMessage].
	
	cart add: aQuantity of: aBook.! !

Object subclass: #CartSession
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartSession category: 'TusLibros' stamp: 'MS 11/10/2021 19:21:41'!
Object subclass: #CartSession
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartSession methodsFor: 'no messages' stamp: 'MS 11/10/2021 19:23:00'!
for: aCart ownedBy: aCustomer with: aSystemFacade

	^self new initializedWith: aCart ownedBy: aCustomer with: aSystemFacade.! !
!CartSession class methodsFor: 'no messages' stamp: 'MS 11/10/2021 19:23:26'!
for: aCart ownedBy: aCustomer with: aSystemFacade

	^self new initializedWith: aCart ownedBy: aCustomer with: aSystemFacade.! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/10/2021 19:23:33'!
initializedWith: aCart ownedBy: aCustomer with: aSystemFacade.! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/10/2021 19:23:34' prior: 50969563!
initializedWith: aCart ownedBy: aCustomer with: aSystemFacade! !

!methodRemoval: CartSession #for:ownedBy:with: stamp: 'MS 11/10/2021 19:23:36'!
for: aCart ownedBy: aCustomer with: aSystemFacade

	^self new initializedWith: aCart ownedBy: aCustomer with: aSystemFacade.!

!classDefinition: #CartSession category: 'TusLibros' stamp: 'MS 11/10/2021 19:24:24'!
Object subclass: #CartSession
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartSession category: 'TusLibros' stamp: 'MS 11/10/2021 19:24:25'!
Object subclass: #CartSession
	instanceVariableNames: 'cart owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/10/2021 19:24:23' prior: 50969569!
initializedWith: aCart ownedBy: aCustomer with: aFacade

	cart := aCart.
	owner := aCustomer .
	! !

!classDefinition: #CartSession category: 'TusLibros' stamp: 'MS 11/10/2021 19:24:37'!
Object subclass: #CartSession
	instanceVariableNames: 'cart owner facade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/10/2021 19:24:34' prior: 50969595!
initializedWith: aCart ownedBy: aCustomer with: aFacade

	cart := aCart.
	owner := aCustomer .
	facade := aFacade.! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/10/2021 19:25:22' prior: 50969609!
initializedWith: aCart ownedBy: aCustomer with: aFacade

	cart := aCart.
	owner := aCustomer .
	facade := aFacade.
! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/10/2021 19:25:44'!
addToCart: anAmount of: aBook

	^cart add: anAmount of: aBook! !

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 19:26:37'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 19:26:37'!
FAILURE!

!classDefinition: #TusLibrosFacade category: 'TusLibros' stamp: 'MS 11/10/2021 19:28:15'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'catalog salesBook merchantProcessor validUsers cartIdCounter cartIdToCart transactionsId cartSessions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 19:28:13' prior: 50968903!
initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor 
	
	validUsers := usersWithPasswords.
	catalog := aCatalog.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.
	cartIdToCart := Dictionary new.
	cartSessions := Dictionary new.
	cartIdCounter := 0.! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 19:28:51' prior: 50969527!
addToCart: cartId book: aBook bookQuantity: aQuantity 
	
	|cart|
	
	cart := cartSessions at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	catalog at: aBook ifAbsent:[^ self error: self invalidItemErrorMessage].
	
	cart add: aQuantity of: aBook.! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 19:29:17' prior: 50969658!
addToCart: cartId book: aBook bookQuantity: aQuantity 
	
	
	cartSessions at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	catalog at: aBook ifAbsent:[^ self error: self invalidItemErrorMessage].
	
	cartSessions add: aQuantity of: aBook.! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 19:29:20' prior: 50969670!
addToCart: cartId book: aBook bookQuantity: aQuantity 
	
	cartSessions at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	catalog at: aBook ifAbsent:[^ self error: self invalidItemErrorMessage].
	
	cartSessions add: aQuantity of: aBook.! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 19:29:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 19:29:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 19:29:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 19:29:22'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 19:29:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 19:29:22'!
ERROR!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 19:29:22'!
ERROR!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 19:29:22'!
ERROR!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 19:29:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 19:29:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 19:29:22'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 19:29:22'!
ERROR!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 19:29:31'!
ERROR!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 19:29:31'!
ERROR!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 19:29:59' prior: 50968921!
listCart: aCartId 
	
	^ (cartSessions at: aCartId) getItems.! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 19:30:12' prior: 50969644!
initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor 
	
	validUsers := usersWithPasswords.
	catalog := aCatalog.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.
	"cartIdToCart := Dictionary new."
	cartSessions := Dictionary new.
	cartIdCounter := 0.! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 19:30:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 19:30:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 19:30:17'!
ERROR!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 19:30:17'!
ERROR!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 19:30:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 19:30:17'!
ERROR!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 19:30:17'!
ERROR!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 19:30:17'!
ERROR!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 19:30:17'!
ERROR!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 19:30:17'!
ERROR!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 19:30:17'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 19:30:17'!
ERROR!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 19:30:22'!
ERROR!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 19:30:22'!
ERROR!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 19:30:58' prior: 50968886!
createCartFor: aUser with: aUserPassword 
	
	|password cart|
	
	validUsers at: aUser ifAbsent:[self error: self invalidUserOrPasswordErrorDescription].
	
	password := validUsers at: aUser.
	
	( password = aUserPassword ) ifFalse:[self error: self invalidUserOrPasswordErrorDescription].
	
	cartIdCounter := cartIdCounter + 1.
	
	cart := Cart acceptingItemsOf: catalog.
	
	cartSessions at: cartIdCounter put:cart.
	
	^cartIdCounter.
	! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 19:31:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 19:31:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 19:31:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 19:31:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 19:31:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 19:31:00'!
ERROR!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 19:31:00'!
ERROR!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 19:31:00'!
ERROR!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 19:31:00'!
ERROR!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 19:31:00'!
ERROR!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 19:31:00'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 19:31:00'!
ERROR!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 19:31:04'!
ERROR!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 19:31:04'!
ERROR!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 19:31:55' prior: 50969682!
addToCart: cartId book: aBook bookQuantity: aQuantity 
	 
	|cart|
	cart := cartSessions at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	catalog at: aBook ifAbsent:[^ self error: self invalidItemErrorMessage].
	
	cart add: aQuantity of: aBook.! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 19:32:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 19:32:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 19:32:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 19:32:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 19:32:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 19:32:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 19:32:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 19:32:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 19:32:02'!
ERROR!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 19:32:02'!
ERROR!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 19:32:02'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 19:32:02'!
ERROR!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 19:32:11'!
ERROR!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 19:32:11'!
ERROR!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 19:32:27' prior: 50969428!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier |
	
	cart := cartSessions at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[^self error: self cartCanNotBeEmptyErrorMessage].
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook.
		
	
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 19:32:38' prior: 50969941!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier |
	
	cart := cartSessions at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[^self error: self cartCanNotBeEmptyErrorMessage].
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook.
		
	
	! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 19:32:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 19:32:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 19:32:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 19:32:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 19:32:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 19:32:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 19:32:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 19:32:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 19:32:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 19:32:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 19:32:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 19:32:46'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 19:32:46'!
FAILURE!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/10/2021 19:35:02' prior: 50969501!
test12
	
	| aValidUser aValidPassword cartId expected purchases|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:2.
	interface addToCart: cartId book:'validBook2' bookQuantity:1.
	
	expected := Dictionary new
		at: 'validBook' put: 2;
		at: 'validBook2' put: 5;
		at: 'Total' put: (20+100);
		yourself.
	
	interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today.
	
	purchases := interface listPurchases: aValidUser withPassword: aValidPassword.
		
	self assert: purchases equals: expected.
	! !

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 19:43:50'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 19:43:50'!
FAILURE!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 19:44:19' prior: 50969749!
initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor 
	
	validUsers := usersWithPasswords.
	catalog := aCatalog.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.

	cartSessions := Dictionary new.
	cartIdCounter := 0.! !

Object subclass: #TusLibrosFacade
	instanceVariableNames: 'catalog salesBook merchantProcessor validUsers cartIdCounter transactionsId cartSessions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosFacade category: 'TusLibros' stamp: 'MS 11/10/2021 19:44:31'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'catalog salesBook merchantProcessor validUsers cartIdCounter transactionsId cartSessions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 19:44:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 19:44:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 19:44:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 19:44:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 19:44:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 19:44:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 19:44:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 19:44:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 19:44:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 19:44:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 19:44:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 19:44:34'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 19:44:34'!
FAILURE!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 19:52:59' prior: 50969957!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier clientId transactionId |
	
	cart := cartSessions at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[^self error: self cartCanNotBeEmptyErrorMessage].
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook.
		
	transactionId := cashier checkOut .
	
	clientId := 2.
		
	
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 19:56:26' prior: 50970125!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier clientId transactionId |
	
	cart := cartSessions at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[^self error: self cartCanNotBeEmptyErrorMessage].
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook.
		
	transactionId := cashier checkOut .
	
	
		
	
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 19:58:44' prior: 50970143!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier clientId transactionId transactionsOfAClient |
	
	cart := cartSessions at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[^self error: self cartCanNotBeEmptyErrorMessage].
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook.
		
	transactionId := cashier checkOut .
	
	
	
	
		
	
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 19:59:49' prior: 50970161!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier clientId transactionId transactionsOfAClient |
	
	cart := cartSessions at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[^self error: self cartCanNotBeEmptyErrorMessage].
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook.
		
	transactionId := cashier checkOut .
	
	transactionsOfAClient := salesBook at: transactionId ifAbsent: [ OrderedCollection new ].
	
	
	
	
		
	
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 20:00:23' prior: 50970180!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier clientId transactionId transactionsOfAClient |
	
	cart := cartSessions at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[^self error: self cartCanNotBeEmptyErrorMessage].
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook.
		
	transactionId := cashier checkOut .
	
	transactionsOfAClient := salesBook at: transactionId ifAbsent: [ OrderedCollection new ].
	transactionsOfAClient add: transactionId.
	
	
	
	
	
		
	
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 20:00:45' prior: 50970202!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier clientId transactionId transactionsOfAClient |
	
	cart := cartSessions at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[^self error: self cartCanNotBeEmptyErrorMessage].
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook.
		
	transactionId := cashier checkOut .
	
	transactionsOfAClient := salesBook at: cartId ifAbsent: [ OrderedCollection new ].
	transactionsOfAClient add: transactionId.
	
	
	
	
	
		
	
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 20:00:55' prior: 50970225!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier transactionId transactionsOfAClient |
	
	cart := cartSessions at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[^self error: self cartCanNotBeEmptyErrorMessage].
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook.
		
	transactionId := cashier checkOut .
	
	transactionsOfAClient := salesBook at: cartId ifAbsent: [ OrderedCollection new ].
	transactionsOfAClient add: transactionId.
	
	
	
	
	
		
	
	! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 20:02:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 20:02:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 20:02:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 20:02:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 20:02:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 20:02:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 20:02:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 20:02:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 20:02:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 20:02:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 20:02:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:02:02'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:02:02'!
ERROR!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 20:02:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 20:02:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 20:02:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 20:02:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 20:02:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 20:02:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 20:02:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 20:02:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 20:02:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 20:02:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 20:02:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:02:06'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:02:06'!
ERROR!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 20:02:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 20:02:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 20:02:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 20:02:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 20:02:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 20:02:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 20:02:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 20:02:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 20:02:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 20:02:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 20:02:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:02:17'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:02:17'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 'MS 11/10/2021 20:04:03' prior: 50968554!
checkOut

	| sale |
	self calculateTotal.
	self debitTotal.
	sale := self registerSale.

	^ sale! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/10/2021 20:04:09'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/10/2021 20:04:09'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/10/2021 20:04:09'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/10/2021 20:04:09'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/10/2021 20:04:09'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/10/2021 20:04:09'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/10/2021 20:04:09'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/10/2021 20:04:09'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/10/2021 20:04:09'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 20:04:09'!
FAILURE!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/10/2021 20:04:09'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/10/2021 20:04:09'!
FAILURE!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/10/2021 20:04:09'!
FAILURE!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/10/2021 20:04:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 20:04:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 20:04:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 20:04:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 20:04:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 20:04:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 20:04:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 20:04:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 20:04:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 20:04:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 20:04:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 20:04:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:04:09'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 20:04:16'!
FAILURE!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 20:04:16'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/10/2021 20:06:10' prior: 50968079!
test02CalculatedTotalIsCorrect

	| cart cashier salesBook |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: salesBook.
		
	self assert: (salesBook at: cashier checkOut) total  = (testObjectsFactory itemSellByTheStorePrice * 2)! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 20:06:14'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'MS 11/10/2021 20:11:48'!
content

	| content |
	
	content := Dictionary new.

	items do: [ :item |
		content at: item put: (items occurrencesOf: item)
		].
	
	^ content! !

!methodRemoval: Sale #initializeTotal: stamp: 'MS 11/10/2021 20:12:19'!
initializeTotal: aTotal

	total := aTotal !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/10/2021 20:12:37'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/10/2021 20:12:37'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/10/2021 20:12:37'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/10/2021 20:12:37'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/10/2021 20:12:37'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/10/2021 20:12:37'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/10/2021 20:12:37'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/10/2021 20:12:37'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/10/2021 20:12:37'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 20:12:37'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/10/2021 20:12:37'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/10/2021 20:12:37'!
FAILURE!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/10/2021 20:12:37'!
FAILURE!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/10/2021 20:12:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 20:12:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 20:12:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 20:12:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 20:12:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 20:12:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 20:12:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 20:12:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 20:12:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 20:12:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 20:12:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 20:12:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:12:37'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/10/2021 20:12:48'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 20:12:48'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/10/2021 20:12:48'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/10/2021 20:12:48'!
FAILURE!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/10/2021 20:12:48'!
FAILURE!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/10/2021 20:12:48'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 20:12:51'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 20:12:51'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/10/2021 20:14:03' prior: 50970508!
test02CalculatedTotalIsCorrect

	| cart cashier salesBook |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	salesBook := Dictionary new.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: salesBook.
		
	self assert: (salesBook at: cashier checkOut) total  = (testObjectsFactory itemSellByTheStorePrice * 2)! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 20:14:03'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 20:14:28'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/10/2021 20:14:37' prior: 50970654!
test02CalculatedTotalIsCorrect

	| cart cashier salesBook |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	salesBook := Dictionary new.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: salesBook.
		
	self assert: (salesBook at: (cashier checkOut)) total  = (testObjectsFactory itemSellByTheStorePrice * 2)! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 20:14:38'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/10/2021 20:14:44' prior: 50970678!
test02CalculatedTotalIsCorrect

	| cart cashier salesBook |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	salesBook := Dictionary new.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: salesBook.
		
	self assert: (salesBook at: cashier checkOut) total  = (testObjectsFactory itemSellByTheStorePrice * 2)! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 20:15:14'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 20:15:14'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 20:15:34'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 20:15:43'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 20:15:51'!
ERROR!
!Cashier methodsFor: 'checkout - private' stamp: 'MS 11/10/2021 20:18:42' prior: 50968550!
registerSale

	| sale |
	sale := self createSale.
! !

!classDefinition: #StoreTestObjectsFactory category: 'TusLibros' stamp: 'MS 11/10/2021 20:19:21'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today transactionID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectsFactory methodsFor: 'initialization' stamp: 'MS 11/10/2021 20:19:19' prior: 50968802 overrides: 16896425!
initialize

	today := DateAndTime now.
	transactionID := 1.! !
!StoreTestObjectsFactory methodsFor: 'initialization' stamp: 'MS 11/10/2021 20:20:09'!
nextTransactionId

	transactionID := transactionID +1.
	
	^transactionID.! !
!StoreTestObjectsFactory methodsFor: 'initialization' stamp: 'MS 11/10/2021 20:20:13' prior: 50970751!
nextTransactionId

	transactionID := transactionID +1.
	
	^transactionID-1.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'MS 11/10/2021 20:21:35'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total customer transactionsIDs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checkout - private' stamp: 'MS 11/10/2021 20:21:31' prior: 50970732!
registerSale

	| sale transactionID |
	sale := self createSale.
	transactionID := transactionsIDs nextTransactionId .
	
	salesBook at: transactionID put: sale.
	
	^transactionID.
! !
!Cashier methodsFor: 'initialization' stamp: 'MS 11/10/2021 20:22:34'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook withUser: aUsername with: aTransactionID
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook.
	customer := aUsername.
	transactionsIDs := aTransactionID.! !
!Cashier methodsFor: 'initialization' stamp: 'MS 11/10/2021 20:23:13'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook with: aTransactionID
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook.
	transactionsIDs := aTransactionID.! !

!methodRemoval: Cashier #initializeToCheckout:charging:throught:registeringOn:withUser:with: stamp: 'MS 11/10/2021 20:23:34'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook withUser: aUsername with: aTransactionID
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook.
	customer := aUsername.
	transactionsIDs := aTransactionID.!

!methodRemoval: Cashier #initializeToCheckout:charging:throught:registeringOn:withUser: stamp: 'MS 11/10/2021 20:23:53'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook withUser: aUsername
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook.
	customer := aUsername.!

!methodRemoval: Cashier #initializeToCheckout:charging:throught:registeringOn: stamp: 'MS 11/10/2021 20:24:02'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/10/2021 20:24:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/10/2021 20:24:05'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/10/2021 20:24:05'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/10/2021 20:24:05'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/10/2021 20:24:05'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/10/2021 20:24:05'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/10/2021 20:24:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/10/2021 20:24:05'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/10/2021 20:24:05'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 20:24:05'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/10/2021 20:24:05'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/10/2021 20:24:05'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/10/2021 20:24:05'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/10/2021 20:24:05'!
ERROR!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 20:24:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 20:24:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 20:24:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 20:24:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 20:24:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 20:24:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 20:24:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 20:24:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 20:24:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 20:24:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 20:24:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:24:05'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/10/2021 20:24:15'!
PASSED!
!Cashier class methodsFor: 'instance creation' stamp: 'MS 11/10/2021 20:24:56'!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook generatingTransactionIdWith: aTransactionIdGenerator 
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook ! !

!methodRemoval: Cashier class #toCheckout:charging:throught:on:registeringOn: stamp: 'MS 11/10/2021 20:25:00'!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook!

!methodRemoval: Cashier class #toCheckout:charging:throught:on:registeringOn:withUser: stamp: 'MS 11/10/2021 20:25:01'!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook withUser: aUsername
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook withUser: aUsername.!
!Cashier class methodsFor: 'instance creation' stamp: 'MS 11/10/2021 20:25:21' prior: 50970933!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook generatingTransactionIdWith: aTransactionId 
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook with: aTransactionId! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/10/2021 20:25:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/10/2021 20:25:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/10/2021 20:25:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/10/2021 20:25:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/10/2021 20:25:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/10/2021 20:25:26'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/10/2021 20:25:26'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/10/2021 20:25:26'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/10/2021 20:25:26'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 20:25:26'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/10/2021 20:25:26'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/10/2021 20:25:26'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/10/2021 20:25:26'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/10/2021 20:25:26'!
ERROR!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 20:25:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 20:25:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 20:25:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 20:25:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 20:25:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 20:25:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 20:25:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 20:25:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 20:25:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 20:25:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 20:25:26'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:25:26'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'transaction' stamp: 'MS 11/10/2021 20:26:52'!
transactionID

	^self.! !
!CashierTest methodsFor: 'tests' stamp: 'MS 11/10/2021 20:27:34' prior: 50968061!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: self
			on: testObjectsFactory today
			registeringOn:  salesBook
			with: testObjectsFactory transactionID ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'MS 11/10/2021 20:27:53' prior: 50971083!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: self
			on: testObjectsFactory today
			registeringOn: salesBook
			with: testObjectsFactory transactionID ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!Cashier class methodsFor: 'instance creation' stamp: 'MS 11/10/2021 20:28:11'!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook with: aTransactionId 
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook with: aTransactionId! !

!methodRemoval: Cashier class #toCheckout:charging:throught:on:registeringOn:generatingTransactionIdWith: stamp: 'MS 11/10/2021 20:28:11'!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook generatingTransactionIdWith: aTransactionId 
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook with: aTransactionId!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/10/2021 20:28:21'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/10/2021 20:28:21'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 20:28:21'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/10/2021 20:28:21'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/10/2021 20:28:21'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/10/2021 20:28:21'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/10/2021 20:28:21'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/10/2021 20:28:32' prior: 50970699!
test02CalculatedTotalIsCorrect

	| cart cashier salesBook |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	salesBook := Dictionary new.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: salesBook
		with: testObjectsFactory transactionID.
		
	self assert: (salesBook at: cashier checkOut) total  = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'tests' stamp: 'MS 11/10/2021 20:28:36' prior: 50968095!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: self
				on: testObjectsFactory today
				registeringOn: salesBook
				with: testObjectsFactory transactionID ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'MS 11/10/2021 20:28:41' prior: 50968116!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		with: testObjectsFactory transactionID.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'tests' stamp: 'MS 11/10/2021 20:28:47' prior: 50968134!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		with: testObjectsFactory transactionID.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'tests' stamp: 'MS 11/10/2021 20:28:51' prior: 50968158!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		with: testObjectsFactory transactionID.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/10/2021 20:28:53'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/10/2021 20:28:53'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 20:28:53'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/10/2021 20:28:53'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/10/2021 20:28:53'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/10/2021 20:28:53'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/10/2021 20:28:53'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/10/2021 20:28:56'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/10/2021 20:28:56'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/10/2021 20:29:13' prior: 50971216!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		with: testObjectsFactory transactionID.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
! !
!CashierTest methodsFor: 'tests' stamp: 'MS 11/10/2021 20:29:18' prior: 50971318!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		with: testObjectsFactory transactionID.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1."
	self assert: salesBook first total = total."! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/10/2021 20:29:20'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/10/2021 20:29:23'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/10/2021 20:29:23'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/10/2021 20:29:52' prior: 50971336!
test04CheckoutRegistersASale

	| cart cashier salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		with: testObjectsFactory transactionID.
		
	cashier checkOut.
					
	self assert: salesBook size = 1."
	self assert: salesBook first total = total."! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/10/2021 20:29:55'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/10/2021 20:30:29' prior: 50971364!
test04CheckoutRegistersASale

	| cart cashier salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := Dictionary new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		with: testObjectsFactory transactionID.
		
	cashier checkOut.
					
	self assert: salesBook size = 1."
	self assert: salesBook first total = total."! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/10/2021 20:30:30'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/10/2021 20:30:30'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 20:30:30'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/10/2021 20:30:30'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/10/2021 20:30:30'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/10/2021 20:30:30'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/10/2021 20:30:30'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/10/2021 20:30:30'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/10/2021 20:30:38'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/10/2021 20:30:38'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 20:30:38'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/10/2021 20:30:38'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/10/2021 20:30:38'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/10/2021 20:30:38'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/10/2021 20:30:38'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/10/2021 20:30:38'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/10/2021 20:31:08'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/10/2021 20:31:10'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/10/2021 20:31:10'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/10/2021 20:31:16' prior: 50971235!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := Dictionary new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		with: testObjectsFactory transactionID.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/10/2021 20:31:17'!
FAILURE!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/10/2021 20:31:20'!
FAILURE!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/10/2021 20:31:20'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'MS 11/10/2021 20:31:49' prior: 50971468!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook transactionId creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := Dictionary new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		with: testObjectsFactory transactionID.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	transactionId := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = (salesBook at: transactionId) total.! !

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/10/2021 20:31:50'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/10/2021 20:31:50'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 20:31:50'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/10/2021 20:31:50'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/10/2021 20:31:50'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/10/2021 20:31:50'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/10/2021 20:31:50'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/10/2021 20:31:53'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/10/2021 20:31:53'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/10/2021 20:31:53'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/10/2021 20:31:53'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/10/2021 20:31:53'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/10/2021 20:31:53'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/10/2021 20:31:53'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/10/2021 20:31:53'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/10/2021 20:31:53'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 20:31:53'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/10/2021 20:31:53'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/10/2021 20:31:53'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/10/2021 20:31:53'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/10/2021 20:31:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 20:31:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 20:31:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 20:31:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 20:31:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 20:31:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 20:31:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 20:31:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 20:31:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 20:31:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 20:31:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 20:31:53'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:31:53'!
ERROR!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 20:32:02'!
ERROR!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 20:32:02'!
ERROR!

!classDefinition: #TusLibrosFacade category: 'TusLibros' stamp: 'MS 11/10/2021 20:37:16'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'catalog salesBook merchantProcessor validUsers cartIdCounter transactionsId cartSessions transactionID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 20:37:14' prior: 50970050!
initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor 
	
	validUsers := usersWithPasswords.
	catalog := aCatalog.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.

	cartSessions := Dictionary new.
	cartIdCounter := 0.
	
	transactionID := 1.! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 20:38:01' prior: 50970248!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier transactionId transactionsOfAClient |
	
	cart := cartSessions at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[^self error: self cartCanNotBeEmptyErrorMessage].
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook
		with: transactionID copy.
		
	transactionId := cashier checkOut .
	
	transactionsOfAClient := salesBook at: cartId ifAbsent: [ OrderedCollection new ].
	transactionsOfAClient add: transactionId.
	
	
	
	
	
		
	
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 20:38:20' prior: 50971676!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier transactionId transactionsOfAClient |
	
	cart := cartSessions at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[^self error: self cartCanNotBeEmptyErrorMessage].
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook
		with: transactionID.
		
	transactionId := cashier checkOut .
	
	transactionsOfAClient := salesBook at: cartId ifAbsent: [ OrderedCollection new ].
	transactionsOfAClient add: transactionId.
	
	
	
	
	
		
	
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 20:38:27' prior: 50971699!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier transactionId transactionsOfAClient |
	
	cart := cartSessions at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[^self error: self cartCanNotBeEmptyErrorMessage].
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook
		with: transactionID copy.
		
	transactionId := cashier checkOut .
	
	transactionsOfAClient := salesBook at: cartId ifAbsent: [ OrderedCollection new ].
	transactionsOfAClient add: transactionId.
	
	
	
	
	
		
	
	! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 20:38:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 20:38:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 20:38:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 20:38:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 20:38:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 20:38:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 20:38:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 20:38:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 20:38:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 20:38:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 20:38:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:38:48'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:38:48'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:41:53'!
ERROR!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 20:42:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 20:42:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 20:42:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 20:42:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 20:42:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 20:42:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 20:42:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 20:42:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 20:42:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 20:42:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 20:42:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:42:36'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:42:36'!
ERROR!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 20:42:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 20:42:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 20:42:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 20:42:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 20:42:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 20:42:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 20:42:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 20:42:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 20:42:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 20:42:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 20:42:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:42:46'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:42:46'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:43:28'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/10/2021 20:43:58'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/10/2021 20:43:58'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/10/2021 20:43:58'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/10/2021 20:43:58'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/10/2021 20:43:58'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/10/2021 20:43:58'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/10/2021 20:43:58'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/10/2021 20:43:58'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/10/2021 20:43:58'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 20:43:58'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/10/2021 20:43:58'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/10/2021 20:43:58'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/10/2021 20:43:58'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/10/2021 20:43:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 20:43:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 20:43:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 20:43:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 20:43:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 20:43:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 20:43:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 20:43:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 20:43:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 20:43:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 20:43:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 20:43:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:43:58'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:43:58'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:44:04'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:44:04'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:44:59'!
ERROR!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 20:45:15'!
PASSED!

!classDefinition: #TusLibrosFacadeTest category: 'TusLibros' stamp: 'MS 11/10/2021 20:49:36'!
TestCase subclass: #TusLibrosFacadeTest
	instanceVariableNames: 'interface testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/10/2021 20:49:34' prior: 50969199 overrides: 16927572!
setUp
	|catalog validUsersAndPasswords|
	
	validUsersAndPasswords := Dictionary new 
		at:'ValidUser1' put:'ValidPassword1' ; 
		at:'ValidUser2' put:'ValidPassword2' ; 
		yourself.
	
	catalog:= StoreTestObjectsFactory new defaultCatalog.
	
	interface := TusLibrosFacade withUsers: validUsersAndPasswords	 withCatalog: catalog withSalesBook: OrderedCollection new withMerchantProcessor: self.
	
	testObjectsFactory := StoreTestObjectsFactory new.
	
	debitBehavior := [ :anAmount :aCreditCard | ]! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/10/2021 20:49:44'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard ! !

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:49:48'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:49:48'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:51:01'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:51:01'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:51:50'!
ERROR!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 20:54:45' prior: 50971722!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier transactionId transactionsOfAClient |
	
	cart := cartSessions at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[^self error: self cartCanNotBeEmptyErrorMessage].
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook
		with: self.
		
	transactionId := cashier checkOut .
	
	transactionsOfAClient := salesBook at: cartId ifAbsent: [ OrderedCollection new ].
	transactionsOfAClient add: transactionId.
	
	
	
	
	
		
	
	! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 20:55:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 20:55:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 20:55:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 20:55:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 20:55:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 20:55:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 20:55:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 20:55:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 20:55:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 20:55:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 20:55:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:55:48'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:55:48'!
ERROR!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'MS 11/10/2021 20:56:29'!
nextTransactionId
	self shouldBeImplemented.! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'MS 11/10/2021 20:57:15' prior: 50972105!
nextTransactionId
	
	transactionsId := transactionsId +1.
	
	^transactionsId -1.! !

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:57:16'!
ERROR!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 20:58:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 20:58:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 20:58:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 20:58:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 20:58:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 20:58:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 20:58:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 20:58:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 20:58:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 20:58:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 20:58:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:58:25'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 20:58:25'!
ERROR!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'MS 11/10/2021 21:01:13' prior: 50972110!
nextTransactionId
	
	transactionID := transactionID +1.
	
	^transactionID -1.! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 21:01:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 21:01:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 21:01:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 21:01:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 21:01:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 21:01:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 21:01:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 21:01:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 21:01:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 21:01:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 21:01:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:01:15'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:01:15'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:02:48'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:02:48'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:03:59'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:04:32'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:04:32'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:05:00'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:05:11'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:05:55'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:05:55'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:07:21'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:07:21'!
ERROR!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/10/2021 21:07:50' prior: 50971999 overrides: 16927572!
setUp
	|catalog validUsersAndPasswords|
	
	validUsersAndPasswords := Dictionary new 
		at:'ValidUser1' put:'ValidPassword1' ; 
		at:'ValidUser2' put:'ValidPassword2' ; 
		yourself.
	
	catalog:= StoreTestObjectsFactory new defaultCatalog.
	
	interface := TusLibrosFacade withUsers: validUsersAndPasswords	 withCatalog: catalog withSalesBook: Dictionary new withMerchantProcessor: self.
	
	testObjectsFactory := StoreTestObjectsFactory new.
	
	debitBehavior := [ :anAmount :aCreditCard | ]! !

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:07:53'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:07:53'!
ERROR!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 21:09:09' prior: 50972037!
	checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier transactionId transactionsOfAClient |
	
	cart := cartSessions at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[^self error: self cartCanNotBeEmptyErrorMessage].
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook
		with: self.
		
	transactionId := cashier checkOut .
	
	transactionsOfAClient := salesBook at: cartId ifAbsent: [ OrderedCollection new ].
	transactionsOfAClient add: transactionId.
	
	
	! !

!classDefinition: #TusLibrosFacade category: 'TusLibros' stamp: 'MS 11/10/2021 21:10:46'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'catalog salesBook merchantProcessor validUsers cartIdCounter transactionsId cartSessions transactionID cartToClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosFacade category: 'TusLibros' stamp: 'MS 11/10/2021 21:10:47'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'catalog salesBook merchantProcessor validUsers cartIdCounter transactionsId cartSessions transactionID cartToClient clientToCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 21:10:45' prior: 50971662!
initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor 
	
	validUsers := usersWithPasswords.
	catalog := aCatalog.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.

	cartSessions := Dictionary new.
	cartIdCounter := 0.
	
	transactionID := 1.
	
	cartToClient := Dictionary new.
	clientToCart := Dictionary new.! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 21:11:47' prior: 50969812!
createCartFor: aUser with: aUserPassword 
	
	|password cart|
	
	validUsers at: aUser ifAbsent:[self error: self invalidUserOrPasswordErrorDescription].
	
	password := validUsers at: aUser.
	
	( password = aUserPassword ) ifFalse:[self error: self invalidUserOrPasswordErrorDescription].
	
	cartIdCounter := cartIdCounter + 1.
	
	cart := Cart acceptingItemsOf: catalog.
	
	cartSessions at: cartIdCounter put:cart.
	
	cartToClient at: cartIdCounter put: aUser.
	
	^cartIdCounter.
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 21:12:59' prior: 50972268!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier transactionId client |
	
	cart := cartSessions at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[^self error: self cartCanNotBeEmptyErrorMessage].
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook
		with: self.
		
	transactionId := cashier checkOut .
	
	
	client := cartToClient at: cartId.
	cartToClient removeKey: cartId.
	
	client add: transactionId.
	
	
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 21:13:55' prior: 50972346!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier transactionId client |
	
	cart := cartSessions at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[^self error: self cartCanNotBeEmptyErrorMessage].
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook
		with: self.
		
	transactionId := cashier checkOut .
	
	
	client := cartToClient at: cartId.
	cartToClient removeKey: cartId.
	
	^transactionId.
	
	
	! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 21:14:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 21:14:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 21:14:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 21:14:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 21:14:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 21:14:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 21:14:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 21:14:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 21:14:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 21:14:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 21:14:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:14:02'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:14:02'!
FAILURE!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 21:14:42' prior: 50969411!
listPurchases: aUser withPassword: aPassword 
	
	|salesByUser items total|
	
	salesByUser := salesBook select:[:aSale| aSale isFrom:aUser].
	total := 0.
	items:= Dictionary new.
	
	salesByUser do:[:aSale| 
		aSale items associationsDo: [:aSaleItem | | quantity |
			quantity := items at: aSaleItem key ifAbsent: [0].
			items at: aSaleItem key put: quantity + aSaleItem value
			].
		total := total + aSale total.
	].
	
	^ items.
	
	! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 21:14:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 21:14:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 21:14:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 21:14:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 21:14:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 21:14:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 21:14:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 21:14:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 21:14:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 21:14:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 21:14:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:14:51'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:14:51'!
FAILURE!

!classDefinition: #TusLibrosFacade category: 'TusLibros' stamp: 'MS 11/10/2021 21:16:54'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'catalog salesBook merchantProcessor validUsers cartIdCounter transactionsId cartSessions transactionID cartToClient clientToCart clientsTransactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 21:16:50' prior: 50972312!
initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor 
	
	validUsers := usersWithPasswords.
	catalog := aCatalog.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.

	cartSessions := Dictionary new.
	cartIdCounter := 0.
	
	transactionID := 1.
	
	cartToClient := Dictionary new.
	clientToCart := Dictionary new.
	
	clientsTransactions := Dictionary new.! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 21:20:38' prior: 50972367!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier transactionId client clientTransactions |
	
	cart := cartSessions at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[^self error: self cartCanNotBeEmptyErrorMessage].
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook
		with: self.
		
	transactionId := cashier checkOut .
	
	
	client := cartToClient at: cartId.
	cartToClient removeKey: cartId.
	
	clientTransactions := clientsTransactions at: aCreditCard owner ifAbsent: [ OrderedCollection new ].
	clientTransactions  add: transactionId .
	clientsTransactions at: clientTransactions put: transactionId.
	
	^transactionId.
	
	
	! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 21:21:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 21:21:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 21:21:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 21:21:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 21:21:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 21:21:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 21:21:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 21:21:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 21:21:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 21:21:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 21:21:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:21:43'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:21:43'!
ERROR!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 21:22:14' prior: 50972525!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier transactionId client clientTransactions |
	
	cart := cartSessions at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[^self error: self cartCanNotBeEmptyErrorMessage].
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook
		with: self.
		
	transactionId := cashier checkOut .
	
	
	client := cartToClient at: cartId.
	cartToClient removeKey: cartId.
	
	clientTransactions := clientsTransactions at: aCreditCard customerName ifAbsent: [ OrderedCollection new ].
	clientTransactions  add: transactionId .
	clientsTransactions at: clientTransactions put: transactionId.
	
	^transactionId.
	
	
	! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 21:22:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 21:22:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 21:22:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 21:22:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 21:22:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 21:22:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 21:22:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 21:22:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 21:22:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 21:22:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 21:22:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:22:17'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:22:17'!
FAILURE!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 21:23:41' prior: 50972434!
listPurchases: aUser withPassword: aPassword 
	
	|salesByUser items total|
	
	salesByUser := clientsTransactions at: aUser ifAbsent: [OrderedCollection new.].
	total := 0.
	items:= Dictionary new.
	
	salesByUser do:[:aSale| 
		aSale items associationsDo: [:aSaleItem | | quantity |
			quantity := items at: aSaleItem key ifAbsent: [0].
			items at: aSaleItem key put: quantity + aSaleItem value
			].
		total := total + aSale total.
	].
	
	^ items.
	
	! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 21:23:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 21:23:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 21:23:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 21:23:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 21:23:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 21:23:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 21:23:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 21:23:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 21:23:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 21:23:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 21:23:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:23:44'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:23:44'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:23:53'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:23:53'!
FAILURE!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 21:25:24' prior: 50972673!
listPurchases: aUser withPassword: aPassword 
	
	|clientTransactions items total|
	
	clientTransactions := clientsTransactions at: aUser ifAbsent: [OrderedCollection new.].
	total := 0.
	items:= Dictionary new.
	
	clientTransactions do:[:aSale| 
		aSale items associationsDo: [:aSaleItem | | quantity |
			quantity := items at: aSaleItem key ifAbsent: [0].
			items at: aSaleItem key put: quantity + aSaleItem value
			].
		total := total + aSale total.
	].
	
	^ items.
	
	! !

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:25:48'!
FAILURE!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 21:27:11' prior: 50972741!
listPurchases: aUser withPassword: aPassword 
	
	|clientTransactions items total|
	
	clientTransactions := clientsTransactions at: aUser ifAbsent: [OrderedCollection new.].
	
	
	total := 0.
	items:= Dictionary new.
	
	clientTransactions do:[:aSale| 
		aSale items associationsDo: [:aSaleItem | | quantity |
			quantity := items at: aSaleItem key ifAbsent: [0].
			items at: aSaleItem key put: quantity + aSaleItem value
			].
		total := total + aSale total.
	].
	
	^ items.
	
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 21:28:23' prior: 50972762!
listPurchases: aUser withPassword: aPassword 
	
	|clientTransactions clientXXX items total|
	
	clientTransactions := clientsTransactions at: aUser ifAbsent: [OrderedCollection new.].
	clientXXX := clientTransactions collect: [:aTransactionID | salesBook at: aTransactionID ].
	
	total := 0.
	items:= Dictionary new.
	
	clientTransactions do:[:aSale| 
		aSale items associationsDo: [:aSaleItem | | quantity |
			quantity := items at: aSaleItem key ifAbsent: [0].
			items at: aSaleItem key put: quantity + aSaleItem value
			].
		total := total + aSale total.
	].
	
	^ items.
	
	! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 21:28:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 21:28:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 21:28:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 21:28:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 21:28:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 21:28:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 21:28:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 21:28:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 21:28:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 21:28:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 21:28:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:28:36'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:28:36'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:33:50'!
FAILURE!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 21:34:47' prior: 50972599!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier transactionId client clientTransactions |
	
	cart := cartSessions at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[^self error: self cartCanNotBeEmptyErrorMessage].
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook
		with: self.
		
	transactionId := cashier checkOut .
	
	
	client := cartToClient at: cartId.
	cartToClient removeKey: cartId.
	
	clientTransactions := clientsTransactions at: aCreditCard customerName ifAbsent: [ OrderedCollection new ].
	clientTransactions add: transactionId .
	clientsTransactions at: clientTransactions put: transactionId.
	
	^transactionId.
	
	
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 21:35:12' prior: 50972850!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier transactionId client clientTransactions |
	
	cart := cartSessions at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[^self error: self cartCanNotBeEmptyErrorMessage].
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook
		with: self.
		
	transactionId := cashier checkOut .
	
	client := cartToClient at: cartId.
	cartToClient removeKey: cartId.
	
	clientTransactions := clientsTransactions at: aCreditCard customerName ifAbsent: [ OrderedCollection new ].
	clientTransactions add: transactionId .
	clientsTransactions at: clientTransactions put: transactionId.
	
	^transactionId.
	
	
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 21:35:26' prior: 50972878!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier transactionId client clientTransactions |
	
	cart := cartSessions at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[^self error: self cartCanNotBeEmptyErrorMessage].
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook
		with: self.
		
	transactionId := cashier checkOut .
	
	client := cartToClient removeKey: cartId.
	
	clientTransactions := clientsTransactions at: aCreditCard customerName ifAbsent: [ OrderedCollection new ].
	clientTransactions add: transactionId .
	clientsTransactions at: clientTransactions put: transactionId.
	
	^transactionId.
	
	
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 21:36:30' prior: 50972906!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier transactionId client clientTransactions |
	
	cart := cartSessions at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[^self error: self cartCanNotBeEmptyErrorMessage].
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook
		with: self.
		
	transactionId := cashier checkOut .
	
	client := cartToClient removeKey: cartId.
	
	clientTransactions := clientsTransactions at: client customerName ifAbsent: [ OrderedCollection new ].
	clientTransactions add: transactionId .
	clientsTransactions at: clientTransactions put: transactionId.
	
	^transactionId.
	
	
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 21:36:36' prior: 50972933!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier transactionId client clientTransactions |
	
	cart := cartSessions at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[^self error: self cartCanNotBeEmptyErrorMessage].
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook
		with: self.
		
	transactionId := cashier checkOut .
	
	client := cartToClient removeKey: cartId.
	
	clientTransactions := clientsTransactions at: client ifAbsent: [ OrderedCollection new ].
	clientTransactions add: transactionId .
	clientsTransactions at: clientTransactions put: transactionId.
	
	^transactionId.
	
	
	! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 21:36:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 21:36:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 21:36:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 21:36:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 21:36:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 21:36:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 21:36:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 21:36:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 21:36:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 21:36:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 21:36:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:36:45'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:36:45'!
FAILURE!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 21:40:21' prior: 50972960!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier transactionId client clientTransactions |
	
	cart := cartSessions at: cartId ifAbsent:[^ self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[^self error: self cartCanNotBeEmptyErrorMessage].
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook
		with: self.
		
	transactionId := cashier checkOut .
	
	client := cartToClient removeKey: cartId.
	
	clientTransactions := clientsTransactions at: client ifAbsent: [ OrderedCollection new ].
	clientTransactions add: transactionId .
	clientsTransactions at: client put: clientTransactions .
	
	^transactionId.
	
	
	! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 21:40:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 21:40:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 21:40:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 21:40:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 21:40:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 21:40:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 21:40:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 21:40:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 21:40:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 21:40:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 21:40:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:40:30'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:40:30'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:41:37'!
ERROR!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 21:43:59' prior: 50972780!
listPurchases: aUser withPassword: aPassword 
	
	|clientTransactions items total sales|
	
	clientTransactions := clientsTransactions at: aUser ifAbsent: [OrderedCollection new.].
	sales := clientTransactions collect: [:aTransactionID | salesBook at: aTransactionID ].
	
	total := 0.
	items:= Dictionary new.
	
	sales do:[:aSale| 
		aSale items associationsDo: [:aSaleItem | | quantity |
			quantity := items at: aSaleItem key ifAbsent: [0].
			items at: aSaleItem key put: quantity + aSaleItem value
			].
		total := total + aSale total.
	].
	
	^ items.
	
	! !

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:44:03'!
ERROR!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 21:46:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 21:46:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 21:46:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 21:46:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 21:46:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 21:46:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 21:46:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 21:46:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 21:46:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 21:46:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 21:46:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:46:02'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:46:02'!
ERROR!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 21:46:19' prior: 50973107!
listPurchases: aUser withPassword: aPassword 
	
	|clientTransactions items total sales|
	
	clientTransactions := clientsTransactions at: aUser ifAbsent: [OrderedCollection new.].
	sales := clientTransactions collect: [:aTransactionID | salesBook at: aTransactionID ].
	
	total := 0.
	items:= Dictionary new.
	
	sales do:[:aSale| 
		aSale itemsBought associationsDo: [:aSaleItem | | quantity |
			quantity := items at: aSaleItem key ifAbsent: [0].
			items at: aSaleItem key put: quantity + aSaleItem value
			].
		total := total + aSale total.
	].
	
	^ items.
	
	! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 21:46:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 21:46:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 21:46:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 21:46:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 21:46:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 21:46:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 21:46:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 21:46:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 21:46:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 21:46:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 21:46:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:46:21'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 21:46:21'!
ERROR!

!classDefinition: #Sale category: 'TusLibros' stamp: 'MS 11/10/2021 22:15:42'!
Object subclass: #Sale
	instanceVariableNames: 'total customer itemsBought items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'MS 11/10/2021 22:15:40'!
initializeWith: someItems andTotal: aTotal

	total := aTotal.
	items := someItems .
	! !

!methodRemoval: Sale #initializeTotal:withUser: stamp: 'MS 11/10/2021 22:15:57'!
initializeTotal: aTotal withUser: aUsername

	total := aTotal.
	customer := aUsername.
	!
!Sale class methodsFor: 'instance creation' stamp: 'MS 11/10/2021 22:16:17'!
of: someItems with: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeWith: someItems andTotal: aTotal
! !

!methodRemoval: Sale class #of:withUser: stamp: 'MS 11/10/2021 22:16:19'!
of: aTotal withUser: aUsername

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal withUser: aUsername!

!methodRemoval: Sale class #of: stamp: 'MS 11/10/2021 22:16:25'!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/10/2021 22:16:32'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/10/2021 22:16:32'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/10/2021 22:16:32'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/10/2021 22:16:32'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/10/2021 22:16:32'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/10/2021 22:16:32'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/10/2021 22:16:32'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/10/2021 22:16:32'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/10/2021 22:16:32'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 22:16:32'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/10/2021 22:16:32'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/10/2021 22:16:32'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/10/2021 22:16:32'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/10/2021 22:16:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 22:16:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 22:16:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 22:16:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 22:16:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 22:16:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 22:16:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 22:16:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 22:16:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 22:16:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 22:16:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 22:16:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 22:16:32'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/10/2021 22:16:37'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 22:16:37'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/10/2021 22:16:37'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/10/2021 22:16:37'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/10/2021 22:16:37'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/10/2021 22:16:37'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 22:16:40'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 22:16:40'!
ERROR!
!Cashier methodsFor: 'checkout - private' stamp: 'MS 11/10/2021 22:17:47' prior: 50968540!
createSale

	^ Sale of:cart detail with: total .
! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 22:17:50'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'MS 11/10/2021 22:17:57'!
detail
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MS 11/10/2021 22:18:23' prior: 50973400!
detail
	| detail |
	
	detail := OrderedDictionary new.

	items do: [ :item |
		detail at: item put: (items occurrencesOf: item)
		].
	
	^ detail! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MS 11/10/2021 22:18:32' prior: 50973404!
detail
	| detail |
	
	detail := OrderedDictionary new.

	items do: [ :item |detail at: item put: (items occurrencesOf: item)		].
	
	^ detail! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 22:18:33'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/10/2021 22:18:36'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/10/2021 22:18:36'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/10/2021 22:18:36'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/10/2021 22:18:36'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/10/2021 22:18:36'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/10/2021 22:18:36'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/10/2021 22:18:36'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/10/2021 22:18:36'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/10/2021 22:18:36'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/10/2021 22:18:36'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/10/2021 22:18:36'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/10/2021 22:18:36'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/10/2021 22:18:36'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/10/2021 22:18:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 22:18:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 22:18:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 22:18:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 22:18:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 22:18:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 22:18:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 22:18:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 22:18:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 22:18:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 22:18:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 22:18:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 22:18:36'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 22:18:36'!
ERROR!
!Sale methodsFor: 'total' stamp: 'MS 11/10/2021 22:18:56'!
items
	
	^ items ! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 22:19:09' prior: 50973176!
listPurchases: aUser withPassword: aPassword 
	
	|clientTransactions items total sales|
	
	clientTransactions := clientsTransactions at: aUser ifAbsent: [OrderedCollection new.].
	sales := clientTransactions collect: [:aTransactionID | salesBook at: aTransactionID ].
	
	total := 0.
	items:= Dictionary new.
	
	sales do:[:aSale| 
		aSale items associationsDo: [:aSaleItem | | quantity |
			quantity := items at: aSaleItem key ifAbsent: [0].
			items at: aSaleItem key put: quantity + aSaleItem value
			].
		total := total + aSale total.
	].
	
	^ items.
	
	! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 22:19:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 22:19:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 22:19:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 22:19:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 22:19:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 22:19:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 22:19:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 22:19:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 22:19:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 22:19:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 22:19:10'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 22:19:10'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 22:19:10'!
FAILURE!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/10/2021 22:19:55' prior: 50970019!
test12
	
	| aValidUser aValidPassword cartId expected purchases|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:2.
	interface addToCart: cartId book:'validBook2' bookQuantity:5.
	
	expected := Dictionary new
		at: 'validBook' put: 2;
		at: 'validBook2' put: 5;
		at: 'Total' put: (20+100);
		yourself.
	
	interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today.
	
	purchases := interface listPurchases: aValidUser withPassword: aValidPassword.
		
	self assert: purchases equals: expected.
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/10/2021 22:21:38' prior: 50973517!
listPurchases: aUser withPassword: aPassword 
	
	|clientTransactions items total sales|
	
	clientTransactions := clientsTransactions at: aUser ifAbsent: [OrderedCollection new.].
	sales := clientTransactions collect: [:aTransactionID | salesBook at: aTransactionID ].
	
	total := 0.
	items:= Dictionary new.
	
	sales do:[:aSale| 
		aSale items associationsDo: [:aSaleItem | | quantity |
			quantity := items at: aSaleItem key ifAbsent: [0].
			items at: aSaleItem key put: quantity + aSaleItem value
			].
		total := total + aSale total.
	].
	items at: 'Total' put: total. 
	
	^ items.
	
	! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/10/2021 22:21:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/10/2021 22:21:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/10/2021 22:21:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/10/2021 22:21:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/10/2021 22:21:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/10/2021 22:21:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/10/2021 22:21:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/10/2021 22:21:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/10/2021 22:21:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/10/2021 22:21:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/10/2021 22:21:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/10/2021 22:21:40'!
PASSED!

----SNAPSHOT----(10 November 2021 22:21:52) CuisUniversity-4913.image priorSource: 20359501!

----QUIT----(10 November 2021 22:22:11) CuisUniversity-4913.image priorSource: 20544751!

----STARTUP---- (11 November 2021 12:45:19) as /home/matias/Downloads/newcuis/linux64/CuisUniversity-4913.image!


!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 12:45:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 12:45:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 12:45:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 12:45:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 12:45:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 12:45:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 12:45:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 12:45:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 12:45:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 12:45:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 12:45:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 12:45:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 12:45:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 12:45:41'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/11/2021 12:45:44'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/11/2021 12:45:44'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/11/2021 12:45:44'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/11/2021 12:45:44'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/11/2021 12:45:44'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/11/2021 12:45:44'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/11/2021 12:45:44'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/11/2021 12:45:44'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/11/2021 12:45:44'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/11/2021 12:45:44'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/11/2021 12:45:44'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/11/2021 12:45:44'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/11/2021 12:45:44'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/11/2021 12:45:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 12:45:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 12:45:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 12:45:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 12:45:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 12:45:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 12:45:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 12:45:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 12:45:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 12:45:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 12:45:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 12:45:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 12:45:44'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 12:51:49'!
test13
	
	self
		should: [interface listPurchases: 'AnInvalidUser'  withPassword: 'aPassword'  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface invalidUserOrPasswordErrorDescription ]! !

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 12:51:50'!
FAILURE!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/11/2021 12:53:50' prior: 50973610!
listPurchases: aUser withPassword: aPassword 
	
	|clientTransactions items total sales password|
	
	validUsers at: aUser ifAbsent:[self error: self invalidUserOrPasswordErrorDescription].
	
	password := validUsers at: aUser.
	
	( password = aPassword ) ifFalse:[self error: self invalidUserOrPasswordErrorDescription].
	
	clientTransactions := clientsTransactions at: aUser ifAbsent: [OrderedCollection new.].
	sales := clientTransactions collect: [:aTransactionID | salesBook at: aTransactionID ].
	
	total := 0.
	items:= Dictionary new.
	
	sales do:[:aSale| 
		aSale items associationsDo: [:aSaleItem | | quantity |
			quantity := items at: aSaleItem key ifAbsent: [0].
			items at: aSaleItem key put: quantity + aSaleItem value
			].
		total := total + aSale total.
	].
	items at: 'Total' put: total. 
	
	^ items.
	
	! !

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 12:53:55'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 12:54:23'!
test14
	
	self
		should: [interface listPurchases: 'validUser'  withPassword: 'anInvalidPassword'  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface invalidUserOrPasswordErrorDescription ]! !

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 12:54:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 12:54:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 12:54:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 12:54:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 12:54:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 12:54:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 12:54:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 12:54:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 12:54:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 12:54:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 12:54:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 12:54:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 12:54:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 12:54:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 12:54:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 13:37:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 13:37:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 13:37:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 13:37:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 13:37:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 13:37:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 13:37:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 13:37:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 13:37:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 13:37:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 13:37:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 13:37:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 13:37:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 13:37:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 13:37:05'!
PASSED!

!classDefinition: #CartSession category: 'TusLibros' stamp: 'MS 11/11/2021 13:38:20'!
Object subclass: #CartSession
	instanceVariableNames: 'cart owner facade lastTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 13:38:18' prior: 50969616!
initializedWith: aCart ownedBy: aCustomer with: aFacade

	cart := aCart.
	owner := aCustomer .
	facade := aFacade.
	lastTime := self now.
! !

!classDefinition: #TusLibrosFacadeTest category: 'TusLibros' stamp: 'MS 11/11/2021 13:46:50'!
TestCase subclass: #TusLibrosFacadeTest
	instanceVariableNames: 'interface testObjectsFactory debitBehavior clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 13:47:21'!
test15canNotAddToCartWhenSessionIsExpired

	| cartId |

	cartId := interface createCartFor: 'validUser' with: 'validPassword'.
	clock advanceTime: (interface sessionDuration + 1 minutes) .
	self
		should: [interface  add: 2 of: self validBook toCartIdentifiedAs: cartId]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface sessionHasExpiredErrorDescription.
			self revertTime: interface sessionDuration.
			self assert: (interface listCartIdentifiedAs: cartId) isEmpty ]! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 13:48:25' prior: 50974003!
test15canNotAddToCartWhenSessionIsExpired

	| cartId |

	cartId := interface createCartFor: 'validUser' with: 'validPassword'.
	clock advanceTime: (interface sessionDuration + 1 minutes) .
	self
		should: [interface addToCart: 2 of:  'validBook']
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface sessionHasExpiredErrorDescription.
			self revertTime: interface sessionDuration.
			self assert: (interface listCartIdentifiedAs: cartId) isEmpty ]! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 13:48:40' prior: 50974024!
test15canNotAddToCartWhenSessionIsExpired

	| cartId |

	cartId := interface createCartFor: 'validUser' with: 'validPassword'.
	clock advanceTime: (interface sessionDuration + 1 minutes) .
	self
		should: [interface addToCart: cartId book:'validBook'  bookQuantity: 1.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface sessionHasExpiredErrorDescription.
			self revertTime: interface sessionDuration.
			self assert: (interface listCartIdentifiedAs: cartId) isEmpty ]! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 13:49:32' prior: 50974044!
test15canNotAddToCartWhenSessionIsExpired

	| cartId |

	cartId := interface createCartFor: 'validUser' with: 'validPassword'.
	clock advanceTime: (interface sessionDuration + 1 minutes) .
	self
		should: [interface addToCart: cartId book:'validBook'  bookQuantity: 1.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface sessionHasExpiredErrorDescription.
			clock revertTime: interface sessionDuration.
			self assert: (interface listCartIdentifiedAs: cartId) isEmpty ]! !

!classDefinition: #Clock category: 'TusLibros' stamp: 'MS 11/11/2021 13:50:40'!
Object subclass: #Clock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 13:50:35' prior: 50972244 overrides: 16927572!
setUp
	|catalog validUsersAndPasswords|
	
	validUsersAndPasswords := Dictionary new 
		at:'ValidUser1' put:'ValidPassword1' ; 
		at:'ValidUser2' put:'ValidPassword2' ; 
		yourself.
	
	catalog:= StoreTestObjectsFactory new defaultCatalog.
	
	interface := TusLibrosFacade withUsers: validUsersAndPasswords	 withCatalog: catalog withSalesBook: Dictionary new withMerchantProcessor: self.
	
	testObjectsFactory := StoreTestObjectsFactory new.
	
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	clock := Clock now: testObjectsFactory today.! !

!classDefinition: #Clock category: 'TusLibros' stamp: 'MS 11/11/2021 13:50:59'!
Object subclass: #Clock
	instanceVariableNames: 'now'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Clock methodsFor: 'no messages' stamp: 'MS 11/11/2021 13:50:57'!
initializeNow: aTime

	now := aTime ! !
!Clock methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 13:51:16'!
initializeWith: aTime

	now := aTime ! !

!methodRemoval: Clock #initializeNow: stamp: 'MS 11/11/2021 13:51:16'!
initializeNow: aTime

	now := aTime !
!Clock class methodsFor: 'no messages' stamp: 'MS 11/11/2021 13:51:31'!
for: aTime

	^self new initializeWith: aTime! !
!Clock methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 13:51:42'!
now

	^now.! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 13:51:58' prior: 50974093 overrides: 16927572!
setUp
	|catalog validUsersAndPasswords|
	
	validUsersAndPasswords := Dictionary new 
		at:'ValidUser1' put:'ValidPassword1' ; 
		at:'ValidUser2' put:'ValidPassword2' ; 
		yourself.
	
	catalog:= StoreTestObjectsFactory new defaultCatalog.
	
	interface := TusLibrosFacade withUsers: validUsersAndPasswords	 withCatalog: catalog withSalesBook: Dictionary new withMerchantProcessor: self.
	
	testObjectsFactory := StoreTestObjectsFactory new.
	
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	clock := Clock for: testObjectsFactory today.! !

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 13:52:00'!
ERROR!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 13:52:00'!
ERROR!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 13:52:23' prior: 50974065!
test15canNotAddToCartWhenSessionIsExpired

	| cartId |

	cartId := interface createCartFor: 'validUser1' with: 'validPassword1'.
	clock advanceTime: (interface sessionDuration + 1 minutes) .
	self
		should: [interface addToCart: cartId book:'validBook'  bookQuantity: 1.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface sessionHasExpiredErrorDescription.
			clock revertTime: interface sessionDuration.
			self assert: (interface listCartIdentifiedAs: cartId) isEmpty ]! !

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 13:52:24'!
ERROR!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 13:52:40' prior: 50974167!
test15canNotAddToCartWhenSessionIsExpired

	| cartId |

	cartId := interface createCartFor: 'ValidUser1' with: 'ValidPassword1'.
	clock advanceTime: (interface sessionDuration + 1 minutes) .
	self
		should: [interface addToCart: cartId book:'validBook'  bookQuantity: 1.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface sessionHasExpiredErrorDescription.
			clock revertTime: interface sessionDuration.
			self assert: (interface listCartIdentifiedAs: cartId) isEmpty ]! !

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 13:52:40'!
ERROR!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 13:52:51'!
sessionDuration
	self shouldBeImplemented.! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 13:53:09' prior: 50974215!
sessionDuration
	
	^30 minutes.! !

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 13:53:10'!
ERROR!
!Clock methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 13:53:31'!
advanceTime: aDuration 
	self shouldBeImplemented.! !
!Clock methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 13:53:43' prior: 50974227!
advanceTime: aDuration 
	
	now := now + aDuration ! !

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 13:53:43'!
FAILURE!

!classDefinition: #TusLibrosFacade category: 'TusLibros' stamp: 'MS 11/11/2021 13:59:05'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'catalog salesBook merchantProcessor validUsers cartIdCounter transactionsId cartSessions transactionID cartToClient clientToCart clientsTransactions clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 13:59:03'!
now

	^clock now! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/11/2021 14:00:57'!
initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor clock: withClock  
	
	validUsers := usersWithPasswords.
	catalog := aCatalog.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.

	cartSessions := Dictionary new.
	cartIdCounter := 0.
	
	transactionID := 1.
	
	cartToClient := Dictionary new.
	clientToCart := Dictionary new.
	
	clientsTransactions := Dictionary new.! !
!TusLibrosFacade class methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:00:57' prior: 50968946!
withUsers: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor 
	
	^ self new initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor clock: aClock.! !

!methodRemoval: TusLibrosFacade #initializeWith:withCatalog:withSalesBook:withMerchantProcessor: stamp: 'MS 11/11/2021 14:00:57'!
initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor 
	
	validUsers := usersWithPasswords.
	catalog := aCatalog.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.

	cartSessions := Dictionary new.
	cartIdCounter := 0.
	
	transactionID := 1.
	
	cartToClient := Dictionary new.
	clientToCart := Dictionary new.
	
	clientsTransactions := Dictionary new.!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/11/2021 14:01:17'!
initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: withClock  
	
	validUsers := usersWithPasswords.
	catalog := aCatalog.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.

	cartSessions := Dictionary new.
	cartIdCounter := 0.
	
	transactionID := 1.
	
	cartToClient := Dictionary new.
	clientToCart := Dictionary new.
	
	clientsTransactions := Dictionary new.! !
!TusLibrosFacade class methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:01:17' prior: 50974274!
withUsers: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor 
	
	^ self new initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock.! !

!methodRemoval: TusLibrosFacade #initializeWith:withCatalog:withSalesBook:withMerchantProcessor:clock: stamp: 'MS 11/11/2021 14:01:17'!
initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor clock: withClock  
	
	validUsers := usersWithPasswords.
	catalog := aCatalog.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.

	cartSessions := Dictionary new.
	cartIdCounter := 0.
	
	transactionID := 1.
	
	cartToClient := Dictionary new.
	clientToCart := Dictionary new.
	
	clientsTransactions := Dictionary new.!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/11/2021 14:01:21' prior: 50974303!
initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock  
	
	validUsers := usersWithPasswords.
	catalog := aCatalog.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.

	cartSessions := Dictionary new.
	cartIdCounter := 0.
	
	transactionID := 1.
	
	cartToClient := Dictionary new.
	clientToCart := Dictionary new.
	
	clientsTransactions := Dictionary new.! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/11/2021 14:01:31' prior: 50974352!
initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock  
	
	validUsers := usersWithPasswords.
	catalog := aCatalog.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.

	cartSessions := Dictionary new.
	cartIdCounter := 0.
	
	transactionID := 1.
	
	cartToClient := Dictionary new.
	clientToCart := Dictionary new.
	
	clientsTransactions := Dictionary new.
	clock := aClock.! !

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:01:47'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:01:47'!
FAILURE!
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:02:58' prior: 50969623!
addToCart: anAmount of: aBook
	
	(self isExpiredAt: self now) ifTrue: [ self signalCartSessionExpired ].
	^cart add: anAmount of: aBook! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:04:02' prior: 50974396!
addToCart: anAmount of: aBook
	
	(lastTime + facade sessionDuration) < facade now ifTrue: [ self signalCartSessionExpired ].
	^cart add: anAmount of: aBook! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:04:14'!
signalCartSessionExpired

	self error: facade sessionHasExpiredErrorDescription ! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:05:00'!
sessionHasExpiredErrorDescription

	^'The cart session is expired'! !

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:05:08'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:05:16'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:05:16'!
FAILURE!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:05:57' prior: 50974191!
test15canNotAddToCartWhenSessionIsExpired

	| cartId |

	cartId := interface createCartFor: 'ValidUser1' with: 'ValidPassword1'.
	clock advanceTime: (interface sessionDuration + 1 minutes) .
	self
		should: [interface addToCart: cartId book:'validBook'  bookQuantity: 1.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface sessionHasExpiredErrorDescription.
			clock revertTime: interface sessionDuration.
			self assert: (interface listCart: cartId) isEmpty ]! !

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:05:58'!
FAILURE!
!Clock methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:06:26'!
revertTime: aDuration

	now := now + aDuration negated ! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 14:06:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 14:06:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 14:06:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 14:06:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 14:06:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 14:06:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 14:06:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 14:06:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 14:06:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:06:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 14:06:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 14:06:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 14:06:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 14:06:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:06:30'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:06:30'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:07:06'!
FAILURE!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/11/2021 14:16:17' prior: 50972328!
createCartFor: aUser with: aUserPassword 
	
	|password cart|
	
	validUsers at: aUser ifAbsent:[self error: self invalidUserOrPasswordErrorDescription].
	
	password := validUsers at: aUser.
	
	( password = aUserPassword ) ifFalse:[self error: self invalidUserOrPasswordErrorDescription].
	
	cartIdCounter := cartIdCounter + 1.
	
	cart := CartSession acceptingItemsOf: catalog.
	
	cartSessions at: cartIdCounter put:cart.
	
	cartToClient at: cartIdCounter put: aUser.
	
	^cartIdCounter.
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/11/2021 14:19:35' prior: 50974522!
createCartFor: aUser with: aUserPassword 
	
	|password cart|
	
	validUsers at: aUser ifAbsent:[self error: self invalidUserOrPasswordErrorDescription].
	
	password := validUsers at: aUser.
	
	( password = aUserPassword ) ifFalse:[self error: self invalidUserOrPasswordErrorDescription].
	
	cartIdCounter := cartIdCounter + 1.
	
	cart := CartSession for: (Cart acceptingItemsOf: catalog) ownedBy: aUser with: self.
	
	cartSessions at: cartIdCounter put:cart.
	
	cartToClient at: cartIdCounter put: aUser.
	
	^cartIdCounter.
	! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 14:19:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 14:19:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 14:19:36'!
ERROR!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 14:19:36'!
ERROR!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 14:19:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 14:19:36'!
ERROR!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 14:19:36'!
ERROR!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 14:19:36'!
ERROR!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 14:19:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:19:36'!
ERROR!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 14:19:36'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 14:19:36'!
ERROR!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 14:19:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 14:19:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:19:36'!
ERROR!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 14:19:41'!
ERROR!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 14:19:41'!
ERROR!
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:20:06' prior: 50973987!
initializedWith: aCart ownedBy: aCustomer with: aFacade

	cart := aCart.
	owner := aCustomer .
	facade := aFacade.
	lastTime := aFacade now.
! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 14:20:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 14:20:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 14:20:09'!
ERROR!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 14:20:09'!
ERROR!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 14:20:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 14:20:09'!
ERROR!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 14:20:09'!
ERROR!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 14:20:09'!
ERROR!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 14:20:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:20:09'!
ERROR!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 14:20:09'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 14:20:09'!
ERROR!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 14:20:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 14:20:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:20:09'!
ERROR!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 14:20:12'!
ERROR!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 14:20:12'!
ERROR!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 14:20:53'!
ERROR!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 14:20:53'!
ERROR!
!TusLibrosFacade class methodsFor: 'class initialization' stamp: 'MS 11/11/2021 14:23:23'!
withUsers: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock
	
	^ self new initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock.! !

!methodRemoval: TusLibrosFacade class #withUsers:withCatalog:withSalesBook:withMerchantProcessor: stamp: 'MS 11/11/2021 14:23:26'!
withUsers: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor 
	
	^ self new initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock.!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:23:51' prior: 50974139 overrides: 16927572!
setUp
	|catalog validUsersAndPasswords|
	
	validUsersAndPasswords := Dictionary new 
		at:'ValidUser1' put:'ValidPassword1' ; 
		at:'ValidUser2' put:'ValidPassword2' ; 
		yourself.
	
	catalog:= StoreTestObjectsFactory new defaultCatalog.
	
	clock := Clock for: testObjectsFactory today.	
	
	interface := TusLibrosFacade withUsers: validUsersAndPasswords	 withCatalog: catalog withSalesBook: Dictionary new withMerchantProcessor: self withClock: clock.
	
	testObjectsFactory := StoreTestObjectsFactory new.
	
	debitBehavior := [ :anAmount :aCreditCard | ].
	
! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:26:01' prior: 50974718 overrides: 16927572!
setUp
	|catalog validUsersAndPasswords|
	
	validUsersAndPasswords := Dictionary new 
		at:'ValidUser1' put:'ValidPassword1' ; 
		at:'ValidUser2' put:'ValidPassword2' ; 
		yourself.
	
	catalog:= StoreTestObjectsFactory new defaultCatalog.
	
	testObjectsFactory := StoreTestObjectsFactory new.
	clock := Clock for: testObjectsFactory today.	
	
	interface := TusLibrosFacade withUsers: validUsersAndPasswords	 withCatalog: catalog withSalesBook: Dictionary new withMerchantProcessor: self withClock: clock.
	
	
	
	debitBehavior := [ :anAmount :aCreditCard | ].
	
! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 14:26:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 14:26:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 14:26:02'!
ERROR!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 14:26:02'!
ERROR!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 14:26:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 14:26:02'!
ERROR!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 14:26:02'!
ERROR!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 14:26:02'!
ERROR!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 14:26:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:26:02'!
ERROR!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 14:26:02'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 14:26:02'!
ERROR!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 14:26:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 14:26:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:26:02'!
ERROR!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 14:26:07'!
ERROR!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 14:26:07'!
ERROR!
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:26:42'!
getItems
	self shouldBeImplemented.! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:26:50' prior: 50974818!
getItems
	
	^cart getItems! !

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 14:26:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 14:26:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 14:26:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 14:26:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 14:26:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 14:26:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 14:26:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 14:26:53'!
ERROR!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 14:26:53'!
ERROR!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 14:26:53'!
ERROR!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 14:26:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:26:53'!
ERROR!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 14:26:53'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 14:26:53'!
ERROR!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 14:26:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 14:26:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:26:53'!
ERROR!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 14:27:00'!
ERROR!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 14:27:00'!
ERROR!
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:27:12'!
add: aSmallInteger of: aString 
	self shouldBeImplemented.! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:27:39' prior: 50974892!
add: anAmount of: aBook 
	
	^cart add: anAmount of: aBook .! !

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 14:27:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 14:27:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 14:27:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 14:27:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 14:27:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 14:27:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 14:27:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 14:27:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 14:27:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 14:27:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 14:27:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:27:42'!
ERROR!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 14:27:42'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 14:27:42'!
ERROR!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 14:27:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 14:27:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:27:42'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:27:47'!
ERROR!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:27:47'!
ERROR!
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:27:59'!
isEmpty
	self shouldBeImplemented.! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:28:06' prior: 50974968!
isEmpty
	
	cart isEmpty ! !

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:28:07'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:28:13'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:28:13'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:28:19'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:28:19'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:28:44'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:28:55'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:30:08'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:30:08'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:31:22'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:31:22'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 14:31:25'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 14:31:25'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 14:31:33'!
FAILURE!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/11/2021 14:32:45' prior: 50973032!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier transactionId client clientTransactions |
	
	cart := cartSessions at: cartId ifAbsent:[self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[self error: self cartCanNotBeEmptyErrorMessage].
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook
		with: self.
		
	transactionId := cashier checkOut .
	
	client := cartToClient removeKey: cartId.
	
	clientTransactions := clientsTransactions at: client ifAbsent: [ OrderedCollection new ].
	clientTransactions add: transactionId .
	clientsTransactions at: client put: clientTransactions .
	
	^transactionId.
	
	
	! !

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:32:46'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:32:50'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:32:50'!
FAILURE!
!TusLibrosFacade methodsFor: 'error handling' stamp: 'MS 11/11/2021 14:33:17' prior: 50968832!
cartCanNotBeEmptyErrorMessage
	
	^ Cashier cartCanNotBeEmptyErrorMessage.! !

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:35:56'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:35:56'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:37:09'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:38:07'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:38:07'!
FAILURE!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:38:59' prior: 50968375!
test10cannotCheckoutEmptyCart
	| aValidUser aValidPassword cartId |
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	self should:[ interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError |
		self assert: anError messageText equals: interface cartCanNotBeEmptyErrorMessage.
		]
	
	
	
	
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:39:23' prior: 50975085!
test10cannotCheckoutEmptyCart
	| cartId |
	
	cartId := interface createCartFor: 'ValidUser1' with:  'ValidPassword1'.
	
	self should:[ interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError |
		self assert: anError messageText equals: interface cartCanNotBeEmptyErrorMessage.
		]
	
	
	
	
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:39:28'!
FAILURE!
!TusLibrosFacade methodsFor: 'error handling' stamp: 'MS 11/11/2021 14:40:01' prior: 50968826!
canNotChargeAnExpiredCreditCardErrorMessage
	
	^ Cashier canNotChargeAnExpiredCreditCardErrorMessage.! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 14:40:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 14:40:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 14:40:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 14:40:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 14:40:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 14:40:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 14:40:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 14:40:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 14:40:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:40:04'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 14:40:04'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 14:40:04'!
ERROR!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 14:40:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 14:40:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:40:04'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 14:40:12'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 14:40:20'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 14:40:27'!
ERROR!
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:41:04' prior: 50974973!
isEmpty
	
	^cart isEmpty ! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 14:41:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 14:41:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 14:41:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 14:41:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 14:41:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 14:41:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 14:41:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 14:41:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 14:41:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:41:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 14:41:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 14:41:06'!
ERROR!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 14:41:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 14:41:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:41:06'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 14:41:11'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 14:41:11'!
ERROR!
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:41:20'!
total
	self shouldBeImplemented.! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:41:27' prior: 50975252!
total
	
	^cart total! !

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 14:41:28'!
ERROR!
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:41:37'!
detail
	self shouldBeImplemented.! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:41:43' prior: 50975263!
detail
	
	^cart detail.! !

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 14:41:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 14:41:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 14:41:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 14:41:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 14:41:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 14:41:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 14:41:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 14:41:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 14:41:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 14:41:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 14:41:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:41:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 14:41:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 14:41:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 14:41:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 14:41:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:41:46'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:41:46'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 14:41:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 14:41:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 14:41:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 14:41:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 14:41:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 14:41:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 14:41:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 14:41:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 14:41:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:41:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 14:41:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 14:41:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 14:41:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 14:41:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:41:50'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:41:50'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:41:57'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:44:50'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:44:50'!
FAILURE!
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:45:37' prior: 50974897!
add: anAmount of: aBook 
	
	(lastTime + facade sessionDuration) < facade now ifTrue: [ self signalCartSessionExpired ].

	^cart add: anAmount of: aBook .! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 14:45:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 14:45:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 14:45:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 14:45:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 14:45:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 14:45:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 14:45:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 14:45:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 14:45:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:45:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 14:45:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 14:45:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 14:45:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 14:45:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:45:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:45:42'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:48:54'!
test16canNotListCartWhenSessionIsExpired

	| cartId |

	cartId := interface createCartFor: 'ValidUser1' with: 'ValidPassword1'.
	clock advanceTime: (interface sessionDuration + 1 minutes) .
	self
		should: [interface addToCart: cartId book:'validBook'  bookQuantity: 1.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface sessionHasExpiredErrorDescription.
			clock revertTime: interface sessionDuration.
			self assert: (interface listCart: cartId) isEmpty ]! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:49:41' prior: 50975462!
test16canNotListCartWhenSessionIsExpired

	| cartId |

	cartId := interface createCartFor: 'ValidUser1' with: 'ValidPassword1'.
	clock advanceTime: (interface sessionDuration + 1 minutes) .
	self
		should: [interface listCart: cartId]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface sessionHasExpiredErrorDescription ]! !

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:49:41'!
FAILURE!
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:50:12' prior: 50974823!
getItems
	(lastTime + facade sessionDuration) < facade now ifTrue: [ self signalCartSessionExpired ].	
	^cart getItems! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 14:50:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 14:50:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 14:50:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 14:50:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 14:50:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 14:50:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 14:50:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 14:50:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 14:50:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:50:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 14:50:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 14:50:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 14:50:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 14:50:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:50:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:50:14'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:50:50'!
test17canNotCheckOutCartWhenSessionIsExpired

	| cartId |

	cartId := interface createCartFor: 'ValidUser1' with: 'ValidPassword1'.
	interface addToCart: cartId book: 'validBook' bookQuantity: 2.
	clock advanceTime: (interface sessionDuration + 1 minutes) .
	self
		should: [interface listCart: cartId]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface sessionHasExpiredErrorDescription ]! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:51:42' prior: 50975564!
test17canNotCheckOutCartWhenSessionIsExpired

	| cartId |

	cartId := interface createCartFor: 'ValidUser1' with: 'ValidPassword1'.
	interface addToCart: cartId book: 'validBook' bookQuantity: 2.
	clock advanceTime: (interface sessionDuration + 1 minutes) .
	self
		should: [interface checkOut: cartId withCreditCardNumber: 1111222233334444  on: 2]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface sessionHasExpiredErrorDescription ]! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:52:16' prior: 50975582!
test17canNotCheckOutCartWhenSessionIsExpired

	| cartId |

	cartId := interface createCartFor: 'ValidUser1' with: 'ValidPassword1'.
	interface addToCart: cartId book: 'validBook' bookQuantity: 2.
	clock advanceTime: (interface sessionDuration + 1 minutes) .
	self
		should: [interface checkOut: cartId withCreditCardNumber: 1111222233334444  on: testObjectsFactory today]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface sessionHasExpiredErrorDescription ]! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:52:34' prior: 50975602!
test17canNotCheckOutCartWhenSessionIsExpired

	| cartId |

	cartId := interface createCartFor: 'ValidUser1' with: 'ValidPassword1'.
	interface addToCart: cartId book: 'validBook' bookQuantity: 2.
	clock advanceTime: (interface sessionDuration + 1 minutes) .
	self
		should: [interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface sessionHasExpiredErrorDescription ]! !

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:52:36'!
FAILURE!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/11/2021 14:53:44' prior: 50975025!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier transactionId client clientTransactions |
	
	cart := cartSessions at: cartId ifAbsent:[self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[self error: self cartCanNotBeEmptyErrorMessage].
	
	cart isExpired.
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook
		with: self.
		
	transactionId := cashier checkOut .
	
	client := cartToClient removeKey: cartId.
	
	clientTransactions := clientsTransactions at: client ifAbsent: [ OrderedCollection new ].
	clientTransactions add: transactionId .
	clientsTransactions at: client put: clientTransactions .
	
	^transactionId.
	
	
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/11/2021 14:53:49' prior: 50975647!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier transactionId client clientTransactions |
	
	cart := cartSessions at: cartId ifAbsent:[self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[self error: self cartCanNotBeEmptyErrorMessage].
	
	cart isNotExpired.
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook
		with: self.
		
	transactionId := cashier checkOut .
	
	client := cartToClient removeKey: cartId.
	
	clientTransactions := clientsTransactions at: client ifAbsent: [ OrderedCollection new ].
	clientTransactions add: transactionId .
	clientsTransactions at: client put: clientTransactions .
	
	^transactionId.
	
	
	! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:54:00'!
isNotExpired! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:54:09' prior: 50975701!
isNotExpired

		(lastTime + facade sessionDuration) < facade now ifTrue: [ self signalCartSessionExpired ].	
! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:54:11' prior: 50975705!
isNotExpired

	(lastTime + facade sessionDuration) < facade now ifTrue: [ self signalCartSessionExpired ].	
! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 14:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 14:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 14:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 14:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 14:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 14:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 14:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 14:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 14:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 14:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 14:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 14:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 14:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:54:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:54:13'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:55:16' prior: 50975622!
test17canNotCheckOutCartWhenSessionIsExpired

	| cartId |

	cartId := interface createCartFor: 'ValidUser1' with: 'ValidPassword1'.
	interface addToCart: cartId book: 'validBook' bookQuantity: 2.
	clock advanceTime: (interface sessionDuration + 1 minutes) .
	self
		should: [interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface sessionHasExpiredErrorDescription.
			self assert: (interface listPurchases: 'ValidUser1' withPassword:'ValidPassword1') = 0 ]! !

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:55:17'!
FAILURE!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:55:35' prior: 50975778!
test17canNotCheckOutCartWhenSessionIsExpired

	| cartId |

	cartId := interface createCartFor: 'ValidUser1' with: 'ValidPassword1'.
	interface addToCart: cartId book: 'validBook' bookQuantity: 2.
	clock advanceTime: (interface sessionDuration + 1 minutes) .
	self
		should: [interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface sessionHasExpiredErrorDescription.
			self assert: (interface listPurchases: 'ValidUser1' withPassword:'ValidPassword1') = Dictionary new ]! !

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:55:36'!
FAILURE!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:57:04' prior: 50975806!
test17canNotCheckOutCartWhenSessionIsExpired

	| cartId |

	cartId := interface createCartFor: 'ValidUser1' with: 'ValidPassword1'.
	interface addToCart: cartId book: 'validBook' bookQuantity: 2.
	clock advanceTime: (interface sessionDuration + 1 minutes) .
	self
		should: [interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface sessionHasExpiredErrorDescription.
			self assert: (interface listPurchases: 'ValidUser1' withPassword:'ValidPassword1') = Dictionary new at: 'Total' put: 0 ]! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:57:16' prior: 50975834!
test17canNotCheckOutCartWhenSessionIsExpired

	| cartId |

	cartId := interface createCartFor: 'ValidUser1' with: 'ValidPassword1'.
	interface addToCart: cartId book: 'validBook' bookQuantity: 2.
	clock advanceTime: (interface sessionDuration + 1 minutes) .
	self
		should: [interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface sessionHasExpiredErrorDescription.
			self assert: (interface listPurchases: 'ValidUser1' withPassword:'ValidPassword1') = (Dictionary new at: 'Total' put: 0) ]! !

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:57:17'!
FAILURE!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:58:09' prior: 50975859!
test17canNotCheckOutCartWhenSessionIsExpired

	| cartId purchase expectedPurchase |

	cartId := interface createCartFor: 'ValidUser1' with: 'ValidPassword1'.
	interface addToCart: cartId book: 'validBook' bookQuantity: 2.
	clock advanceTime: (interface sessionDuration + 1 minutes) .
	self
		should: [interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface sessionHasExpiredErrorDescription.
			purchase := interface listPurchases: 'ValidUser1' withPassword:'ValidPassword1'.
			expectedPurchase := Dictionary new at: 'Total' put: 0.
			self assert: (interface listPurchases: 'ValidUser1' withPassword:'ValidPassword1') = (Dictionary new at: 'Total' put: 0) ]! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:58:29' prior: 50975888!
test17canNotCheckOutCartWhenSessionIsExpired

	| cartId purchase expectedPurchase |

	cartId := interface createCartFor: 'ValidUser1' with: 'ValidPassword1'.
	interface addToCart: cartId book: 'validBook' bookQuantity: 2.
	clock advanceTime: (interface sessionDuration + 1 minutes) .
	self
		should: [interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface sessionHasExpiredErrorDescription.
			purchase := interface listPurchases: 'ValidUser1' withPassword:'ValidPassword1'.
			expectedPurchase := Dictionary new at: 'Total' put: 0.
			self assert: expectedPurchase equals: purchase ]! !

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:58:30'!
FAILURE!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 14:58:59' prior: 50975918!
test17canNotCheckOutCartWhenSessionIsExpired

	| cartId purchase expectedPurchase |

	cartId := interface createCartFor: 'ValidUser1' with: 'ValidPassword1'.
	interface addToCart: cartId book: 'validBook' bookQuantity: 2.
	clock advanceTime: (interface sessionDuration + 1 minutes) .
	self
		should: [interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface sessionHasExpiredErrorDescription.
			purchase := interface listPurchases: 'ValidUser1' withPassword:'ValidPassword1'.
			expectedPurchase := Dictionary new at: 'Total' put: 0; yourself.
			self assert: expectedPurchase equals: purchase ]! !

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:58:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 14:58:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 14:58:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 14:58:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 14:58:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 14:58:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 14:58:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 14:58:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 14:58:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 14:58:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:58:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 14:58:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 14:58:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 14:58:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 14:58:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:58:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:58:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:58:59'!
PASSED!
!Behavior method!
initialize
	(today _ [
	(DateAndTime
		cover: (23 to: 33)
		declaredAt: (23 to: 33)) now ] valueCoveringAll:
		{35 to: 37})
		cover: (14 to: 18)
		declaredAt: (14 to: 18).
	(transactionID _ 1 coverAll:
		{58 to: 58})
		cover: (41 to: 53)
		declaredAt: (41 to: 53).! !
!Behavior method!
createCart
	^ [
	(Cart
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) acceptingItemsOf:
		([
		(self coverAll:
			{39 to: 42}) defaultCatalog ] valueCoveringAll:
			{44 to: 57}) ] valueCoveringAll:
		{21 to: 37}.! !
!Behavior method!
defaultCatalog
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(Dictionary
		cover: (21 to: 30)
		declaredAt: (21 to: 30)) new ] valueCoveringAll:
		{32 to: 34}.
	[
	cascadeReceiver
		at: self itemSellByTheStore
		put: self itemSellByTheStorePrice ] valueCoveringAll:
		{38 to: 98}.
	[
	cascadeReceiver
		at: self anotherItemSellByTheStore
		put: self anotherItemSellByTheStorePrice ] valueCoveringAll:
		{103 to: 177}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{182 to: 189} ] value.! !
!Behavior method!
itemSellByTheStore
	^ 'validBook' coverAll:
		{25 to: 35}.! !
!Behavior method!
itemSellByTheStorePrice
	^ 10 coverAll:
		{29 to: 30}.! !
!Behavior method!
anotherItemSellByTheStore
	^ 'validBook2' coverAll:
		{32 to: 43}.! !
!Behavior method!
anotherItemSellByTheStorePrice
	^ 20 coverAll:
		{37 to: 38}.! !
!Behavior method!
acceptingItemsOf: aCatalog
	^ [
	([
	(self coverAll:
		{31 to: 34}) new ] valueCoveringAll:
		{36 to: 38}) initializeAcceptingItemsOf:
		(aCatalog
			cover: (68 to: 75)
			declaredAt: (19 to: 26)) ] valueCoveringAll:
		{40 to: 66}.! !
!Behavior method!
initializeAcceptingItemsOf: aCatalog
	(catalog _ aCatalog
		cover: (51 to: 58)
		declaredAt: (29 to: 36))
		cover: (40 to: 46)
		declaredAt: (40 to: 46).
	(items _ [
	(Bag
		cover: (71 to: 73)
		declaredAt: (71 to: 73)) new ] valueCoveringAll:
		{75 to: 77})
		cover: (62 to: 66)
		declaredAt: (62 to: 66).! !
!Behavior method!
isEmpty
	^ [
	(items
		cover: (13 to: 17)
		declaredAt: (13 to: 17)) isEmpty ] valueCoveringAll:
		{19 to: 25}.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/11/2021 14:59:21'!
PASSED!
!Behavior method!
itemNotSellByTheStore
	^ 'invalidBook' coverAll:
		{27 to: 39}.! !
!Behavior method!
add: anItem
	^ [
	(self coverAll:
		{17 to: 20})
		add:
			(1 coverAll:
				{27 to: 27})
		of:
			(anItem
				cover: (33 to: 38)
				declaredAt: (6 to: 11)) ] valueCoveringAll:
		{22 to: 25. 29 to: 31}.! !
!Behavior method!
add: aQuantity of: anItem
	[
	(self coverAll:
		{29 to: 32}) assertIsValidQuantity:
		(aQuantity
			cover: (57 to: 65)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{34 to: 55}.
	[
	(self coverAll:
		{69 to: 72}) assertIsValidItem:
		(anItem
			cover: (93 to: 98)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{74 to: 91}.
	[
	(1 coverAll:
		{103 to: 103})
		to:
			(aQuantity
				cover: (109 to: 117)
				declaredAt: (6 to: 14))
		do: [ :aNumber |
			[
			(items
				cover: (136 to: 140)
				declaredAt: (136 to: 140)) add:
				(anItem
					cover: (147 to: 152)
					declaredAt: (20 to: 25)) ] valueCoveringAll:
				{142 to: 145} ]] valueCoveringAll:
		{105 to: 107. 119 to: 121}.! !
!Behavior method!
assertIsValidQuantity: aQuantity
	[
	([
	(aQuantity
		cover: (36 to: 44)
		declaredAt: (24 to: 32)) strictlyPositive ] valueCoveringAll:
		{46 to: 61}) ifFalse: [
		[
		(self coverAll:
			{74 to: 77}) error:
			([
			(self coverAll:
				{86 to: 89}) invalidQuantityErrorMessage ] valueCoveringAll:
				{91 to: 117}) ] valueCoveringAll:
			{79 to: 84} ]] valueCoveringAll:
		{63 to: 70}.! !
!Behavior method!
assertIsValidItem: anItem
	[
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includesKey:
		(anItem
			cover: (51 to: 56)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			(self coverAll:
				{82 to: 85}) invalidItemErrorMessage ] valueCoveringAll:
				{87 to: 109}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{59 to: 66}.! !
!Behavior method!
invalidItemErrorMessage
	^ 'Item is not in catalog' coverAll:
		{29 to: 52}.! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/11/2021 14:59:21'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/11/2021 14:59:21'!
PASSED!
!Behavior method!
invalidQuantityErrorMessage
	^ 'Invalid number of items' coverAll:
		{33 to: 57}.! !

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/11/2021 14:59:21'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/11/2021 14:59:21'!
PASSED!
!Behavior method!
includes: anItem
	^ [
	(items
		cover: (21 to: 25)
		declaredAt: (21 to: 25)) includes:
		(anItem
			cover: (37 to: 42)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{27 to: 35}.! !

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/11/2021 14:59:21'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/11/2021 14:59:21'!
PASSED!
!Behavior method!
occurrencesOf: anItem
	^ [
	(items
		cover: (26 to: 30)
		declaredAt: (26 to: 30)) occurrencesOf:
		(anItem
			cover: (47 to: 52)
			declaredAt: (16 to: 21)) ] valueCoveringAll:
		{32 to: 45}.! !

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/11/2021 14:59:21'!
PASSED!
!Behavior method!
notExpiredCreditCard
	^ [
	(CreditCard
		cover: (26 to: 35)
		declaredAt: (26 to: 35)) expiringOn:
		([
		(Month
			cover: (50 to: 54)
			declaredAt: (50 to: 54))
			month:
				([
				(today
					cover: (63 to: 67)
					declaredAt: (63 to: 67)) monthIndex ] valueCoveringAll:
					{69 to: 78})
			year:
				([
				([
				(today
					cover: (86 to: 90)
					declaredAt: (63 to: 67)) yearNumber ] valueCoveringAll:
					{92 to: 101}) +
					(1 coverAll:
						{105 to: 105}) ] valueCoveringAll:
					{103 to: 103}) ] valueCoveringAll:
			{56 to: 61. 80 to: 84}) ] valueCoveringAll:
		{37 to: 47}.! !
!Behavior method!
expiringOn: aMonth
	^ [
	([
	(self coverAll:
		{25 to: 28}) new ] valueCoveringAll:
		{30 to: 32}) initializeExpiringOn:
		(aMonth
			cover: (56 to: 61)
			declaredAt: (13 to: 18)) ] valueCoveringAll:
		{34 to: 54}.! !
!Behavior method!
initializeExpiringOn: aMonth
	(expiration _ aMonth
		cover: (48 to: 53)
		declaredAt: (23 to: 28))
		cover: (34 to: 43)
		declaredAt: (34 to: 43).! !
!Behavior method!
today
	^ today
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !
!Behavior method!
transactionID
	^ self coverAll:
		{18 to: 21}.! !
!Behavior method!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook with: aTransactionId
	[
	(self coverAll:
		{131 to: 134}) assertIsNotEmpty:
		(aCart
			cover: (154 to: 158)
			declaredAt: (13 to: 17)) ] valueCoveringAll:
		{136 to: 152}.
	[
	(self coverAll:
		{162 to: 165})
		assertIsNotExpired:
			(aCreditCard
				cover: (187 to: 197)
				declaredAt: (29 to: 39))
		on:
			(aDate
				cover: (203 to: 207)
				declaredAt: (74 to: 78)) ] valueCoveringAll:
		{167 to: 185. 199 to: 201}.
	^ [
	([
	(self coverAll:
		{214 to: 217}) new ] valueCoveringAll:
		{219 to: 221})
		initializeToCheckout:
			(aCart
				cover: (245 to: 249)
				declaredAt: (13 to: 17))
		charging:
			(aCreditCard
				cover: (261 to: 271)
				declaredAt: (29 to: 39))
		throught:
			(aMerchantProcessor
				cover: (283 to: 300)
				declaredAt: (51 to: 68))
		registeringOn:
			(aSalesBook
				cover: (317 to: 326)
				declaredAt: (95 to: 104))
		with:
			(aTransactionId
				cover: (334 to: 347)
				declaredAt: (112 to: 125)) ] valueCoveringAll:
		{223 to: 243. 251 to: 259. 273 to: 281. 302 to: 315. 328 to: 332}.! !
!Behavior method!
assertIsNotEmpty: aCart
	[
	([
	(aCart
		cover: (29 to: 33)
		declaredAt: (19 to: 23)) isEmpty ] valueCoveringAll:
		{35 to: 41}) ifTrue: [
		[
		(self coverAll:
			{52 to: 55}) error:
			([
			(self coverAll:
				{64 to: 67}) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
				{69 to: 97}) ] valueCoveringAll:
			{57 to: 62} ]] valueCoveringAll:
		{43 to: 49}.! !
!Behavior method!
cartCanNotBeEmptyErrorMessage
	^ 'Can not check out an empty cart' coverAll:
		{35 to: 67}.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/11/2021 14:59:21'!
PASSED!
!Behavior method!
assertIsNotExpired: aCreditCard on: aDate
	[
	([
	(aCreditCard
		cover: (47 to: 57)
		declaredAt: (21 to: 31)) isExpiredOn:
		(aDate
			cover: (72 to: 76)
			declaredAt: (37 to: 41)) ] valueCoveringAll:
		{59 to: 70}) ifTrue: [
		[
		(self coverAll:
			{89 to: 92}) error:
			([
			(self coverAll:
				{101 to: 104}) canNotChargeAnExpiredCreditCardErrorMessage ] valueCoveringAll:
				{106 to: 148}) ] valueCoveringAll:
			{94 to: 99} ]] valueCoveringAll:
		{79 to: 85}.! !
!Behavior method!
isExpiredOn: aDate
	^ [
	([
	(expiration
		cover: (25 to: 34)
		declaredAt: (25 to: 34)) start ] valueCoveringAll:
		{36 to: 40}) <
		([
		([
		(Month
			cover: (45 to: 49)
			declaredAt: (45 to: 49))
			month:
				([
				(aDate
					cover: (58 to: 62)
					declaredAt: (14 to: 18)) monthIndex ] valueCoveringAll:
					{64 to: 73})
			year:
				([
				(aDate
					cover: (81 to: 85)
					declaredAt: (14 to: 18)) yearNumber ] valueCoveringAll:
					{87 to: 96}) ] valueCoveringAll:
			{51 to: 56. 75 to: 79}) start ] valueCoveringAll:
			{99 to: 103}) ] valueCoveringAll:
		{42 to: 42}.! !
!Behavior method!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook with: aTransactionID
	(cart _ aCart
		cover: (138 to: 142)
		declaredAt: (23 to: 27))
		cover: (130 to: 133)
		declaredAt: (130 to: 133).
	(creditCard _ aCreditCard
		cover: (160 to: 170)
		declaredAt: (39 to: 49))
		cover: (146 to: 155)
		declaredAt: (146 to: 155).
	(merchantProcessor _ aMerchantProcessor
		cover: (195 to: 212)
		declaredAt: (61 to: 78))
		cover: (174 to: 190)
		declaredAt: (174 to: 190).
	(salesBook _ aSalesBook
		cover: (229 to: 238)
		declaredAt: (95 to: 104))
		cover: (216 to: 224)
		declaredAt: (216 to: 224).
	(transactionsIDs _ aTransactionID
		cover: (261 to: 274)
		declaredAt: (112 to: 125))
		cover: (242 to: 256)
		declaredAt: (242 to: 256).! !
!Behavior method!
checkOut
	| sale |
	[
	(self coverAll:
		{22 to: 25}) calculateTotal ] valueCoveringAll:
		{27 to: 40}.
	[
	(self coverAll:
		{44 to: 47}) debitTotal ] valueCoveringAll:
		{49 to: 58}.
	(sale _ [
	(self coverAll:
		{70 to: 73}) registerSale ] valueCoveringAll:
		{75 to: 86})
		cover: (62 to: 65)
		declaredAt: (14 to: 17).
	^ sale
		cover: (93 to: 96)
		declaredAt: (14 to: 17).! !
!Behavior method!
calculateTotal
	(total _ [
	(cart
		cover: (27 to: 30)
		declaredAt: (27 to: 30)) total ] valueCoveringAll:
		{32 to: 36})
		cover: (18 to: 22)
		declaredAt: (18 to: 22).! !
!Behavior method!
total
	^ [
	(items
		cover: (11 to: 15)
		declaredAt: (11 to: 15)) sum: [ :anItem |
		[
		(catalog
			cover: (34 to: 40)
			declaredAt: (34 to: 40)) at:
			(anItem
				cover: (46 to: 51)
				declaredAt: (25 to: 30)) ] valueCoveringAll:
			{42 to: 44} ]] valueCoveringAll:
		{17 to: 20}.! !
!Behavior method!
debitTotal
	[
	(merchantProcessor
		cover: (14 to: 30)
		declaredAt: (14 to: 30))
		debit:
			(total
				cover: (39 to: 43)
				declaredAt: (39 to: 43))
		from:
			(creditCard
				cover: (51 to: 60)
				declaredAt: (51 to: 60)) ] valueCoveringAll:
		{32 to: 37. 45 to: 49}.! !
!Behavior method!
registerSale
	| sale transactionID |
	(sale _ [
	(self coverAll:
		{48 to: 51}) createSale ] valueCoveringAll:
		{53 to: 62})
		cover: (40 to: 43)
		declaredAt: (18 to: 21).
	(transactionID _ [
	(transactionsIDs
		cover: (83 to: 97)
		declaredAt: (83 to: 97)) nextTransactionId ] valueCoveringAll:
		{99 to: 115})
		cover: (66 to: 78)
		declaredAt: (23 to: 35).
	[
	(salesBook
		cover: (122 to: 130)
		declaredAt: (122 to: 130))
		at:
			(transactionID
				cover: (136 to: 148)
				declaredAt: (23 to: 35))
		put:
			(sale
				cover: (155 to: 158)
				declaredAt: (18 to: 21)) ] valueCoveringAll:
		{132 to: 134. 150 to: 153}.
	^ transactionID
		cover: (165 to: 177)
		declaredAt: (23 to: 35).! !
!Behavior method!
createSale
	^ [
	(Sale
		cover: (16 to: 19)
		declaredAt: (16 to: 19))
		of:
			([
			(cart
				cover: (24 to: 27)
				declaredAt: (24 to: 27)) detail ] valueCoveringAll:
				{29 to: 34})
		with:
			(total
				cover: (42 to: 46)
				declaredAt: (42 to: 46)) ] valueCoveringAll:
		{21 to: 23. 36 to: 40}.! !
!Behavior method!
detail
	| detail |
	(detail _ [
	(OrderedDictionary
		cover: (33 to: 49)
		declaredAt: (33 to: 49)) new ] valueCoveringAll:
		{51 to: 53})
		cover: (23 to: 28)
		declaredAt: (11 to: 16).
	[
	(items
		cover: (58 to: 62)
		declaredAt: (58 to: 62)) do: [ :item |
		[
		(detail
			cover: (77 to: 82)
			declaredAt: (11 to: 16))
			at:
				(item
					cover: (88 to: 91)
					declaredAt: (71 to: 74))
			put:
				([
				(items
					cover: (99 to: 103)
					declaredAt: (58 to: 62)) occurrencesOf:
					(item
						cover: (120 to: 123)
						declaredAt: (71 to: 74)) ] valueCoveringAll:
					{105 to: 118}) ] valueCoveringAll:
			{84 to: 86. 93 to: 96} ]] valueCoveringAll:
		{64 to: 66}.
	^ detail
		cover: (135 to: 140)
		declaredAt: (11 to: 16).! !
!Behavior method!
of: someItems with: aTotal
	"should assert total is not negative or 0!!"
	^ [
	([
	(self coverAll:
		{76 to: 79}) new ] valueCoveringAll:
		{81 to: 83})
		initializeWith:
			(someItems
				cover: (101 to: 109)
				declaredAt: (5 to: 13))
		andTotal:
			(aTotal
				cover: (121 to: 126)
				declaredAt: (21 to: 26)) ] valueCoveringAll:
		{85 to: 99. 111 to: 119}.! !
!Behavior method!
initializeWith: someItems andTotal: aTotal
	(total _ aTotal
		cover: (55 to: 60)
		declaredAt: (37 to: 42))
		cover: (46 to: 50)
		declaredAt: (46 to: 50).
	(items _ someItems
		cover: (73 to: 81)
		declaredAt: (17 to: 25))
		cover: (64 to: 68)
		declaredAt: (64 to: 68).! !
!Behavior method!
nextTransactionId
	(transactionID _ [
	(transactionID
		cover: (21 to: 33)
		declaredAt: (21 to: 33)) +
		(1 coverAll:
			{53 to: 53}) ] valueCoveringAll:
		{52 to: 52})
		cover: (38 to: 50)
		declaredAt: (21 to: 33).
	^ [
	(transactionID
		cover: (60 to: 72)
		declaredAt: (21 to: 33)) -
		(1 coverAll:
			{74 to: 74}) ] valueCoveringAll:
		{73 to: 73}.! !
!Behavior method!
total
	^ total
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/11/2021 14:59:22'!
PASSED!
!Behavior method!
expiredCreditCard
	^ [
	(CreditCard
		cover: (23 to: 32)
		declaredAt: (23 to: 32)) expiringOn:
		([
		(Month
			cover: (47 to: 51)
			declaredAt: (47 to: 51))
			month:
				([
				(today
					cover: (60 to: 64)
					declaredAt: (60 to: 64)) monthIndex ] valueCoveringAll:
					{66 to: 75})
			year:
				([
				([
				(today
					cover: (83 to: 87)
					declaredAt: (60 to: 64)) yearNumber ] valueCoveringAll:
					{89 to: 98}) -
					(1 coverAll:
						{102 to: 102}) ] valueCoveringAll:
					{100 to: 100}) ] valueCoveringAll:
			{53 to: 58. 77 to: 81}) ] valueCoveringAll:
		{34 to: 44}.! !
!Behavior method!
canNotChargeAnExpiredCreditCardErrorMessage
	^ 'Can not charge an expired credit card' coverAll:
		{49 to: 87}.! !

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/11/2021 14:59:22'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/11/2021 14:59:22'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/11/2021 14:59:22'!
PASSED!
!Behavior method!
creditCardHasNoCreditErrorMessage
	^ 'Credit card has no credit' coverAll:
		{39 to: 65}.! !

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/11/2021 14:59:22'!
PASSED!
!Behavior method!
for: aTime
	^ [
	([
	(self coverAll:
		{15 to: 18}) new ] valueCoveringAll:
		{20 to: 22}) initializeWith:
		(aTime
			cover: (40 to: 44)
			declaredAt: (6 to: 10)) ] valueCoveringAll:
		{24 to: 38}.! !
!Behavior method!
initializeWith: aTime
	(now _ aTime
		cover: (32 to: 36)
		declaredAt: (17 to: 21))
		cover: (25 to: 27)
		declaredAt: (25 to: 27).! !
!Behavior method!
withUsers: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock
	^ [
	([
	(self coverAll:
		{144 to: 147}) new ] valueCoveringAll:
		{149 to: 151})
		initializeWith:
			(usersWithPasswords
				cover: (169 to: 186)
				declaredAt: (12 to: 29))
		withCatalog:
			(aCatalog
				cover: (201 to: 208)
				declaredAt: (44 to: 51))
		withSalesBook:
			(aSalesBook
				cover: (225 to: 234)
				declaredAt: (68 to: 77))
		withMerchantProcessor:
			(aMerchantProcessor
				cover: (259 to: 276)
				declaredAt: (102 to: 119))
		withClock:
			(aClock
				cover: (289 to: 294)
				declaredAt: (132 to: 137)) ] valueCoveringAll:
		{153 to: 167. 188 to: 199. 210 to: 223. 236 to: 257. 278 to: 287}.! !
!Behavior method!
initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock
	(validUsers _ usersWithPasswords
		cover: (163 to: 180)
		declaredAt: (17 to: 34))
		cover: (149 to: 158)
		declaredAt: (149 to: 158).
	(catalog _ aCatalog
		cover: (195 to: 202)
		declaredAt: (49 to: 56))
		cover: (184 to: 190)
		declaredAt: (184 to: 190).
	(salesBook _ aSalesBook
		cover: (219 to: 228)
		declaredAt: (73 to: 82))
		cover: (206 to: 214)
		declaredAt: (206 to: 214).
	(merchantProcessor _ aMerchantProcessor
		cover: (253 to: 270)
		declaredAt: (107 to: 124))
		cover: (232 to: 248)
		declaredAt: (232 to: 248).
	(cartSessions _ [
	(Dictionary
		cover: (291 to: 300)
		declaredAt: (291 to: 300)) new ] valueCoveringAll:
		{302 to: 304})
		cover: (275 to: 286)
		declaredAt: (275 to: 286).
	(cartIdCounter _ 0 coverAll:
		{325 to: 325})
		cover: (308 to: 320)
		declaredAt: (308 to: 320).
	(transactionID _ 1 coverAll:
		{348 to: 348})
		cover: (331 to: 343)
		declaredAt: (331 to: 343).
	(cartToClient _ [
	(Dictionary
		cover: (370 to: 379)
		declaredAt: (291 to: 300)) new ] valueCoveringAll:
		{381 to: 383})
		cover: (354 to: 365)
		declaredAt: (354 to: 365).
	(clientToCart _ [
	(Dictionary
		cover: (403 to: 412)
		declaredAt: (291 to: 300)) new ] valueCoveringAll:
		{414 to: 416})
		cover: (387 to: 398)
		declaredAt: (387 to: 398).
	(clientsTransactions _ [
	(Dictionary
		cover: (445 to: 454)
		declaredAt: (291 to: 300)) new ] valueCoveringAll:
		{456 to: 458})
		cover: (422 to: 440)
		declaredAt: (422 to: 440).
	(clock _ aClock
		cover: (471 to: 476)
		declaredAt: (137 to: 142))
		cover: (462 to: 466)
		declaredAt: (462 to: 466).! !
!Behavior method!
createCartFor: aUser with: aUserPassword
	| password cart |
	[
	(validUsers
		cover: (65 to: 74)
		declaredAt: (65 to: 74))
		at:
			(aUser
				cover: (80 to: 84)
				declaredAt: (16 to: 20))
		ifAbsent: [
			[
			(self coverAll:
				{96 to: 99}) error:
				([
				(self coverAll:
					{108 to: 111}) invalidUserOrPasswordErrorDescription ] valueCoveringAll:
					{113 to: 149}) ] valueCoveringAll:
				{101 to: 106} ]] valueCoveringAll:
		{76 to: 78. 86 to: 94}.
	(password _ [
	(validUsers
		cover: (168 to: 177)
		declaredAt: (65 to: 74)) at:
		(aUser
			cover: (183 to: 187)
			declaredAt: (16 to: 20)) ] valueCoveringAll:
		{179 to: 181})
		cover: (156 to: 163)
		declaredAt: (47 to: 54).
	[
	([
	(password
		cover: (195 to: 202)
		declaredAt: (47 to: 54)) =
		(aUserPassword
			cover: (206 to: 218)
			declaredAt: (28 to: 40)) ] valueCoveringAll:
		{204 to: 204}) ifFalse: [
		[
		(self coverAll:
			{231 to: 234}) error:
			([
			(self coverAll:
				{243 to: 246}) invalidUserOrPasswordErrorDescription ] valueCoveringAll:
				{248 to: 284}) ] valueCoveringAll:
			{236 to: 241} ]] valueCoveringAll:
		{222 to: 229}.
	(cartIdCounter _ [
	(cartIdCounter
		cover: (291 to: 303)
		declaredAt: (291 to: 303)) +
		(1 coverAll:
			{324 to: 324}) ] valueCoveringAll:
		{322 to: 322})
		cover: (308 to: 320)
		declaredAt: (291 to: 303).
	(cart _ [
	(CartSession
		cover: (338 to: 348)
		declaredAt: (338 to: 348))
		for:
			([
			(Cart
				cover: (356 to: 359)
				declaredAt: (356 to: 359)) acceptingItemsOf:
				(catalog
					cover: (379 to: 385)
					declaredAt: (379 to: 385)) ] valueCoveringAll:
				{361 to: 377})
		ownedBy:
			(aUser
				cover: (397 to: 401)
				declaredAt: (16 to: 20))
		with:
			(self coverAll:
				{409 to: 412}) ] valueCoveringAll:
		{350 to: 353. 388 to: 395. 403 to: 407})
		cover: (330 to: 333)
		declaredAt: (56 to: 59).
	[
	(cartSessions
		cover: (418 to: 429)
		declaredAt: (418 to: 429))
		at:
			(cartIdCounter
				cover: (435 to: 447)
				declaredAt: (291 to: 303))
		put:
			(cart
				cover: (453 to: 456)
				declaredAt: (56 to: 59)) ] valueCoveringAll:
		{431 to: 433. 449 to: 452}.
	[
	(cartToClient
		cover: (462 to: 473)
		declaredAt: (462 to: 473))
		at:
			(cartIdCounter
				cover: (479 to: 491)
				declaredAt: (291 to: 303))
		put:
			(aUser
				cover: (498 to: 502)
				declaredAt: (16 to: 20)) ] valueCoveringAll:
		{475 to: 477. 493 to: 496}.
	^ cartIdCounter
		cover: (509 to: 521)
		declaredAt: (291 to: 303).! !
!Behavior method!
invalidUserOrPasswordErrorDescription
	^ 'Invalid user or password' coverAll:
		{42 to: 67}.! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 14:59:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 14:59:22'!
PASSED!
!Behavior method!
for: aCart ownedBy: aCustomer with: aSystemFacade
	^ [
	([
	(self coverAll:
		{54 to: 57}) new ] valueCoveringAll:
		{59 to: 61})
		initializedWith:
			(aCart
				cover: (80 to: 84)
				declaredAt: (6 to: 10))
		ownedBy:
			(aCustomer
				cover: (95 to: 103)
				declaredAt: (21 to: 29))
		with:
			(aSystemFacade
				cover: (111 to: 123)
				declaredAt: (37 to: 49)) ] valueCoveringAll:
		{63 to: 78. 86 to: 93. 105 to: 109}.! !
!Behavior method!
initializedWith: aCart ownedBy: aCustomer with: aFacade
	(cart _ aCart
		cover: (67 to: 71)
		declaredAt: (18 to: 22))
		cover: (59 to: 62)
		declaredAt: (59 to: 62).
	(owner _ aCustomer
		cover: (84 to: 92)
		declaredAt: (33 to: 41))
		cover: (75 to: 79)
		declaredAt: (75 to: 79).
	(facade _ aFacade
		cover: (107 to: 113)
		declaredAt: (49 to: 55))
		cover: (97 to: 102)
		declaredAt: (97 to: 102).
	(lastTime _ [
	(aFacade
		cover: (129 to: 135)
		declaredAt: (49 to: 55)) now ] valueCoveringAll:
		{137 to: 139})
		cover: (117 to: 124)
		declaredAt: (117 to: 124).! !
!Behavior method!
now
	^ [
	(clock
		cover: (8 to: 12)
		declaredAt: (8 to: 12)) now ] valueCoveringAll:
		{14 to: 16}.! !
!Behavior method!
now
	^ now
		cover: (8 to: 10)
		declaredAt: (8 to: 10).! !
!Behavior method!
listCart: aCartId
	^ [
	([
	(cartSessions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) at:
		(aCartId
			cover: (43 to: 49)
			declaredAt: (11 to: 17)) ] valueCoveringAll:
		{39 to: 41}) getItems ] valueCoveringAll:
		{52 to: 59}.! !
!Behavior method!
getItems
	[
	([
	([
	(lastTime
		cover: (12 to: 19)
		declaredAt: (12 to: 19)) +
		([
		(facade
			cover: (23 to: 28)
			declaredAt: (23 to: 28)) sessionDuration ] valueCoveringAll:
			{30 to: 44}) ] valueCoveringAll:
		{21 to: 21}) <
		([
		(facade
			cover: (49 to: 54)
			declaredAt: (23 to: 28)) now ] valueCoveringAll:
			{56 to: 58}) ] valueCoveringAll:
		{47 to: 47}) ifTrue: [
		[
		(self coverAll:
			{70 to: 73}) signalCartSessionExpired ] valueCoveringAll:
			{75 to: 98} ]] valueCoveringAll:
		{60 to: 66}.
	^ [
	(cart
		cover: (106 to: 109)
		declaredAt: (106 to: 109)) getItems ] valueCoveringAll:
		{111 to: 118}.! !
!Behavior method!
sessionDuration
	^ [
	(30 coverAll:
		{21 to: 22}) minutes ] valueCoveringAll:
		{24 to: 30}.! !
!Behavior method!
getItems
	^ [
	(items
		cover: (14 to: 18)
		declaredAt: (14 to: 18)) copy ] valueCoveringAll:
		{20 to: 23}.! !

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 14:59:22'!
PASSED!
!Behavior method!
addToCart: cartId book: aBook bookQuantity: aQuantity
	| cart |
	(cart _ [
	(cartSessions
		cover: (76 to: 87)
		declaredAt: (76 to: 87))
		at:
			(cartId
				cover: (93 to: 98)
				declaredAt: (12 to: 17))
		ifAbsent: [ ^ [
			(self coverAll:
				{112 to: 115}) error:
				([
				(self coverAll:
					{124 to: 127}) invalidCartIdErrorMessage ] valueCoveringAll:
					{129 to: 153}) ] valueCoveringAll:
				{117 to: 122} ]] valueCoveringAll:
		{89 to: 91. 100 to: 108})
		cover: (68 to: 71)
		declaredAt: (61 to: 64).
	[
	(catalog
		cover: (160 to: 166)
		declaredAt: (160 to: 166))
		at:
			(aBook
				cover: (172 to: 176)
				declaredAt: (25 to: 29))
		ifAbsent: [ ^ [
			(self coverAll:
				{190 to: 193}) error:
				([
				(self coverAll:
					{202 to: 205}) invalidItemErrorMessage ] valueCoveringAll:
					{207 to: 229}) ] valueCoveringAll:
				{195 to: 200} ]] valueCoveringAll:
		{168 to: 170. 178 to: 186}.
	[
	(cart
		cover: (236 to: 239)
		declaredAt: (61 to: 64))
		add:
			(aQuantity
				cover: (246 to: 254)
				declaredAt: (45 to: 53))
		of:
			(aBook
				cover: (260 to: 264)
				declaredAt: (25 to: 29)) ] valueCoveringAll:
		{241 to: 244. 256 to: 258}.! !
!Behavior method!
invalidItemErrorMessage
	^ 'Invalid item' coverAll:
		{28 to: 41}.! !

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 14:59:22'!
PASSED!
!Behavior method!
invalidCartIdErrorMessage
	^ 'Invalid CartId' coverAll:
		{30 to: 45}.! !

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 14:59:22'!
PASSED!
!Behavior method!
add: anAmount of: aBook
	[
	([
	([
	(lastTime
		cover: (30 to: 37)
		declaredAt: (30 to: 37)) +
		([
		(facade
			cover: (41 to: 46)
			declaredAt: (41 to: 46)) sessionDuration ] valueCoveringAll:
			{48 to: 62}) ] valueCoveringAll:
		{39 to: 39}) <
		([
		(facade
			cover: (67 to: 72)
			declaredAt: (41 to: 46)) now ] valueCoveringAll:
			{74 to: 76}) ] valueCoveringAll:
		{65 to: 65}) ifTrue: [
		[
		(self coverAll:
			{88 to: 91}) signalCartSessionExpired ] valueCoveringAll:
			{93 to: 116} ]] valueCoveringAll:
		{78 to: 84}.
	^ [
	(cart
		cover: (124 to: 127)
		declaredAt: (124 to: 127))
		add:
			(anAmount
				cover: (134 to: 141)
				declaredAt: (6 to: 13))
		of:
			(aBook
				cover: (147 to: 151)
				declaredAt: (19 to: 23)) ] valueCoveringAll:
		{129 to: 132. 143 to: 145}.! !

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 14:59:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 14:59:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 14:59:22'!
PASSED!
!Behavior method!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	| cart cashier transactionId client clientTransactions |
	(cart _ [
	(cartSessions
		cover: (132 to: 143)
		declaredAt: (132 to: 143))
		at:
			(cartId
				cover: (149 to: 154)
				declaredAt: (11 to: 16))
		ifAbsent: [
			[
			(self coverAll:
				{166 to: 169}) error:
				([
				(self coverAll:
					{178 to: 181}) invalidCartIdErrorMessage ] valueCoveringAll:
					{183 to: 207}) ] valueCoveringAll:
				{171 to: 176} ]] valueCoveringAll:
		{145 to: 147. 156 to: 164})
		cover: (124 to: 127)
		declaredAt: (66 to: 69).
	[
	([
	(cart
		cover: (215 to: 218)
		declaredAt: (66 to: 69)) isEmpty ] valueCoveringAll:
		{220 to: 226}) ifTrue: [
		[
		(self coverAll:
			{237 to: 240}) error:
			([
			(self coverAll:
				{249 to: 252}) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
				{254 to: 282}) ] valueCoveringAll:
			{242 to: 247} ]] valueCoveringAll:
		{229 to: 235}.
	[
	(cart
		cover: (289 to: 292)
		declaredAt: (66 to: 69)) isNotExpired ] valueCoveringAll:
		{294 to: 305}.
	(cashier _ [
	(Cashier
		cover: (320 to: 326)
		declaredAt: (320 to: 326))
		toCheckout:
			(cart
				cover: (343 to: 346)
				declaredAt: (66 to: 69))
		charging:
			(aCreditCard
				cover: (361 to: 371)
				declaredAt: (40 to: 50))
		throught:
			(merchantProcessor
				cover: (387 to: 403)
				declaredAt: (387 to: 403))
		on:
			(aDate
				cover: (412 to: 416)
				declaredAt: (56 to: 60))
		registeringOn:
			(salesBook
				cover: (436 to: 444)
				declaredAt: (436 to: 444))
		with:
			(self coverAll:
				{454 to: 457}) ] valueCoveringAll:
		{331 to: 341. 351 to: 359. 377 to: 385. 408 to: 410. 421 to: 434. 448 to: 452})
		cover: (309 to: 315)
		declaredAt: (71 to: 77).
	(transactionId _ [
	(cashier
		cover: (481 to: 487)
		declaredAt: (71 to: 77)) checkOut ] valueCoveringAll:
		{489 to: 496})
		cover: (464 to: 476)
		declaredAt: (79 to: 91).
	(client _ [
	(cartToClient
		cover: (513 to: 524)
		declaredAt: (513 to: 524)) removeKey:
		(cartId
			cover: (537 to: 542)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{526 to: 535})
		cover: (503 to: 508)
		declaredAt: (93 to: 98).
	(clientTransactions _ [
	(clientsTransactions
		cover: (570 to: 588)
		declaredAt: (570 to: 588))
		at:
			(client
				cover: (594 to: 599)
				declaredAt: (93 to: 98))
		ifAbsent: [
			[
			(OrderedCollection
				cover: (613 to: 629)
				declaredAt: (613 to: 629)) new ] valueCoveringAll:
				{631 to: 633} ]] valueCoveringAll:
		{590 to: 592. 601 to: 609})
		cover: (548 to: 565)
		declaredAt: (100 to: 117).
	[
	(clientTransactions
		cover: (639 to: 656)
		declaredAt: (100 to: 117)) add:
		(transactionId
			cover: (663 to: 675)
			declaredAt: (79 to: 91)) ] valueCoveringAll:
		{658 to: 661}.
	[
	(clientsTransactions
		cover: (680 to: 698)
		declaredAt: (570 to: 588))
		at:
			(client
				cover: (704 to: 709)
				declaredAt: (93 to: 98))
		put:
			(clientTransactions
				cover: (716 to: 733)
				declaredAt: (100 to: 117)) ] valueCoveringAll:
		{700 to: 702. 711 to: 714}.
	^ transactionId
		cover: (741 to: 753)
		declaredAt: (79 to: 91).! !

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 14:59:22'!
PASSED!
!Behavior method!
isEmpty
	^ [
	(cart
		cover: (13 to: 16)
		declaredAt: (13 to: 16)) isEmpty ] valueCoveringAll:
		{18 to: 24}.! !
!Behavior method!
cartCanNotBeEmptyErrorMessage
	^ [
	(Cashier
		cover: (36 to: 42)
		declaredAt: (36 to: 42)) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
		{44 to: 72}.! !

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 14:59:22'!
PASSED!
!Behavior method!
isNotExpired
	[
	([
	([
	(lastTime
		cover: (17 to: 24)
		declaredAt: (17 to: 24)) +
		([
		(facade
			cover: (28 to: 33)
			declaredAt: (28 to: 33)) sessionDuration ] valueCoveringAll:
			{35 to: 49}) ] valueCoveringAll:
		{26 to: 26}) <
		([
		(facade
			cover: (54 to: 59)
			declaredAt: (28 to: 33)) now ] valueCoveringAll:
			{61 to: 63}) ] valueCoveringAll:
		{52 to: 52}) ifTrue: [
		[
		(self coverAll:
			{75 to: 78}) signalCartSessionExpired ] valueCoveringAll:
			{80 to: 103} ]] valueCoveringAll:
		{65 to: 71}.! !
!Behavior method!
canNotChargeAnExpiredCreditCardErrorMessage
	^ [
	(Cashier
		cover: (50 to: 56)
		declaredAt: (50 to: 56)) canNotChargeAnExpiredCreditCardErrorMessage ] valueCoveringAll:
		{58 to: 100}.! !

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 14:59:22'!
PASSED!
!Behavior method!
total
	^ [
	(cart
		cover: (11 to: 14)
		declaredAt: (11 to: 14)) total ] valueCoveringAll:
		{16 to: 20}.! !
!Behavior method!
detail
	^ [
	(cart
		cover: (12 to: 15)
		declaredAt: (12 to: 15)) detail ] valueCoveringAll:
		{17 to: 22}.! !
!Behavior method!
nextTransactionId
	(transactionID _ [
	(transactionID
		cover: (22 to: 34)
		declaredAt: (22 to: 34)) +
		(1 coverAll:
			{54 to: 54}) ] valueCoveringAll:
		{53 to: 53})
		cover: (39 to: 51)
		declaredAt: (22 to: 34).
	^ [
	(transactionID
		cover: (61 to: 73)
		declaredAt: (22 to: 34)) -
		(1 coverAll:
			{76 to: 76}) ] valueCoveringAll:
		{75 to: 75}.! !
!Behavior method!
listPurchases: aUser withPassword: aPassword
	| clientTransactions items total sales password |
	[
	(validUsers
		cover: (101 to: 110)
		declaredAt: (101 to: 110))
		at:
			(aUser
				cover: (116 to: 120)
				declaredAt: (16 to: 20))
		ifAbsent: [
			[
			(self coverAll:
				{132 to: 135}) error:
				([
				(self coverAll:
					{144 to: 147}) invalidUserOrPasswordErrorDescription ] valueCoveringAll:
					{149 to: 185}) ] valueCoveringAll:
				{137 to: 142} ]] valueCoveringAll:
		{112 to: 114. 122 to: 130}.
	(password _ [
	(validUsers
		cover: (204 to: 213)
		declaredAt: (101 to: 110)) at:
		(aUser
			cover: (219 to: 223)
			declaredAt: (16 to: 20)) ] valueCoveringAll:
		{215 to: 217})
		cover: (192 to: 199)
		declaredAt: (88 to: 95).
	[
	([
	(password
		cover: (231 to: 238)
		declaredAt: (88 to: 95)) =
		(aPassword
			cover: (242 to: 250)
			declaredAt: (36 to: 44)) ] valueCoveringAll:
		{240 to: 240}) ifFalse: [
		[
		(self coverAll:
			{263 to: 266}) error:
			([
			(self coverAll:
				{275 to: 278}) invalidUserOrPasswordErrorDescription ] valueCoveringAll:
				{280 to: 316}) ] valueCoveringAll:
			{268 to: 273} ]] valueCoveringAll:
		{254 to: 261}.
	(clientTransactions _ [
	(clientsTransactions
		cover: (345 to: 363)
		declaredAt: (345 to: 363))
		at:
			(aUser
				cover: (369 to: 373)
				declaredAt: (16 to: 20))
		ifAbsent: [
			[
			(OrderedCollection
				cover: (386 to: 402)
				declaredAt: (386 to: 402)) new ] valueCoveringAll:
				{404 to: 406} ]] valueCoveringAll:
		{365 to: 367. 375 to: 383})
		cover: (323 to: 340)
		declaredAt: (51 to: 68).
	(sales _ [
	(clientTransactions
		cover: (421 to: 438)
		declaredAt: (51 to: 68)) collect: [ :aTransactionID |
		[
		(salesBook
			cover: (468 to: 476)
			declaredAt: (468 to: 476)) at:
			(aTransactionID
				cover: (482 to: 495)
				declaredAt: (451 to: 464)) ] valueCoveringAll:
			{478 to: 480} ]] valueCoveringAll:
		{440 to: 447})
		cover: (412 to: 416)
		declaredAt: (82 to: 86).
	(total _ 0 coverAll:
		{512 to: 512})
		cover: (503 to: 507)
		declaredAt: (76 to: 80).
	(items _ [
	(Dictionary
		cover: (524 to: 533)
		declaredAt: (524 to: 533)) new ] valueCoveringAll:
		{535 to: 537})
		cover: (516 to: 520)
		declaredAt: (70 to: 74).
	[
	(sales
		cover: (543 to: 547)
		declaredAt: (82 to: 86)) do: [ :aSale |
		[
		([
		(aSale
			cover: (564 to: 568)
			declaredAt: (554 to: 558)) items ] valueCoveringAll:
			{570 to: 574}) associationsDo: [ :aSaleItem | | quantity |
			(quantity _ [
			(items
				cover: (634 to: 638)
				declaredAt: (70 to: 74))
				at:
					([
					(aSaleItem
						cover: (644 to: 652)
						declaredAt: (594 to: 602)) key ] valueCoveringAll:
						{654 to: 656})
				ifAbsent: [
					0 coverAll:
						{669 to: 669} ]] valueCoveringAll:
				{640 to: 642. 658 to: 666})
				cover: (622 to: 629)
				declaredAt: (608 to: 615).
			[
			(items
				cover: (676 to: 680)
				declaredAt: (70 to: 74))
				at:
					([
					(aSaleItem
						cover: (686 to: 694)
						declaredAt: (594 to: 602)) key ] valueCoveringAll:
						{696 to: 698})
				put:
					([
					(quantity
						cover: (705 to: 712)
						declaredAt: (608 to: 615)) +
						([
						(aSaleItem
							cover: (716 to: 724)
							declaredAt: (594 to: 602)) value ] valueCoveringAll:
							{726 to: 730}) ] valueCoveringAll:
						{714 to: 714}) ] valueCoveringAll:
				{682 to: 684. 700 to: 703} ]] valueCoveringAll:
			{576 to: 590}.
		(total _ [
		(total
			cover: (740 to: 744)
			declaredAt: (76 to: 80)) +
			([
			(aSale
				cover: (757 to: 761)
				declaredAt: (554 to: 558)) total ] valueCoveringAll:
				{763 to: 767}) ] valueCoveringAll:
			{755 to: 755})
			cover: (749 to: 753)
			declaredAt: (76 to: 80) ]] valueCoveringAll:
		{549 to: 551}.
	[
	(items
		cover: (775 to: 779)
		declaredAt: (70 to: 74))
		at:
			('Total' coverAll:
				{785 to: 791})
		put:
			(total
				cover: (798 to: 802)
				declaredAt: (76 to: 80)) ] valueCoveringAll:
		{781 to: 783. 793 to: 796}.
	^ items
		cover: (811 to: 815)
		declaredAt: (70 to: 74).! !
!Behavior method!
items
	^ items
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 14:59:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 14:59:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 14:59:22'!
PASSED!
!Behavior method!
advanceTime: aDuration
	(now _ [
	(now
		cover: (28 to: 30)
		declaredAt: (28 to: 30)) +
		(aDuration
			cover: (41 to: 49)
			declaredAt: (14 to: 22)) ] valueCoveringAll:
		{39 to: 39})
		cover: (35 to: 37)
		declaredAt: (28 to: 30).! !
!Behavior method!
signalCartSessionExpired
	[
	(self coverAll:
		{28 to: 31}) error:
		([
		(facade
			cover: (40 to: 45)
			declaredAt: (40 to: 45)) sessionHasExpiredErrorDescription ] valueCoveringAll:
			{47 to: 79}) ] valueCoveringAll:
		{33 to: 38}.! !
!Behavior method!
sessionHasExpiredErrorDescription
	^ 'The cart session is expired' coverAll:
		{38 to: 66}.! !
!Behavior method!
revertTime: aDuration
	(now _ [
	(now
		cover: (25 to: 27)
		declaredAt: (25 to: 27)) +
		([
		(aDuration
			cover: (38 to: 46)
			declaredAt: (13 to: 21)) negated ] valueCoveringAll:
			{48 to: 54}) ] valueCoveringAll:
		{36 to: 36})
		cover: (32 to: 34)
		declaredAt: (25 to: 27).! !

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:59:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:59:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 14:59:22'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:00:14' prior: 50973867!
test14
	
	self
		should: [interface listPurchases: 'ValidUser1'  withPassword: 'anInvalidPassword'  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface invalidUserOrPasswordErrorDescription ]! !
!Behavior method!
initialize
	(today _ [
	(DateAndTime
		cover: (23 to: 33)
		declaredAt: (23 to: 33)) now ] valueCoveringAll:
		{35 to: 37})
		cover: (14 to: 18)
		declaredAt: (14 to: 18).
	(transactionID _ 1 coverAll:
		{58 to: 58})
		cover: (41 to: 53)
		declaredAt: (41 to: 53).! !
!Behavior method!
createCart
	^ [
	(Cart
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) acceptingItemsOf:
		([
		(self coverAll:
			{39 to: 42}) defaultCatalog ] valueCoveringAll:
			{44 to: 57}) ] valueCoveringAll:
		{21 to: 37}.! !
!Behavior method!
defaultCatalog
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(Dictionary
		cover: (21 to: 30)
		declaredAt: (21 to: 30)) new ] valueCoveringAll:
		{32 to: 34}.
	[
	cascadeReceiver
		at: self itemSellByTheStore
		put: self itemSellByTheStorePrice ] valueCoveringAll:
		{38 to: 98}.
	[
	cascadeReceiver
		at: self anotherItemSellByTheStore
		put: self anotherItemSellByTheStorePrice ] valueCoveringAll:
		{103 to: 177}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{182 to: 189} ] value.! !
!Behavior method!
itemSellByTheStore
	^ 'validBook' coverAll:
		{25 to: 35}.! !
!Behavior method!
itemSellByTheStorePrice
	^ 10 coverAll:
		{29 to: 30}.! !
!Behavior method!
anotherItemSellByTheStore
	^ 'validBook2' coverAll:
		{32 to: 43}.! !
!Behavior method!
anotherItemSellByTheStorePrice
	^ 20 coverAll:
		{37 to: 38}.! !
!Behavior method!
acceptingItemsOf: aCatalog
	^ [
	([
	(self coverAll:
		{31 to: 34}) new ] valueCoveringAll:
		{36 to: 38}) initializeAcceptingItemsOf:
		(aCatalog
			cover: (68 to: 75)
			declaredAt: (19 to: 26)) ] valueCoveringAll:
		{40 to: 66}.! !
!Behavior method!
initializeAcceptingItemsOf: aCatalog
	(catalog _ aCatalog
		cover: (51 to: 58)
		declaredAt: (29 to: 36))
		cover: (40 to: 46)
		declaredAt: (40 to: 46).
	(items _ [
	(Bag
		cover: (71 to: 73)
		declaredAt: (71 to: 73)) new ] valueCoveringAll:
		{75 to: 77})
		cover: (62 to: 66)
		declaredAt: (62 to: 66).! !
!Behavior method!
isEmpty
	^ [
	(items
		cover: (13 to: 17)
		declaredAt: (13 to: 17)) isEmpty ] valueCoveringAll:
		{19 to: 25}.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/11/2021 15:00:18'!
PASSED!
!Behavior method!
itemNotSellByTheStore
	^ 'invalidBook' coverAll:
		{27 to: 39}.! !
!Behavior method!
add: anItem
	^ [
	(self coverAll:
		{17 to: 20})
		add:
			(1 coverAll:
				{27 to: 27})
		of:
			(anItem
				cover: (33 to: 38)
				declaredAt: (6 to: 11)) ] valueCoveringAll:
		{22 to: 25. 29 to: 31}.! !
!Behavior method!
add: aQuantity of: anItem
	[
	(self coverAll:
		{29 to: 32}) assertIsValidQuantity:
		(aQuantity
			cover: (57 to: 65)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{34 to: 55}.
	[
	(self coverAll:
		{69 to: 72}) assertIsValidItem:
		(anItem
			cover: (93 to: 98)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{74 to: 91}.
	[
	(1 coverAll:
		{103 to: 103})
		to:
			(aQuantity
				cover: (109 to: 117)
				declaredAt: (6 to: 14))
		do: [ :aNumber |
			[
			(items
				cover: (136 to: 140)
				declaredAt: (136 to: 140)) add:
				(anItem
					cover: (147 to: 152)
					declaredAt: (20 to: 25)) ] valueCoveringAll:
				{142 to: 145} ]] valueCoveringAll:
		{105 to: 107. 119 to: 121}.! !
!Behavior method!
assertIsValidQuantity: aQuantity
	[
	([
	(aQuantity
		cover: (36 to: 44)
		declaredAt: (24 to: 32)) strictlyPositive ] valueCoveringAll:
		{46 to: 61}) ifFalse: [
		[
		(self coverAll:
			{74 to: 77}) error:
			([
			(self coverAll:
				{86 to: 89}) invalidQuantityErrorMessage ] valueCoveringAll:
				{91 to: 117}) ] valueCoveringAll:
			{79 to: 84} ]] valueCoveringAll:
		{63 to: 70}.! !
!Behavior method!
assertIsValidItem: anItem
	[
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includesKey:
		(anItem
			cover: (51 to: 56)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			(self coverAll:
				{82 to: 85}) invalidItemErrorMessage ] valueCoveringAll:
				{87 to: 109}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{59 to: 66}.! !
!Behavior method!
invalidItemErrorMessage
	^ 'Item is not in catalog' coverAll:
		{29 to: 52}.! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/11/2021 15:00:18'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/11/2021 15:00:18'!
PASSED!
!Behavior method!
invalidQuantityErrorMessage
	^ 'Invalid number of items' coverAll:
		{33 to: 57}.! !

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/11/2021 15:00:18'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/11/2021 15:00:18'!
PASSED!
!Behavior method!
includes: anItem
	^ [
	(items
		cover: (21 to: 25)
		declaredAt: (21 to: 25)) includes:
		(anItem
			cover: (37 to: 42)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{27 to: 35}.! !

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/11/2021 15:00:18'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/11/2021 15:00:18'!
PASSED!
!Behavior method!
occurrencesOf: anItem
	^ [
	(items
		cover: (26 to: 30)
		declaredAt: (26 to: 30)) occurrencesOf:
		(anItem
			cover: (47 to: 52)
			declaredAt: (16 to: 21)) ] valueCoveringAll:
		{32 to: 45}.! !

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/11/2021 15:00:18'!
PASSED!
!Behavior method!
notExpiredCreditCard
	^ [
	(CreditCard
		cover: (26 to: 35)
		declaredAt: (26 to: 35)) expiringOn:
		([
		(Month
			cover: (50 to: 54)
			declaredAt: (50 to: 54))
			month:
				([
				(today
					cover: (63 to: 67)
					declaredAt: (63 to: 67)) monthIndex ] valueCoveringAll:
					{69 to: 78})
			year:
				([
				([
				(today
					cover: (86 to: 90)
					declaredAt: (63 to: 67)) yearNumber ] valueCoveringAll:
					{92 to: 101}) +
					(1 coverAll:
						{105 to: 105}) ] valueCoveringAll:
					{103 to: 103}) ] valueCoveringAll:
			{56 to: 61. 80 to: 84}) ] valueCoveringAll:
		{37 to: 47}.! !
!Behavior method!
expiringOn: aMonth
	^ [
	([
	(self coverAll:
		{25 to: 28}) new ] valueCoveringAll:
		{30 to: 32}) initializeExpiringOn:
		(aMonth
			cover: (56 to: 61)
			declaredAt: (13 to: 18)) ] valueCoveringAll:
		{34 to: 54}.! !
!Behavior method!
initializeExpiringOn: aMonth
	(expiration _ aMonth
		cover: (48 to: 53)
		declaredAt: (23 to: 28))
		cover: (34 to: 43)
		declaredAt: (34 to: 43).! !
!Behavior method!
today
	^ today
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !
!Behavior method!
transactionID
	^ self coverAll:
		{18 to: 21}.! !
!Behavior method!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook with: aTransactionId
	[
	(self coverAll:
		{131 to: 134}) assertIsNotEmpty:
		(aCart
			cover: (154 to: 158)
			declaredAt: (13 to: 17)) ] valueCoveringAll:
		{136 to: 152}.
	[
	(self coverAll:
		{162 to: 165})
		assertIsNotExpired:
			(aCreditCard
				cover: (187 to: 197)
				declaredAt: (29 to: 39))
		on:
			(aDate
				cover: (203 to: 207)
				declaredAt: (74 to: 78)) ] valueCoveringAll:
		{167 to: 185. 199 to: 201}.
	^ [
	([
	(self coverAll:
		{214 to: 217}) new ] valueCoveringAll:
		{219 to: 221})
		initializeToCheckout:
			(aCart
				cover: (245 to: 249)
				declaredAt: (13 to: 17))
		charging:
			(aCreditCard
				cover: (261 to: 271)
				declaredAt: (29 to: 39))
		throught:
			(aMerchantProcessor
				cover: (283 to: 300)
				declaredAt: (51 to: 68))
		registeringOn:
			(aSalesBook
				cover: (317 to: 326)
				declaredAt: (95 to: 104))
		with:
			(aTransactionId
				cover: (334 to: 347)
				declaredAt: (112 to: 125)) ] valueCoveringAll:
		{223 to: 243. 251 to: 259. 273 to: 281. 302 to: 315. 328 to: 332}.! !
!Behavior method!
assertIsNotEmpty: aCart
	[
	([
	(aCart
		cover: (29 to: 33)
		declaredAt: (19 to: 23)) isEmpty ] valueCoveringAll:
		{35 to: 41}) ifTrue: [
		[
		(self coverAll:
			{52 to: 55}) error:
			([
			(self coverAll:
				{64 to: 67}) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
				{69 to: 97}) ] valueCoveringAll:
			{57 to: 62} ]] valueCoveringAll:
		{43 to: 49}.! !
!Behavior method!
cartCanNotBeEmptyErrorMessage
	^ 'Can not check out an empty cart' coverAll:
		{35 to: 67}.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/11/2021 15:00:18'!
PASSED!
!Behavior method!
assertIsNotExpired: aCreditCard on: aDate
	[
	([
	(aCreditCard
		cover: (47 to: 57)
		declaredAt: (21 to: 31)) isExpiredOn:
		(aDate
			cover: (72 to: 76)
			declaredAt: (37 to: 41)) ] valueCoveringAll:
		{59 to: 70}) ifTrue: [
		[
		(self coverAll:
			{89 to: 92}) error:
			([
			(self coverAll:
				{101 to: 104}) canNotChargeAnExpiredCreditCardErrorMessage ] valueCoveringAll:
				{106 to: 148}) ] valueCoveringAll:
			{94 to: 99} ]] valueCoveringAll:
		{79 to: 85}.! !
!Behavior method!
isExpiredOn: aDate
	^ [
	([
	(expiration
		cover: (25 to: 34)
		declaredAt: (25 to: 34)) start ] valueCoveringAll:
		{36 to: 40}) <
		([
		([
		(Month
			cover: (45 to: 49)
			declaredAt: (45 to: 49))
			month:
				([
				(aDate
					cover: (58 to: 62)
					declaredAt: (14 to: 18)) monthIndex ] valueCoveringAll:
					{64 to: 73})
			year:
				([
				(aDate
					cover: (81 to: 85)
					declaredAt: (14 to: 18)) yearNumber ] valueCoveringAll:
					{87 to: 96}) ] valueCoveringAll:
			{51 to: 56. 75 to: 79}) start ] valueCoveringAll:
			{99 to: 103}) ] valueCoveringAll:
		{42 to: 42}.! !
!Behavior method!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook with: aTransactionID
	(cart _ aCart
		cover: (138 to: 142)
		declaredAt: (23 to: 27))
		cover: (130 to: 133)
		declaredAt: (130 to: 133).
	(creditCard _ aCreditCard
		cover: (160 to: 170)
		declaredAt: (39 to: 49))
		cover: (146 to: 155)
		declaredAt: (146 to: 155).
	(merchantProcessor _ aMerchantProcessor
		cover: (195 to: 212)
		declaredAt: (61 to: 78))
		cover: (174 to: 190)
		declaredAt: (174 to: 190).
	(salesBook _ aSalesBook
		cover: (229 to: 238)
		declaredAt: (95 to: 104))
		cover: (216 to: 224)
		declaredAt: (216 to: 224).
	(transactionsIDs _ aTransactionID
		cover: (261 to: 274)
		declaredAt: (112 to: 125))
		cover: (242 to: 256)
		declaredAt: (242 to: 256).! !
!Behavior method!
checkOut
	| sale |
	[
	(self coverAll:
		{22 to: 25}) calculateTotal ] valueCoveringAll:
		{27 to: 40}.
	[
	(self coverAll:
		{44 to: 47}) debitTotal ] valueCoveringAll:
		{49 to: 58}.
	(sale _ [
	(self coverAll:
		{70 to: 73}) registerSale ] valueCoveringAll:
		{75 to: 86})
		cover: (62 to: 65)
		declaredAt: (14 to: 17).
	^ sale
		cover: (93 to: 96)
		declaredAt: (14 to: 17).! !
!Behavior method!
calculateTotal
	(total _ [
	(cart
		cover: (27 to: 30)
		declaredAt: (27 to: 30)) total ] valueCoveringAll:
		{32 to: 36})
		cover: (18 to: 22)
		declaredAt: (18 to: 22).! !
!Behavior method!
total
	^ [
	(items
		cover: (11 to: 15)
		declaredAt: (11 to: 15)) sum: [ :anItem |
		[
		(catalog
			cover: (34 to: 40)
			declaredAt: (34 to: 40)) at:
			(anItem
				cover: (46 to: 51)
				declaredAt: (25 to: 30)) ] valueCoveringAll:
			{42 to: 44} ]] valueCoveringAll:
		{17 to: 20}.! !
!Behavior method!
debitTotal
	[
	(merchantProcessor
		cover: (14 to: 30)
		declaredAt: (14 to: 30))
		debit:
			(total
				cover: (39 to: 43)
				declaredAt: (39 to: 43))
		from:
			(creditCard
				cover: (51 to: 60)
				declaredAt: (51 to: 60)) ] valueCoveringAll:
		{32 to: 37. 45 to: 49}.! !
!Behavior method!
registerSale
	| sale transactionID |
	(sale _ [
	(self coverAll:
		{48 to: 51}) createSale ] valueCoveringAll:
		{53 to: 62})
		cover: (40 to: 43)
		declaredAt: (18 to: 21).
	(transactionID _ [
	(transactionsIDs
		cover: (83 to: 97)
		declaredAt: (83 to: 97)) nextTransactionId ] valueCoveringAll:
		{99 to: 115})
		cover: (66 to: 78)
		declaredAt: (23 to: 35).
	[
	(salesBook
		cover: (122 to: 130)
		declaredAt: (122 to: 130))
		at:
			(transactionID
				cover: (136 to: 148)
				declaredAt: (23 to: 35))
		put:
			(sale
				cover: (155 to: 158)
				declaredAt: (18 to: 21)) ] valueCoveringAll:
		{132 to: 134. 150 to: 153}.
	^ transactionID
		cover: (165 to: 177)
		declaredAt: (23 to: 35).! !
!Behavior method!
createSale
	^ [
	(Sale
		cover: (16 to: 19)
		declaredAt: (16 to: 19))
		of:
			([
			(cart
				cover: (24 to: 27)
				declaredAt: (24 to: 27)) detail ] valueCoveringAll:
				{29 to: 34})
		with:
			(total
				cover: (42 to: 46)
				declaredAt: (42 to: 46)) ] valueCoveringAll:
		{21 to: 23. 36 to: 40}.! !
!Behavior method!
detail
	| detail |
	(detail _ [
	(OrderedDictionary
		cover: (33 to: 49)
		declaredAt: (33 to: 49)) new ] valueCoveringAll:
		{51 to: 53})
		cover: (23 to: 28)
		declaredAt: (11 to: 16).
	[
	(items
		cover: (58 to: 62)
		declaredAt: (58 to: 62)) do: [ :item |
		[
		(detail
			cover: (77 to: 82)
			declaredAt: (11 to: 16))
			at:
				(item
					cover: (88 to: 91)
					declaredAt: (71 to: 74))
			put:
				([
				(items
					cover: (99 to: 103)
					declaredAt: (58 to: 62)) occurrencesOf:
					(item
						cover: (120 to: 123)
						declaredAt: (71 to: 74)) ] valueCoveringAll:
					{105 to: 118}) ] valueCoveringAll:
			{84 to: 86. 93 to: 96} ]] valueCoveringAll:
		{64 to: 66}.
	^ detail
		cover: (135 to: 140)
		declaredAt: (11 to: 16).! !
!Behavior method!
of: someItems with: aTotal
	"should assert total is not negative or 0!!"
	^ [
	([
	(self coverAll:
		{76 to: 79}) new ] valueCoveringAll:
		{81 to: 83})
		initializeWith:
			(someItems
				cover: (101 to: 109)
				declaredAt: (5 to: 13))
		andTotal:
			(aTotal
				cover: (121 to: 126)
				declaredAt: (21 to: 26)) ] valueCoveringAll:
		{85 to: 99. 111 to: 119}.! !
!Behavior method!
initializeWith: someItems andTotal: aTotal
	(total _ aTotal
		cover: (55 to: 60)
		declaredAt: (37 to: 42))
		cover: (46 to: 50)
		declaredAt: (46 to: 50).
	(items _ someItems
		cover: (73 to: 81)
		declaredAt: (17 to: 25))
		cover: (64 to: 68)
		declaredAt: (64 to: 68).! !
!Behavior method!
nextTransactionId
	(transactionID _ [
	(transactionID
		cover: (21 to: 33)
		declaredAt: (21 to: 33)) +
		(1 coverAll:
			{53 to: 53}) ] valueCoveringAll:
		{52 to: 52})
		cover: (38 to: 50)
		declaredAt: (21 to: 33).
	^ [
	(transactionID
		cover: (60 to: 72)
		declaredAt: (21 to: 33)) -
		(1 coverAll:
			{74 to: 74}) ] valueCoveringAll:
		{73 to: 73}.! !
!Behavior method!
total
	^ total
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/11/2021 15:00:18'!
PASSED!
!Behavior method!
expiredCreditCard
	^ [
	(CreditCard
		cover: (23 to: 32)
		declaredAt: (23 to: 32)) expiringOn:
		([
		(Month
			cover: (47 to: 51)
			declaredAt: (47 to: 51))
			month:
				([
				(today
					cover: (60 to: 64)
					declaredAt: (60 to: 64)) monthIndex ] valueCoveringAll:
					{66 to: 75})
			year:
				([
				([
				(today
					cover: (83 to: 87)
					declaredAt: (60 to: 64)) yearNumber ] valueCoveringAll:
					{89 to: 98}) -
					(1 coverAll:
						{102 to: 102}) ] valueCoveringAll:
					{100 to: 100}) ] valueCoveringAll:
			{53 to: 58. 77 to: 81}) ] valueCoveringAll:
		{34 to: 44}.! !
!Behavior method!
canNotChargeAnExpiredCreditCardErrorMessage
	^ 'Can not charge an expired credit card' coverAll:
		{49 to: 87}.! !

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/11/2021 15:00:18'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/11/2021 15:00:18'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/11/2021 15:00:18'!
PASSED!
!Behavior method!
creditCardHasNoCreditErrorMessage
	^ 'Credit card has no credit' coverAll:
		{39 to: 65}.! !

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/11/2021 15:00:18'!
PASSED!
!Behavior method!
for: aTime
	^ [
	([
	(self coverAll:
		{15 to: 18}) new ] valueCoveringAll:
		{20 to: 22}) initializeWith:
		(aTime
			cover: (40 to: 44)
			declaredAt: (6 to: 10)) ] valueCoveringAll:
		{24 to: 38}.! !
!Behavior method!
initializeWith: aTime
	(now _ aTime
		cover: (32 to: 36)
		declaredAt: (17 to: 21))
		cover: (25 to: 27)
		declaredAt: (25 to: 27).! !
!Behavior method!
withUsers: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock
	^ [
	([
	(self coverAll:
		{144 to: 147}) new ] valueCoveringAll:
		{149 to: 151})
		initializeWith:
			(usersWithPasswords
				cover: (169 to: 186)
				declaredAt: (12 to: 29))
		withCatalog:
			(aCatalog
				cover: (201 to: 208)
				declaredAt: (44 to: 51))
		withSalesBook:
			(aSalesBook
				cover: (225 to: 234)
				declaredAt: (68 to: 77))
		withMerchantProcessor:
			(aMerchantProcessor
				cover: (259 to: 276)
				declaredAt: (102 to: 119))
		withClock:
			(aClock
				cover: (289 to: 294)
				declaredAt: (132 to: 137)) ] valueCoveringAll:
		{153 to: 167. 188 to: 199. 210 to: 223. 236 to: 257. 278 to: 287}.! !
!Behavior method!
initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock
	(validUsers _ usersWithPasswords
		cover: (163 to: 180)
		declaredAt: (17 to: 34))
		cover: (149 to: 158)
		declaredAt: (149 to: 158).
	(catalog _ aCatalog
		cover: (195 to: 202)
		declaredAt: (49 to: 56))
		cover: (184 to: 190)
		declaredAt: (184 to: 190).
	(salesBook _ aSalesBook
		cover: (219 to: 228)
		declaredAt: (73 to: 82))
		cover: (206 to: 214)
		declaredAt: (206 to: 214).
	(merchantProcessor _ aMerchantProcessor
		cover: (253 to: 270)
		declaredAt: (107 to: 124))
		cover: (232 to: 248)
		declaredAt: (232 to: 248).
	(cartSessions _ [
	(Dictionary
		cover: (291 to: 300)
		declaredAt: (291 to: 300)) new ] valueCoveringAll:
		{302 to: 304})
		cover: (275 to: 286)
		declaredAt: (275 to: 286).
	(cartIdCounter _ 0 coverAll:
		{325 to: 325})
		cover: (308 to: 320)
		declaredAt: (308 to: 320).
	(transactionID _ 1 coverAll:
		{348 to: 348})
		cover: (331 to: 343)
		declaredAt: (331 to: 343).
	(cartToClient _ [
	(Dictionary
		cover: (370 to: 379)
		declaredAt: (291 to: 300)) new ] valueCoveringAll:
		{381 to: 383})
		cover: (354 to: 365)
		declaredAt: (354 to: 365).
	(clientToCart _ [
	(Dictionary
		cover: (403 to: 412)
		declaredAt: (291 to: 300)) new ] valueCoveringAll:
		{414 to: 416})
		cover: (387 to: 398)
		declaredAt: (387 to: 398).
	(clientsTransactions _ [
	(Dictionary
		cover: (445 to: 454)
		declaredAt: (291 to: 300)) new ] valueCoveringAll:
		{456 to: 458})
		cover: (422 to: 440)
		declaredAt: (422 to: 440).
	(clock _ aClock
		cover: (471 to: 476)
		declaredAt: (137 to: 142))
		cover: (462 to: 466)
		declaredAt: (462 to: 466).! !
!Behavior method!
createCartFor: aUser with: aUserPassword
	| password cart |
	[
	(validUsers
		cover: (65 to: 74)
		declaredAt: (65 to: 74))
		at:
			(aUser
				cover: (80 to: 84)
				declaredAt: (16 to: 20))
		ifAbsent: [
			[
			(self coverAll:
				{96 to: 99}) error:
				([
				(self coverAll:
					{108 to: 111}) invalidUserOrPasswordErrorDescription ] valueCoveringAll:
					{113 to: 149}) ] valueCoveringAll:
				{101 to: 106} ]] valueCoveringAll:
		{76 to: 78. 86 to: 94}.
	(password _ [
	(validUsers
		cover: (168 to: 177)
		declaredAt: (65 to: 74)) at:
		(aUser
			cover: (183 to: 187)
			declaredAt: (16 to: 20)) ] valueCoveringAll:
		{179 to: 181})
		cover: (156 to: 163)
		declaredAt: (47 to: 54).
	[
	([
	(password
		cover: (195 to: 202)
		declaredAt: (47 to: 54)) =
		(aUserPassword
			cover: (206 to: 218)
			declaredAt: (28 to: 40)) ] valueCoveringAll:
		{204 to: 204}) ifFalse: [
		[
		(self coverAll:
			{231 to: 234}) error:
			([
			(self coverAll:
				{243 to: 246}) invalidUserOrPasswordErrorDescription ] valueCoveringAll:
				{248 to: 284}) ] valueCoveringAll:
			{236 to: 241} ]] valueCoveringAll:
		{222 to: 229}.
	(cartIdCounter _ [
	(cartIdCounter
		cover: (291 to: 303)
		declaredAt: (291 to: 303)) +
		(1 coverAll:
			{324 to: 324}) ] valueCoveringAll:
		{322 to: 322})
		cover: (308 to: 320)
		declaredAt: (291 to: 303).
	(cart _ [
	(CartSession
		cover: (338 to: 348)
		declaredAt: (338 to: 348))
		for:
			([
			(Cart
				cover: (356 to: 359)
				declaredAt: (356 to: 359)) acceptingItemsOf:
				(catalog
					cover: (379 to: 385)
					declaredAt: (379 to: 385)) ] valueCoveringAll:
				{361 to: 377})
		ownedBy:
			(aUser
				cover: (397 to: 401)
				declaredAt: (16 to: 20))
		with:
			(self coverAll:
				{409 to: 412}) ] valueCoveringAll:
		{350 to: 353. 388 to: 395. 403 to: 407})
		cover: (330 to: 333)
		declaredAt: (56 to: 59).
	[
	(cartSessions
		cover: (418 to: 429)
		declaredAt: (418 to: 429))
		at:
			(cartIdCounter
				cover: (435 to: 447)
				declaredAt: (291 to: 303))
		put:
			(cart
				cover: (453 to: 456)
				declaredAt: (56 to: 59)) ] valueCoveringAll:
		{431 to: 433. 449 to: 452}.
	[
	(cartToClient
		cover: (462 to: 473)
		declaredAt: (462 to: 473))
		at:
			(cartIdCounter
				cover: (479 to: 491)
				declaredAt: (291 to: 303))
		put:
			(aUser
				cover: (498 to: 502)
				declaredAt: (16 to: 20)) ] valueCoveringAll:
		{475 to: 477. 493 to: 496}.
	^ cartIdCounter
		cover: (509 to: 521)
		declaredAt: (291 to: 303).! !
!Behavior method!
invalidUserOrPasswordErrorDescription
	^ 'Invalid user or password' coverAll:
		{42 to: 67}.! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 15:00:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 15:00:18'!
PASSED!
!Behavior method!
for: aCart ownedBy: aCustomer with: aSystemFacade
	^ [
	([
	(self coverAll:
		{54 to: 57}) new ] valueCoveringAll:
		{59 to: 61})
		initializedWith:
			(aCart
				cover: (80 to: 84)
				declaredAt: (6 to: 10))
		ownedBy:
			(aCustomer
				cover: (95 to: 103)
				declaredAt: (21 to: 29))
		with:
			(aSystemFacade
				cover: (111 to: 123)
				declaredAt: (37 to: 49)) ] valueCoveringAll:
		{63 to: 78. 86 to: 93. 105 to: 109}.! !
!Behavior method!
initializedWith: aCart ownedBy: aCustomer with: aFacade
	(cart _ aCart
		cover: (67 to: 71)
		declaredAt: (18 to: 22))
		cover: (59 to: 62)
		declaredAt: (59 to: 62).
	(owner _ aCustomer
		cover: (84 to: 92)
		declaredAt: (33 to: 41))
		cover: (75 to: 79)
		declaredAt: (75 to: 79).
	(facade _ aFacade
		cover: (107 to: 113)
		declaredAt: (49 to: 55))
		cover: (97 to: 102)
		declaredAt: (97 to: 102).
	(lastTime _ [
	(aFacade
		cover: (129 to: 135)
		declaredAt: (49 to: 55)) now ] valueCoveringAll:
		{137 to: 139})
		cover: (117 to: 124)
		declaredAt: (117 to: 124).! !
!Behavior method!
now
	^ [
	(clock
		cover: (8 to: 12)
		declaredAt: (8 to: 12)) now ] valueCoveringAll:
		{14 to: 16}.! !
!Behavior method!
now
	^ now
		cover: (8 to: 10)
		declaredAt: (8 to: 10).! !
!Behavior method!
listCart: aCartId
	^ [
	([
	(cartSessions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) at:
		(aCartId
			cover: (43 to: 49)
			declaredAt: (11 to: 17)) ] valueCoveringAll:
		{39 to: 41}) getItems ] valueCoveringAll:
		{52 to: 59}.! !
!Behavior method!
getItems
	[
	([
	([
	(lastTime
		cover: (12 to: 19)
		declaredAt: (12 to: 19)) +
		([
		(facade
			cover: (23 to: 28)
			declaredAt: (23 to: 28)) sessionDuration ] valueCoveringAll:
			{30 to: 44}) ] valueCoveringAll:
		{21 to: 21}) <
		([
		(facade
			cover: (49 to: 54)
			declaredAt: (23 to: 28)) now ] valueCoveringAll:
			{56 to: 58}) ] valueCoveringAll:
		{47 to: 47}) ifTrue: [
		[
		(self coverAll:
			{70 to: 73}) signalCartSessionExpired ] valueCoveringAll:
			{75 to: 98} ]] valueCoveringAll:
		{60 to: 66}.
	^ [
	(cart
		cover: (106 to: 109)
		declaredAt: (106 to: 109)) getItems ] valueCoveringAll:
		{111 to: 118}.! !
!Behavior method!
sessionDuration
	^ [
	(30 coverAll:
		{21 to: 22}) minutes ] valueCoveringAll:
		{24 to: 30}.! !
!Behavior method!
getItems
	^ [
	(items
		cover: (14 to: 18)
		declaredAt: (14 to: 18)) copy ] valueCoveringAll:
		{20 to: 23}.! !

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 15:00:18'!
PASSED!
!Behavior method!
addToCart: cartId book: aBook bookQuantity: aQuantity
	| cart |
	(cart _ [
	(cartSessions
		cover: (76 to: 87)
		declaredAt: (76 to: 87))
		at:
			(cartId
				cover: (93 to: 98)
				declaredAt: (12 to: 17))
		ifAbsent: [ ^ [
			(self coverAll:
				{112 to: 115}) error:
				([
				(self coverAll:
					{124 to: 127}) invalidCartIdErrorMessage ] valueCoveringAll:
					{129 to: 153}) ] valueCoveringAll:
				{117 to: 122} ]] valueCoveringAll:
		{89 to: 91. 100 to: 108})
		cover: (68 to: 71)
		declaredAt: (61 to: 64).
	[
	(catalog
		cover: (160 to: 166)
		declaredAt: (160 to: 166))
		at:
			(aBook
				cover: (172 to: 176)
				declaredAt: (25 to: 29))
		ifAbsent: [ ^ [
			(self coverAll:
				{190 to: 193}) error:
				([
				(self coverAll:
					{202 to: 205}) invalidItemErrorMessage ] valueCoveringAll:
					{207 to: 229}) ] valueCoveringAll:
				{195 to: 200} ]] valueCoveringAll:
		{168 to: 170. 178 to: 186}.
	[
	(cart
		cover: (236 to: 239)
		declaredAt: (61 to: 64))
		add:
			(aQuantity
				cover: (246 to: 254)
				declaredAt: (45 to: 53))
		of:
			(aBook
				cover: (260 to: 264)
				declaredAt: (25 to: 29)) ] valueCoveringAll:
		{241 to: 244. 256 to: 258}.! !
!Behavior method!
invalidItemErrorMessage
	^ 'Invalid item' coverAll:
		{28 to: 41}.! !

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 15:00:18'!
PASSED!
!Behavior method!
invalidCartIdErrorMessage
	^ 'Invalid CartId' coverAll:
		{30 to: 45}.! !

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 15:00:18'!
PASSED!
!Behavior method!
add: anAmount of: aBook
	[
	([
	([
	(lastTime
		cover: (30 to: 37)
		declaredAt: (30 to: 37)) +
		([
		(facade
			cover: (41 to: 46)
			declaredAt: (41 to: 46)) sessionDuration ] valueCoveringAll:
			{48 to: 62}) ] valueCoveringAll:
		{39 to: 39}) <
		([
		(facade
			cover: (67 to: 72)
			declaredAt: (41 to: 46)) now ] valueCoveringAll:
			{74 to: 76}) ] valueCoveringAll:
		{65 to: 65}) ifTrue: [
		[
		(self coverAll:
			{88 to: 91}) signalCartSessionExpired ] valueCoveringAll:
			{93 to: 116} ]] valueCoveringAll:
		{78 to: 84}.
	^ [
	(cart
		cover: (124 to: 127)
		declaredAt: (124 to: 127))
		add:
			(anAmount
				cover: (134 to: 141)
				declaredAt: (6 to: 13))
		of:
			(aBook
				cover: (147 to: 151)
				declaredAt: (19 to: 23)) ] valueCoveringAll:
		{129 to: 132. 143 to: 145}.! !

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 15:00:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 15:00:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 15:00:18'!
PASSED!
!Behavior method!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	| cart cashier transactionId client clientTransactions |
	(cart _ [
	(cartSessions
		cover: (132 to: 143)
		declaredAt: (132 to: 143))
		at:
			(cartId
				cover: (149 to: 154)
				declaredAt: (11 to: 16))
		ifAbsent: [
			[
			(self coverAll:
				{166 to: 169}) error:
				([
				(self coverAll:
					{178 to: 181}) invalidCartIdErrorMessage ] valueCoveringAll:
					{183 to: 207}) ] valueCoveringAll:
				{171 to: 176} ]] valueCoveringAll:
		{145 to: 147. 156 to: 164})
		cover: (124 to: 127)
		declaredAt: (66 to: 69).
	[
	([
	(cart
		cover: (215 to: 218)
		declaredAt: (66 to: 69)) isEmpty ] valueCoveringAll:
		{220 to: 226}) ifTrue: [
		[
		(self coverAll:
			{237 to: 240}) error:
			([
			(self coverAll:
				{249 to: 252}) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
				{254 to: 282}) ] valueCoveringAll:
			{242 to: 247} ]] valueCoveringAll:
		{229 to: 235}.
	[
	(cart
		cover: (289 to: 292)
		declaredAt: (66 to: 69)) isNotExpired ] valueCoveringAll:
		{294 to: 305}.
	(cashier _ [
	(Cashier
		cover: (320 to: 326)
		declaredAt: (320 to: 326))
		toCheckout:
			(cart
				cover: (343 to: 346)
				declaredAt: (66 to: 69))
		charging:
			(aCreditCard
				cover: (361 to: 371)
				declaredAt: (40 to: 50))
		throught:
			(merchantProcessor
				cover: (387 to: 403)
				declaredAt: (387 to: 403))
		on:
			(aDate
				cover: (412 to: 416)
				declaredAt: (56 to: 60))
		registeringOn:
			(salesBook
				cover: (436 to: 444)
				declaredAt: (436 to: 444))
		with:
			(self coverAll:
				{454 to: 457}) ] valueCoveringAll:
		{331 to: 341. 351 to: 359. 377 to: 385. 408 to: 410. 421 to: 434. 448 to: 452})
		cover: (309 to: 315)
		declaredAt: (71 to: 77).
	(transactionId _ [
	(cashier
		cover: (481 to: 487)
		declaredAt: (71 to: 77)) checkOut ] valueCoveringAll:
		{489 to: 496})
		cover: (464 to: 476)
		declaredAt: (79 to: 91).
	(client _ [
	(cartToClient
		cover: (513 to: 524)
		declaredAt: (513 to: 524)) removeKey:
		(cartId
			cover: (537 to: 542)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{526 to: 535})
		cover: (503 to: 508)
		declaredAt: (93 to: 98).
	(clientTransactions _ [
	(clientsTransactions
		cover: (570 to: 588)
		declaredAt: (570 to: 588))
		at:
			(client
				cover: (594 to: 599)
				declaredAt: (93 to: 98))
		ifAbsent: [
			[
			(OrderedCollection
				cover: (613 to: 629)
				declaredAt: (613 to: 629)) new ] valueCoveringAll:
				{631 to: 633} ]] valueCoveringAll:
		{590 to: 592. 601 to: 609})
		cover: (548 to: 565)
		declaredAt: (100 to: 117).
	[
	(clientTransactions
		cover: (639 to: 656)
		declaredAt: (100 to: 117)) add:
		(transactionId
			cover: (663 to: 675)
			declaredAt: (79 to: 91)) ] valueCoveringAll:
		{658 to: 661}.
	[
	(clientsTransactions
		cover: (680 to: 698)
		declaredAt: (570 to: 588))
		at:
			(client
				cover: (704 to: 709)
				declaredAt: (93 to: 98))
		put:
			(clientTransactions
				cover: (716 to: 733)
				declaredAt: (100 to: 117)) ] valueCoveringAll:
		{700 to: 702. 711 to: 714}.
	^ transactionId
		cover: (741 to: 753)
		declaredAt: (79 to: 91).! !

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 15:00:18'!
PASSED!
!Behavior method!
isEmpty
	^ [
	(cart
		cover: (13 to: 16)
		declaredAt: (13 to: 16)) isEmpty ] valueCoveringAll:
		{18 to: 24}.! !
!Behavior method!
cartCanNotBeEmptyErrorMessage
	^ [
	(Cashier
		cover: (36 to: 42)
		declaredAt: (36 to: 42)) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
		{44 to: 72}.! !

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 15:00:18'!
PASSED!
!Behavior method!
isNotExpired
	[
	([
	([
	(lastTime
		cover: (17 to: 24)
		declaredAt: (17 to: 24)) +
		([
		(facade
			cover: (28 to: 33)
			declaredAt: (28 to: 33)) sessionDuration ] valueCoveringAll:
			{35 to: 49}) ] valueCoveringAll:
		{26 to: 26}) <
		([
		(facade
			cover: (54 to: 59)
			declaredAt: (28 to: 33)) now ] valueCoveringAll:
			{61 to: 63}) ] valueCoveringAll:
		{52 to: 52}) ifTrue: [
		[
		(self coverAll:
			{75 to: 78}) signalCartSessionExpired ] valueCoveringAll:
			{80 to: 103} ]] valueCoveringAll:
		{65 to: 71}.! !
!Behavior method!
canNotChargeAnExpiredCreditCardErrorMessage
	^ [
	(Cashier
		cover: (50 to: 56)
		declaredAt: (50 to: 56)) canNotChargeAnExpiredCreditCardErrorMessage ] valueCoveringAll:
		{58 to: 100}.! !

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 15:00:18'!
PASSED!
!Behavior method!
total
	^ [
	(cart
		cover: (11 to: 14)
		declaredAt: (11 to: 14)) total ] valueCoveringAll:
		{16 to: 20}.! !
!Behavior method!
detail
	^ [
	(cart
		cover: (12 to: 15)
		declaredAt: (12 to: 15)) detail ] valueCoveringAll:
		{17 to: 22}.! !
!Behavior method!
nextTransactionId
	(transactionID _ [
	(transactionID
		cover: (22 to: 34)
		declaredAt: (22 to: 34)) +
		(1 coverAll:
			{54 to: 54}) ] valueCoveringAll:
		{53 to: 53})
		cover: (39 to: 51)
		declaredAt: (22 to: 34).
	^ [
	(transactionID
		cover: (61 to: 73)
		declaredAt: (22 to: 34)) -
		(1 coverAll:
			{76 to: 76}) ] valueCoveringAll:
		{75 to: 75}.! !
!Behavior method!
listPurchases: aUser withPassword: aPassword
	| clientTransactions items total sales password |
	[
	(validUsers
		cover: (101 to: 110)
		declaredAt: (101 to: 110))
		at:
			(aUser
				cover: (116 to: 120)
				declaredAt: (16 to: 20))
		ifAbsent: [
			[
			(self coverAll:
				{132 to: 135}) error:
				([
				(self coverAll:
					{144 to: 147}) invalidUserOrPasswordErrorDescription ] valueCoveringAll:
					{149 to: 185}) ] valueCoveringAll:
				{137 to: 142} ]] valueCoveringAll:
		{112 to: 114. 122 to: 130}.
	(password _ [
	(validUsers
		cover: (204 to: 213)
		declaredAt: (101 to: 110)) at:
		(aUser
			cover: (219 to: 223)
			declaredAt: (16 to: 20)) ] valueCoveringAll:
		{215 to: 217})
		cover: (192 to: 199)
		declaredAt: (88 to: 95).
	[
	([
	(password
		cover: (231 to: 238)
		declaredAt: (88 to: 95)) =
		(aPassword
			cover: (242 to: 250)
			declaredAt: (36 to: 44)) ] valueCoveringAll:
		{240 to: 240}) ifFalse: [
		[
		(self coverAll:
			{263 to: 266}) error:
			([
			(self coverAll:
				{275 to: 278}) invalidUserOrPasswordErrorDescription ] valueCoveringAll:
				{280 to: 316}) ] valueCoveringAll:
			{268 to: 273} ]] valueCoveringAll:
		{254 to: 261}.
	(clientTransactions _ [
	(clientsTransactions
		cover: (345 to: 363)
		declaredAt: (345 to: 363))
		at:
			(aUser
				cover: (369 to: 373)
				declaredAt: (16 to: 20))
		ifAbsent: [
			[
			(OrderedCollection
				cover: (386 to: 402)
				declaredAt: (386 to: 402)) new ] valueCoveringAll:
				{404 to: 406} ]] valueCoveringAll:
		{365 to: 367. 375 to: 383})
		cover: (323 to: 340)
		declaredAt: (51 to: 68).
	(sales _ [
	(clientTransactions
		cover: (421 to: 438)
		declaredAt: (51 to: 68)) collect: [ :aTransactionID |
		[
		(salesBook
			cover: (468 to: 476)
			declaredAt: (468 to: 476)) at:
			(aTransactionID
				cover: (482 to: 495)
				declaredAt: (451 to: 464)) ] valueCoveringAll:
			{478 to: 480} ]] valueCoveringAll:
		{440 to: 447})
		cover: (412 to: 416)
		declaredAt: (82 to: 86).
	(total _ 0 coverAll:
		{512 to: 512})
		cover: (503 to: 507)
		declaredAt: (76 to: 80).
	(items _ [
	(Dictionary
		cover: (524 to: 533)
		declaredAt: (524 to: 533)) new ] valueCoveringAll:
		{535 to: 537})
		cover: (516 to: 520)
		declaredAt: (70 to: 74).
	[
	(sales
		cover: (543 to: 547)
		declaredAt: (82 to: 86)) do: [ :aSale |
		[
		([
		(aSale
			cover: (564 to: 568)
			declaredAt: (554 to: 558)) items ] valueCoveringAll:
			{570 to: 574}) associationsDo: [ :aSaleItem | | quantity |
			(quantity _ [
			(items
				cover: (634 to: 638)
				declaredAt: (70 to: 74))
				at:
					([
					(aSaleItem
						cover: (644 to: 652)
						declaredAt: (594 to: 602)) key ] valueCoveringAll:
						{654 to: 656})
				ifAbsent: [
					0 coverAll:
						{669 to: 669} ]] valueCoveringAll:
				{640 to: 642. 658 to: 666})
				cover: (622 to: 629)
				declaredAt: (608 to: 615).
			[
			(items
				cover: (676 to: 680)
				declaredAt: (70 to: 74))
				at:
					([
					(aSaleItem
						cover: (686 to: 694)
						declaredAt: (594 to: 602)) key ] valueCoveringAll:
						{696 to: 698})
				put:
					([
					(quantity
						cover: (705 to: 712)
						declaredAt: (608 to: 615)) +
						([
						(aSaleItem
							cover: (716 to: 724)
							declaredAt: (594 to: 602)) value ] valueCoveringAll:
							{726 to: 730}) ] valueCoveringAll:
						{714 to: 714}) ] valueCoveringAll:
				{682 to: 684. 700 to: 703} ]] valueCoveringAll:
			{576 to: 590}.
		(total _ [
		(total
			cover: (740 to: 744)
			declaredAt: (76 to: 80)) +
			([
			(aSale
				cover: (757 to: 761)
				declaredAt: (554 to: 558)) total ] valueCoveringAll:
				{763 to: 767}) ] valueCoveringAll:
			{755 to: 755})
			cover: (749 to: 753)
			declaredAt: (76 to: 80) ]] valueCoveringAll:
		{549 to: 551}.
	[
	(items
		cover: (775 to: 779)
		declaredAt: (70 to: 74))
		at:
			('Total' coverAll:
				{785 to: 791})
		put:
			(total
				cover: (798 to: 802)
				declaredAt: (76 to: 80)) ] valueCoveringAll:
		{781 to: 783. 793 to: 796}.
	^ items
		cover: (811 to: 815)
		declaredAt: (70 to: 74).! !
!Behavior method!
items
	^ items
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 15:00:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 15:00:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 15:00:18'!
PASSED!
!Behavior method!
advanceTime: aDuration
	(now _ [
	(now
		cover: (28 to: 30)
		declaredAt: (28 to: 30)) +
		(aDuration
			cover: (41 to: 49)
			declaredAt: (14 to: 22)) ] valueCoveringAll:
		{39 to: 39})
		cover: (35 to: 37)
		declaredAt: (28 to: 30).! !
!Behavior method!
signalCartSessionExpired
	[
	(self coverAll:
		{28 to: 31}) error:
		([
		(facade
			cover: (40 to: 45)
			declaredAt: (40 to: 45)) sessionHasExpiredErrorDescription ] valueCoveringAll:
			{47 to: 79}) ] valueCoveringAll:
		{33 to: 38}.! !
!Behavior method!
sessionHasExpiredErrorDescription
	^ 'The cart session is expired' coverAll:
		{38 to: 66}.! !
!Behavior method!
revertTime: aDuration
	(now _ [
	(now
		cover: (25 to: 27)
		declaredAt: (25 to: 27)) +
		([
		(aDuration
			cover: (38 to: 46)
			declaredAt: (13 to: 21)) negated ] valueCoveringAll:
			{48 to: 54}) ] valueCoveringAll:
		{36 to: 36})
		cover: (32 to: 34)
		declaredAt: (25 to: 27).! !

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:00:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:00:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:00:18'!
PASSED!

!methodRemoval: TusLibrosFacade #isValidCartId: stamp: 'MS 11/11/2021 15:02:31'!
isValidCartId: aCartId 
	
	
	^ (aCartId <= cartIdCounter) and: (aCartId > 0) .!
!Behavior method!
initialize
	(today _ [
	(DateAndTime
		cover: (23 to: 33)
		declaredAt: (23 to: 33)) now ] valueCoveringAll:
		{35 to: 37})
		cover: (14 to: 18)
		declaredAt: (14 to: 18).
	(transactionID _ 1 coverAll:
		{58 to: 58})
		cover: (41 to: 53)
		declaredAt: (41 to: 53).! !
!Behavior method!
createCart
	^ [
	(Cart
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) acceptingItemsOf:
		([
		(self coverAll:
			{39 to: 42}) defaultCatalog ] valueCoveringAll:
			{44 to: 57}) ] valueCoveringAll:
		{21 to: 37}.! !
!Behavior method!
defaultCatalog
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(Dictionary
		cover: (21 to: 30)
		declaredAt: (21 to: 30)) new ] valueCoveringAll:
		{32 to: 34}.
	[
	cascadeReceiver
		at: self itemSellByTheStore
		put: self itemSellByTheStorePrice ] valueCoveringAll:
		{38 to: 98}.
	[
	cascadeReceiver
		at: self anotherItemSellByTheStore
		put: self anotherItemSellByTheStorePrice ] valueCoveringAll:
		{103 to: 177}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{182 to: 189} ] value.! !
!Behavior method!
itemSellByTheStore
	^ 'validBook' coverAll:
		{25 to: 35}.! !
!Behavior method!
itemSellByTheStorePrice
	^ 10 coverAll:
		{29 to: 30}.! !
!Behavior method!
anotherItemSellByTheStore
	^ 'validBook2' coverAll:
		{32 to: 43}.! !
!Behavior method!
anotherItemSellByTheStorePrice
	^ 20 coverAll:
		{37 to: 38}.! !
!Behavior method!
acceptingItemsOf: aCatalog
	^ [
	([
	(self coverAll:
		{31 to: 34}) new ] valueCoveringAll:
		{36 to: 38}) initializeAcceptingItemsOf:
		(aCatalog
			cover: (68 to: 75)
			declaredAt: (19 to: 26)) ] valueCoveringAll:
		{40 to: 66}.! !
!Behavior method!
initializeAcceptingItemsOf: aCatalog
	(catalog _ aCatalog
		cover: (51 to: 58)
		declaredAt: (29 to: 36))
		cover: (40 to: 46)
		declaredAt: (40 to: 46).
	(items _ [
	(Bag
		cover: (71 to: 73)
		declaredAt: (71 to: 73)) new ] valueCoveringAll:
		{75 to: 77})
		cover: (62 to: 66)
		declaredAt: (62 to: 66).! !
!Behavior method!
isEmpty
	^ [
	(items
		cover: (13 to: 17)
		declaredAt: (13 to: 17)) isEmpty ] valueCoveringAll:
		{19 to: 25}.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/11/2021 15:02:38'!
PASSED!
!Behavior method!
itemNotSellByTheStore
	^ 'invalidBook' coverAll:
		{27 to: 39}.! !
!Behavior method!
add: anItem
	^ [
	(self coverAll:
		{17 to: 20})
		add:
			(1 coverAll:
				{27 to: 27})
		of:
			(anItem
				cover: (33 to: 38)
				declaredAt: (6 to: 11)) ] valueCoveringAll:
		{22 to: 25. 29 to: 31}.! !
!Behavior method!
add: aQuantity of: anItem
	[
	(self coverAll:
		{29 to: 32}) assertIsValidQuantity:
		(aQuantity
			cover: (57 to: 65)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{34 to: 55}.
	[
	(self coverAll:
		{69 to: 72}) assertIsValidItem:
		(anItem
			cover: (93 to: 98)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{74 to: 91}.
	[
	(1 coverAll:
		{103 to: 103})
		to:
			(aQuantity
				cover: (109 to: 117)
				declaredAt: (6 to: 14))
		do: [ :aNumber |
			[
			(items
				cover: (136 to: 140)
				declaredAt: (136 to: 140)) add:
				(anItem
					cover: (147 to: 152)
					declaredAt: (20 to: 25)) ] valueCoveringAll:
				{142 to: 145} ]] valueCoveringAll:
		{105 to: 107. 119 to: 121}.! !
!Behavior method!
assertIsValidQuantity: aQuantity
	[
	([
	(aQuantity
		cover: (36 to: 44)
		declaredAt: (24 to: 32)) strictlyPositive ] valueCoveringAll:
		{46 to: 61}) ifFalse: [
		[
		(self coverAll:
			{74 to: 77}) error:
			([
			(self coverAll:
				{86 to: 89}) invalidQuantityErrorMessage ] valueCoveringAll:
				{91 to: 117}) ] valueCoveringAll:
			{79 to: 84} ]] valueCoveringAll:
		{63 to: 70}.! !
!Behavior method!
assertIsValidItem: anItem
	[
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includesKey:
		(anItem
			cover: (51 to: 56)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			(self coverAll:
				{82 to: 85}) invalidItemErrorMessage ] valueCoveringAll:
				{87 to: 109}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{59 to: 66}.! !
!Behavior method!
invalidItemErrorMessage
	^ 'Item is not in catalog' coverAll:
		{29 to: 52}.! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/11/2021 15:02:38'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/11/2021 15:02:38'!
PASSED!
!Behavior method!
invalidQuantityErrorMessage
	^ 'Invalid number of items' coverAll:
		{33 to: 57}.! !

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/11/2021 15:02:38'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/11/2021 15:02:38'!
PASSED!
!Behavior method!
includes: anItem
	^ [
	(items
		cover: (21 to: 25)
		declaredAt: (21 to: 25)) includes:
		(anItem
			cover: (37 to: 42)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{27 to: 35}.! !

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/11/2021 15:02:38'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/11/2021 15:02:38'!
PASSED!
!Behavior method!
occurrencesOf: anItem
	^ [
	(items
		cover: (26 to: 30)
		declaredAt: (26 to: 30)) occurrencesOf:
		(anItem
			cover: (47 to: 52)
			declaredAt: (16 to: 21)) ] valueCoveringAll:
		{32 to: 45}.! !

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/11/2021 15:02:38'!
PASSED!
!Behavior method!
notExpiredCreditCard
	^ [
	(CreditCard
		cover: (26 to: 35)
		declaredAt: (26 to: 35)) expiringOn:
		([
		(Month
			cover: (50 to: 54)
			declaredAt: (50 to: 54))
			month:
				([
				(today
					cover: (63 to: 67)
					declaredAt: (63 to: 67)) monthIndex ] valueCoveringAll:
					{69 to: 78})
			year:
				([
				([
				(today
					cover: (86 to: 90)
					declaredAt: (63 to: 67)) yearNumber ] valueCoveringAll:
					{92 to: 101}) +
					(1 coverAll:
						{105 to: 105}) ] valueCoveringAll:
					{103 to: 103}) ] valueCoveringAll:
			{56 to: 61. 80 to: 84}) ] valueCoveringAll:
		{37 to: 47}.! !
!Behavior method!
expiringOn: aMonth
	^ [
	([
	(self coverAll:
		{25 to: 28}) new ] valueCoveringAll:
		{30 to: 32}) initializeExpiringOn:
		(aMonth
			cover: (56 to: 61)
			declaredAt: (13 to: 18)) ] valueCoveringAll:
		{34 to: 54}.! !
!Behavior method!
initializeExpiringOn: aMonth
	(expiration _ aMonth
		cover: (48 to: 53)
		declaredAt: (23 to: 28))
		cover: (34 to: 43)
		declaredAt: (34 to: 43).! !
!Behavior method!
today
	^ today
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !
!Behavior method!
transactionID
	^ self coverAll:
		{18 to: 21}.! !
!Behavior method!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook with: aTransactionId
	[
	(self coverAll:
		{131 to: 134}) assertIsNotEmpty:
		(aCart
			cover: (154 to: 158)
			declaredAt: (13 to: 17)) ] valueCoveringAll:
		{136 to: 152}.
	[
	(self coverAll:
		{162 to: 165})
		assertIsNotExpired:
			(aCreditCard
				cover: (187 to: 197)
				declaredAt: (29 to: 39))
		on:
			(aDate
				cover: (203 to: 207)
				declaredAt: (74 to: 78)) ] valueCoveringAll:
		{167 to: 185. 199 to: 201}.
	^ [
	([
	(self coverAll:
		{214 to: 217}) new ] valueCoveringAll:
		{219 to: 221})
		initializeToCheckout:
			(aCart
				cover: (245 to: 249)
				declaredAt: (13 to: 17))
		charging:
			(aCreditCard
				cover: (261 to: 271)
				declaredAt: (29 to: 39))
		throught:
			(aMerchantProcessor
				cover: (283 to: 300)
				declaredAt: (51 to: 68))
		registeringOn:
			(aSalesBook
				cover: (317 to: 326)
				declaredAt: (95 to: 104))
		with:
			(aTransactionId
				cover: (334 to: 347)
				declaredAt: (112 to: 125)) ] valueCoveringAll:
		{223 to: 243. 251 to: 259. 273 to: 281. 302 to: 315. 328 to: 332}.! !
!Behavior method!
assertIsNotEmpty: aCart
	[
	([
	(aCart
		cover: (29 to: 33)
		declaredAt: (19 to: 23)) isEmpty ] valueCoveringAll:
		{35 to: 41}) ifTrue: [
		[
		(self coverAll:
			{52 to: 55}) error:
			([
			(self coverAll:
				{64 to: 67}) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
				{69 to: 97}) ] valueCoveringAll:
			{57 to: 62} ]] valueCoveringAll:
		{43 to: 49}.! !
!Behavior method!
cartCanNotBeEmptyErrorMessage
	^ 'Can not check out an empty cart' coverAll:
		{35 to: 67}.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/11/2021 15:02:38'!
PASSED!
!Behavior method!
assertIsNotExpired: aCreditCard on: aDate
	[
	([
	(aCreditCard
		cover: (47 to: 57)
		declaredAt: (21 to: 31)) isExpiredOn:
		(aDate
			cover: (72 to: 76)
			declaredAt: (37 to: 41)) ] valueCoveringAll:
		{59 to: 70}) ifTrue: [
		[
		(self coverAll:
			{89 to: 92}) error:
			([
			(self coverAll:
				{101 to: 104}) canNotChargeAnExpiredCreditCardErrorMessage ] valueCoveringAll:
				{106 to: 148}) ] valueCoveringAll:
			{94 to: 99} ]] valueCoveringAll:
		{79 to: 85}.! !
!Behavior method!
isExpiredOn: aDate
	^ [
	([
	(expiration
		cover: (25 to: 34)
		declaredAt: (25 to: 34)) start ] valueCoveringAll:
		{36 to: 40}) <
		([
		([
		(Month
			cover: (45 to: 49)
			declaredAt: (45 to: 49))
			month:
				([
				(aDate
					cover: (58 to: 62)
					declaredAt: (14 to: 18)) monthIndex ] valueCoveringAll:
					{64 to: 73})
			year:
				([
				(aDate
					cover: (81 to: 85)
					declaredAt: (14 to: 18)) yearNumber ] valueCoveringAll:
					{87 to: 96}) ] valueCoveringAll:
			{51 to: 56. 75 to: 79}) start ] valueCoveringAll:
			{99 to: 103}) ] valueCoveringAll:
		{42 to: 42}.! !
!Behavior method!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook with: aTransactionID
	(cart _ aCart
		cover: (138 to: 142)
		declaredAt: (23 to: 27))
		cover: (130 to: 133)
		declaredAt: (130 to: 133).
	(creditCard _ aCreditCard
		cover: (160 to: 170)
		declaredAt: (39 to: 49))
		cover: (146 to: 155)
		declaredAt: (146 to: 155).
	(merchantProcessor _ aMerchantProcessor
		cover: (195 to: 212)
		declaredAt: (61 to: 78))
		cover: (174 to: 190)
		declaredAt: (174 to: 190).
	(salesBook _ aSalesBook
		cover: (229 to: 238)
		declaredAt: (95 to: 104))
		cover: (216 to: 224)
		declaredAt: (216 to: 224).
	(transactionsIDs _ aTransactionID
		cover: (261 to: 274)
		declaredAt: (112 to: 125))
		cover: (242 to: 256)
		declaredAt: (242 to: 256).! !
!Behavior method!
checkOut
	| sale |
	[
	(self coverAll:
		{22 to: 25}) calculateTotal ] valueCoveringAll:
		{27 to: 40}.
	[
	(self coverAll:
		{44 to: 47}) debitTotal ] valueCoveringAll:
		{49 to: 58}.
	(sale _ [
	(self coverAll:
		{70 to: 73}) registerSale ] valueCoveringAll:
		{75 to: 86})
		cover: (62 to: 65)
		declaredAt: (14 to: 17).
	^ sale
		cover: (93 to: 96)
		declaredAt: (14 to: 17).! !
!Behavior method!
calculateTotal
	(total _ [
	(cart
		cover: (27 to: 30)
		declaredAt: (27 to: 30)) total ] valueCoveringAll:
		{32 to: 36})
		cover: (18 to: 22)
		declaredAt: (18 to: 22).! !
!Behavior method!
total
	^ [
	(items
		cover: (11 to: 15)
		declaredAt: (11 to: 15)) sum: [ :anItem |
		[
		(catalog
			cover: (34 to: 40)
			declaredAt: (34 to: 40)) at:
			(anItem
				cover: (46 to: 51)
				declaredAt: (25 to: 30)) ] valueCoveringAll:
			{42 to: 44} ]] valueCoveringAll:
		{17 to: 20}.! !
!Behavior method!
debitTotal
	[
	(merchantProcessor
		cover: (14 to: 30)
		declaredAt: (14 to: 30))
		debit:
			(total
				cover: (39 to: 43)
				declaredAt: (39 to: 43))
		from:
			(creditCard
				cover: (51 to: 60)
				declaredAt: (51 to: 60)) ] valueCoveringAll:
		{32 to: 37. 45 to: 49}.! !
!Behavior method!
registerSale
	| sale transactionID |
	(sale _ [
	(self coverAll:
		{48 to: 51}) createSale ] valueCoveringAll:
		{53 to: 62})
		cover: (40 to: 43)
		declaredAt: (18 to: 21).
	(transactionID _ [
	(transactionsIDs
		cover: (83 to: 97)
		declaredAt: (83 to: 97)) nextTransactionId ] valueCoveringAll:
		{99 to: 115})
		cover: (66 to: 78)
		declaredAt: (23 to: 35).
	[
	(salesBook
		cover: (122 to: 130)
		declaredAt: (122 to: 130))
		at:
			(transactionID
				cover: (136 to: 148)
				declaredAt: (23 to: 35))
		put:
			(sale
				cover: (155 to: 158)
				declaredAt: (18 to: 21)) ] valueCoveringAll:
		{132 to: 134. 150 to: 153}.
	^ transactionID
		cover: (165 to: 177)
		declaredAt: (23 to: 35).! !
!Behavior method!
createSale
	^ [
	(Sale
		cover: (16 to: 19)
		declaredAt: (16 to: 19))
		of:
			([
			(cart
				cover: (24 to: 27)
				declaredAt: (24 to: 27)) detail ] valueCoveringAll:
				{29 to: 34})
		with:
			(total
				cover: (42 to: 46)
				declaredAt: (42 to: 46)) ] valueCoveringAll:
		{21 to: 23. 36 to: 40}.! !
!Behavior method!
detail
	| detail |
	(detail _ [
	(OrderedDictionary
		cover: (33 to: 49)
		declaredAt: (33 to: 49)) new ] valueCoveringAll:
		{51 to: 53})
		cover: (23 to: 28)
		declaredAt: (11 to: 16).
	[
	(items
		cover: (58 to: 62)
		declaredAt: (58 to: 62)) do: [ :item |
		[
		(detail
			cover: (77 to: 82)
			declaredAt: (11 to: 16))
			at:
				(item
					cover: (88 to: 91)
					declaredAt: (71 to: 74))
			put:
				([
				(items
					cover: (99 to: 103)
					declaredAt: (58 to: 62)) occurrencesOf:
					(item
						cover: (120 to: 123)
						declaredAt: (71 to: 74)) ] valueCoveringAll:
					{105 to: 118}) ] valueCoveringAll:
			{84 to: 86. 93 to: 96} ]] valueCoveringAll:
		{64 to: 66}.
	^ detail
		cover: (135 to: 140)
		declaredAt: (11 to: 16).! !
!Behavior method!
of: someItems with: aTotal
	"should assert total is not negative or 0!!"
	^ [
	([
	(self coverAll:
		{76 to: 79}) new ] valueCoveringAll:
		{81 to: 83})
		initializeWith:
			(someItems
				cover: (101 to: 109)
				declaredAt: (5 to: 13))
		andTotal:
			(aTotal
				cover: (121 to: 126)
				declaredAt: (21 to: 26)) ] valueCoveringAll:
		{85 to: 99. 111 to: 119}.! !
!Behavior method!
initializeWith: someItems andTotal: aTotal
	(total _ aTotal
		cover: (55 to: 60)
		declaredAt: (37 to: 42))
		cover: (46 to: 50)
		declaredAt: (46 to: 50).
	(items _ someItems
		cover: (73 to: 81)
		declaredAt: (17 to: 25))
		cover: (64 to: 68)
		declaredAt: (64 to: 68).! !
!Behavior method!
nextTransactionId
	(transactionID _ [
	(transactionID
		cover: (21 to: 33)
		declaredAt: (21 to: 33)) +
		(1 coverAll:
			{53 to: 53}) ] valueCoveringAll:
		{52 to: 52})
		cover: (38 to: 50)
		declaredAt: (21 to: 33).
	^ [
	(transactionID
		cover: (60 to: 72)
		declaredAt: (21 to: 33)) -
		(1 coverAll:
			{74 to: 74}) ] valueCoveringAll:
		{73 to: 73}.! !
!Behavior method!
total
	^ total
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/11/2021 15:02:38'!
PASSED!
!Behavior method!
expiredCreditCard
	^ [
	(CreditCard
		cover: (23 to: 32)
		declaredAt: (23 to: 32)) expiringOn:
		([
		(Month
			cover: (47 to: 51)
			declaredAt: (47 to: 51))
			month:
				([
				(today
					cover: (60 to: 64)
					declaredAt: (60 to: 64)) monthIndex ] valueCoveringAll:
					{66 to: 75})
			year:
				([
				([
				(today
					cover: (83 to: 87)
					declaredAt: (60 to: 64)) yearNumber ] valueCoveringAll:
					{89 to: 98}) -
					(1 coverAll:
						{102 to: 102}) ] valueCoveringAll:
					{100 to: 100}) ] valueCoveringAll:
			{53 to: 58. 77 to: 81}) ] valueCoveringAll:
		{34 to: 44}.! !
!Behavior method!
canNotChargeAnExpiredCreditCardErrorMessage
	^ 'Can not charge an expired credit card' coverAll:
		{49 to: 87}.! !

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/11/2021 15:02:38'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/11/2021 15:02:38'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/11/2021 15:02:38'!
PASSED!
!Behavior method!
creditCardHasNoCreditErrorMessage
	^ 'Credit card has no credit' coverAll:
		{39 to: 65}.! !

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/11/2021 15:02:38'!
PASSED!
!Behavior method!
for: aTime
	^ [
	([
	(self coverAll:
		{15 to: 18}) new ] valueCoveringAll:
		{20 to: 22}) initializeWith:
		(aTime
			cover: (40 to: 44)
			declaredAt: (6 to: 10)) ] valueCoveringAll:
		{24 to: 38}.! !
!Behavior method!
initializeWith: aTime
	(now _ aTime
		cover: (32 to: 36)
		declaredAt: (17 to: 21))
		cover: (25 to: 27)
		declaredAt: (25 to: 27).! !
!Behavior method!
withUsers: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock
	^ [
	([
	(self coverAll:
		{144 to: 147}) new ] valueCoveringAll:
		{149 to: 151})
		initializeWith:
			(usersWithPasswords
				cover: (169 to: 186)
				declaredAt: (12 to: 29))
		withCatalog:
			(aCatalog
				cover: (201 to: 208)
				declaredAt: (44 to: 51))
		withSalesBook:
			(aSalesBook
				cover: (225 to: 234)
				declaredAt: (68 to: 77))
		withMerchantProcessor:
			(aMerchantProcessor
				cover: (259 to: 276)
				declaredAt: (102 to: 119))
		withClock:
			(aClock
				cover: (289 to: 294)
				declaredAt: (132 to: 137)) ] valueCoveringAll:
		{153 to: 167. 188 to: 199. 210 to: 223. 236 to: 257. 278 to: 287}.! !
!Behavior method!
initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock
	(validUsers _ usersWithPasswords
		cover: (163 to: 180)
		declaredAt: (17 to: 34))
		cover: (149 to: 158)
		declaredAt: (149 to: 158).
	(catalog _ aCatalog
		cover: (195 to: 202)
		declaredAt: (49 to: 56))
		cover: (184 to: 190)
		declaredAt: (184 to: 190).
	(salesBook _ aSalesBook
		cover: (219 to: 228)
		declaredAt: (73 to: 82))
		cover: (206 to: 214)
		declaredAt: (206 to: 214).
	(merchantProcessor _ aMerchantProcessor
		cover: (253 to: 270)
		declaredAt: (107 to: 124))
		cover: (232 to: 248)
		declaredAt: (232 to: 248).
	(cartSessions _ [
	(Dictionary
		cover: (291 to: 300)
		declaredAt: (291 to: 300)) new ] valueCoveringAll:
		{302 to: 304})
		cover: (275 to: 286)
		declaredAt: (275 to: 286).
	(cartIdCounter _ 0 coverAll:
		{325 to: 325})
		cover: (308 to: 320)
		declaredAt: (308 to: 320).
	(transactionID _ 1 coverAll:
		{348 to: 348})
		cover: (331 to: 343)
		declaredAt: (331 to: 343).
	(cartToClient _ [
	(Dictionary
		cover: (370 to: 379)
		declaredAt: (291 to: 300)) new ] valueCoveringAll:
		{381 to: 383})
		cover: (354 to: 365)
		declaredAt: (354 to: 365).
	(clientToCart _ [
	(Dictionary
		cover: (403 to: 412)
		declaredAt: (291 to: 300)) new ] valueCoveringAll:
		{414 to: 416})
		cover: (387 to: 398)
		declaredAt: (387 to: 398).
	(clientsTransactions _ [
	(Dictionary
		cover: (445 to: 454)
		declaredAt: (291 to: 300)) new ] valueCoveringAll:
		{456 to: 458})
		cover: (422 to: 440)
		declaredAt: (422 to: 440).
	(clock _ aClock
		cover: (471 to: 476)
		declaredAt: (137 to: 142))
		cover: (462 to: 466)
		declaredAt: (462 to: 466).! !
!Behavior method!
createCartFor: aUser with: aUserPassword
	| password cart |
	[
	(validUsers
		cover: (65 to: 74)
		declaredAt: (65 to: 74))
		at:
			(aUser
				cover: (80 to: 84)
				declaredAt: (16 to: 20))
		ifAbsent: [
			[
			(self coverAll:
				{96 to: 99}) error:
				([
				(self coverAll:
					{108 to: 111}) invalidUserOrPasswordErrorDescription ] valueCoveringAll:
					{113 to: 149}) ] valueCoveringAll:
				{101 to: 106} ]] valueCoveringAll:
		{76 to: 78. 86 to: 94}.
	(password _ [
	(validUsers
		cover: (168 to: 177)
		declaredAt: (65 to: 74)) at:
		(aUser
			cover: (183 to: 187)
			declaredAt: (16 to: 20)) ] valueCoveringAll:
		{179 to: 181})
		cover: (156 to: 163)
		declaredAt: (47 to: 54).
	[
	([
	(password
		cover: (195 to: 202)
		declaredAt: (47 to: 54)) =
		(aUserPassword
			cover: (206 to: 218)
			declaredAt: (28 to: 40)) ] valueCoveringAll:
		{204 to: 204}) ifFalse: [
		[
		(self coverAll:
			{231 to: 234}) error:
			([
			(self coverAll:
				{243 to: 246}) invalidUserOrPasswordErrorDescription ] valueCoveringAll:
				{248 to: 284}) ] valueCoveringAll:
			{236 to: 241} ]] valueCoveringAll:
		{222 to: 229}.
	(cartIdCounter _ [
	(cartIdCounter
		cover: (291 to: 303)
		declaredAt: (291 to: 303)) +
		(1 coverAll:
			{324 to: 324}) ] valueCoveringAll:
		{322 to: 322})
		cover: (308 to: 320)
		declaredAt: (291 to: 303).
	(cart _ [
	(CartSession
		cover: (338 to: 348)
		declaredAt: (338 to: 348))
		for:
			([
			(Cart
				cover: (356 to: 359)
				declaredAt: (356 to: 359)) acceptingItemsOf:
				(catalog
					cover: (379 to: 385)
					declaredAt: (379 to: 385)) ] valueCoveringAll:
				{361 to: 377})
		ownedBy:
			(aUser
				cover: (397 to: 401)
				declaredAt: (16 to: 20))
		with:
			(self coverAll:
				{409 to: 412}) ] valueCoveringAll:
		{350 to: 353. 388 to: 395. 403 to: 407})
		cover: (330 to: 333)
		declaredAt: (56 to: 59).
	[
	(cartSessions
		cover: (418 to: 429)
		declaredAt: (418 to: 429))
		at:
			(cartIdCounter
				cover: (435 to: 447)
				declaredAt: (291 to: 303))
		put:
			(cart
				cover: (453 to: 456)
				declaredAt: (56 to: 59)) ] valueCoveringAll:
		{431 to: 433. 449 to: 452}.
	[
	(cartToClient
		cover: (462 to: 473)
		declaredAt: (462 to: 473))
		at:
			(cartIdCounter
				cover: (479 to: 491)
				declaredAt: (291 to: 303))
		put:
			(aUser
				cover: (498 to: 502)
				declaredAt: (16 to: 20)) ] valueCoveringAll:
		{475 to: 477. 493 to: 496}.
	^ cartIdCounter
		cover: (509 to: 521)
		declaredAt: (291 to: 303).! !
!Behavior method!
invalidUserOrPasswordErrorDescription
	^ 'Invalid user or password' coverAll:
		{42 to: 67}.! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 15:02:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 15:02:38'!
PASSED!
!Behavior method!
for: aCart ownedBy: aCustomer with: aSystemFacade
	^ [
	([
	(self coverAll:
		{54 to: 57}) new ] valueCoveringAll:
		{59 to: 61})
		initializedWith:
			(aCart
				cover: (80 to: 84)
				declaredAt: (6 to: 10))
		ownedBy:
			(aCustomer
				cover: (95 to: 103)
				declaredAt: (21 to: 29))
		with:
			(aSystemFacade
				cover: (111 to: 123)
				declaredAt: (37 to: 49)) ] valueCoveringAll:
		{63 to: 78. 86 to: 93. 105 to: 109}.! !
!Behavior method!
initializedWith: aCart ownedBy: aCustomer with: aFacade
	(cart _ aCart
		cover: (67 to: 71)
		declaredAt: (18 to: 22))
		cover: (59 to: 62)
		declaredAt: (59 to: 62).
	(owner _ aCustomer
		cover: (84 to: 92)
		declaredAt: (33 to: 41))
		cover: (75 to: 79)
		declaredAt: (75 to: 79).
	(facade _ aFacade
		cover: (107 to: 113)
		declaredAt: (49 to: 55))
		cover: (97 to: 102)
		declaredAt: (97 to: 102).
	(lastTime _ [
	(aFacade
		cover: (129 to: 135)
		declaredAt: (49 to: 55)) now ] valueCoveringAll:
		{137 to: 139})
		cover: (117 to: 124)
		declaredAt: (117 to: 124).! !
!Behavior method!
now
	^ [
	(clock
		cover: (8 to: 12)
		declaredAt: (8 to: 12)) now ] valueCoveringAll:
		{14 to: 16}.! !
!Behavior method!
now
	^ now
		cover: (8 to: 10)
		declaredAt: (8 to: 10).! !
!Behavior method!
listCart: aCartId
	^ [
	([
	(cartSessions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) at:
		(aCartId
			cover: (43 to: 49)
			declaredAt: (11 to: 17)) ] valueCoveringAll:
		{39 to: 41}) getItems ] valueCoveringAll:
		{52 to: 59}.! !
!Behavior method!
getItems
	[
	([
	([
	(lastTime
		cover: (12 to: 19)
		declaredAt: (12 to: 19)) +
		([
		(facade
			cover: (23 to: 28)
			declaredAt: (23 to: 28)) sessionDuration ] valueCoveringAll:
			{30 to: 44}) ] valueCoveringAll:
		{21 to: 21}) <
		([
		(facade
			cover: (49 to: 54)
			declaredAt: (23 to: 28)) now ] valueCoveringAll:
			{56 to: 58}) ] valueCoveringAll:
		{47 to: 47}) ifTrue: [
		[
		(self coverAll:
			{70 to: 73}) signalCartSessionExpired ] valueCoveringAll:
			{75 to: 98} ]] valueCoveringAll:
		{60 to: 66}.
	^ [
	(cart
		cover: (106 to: 109)
		declaredAt: (106 to: 109)) getItems ] valueCoveringAll:
		{111 to: 118}.! !
!Behavior method!
sessionDuration
	^ [
	(30 coverAll:
		{21 to: 22}) minutes ] valueCoveringAll:
		{24 to: 30}.! !
!Behavior method!
getItems
	^ [
	(items
		cover: (14 to: 18)
		declaredAt: (14 to: 18)) copy ] valueCoveringAll:
		{20 to: 23}.! !

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 15:02:38'!
PASSED!
!Behavior method!
addToCart: cartId book: aBook bookQuantity: aQuantity
	| cart |
	(cart _ [
	(cartSessions
		cover: (76 to: 87)
		declaredAt: (76 to: 87))
		at:
			(cartId
				cover: (93 to: 98)
				declaredAt: (12 to: 17))
		ifAbsent: [ ^ [
			(self coverAll:
				{112 to: 115}) error:
				([
				(self coverAll:
					{124 to: 127}) invalidCartIdErrorMessage ] valueCoveringAll:
					{129 to: 153}) ] valueCoveringAll:
				{117 to: 122} ]] valueCoveringAll:
		{89 to: 91. 100 to: 108})
		cover: (68 to: 71)
		declaredAt: (61 to: 64).
	[
	(catalog
		cover: (160 to: 166)
		declaredAt: (160 to: 166))
		at:
			(aBook
				cover: (172 to: 176)
				declaredAt: (25 to: 29))
		ifAbsent: [ ^ [
			(self coverAll:
				{190 to: 193}) error:
				([
				(self coverAll:
					{202 to: 205}) invalidItemErrorMessage ] valueCoveringAll:
					{207 to: 229}) ] valueCoveringAll:
				{195 to: 200} ]] valueCoveringAll:
		{168 to: 170. 178 to: 186}.
	[
	(cart
		cover: (236 to: 239)
		declaredAt: (61 to: 64))
		add:
			(aQuantity
				cover: (246 to: 254)
				declaredAt: (45 to: 53))
		of:
			(aBook
				cover: (260 to: 264)
				declaredAt: (25 to: 29)) ] valueCoveringAll:
		{241 to: 244. 256 to: 258}.! !
!Behavior method!
invalidItemErrorMessage
	^ 'Invalid item' coverAll:
		{28 to: 41}.! !

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 15:02:38'!
PASSED!
!Behavior method!
invalidCartIdErrorMessage
	^ 'Invalid CartId' coverAll:
		{30 to: 45}.! !

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 15:02:38'!
PASSED!
!Behavior method!
add: anAmount of: aBook
	[
	([
	([
	(lastTime
		cover: (30 to: 37)
		declaredAt: (30 to: 37)) +
		([
		(facade
			cover: (41 to: 46)
			declaredAt: (41 to: 46)) sessionDuration ] valueCoveringAll:
			{48 to: 62}) ] valueCoveringAll:
		{39 to: 39}) <
		([
		(facade
			cover: (67 to: 72)
			declaredAt: (41 to: 46)) now ] valueCoveringAll:
			{74 to: 76}) ] valueCoveringAll:
		{65 to: 65}) ifTrue: [
		[
		(self coverAll:
			{88 to: 91}) signalCartSessionExpired ] valueCoveringAll:
			{93 to: 116} ]] valueCoveringAll:
		{78 to: 84}.
	^ [
	(cart
		cover: (124 to: 127)
		declaredAt: (124 to: 127))
		add:
			(anAmount
				cover: (134 to: 141)
				declaredAt: (6 to: 13))
		of:
			(aBook
				cover: (147 to: 151)
				declaredAt: (19 to: 23)) ] valueCoveringAll:
		{129 to: 132. 143 to: 145}.! !

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 15:02:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 15:02:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 15:02:38'!
PASSED!
!Behavior method!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	| cart cashier transactionId client clientTransactions |
	(cart _ [
	(cartSessions
		cover: (132 to: 143)
		declaredAt: (132 to: 143))
		at:
			(cartId
				cover: (149 to: 154)
				declaredAt: (11 to: 16))
		ifAbsent: [
			[
			(self coverAll:
				{166 to: 169}) error:
				([
				(self coverAll:
					{178 to: 181}) invalidCartIdErrorMessage ] valueCoveringAll:
					{183 to: 207}) ] valueCoveringAll:
				{171 to: 176} ]] valueCoveringAll:
		{145 to: 147. 156 to: 164})
		cover: (124 to: 127)
		declaredAt: (66 to: 69).
	[
	([
	(cart
		cover: (215 to: 218)
		declaredAt: (66 to: 69)) isEmpty ] valueCoveringAll:
		{220 to: 226}) ifTrue: [
		[
		(self coverAll:
			{237 to: 240}) error:
			([
			(self coverAll:
				{249 to: 252}) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
				{254 to: 282}) ] valueCoveringAll:
			{242 to: 247} ]] valueCoveringAll:
		{229 to: 235}.
	[
	(cart
		cover: (289 to: 292)
		declaredAt: (66 to: 69)) isNotExpired ] valueCoveringAll:
		{294 to: 305}.
	(cashier _ [
	(Cashier
		cover: (320 to: 326)
		declaredAt: (320 to: 326))
		toCheckout:
			(cart
				cover: (343 to: 346)
				declaredAt: (66 to: 69))
		charging:
			(aCreditCard
				cover: (361 to: 371)
				declaredAt: (40 to: 50))
		throught:
			(merchantProcessor
				cover: (387 to: 403)
				declaredAt: (387 to: 403))
		on:
			(aDate
				cover: (412 to: 416)
				declaredAt: (56 to: 60))
		registeringOn:
			(salesBook
				cover: (436 to: 444)
				declaredAt: (436 to: 444))
		with:
			(self coverAll:
				{454 to: 457}) ] valueCoveringAll:
		{331 to: 341. 351 to: 359. 377 to: 385. 408 to: 410. 421 to: 434. 448 to: 452})
		cover: (309 to: 315)
		declaredAt: (71 to: 77).
	(transactionId _ [
	(cashier
		cover: (481 to: 487)
		declaredAt: (71 to: 77)) checkOut ] valueCoveringAll:
		{489 to: 496})
		cover: (464 to: 476)
		declaredAt: (79 to: 91).
	(client _ [
	(cartToClient
		cover: (513 to: 524)
		declaredAt: (513 to: 524)) removeKey:
		(cartId
			cover: (537 to: 542)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{526 to: 535})
		cover: (503 to: 508)
		declaredAt: (93 to: 98).
	(clientTransactions _ [
	(clientsTransactions
		cover: (570 to: 588)
		declaredAt: (570 to: 588))
		at:
			(client
				cover: (594 to: 599)
				declaredAt: (93 to: 98))
		ifAbsent: [
			[
			(OrderedCollection
				cover: (613 to: 629)
				declaredAt: (613 to: 629)) new ] valueCoveringAll:
				{631 to: 633} ]] valueCoveringAll:
		{590 to: 592. 601 to: 609})
		cover: (548 to: 565)
		declaredAt: (100 to: 117).
	[
	(clientTransactions
		cover: (639 to: 656)
		declaredAt: (100 to: 117)) add:
		(transactionId
			cover: (663 to: 675)
			declaredAt: (79 to: 91)) ] valueCoveringAll:
		{658 to: 661}.
	[
	(clientsTransactions
		cover: (680 to: 698)
		declaredAt: (570 to: 588))
		at:
			(client
				cover: (704 to: 709)
				declaredAt: (93 to: 98))
		put:
			(clientTransactions
				cover: (716 to: 733)
				declaredAt: (100 to: 117)) ] valueCoveringAll:
		{700 to: 702. 711 to: 714}.
	^ transactionId
		cover: (741 to: 753)
		declaredAt: (79 to: 91).! !

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 15:02:38'!
PASSED!
!Behavior method!
isEmpty
	^ [
	(cart
		cover: (13 to: 16)
		declaredAt: (13 to: 16)) isEmpty ] valueCoveringAll:
		{18 to: 24}.! !
!Behavior method!
cartCanNotBeEmptyErrorMessage
	^ [
	(Cashier
		cover: (36 to: 42)
		declaredAt: (36 to: 42)) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
		{44 to: 72}.! !

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 15:02:39'!
PASSED!
!Behavior method!
isNotExpired
	[
	([
	([
	(lastTime
		cover: (17 to: 24)
		declaredAt: (17 to: 24)) +
		([
		(facade
			cover: (28 to: 33)
			declaredAt: (28 to: 33)) sessionDuration ] valueCoveringAll:
			{35 to: 49}) ] valueCoveringAll:
		{26 to: 26}) <
		([
		(facade
			cover: (54 to: 59)
			declaredAt: (28 to: 33)) now ] valueCoveringAll:
			{61 to: 63}) ] valueCoveringAll:
		{52 to: 52}) ifTrue: [
		[
		(self coverAll:
			{75 to: 78}) signalCartSessionExpired ] valueCoveringAll:
			{80 to: 103} ]] valueCoveringAll:
		{65 to: 71}.! !
!Behavior method!
canNotChargeAnExpiredCreditCardErrorMessage
	^ [
	(Cashier
		cover: (50 to: 56)
		declaredAt: (50 to: 56)) canNotChargeAnExpiredCreditCardErrorMessage ] valueCoveringAll:
		{58 to: 100}.! !

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 15:02:39'!
PASSED!
!Behavior method!
total
	^ [
	(cart
		cover: (11 to: 14)
		declaredAt: (11 to: 14)) total ] valueCoveringAll:
		{16 to: 20}.! !
!Behavior method!
detail
	^ [
	(cart
		cover: (12 to: 15)
		declaredAt: (12 to: 15)) detail ] valueCoveringAll:
		{17 to: 22}.! !
!Behavior method!
nextTransactionId
	(transactionID _ [
	(transactionID
		cover: (22 to: 34)
		declaredAt: (22 to: 34)) +
		(1 coverAll:
			{54 to: 54}) ] valueCoveringAll:
		{53 to: 53})
		cover: (39 to: 51)
		declaredAt: (22 to: 34).
	^ [
	(transactionID
		cover: (61 to: 73)
		declaredAt: (22 to: 34)) -
		(1 coverAll:
			{76 to: 76}) ] valueCoveringAll:
		{75 to: 75}.! !
!Behavior method!
listPurchases: aUser withPassword: aPassword
	| clientTransactions items total sales password |
	[
	(validUsers
		cover: (101 to: 110)
		declaredAt: (101 to: 110))
		at:
			(aUser
				cover: (116 to: 120)
				declaredAt: (16 to: 20))
		ifAbsent: [
			[
			(self coverAll:
				{132 to: 135}) error:
				([
				(self coverAll:
					{144 to: 147}) invalidUserOrPasswordErrorDescription ] valueCoveringAll:
					{149 to: 185}) ] valueCoveringAll:
				{137 to: 142} ]] valueCoveringAll:
		{112 to: 114. 122 to: 130}.
	(password _ [
	(validUsers
		cover: (204 to: 213)
		declaredAt: (101 to: 110)) at:
		(aUser
			cover: (219 to: 223)
			declaredAt: (16 to: 20)) ] valueCoveringAll:
		{215 to: 217})
		cover: (192 to: 199)
		declaredAt: (88 to: 95).
	[
	([
	(password
		cover: (231 to: 238)
		declaredAt: (88 to: 95)) =
		(aPassword
			cover: (242 to: 250)
			declaredAt: (36 to: 44)) ] valueCoveringAll:
		{240 to: 240}) ifFalse: [
		[
		(self coverAll:
			{263 to: 266}) error:
			([
			(self coverAll:
				{275 to: 278}) invalidUserOrPasswordErrorDescription ] valueCoveringAll:
				{280 to: 316}) ] valueCoveringAll:
			{268 to: 273} ]] valueCoveringAll:
		{254 to: 261}.
	(clientTransactions _ [
	(clientsTransactions
		cover: (345 to: 363)
		declaredAt: (345 to: 363))
		at:
			(aUser
				cover: (369 to: 373)
				declaredAt: (16 to: 20))
		ifAbsent: [
			[
			(OrderedCollection
				cover: (386 to: 402)
				declaredAt: (386 to: 402)) new ] valueCoveringAll:
				{404 to: 406} ]] valueCoveringAll:
		{365 to: 367. 375 to: 383})
		cover: (323 to: 340)
		declaredAt: (51 to: 68).
	(sales _ [
	(clientTransactions
		cover: (421 to: 438)
		declaredAt: (51 to: 68)) collect: [ :aTransactionID |
		[
		(salesBook
			cover: (468 to: 476)
			declaredAt: (468 to: 476)) at:
			(aTransactionID
				cover: (482 to: 495)
				declaredAt: (451 to: 464)) ] valueCoveringAll:
			{478 to: 480} ]] valueCoveringAll:
		{440 to: 447})
		cover: (412 to: 416)
		declaredAt: (82 to: 86).
	(total _ 0 coverAll:
		{512 to: 512})
		cover: (503 to: 507)
		declaredAt: (76 to: 80).
	(items _ [
	(Dictionary
		cover: (524 to: 533)
		declaredAt: (524 to: 533)) new ] valueCoveringAll:
		{535 to: 537})
		cover: (516 to: 520)
		declaredAt: (70 to: 74).
	[
	(sales
		cover: (543 to: 547)
		declaredAt: (82 to: 86)) do: [ :aSale |
		[
		([
		(aSale
			cover: (564 to: 568)
			declaredAt: (554 to: 558)) items ] valueCoveringAll:
			{570 to: 574}) associationsDo: [ :aSaleItem | | quantity |
			(quantity _ [
			(items
				cover: (634 to: 638)
				declaredAt: (70 to: 74))
				at:
					([
					(aSaleItem
						cover: (644 to: 652)
						declaredAt: (594 to: 602)) key ] valueCoveringAll:
						{654 to: 656})
				ifAbsent: [
					0 coverAll:
						{669 to: 669} ]] valueCoveringAll:
				{640 to: 642. 658 to: 666})
				cover: (622 to: 629)
				declaredAt: (608 to: 615).
			[
			(items
				cover: (676 to: 680)
				declaredAt: (70 to: 74))
				at:
					([
					(aSaleItem
						cover: (686 to: 694)
						declaredAt: (594 to: 602)) key ] valueCoveringAll:
						{696 to: 698})
				put:
					([
					(quantity
						cover: (705 to: 712)
						declaredAt: (608 to: 615)) +
						([
						(aSaleItem
							cover: (716 to: 724)
							declaredAt: (594 to: 602)) value ] valueCoveringAll:
							{726 to: 730}) ] valueCoveringAll:
						{714 to: 714}) ] valueCoveringAll:
				{682 to: 684. 700 to: 703} ]] valueCoveringAll:
			{576 to: 590}.
		(total _ [
		(total
			cover: (740 to: 744)
			declaredAt: (76 to: 80)) +
			([
			(aSale
				cover: (757 to: 761)
				declaredAt: (554 to: 558)) total ] valueCoveringAll:
				{763 to: 767}) ] valueCoveringAll:
			{755 to: 755})
			cover: (749 to: 753)
			declaredAt: (76 to: 80) ]] valueCoveringAll:
		{549 to: 551}.
	[
	(items
		cover: (775 to: 779)
		declaredAt: (70 to: 74))
		at:
			('Total' coverAll:
				{785 to: 791})
		put:
			(total
				cover: (798 to: 802)
				declaredAt: (76 to: 80)) ] valueCoveringAll:
		{781 to: 783. 793 to: 796}.
	^ items
		cover: (811 to: 815)
		declaredAt: (70 to: 74).! !
!Behavior method!
items
	^ items
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 15:02:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 15:02:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 15:02:39'!
PASSED!
!Behavior method!
advanceTime: aDuration
	(now _ [
	(now
		cover: (28 to: 30)
		declaredAt: (28 to: 30)) +
		(aDuration
			cover: (41 to: 49)
			declaredAt: (14 to: 22)) ] valueCoveringAll:
		{39 to: 39})
		cover: (35 to: 37)
		declaredAt: (28 to: 30).! !
!Behavior method!
signalCartSessionExpired
	[
	(self coverAll:
		{28 to: 31}) error:
		([
		(facade
			cover: (40 to: 45)
			declaredAt: (40 to: 45)) sessionHasExpiredErrorDescription ] valueCoveringAll:
			{47 to: 79}) ] valueCoveringAll:
		{33 to: 38}.! !
!Behavior method!
sessionHasExpiredErrorDescription
	^ 'The cart session is expired' coverAll:
		{38 to: 66}.! !
!Behavior method!
revertTime: aDuration
	(now _ [
	(now
		cover: (25 to: 27)
		declaredAt: (25 to: 27)) +
		([
		(aDuration
			cover: (38 to: 46)
			declaredAt: (13 to: 21)) negated ] valueCoveringAll:
			{48 to: 54}) ] valueCoveringAll:
		{36 to: 36})
		cover: (32 to: 34)
		declaredAt: (25 to: 27).! !

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:02:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:02:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:02:39'!
PASSED!

!methodRemoval: Sale #isFrom: stamp: 'MS 11/11/2021 15:03:02'!
isFrom: aUser
	
	^ aUser = customer.!

!methodRemoval: Sale #itemsBought stamp: 'MS 11/11/2021 15:03:04'!
itemsBought
	
	^ itemsBought!

Object subclass: #Sale
	instanceVariableNames: 'total customer items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: 'TusLibros' stamp: 'MS 11/11/2021 15:03:11'!
Object subclass: #Sale
	instanceVariableNames: 'total customer items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #Sale
	instanceVariableNames: 'total items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: 'TusLibros' stamp: 'MS 11/11/2021 15:03:20'!
Object subclass: #Sale
	instanceVariableNames: 'total items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Behavior method!
initialize
	(today _ [
	(DateAndTime
		cover: (23 to: 33)
		declaredAt: (23 to: 33)) now ] valueCoveringAll:
		{35 to: 37})
		cover: (14 to: 18)
		declaredAt: (14 to: 18).
	(transactionID _ 1 coverAll:
		{58 to: 58})
		cover: (41 to: 53)
		declaredAt: (41 to: 53).! !
!Behavior method!
createCart
	^ [
	(Cart
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) acceptingItemsOf:
		([
		(self coverAll:
			{39 to: 42}) defaultCatalog ] valueCoveringAll:
			{44 to: 57}) ] valueCoveringAll:
		{21 to: 37}.! !
!Behavior method!
defaultCatalog
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(Dictionary
		cover: (21 to: 30)
		declaredAt: (21 to: 30)) new ] valueCoveringAll:
		{32 to: 34}.
	[
	cascadeReceiver
		at: self itemSellByTheStore
		put: self itemSellByTheStorePrice ] valueCoveringAll:
		{38 to: 98}.
	[
	cascadeReceiver
		at: self anotherItemSellByTheStore
		put: self anotherItemSellByTheStorePrice ] valueCoveringAll:
		{103 to: 177}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{182 to: 189} ] value.! !
!Behavior method!
itemSellByTheStore
	^ 'validBook' coverAll:
		{25 to: 35}.! !
!Behavior method!
itemSellByTheStorePrice
	^ 10 coverAll:
		{29 to: 30}.! !
!Behavior method!
anotherItemSellByTheStore
	^ 'validBook2' coverAll:
		{32 to: 43}.! !
!Behavior method!
anotherItemSellByTheStorePrice
	^ 20 coverAll:
		{37 to: 38}.! !
!Behavior method!
acceptingItemsOf: aCatalog
	^ [
	([
	(self coverAll:
		{31 to: 34}) new ] valueCoveringAll:
		{36 to: 38}) initializeAcceptingItemsOf:
		(aCatalog
			cover: (68 to: 75)
			declaredAt: (19 to: 26)) ] valueCoveringAll:
		{40 to: 66}.! !
!Behavior method!
initializeAcceptingItemsOf: aCatalog
	(catalog _ aCatalog
		cover: (51 to: 58)
		declaredAt: (29 to: 36))
		cover: (40 to: 46)
		declaredAt: (40 to: 46).
	(items _ [
	(Bag
		cover: (71 to: 73)
		declaredAt: (71 to: 73)) new ] valueCoveringAll:
		{75 to: 77})
		cover: (62 to: 66)
		declaredAt: (62 to: 66).! !
!Behavior method!
isEmpty
	^ [
	(items
		cover: (13 to: 17)
		declaredAt: (13 to: 17)) isEmpty ] valueCoveringAll:
		{19 to: 25}.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/11/2021 15:03:25'!
PASSED!
!Behavior method!
itemNotSellByTheStore
	^ 'invalidBook' coverAll:
		{27 to: 39}.! !
!Behavior method!
add: anItem
	^ [
	(self coverAll:
		{17 to: 20})
		add:
			(1 coverAll:
				{27 to: 27})
		of:
			(anItem
				cover: (33 to: 38)
				declaredAt: (6 to: 11)) ] valueCoveringAll:
		{22 to: 25. 29 to: 31}.! !
!Behavior method!
add: aQuantity of: anItem
	[
	(self coverAll:
		{29 to: 32}) assertIsValidQuantity:
		(aQuantity
			cover: (57 to: 65)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{34 to: 55}.
	[
	(self coverAll:
		{69 to: 72}) assertIsValidItem:
		(anItem
			cover: (93 to: 98)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{74 to: 91}.
	[
	(1 coverAll:
		{103 to: 103})
		to:
			(aQuantity
				cover: (109 to: 117)
				declaredAt: (6 to: 14))
		do: [ :aNumber |
			[
			(items
				cover: (136 to: 140)
				declaredAt: (136 to: 140)) add:
				(anItem
					cover: (147 to: 152)
					declaredAt: (20 to: 25)) ] valueCoveringAll:
				{142 to: 145} ]] valueCoveringAll:
		{105 to: 107. 119 to: 121}.! !
!Behavior method!
assertIsValidQuantity: aQuantity
	[
	([
	(aQuantity
		cover: (36 to: 44)
		declaredAt: (24 to: 32)) strictlyPositive ] valueCoveringAll:
		{46 to: 61}) ifFalse: [
		[
		(self coverAll:
			{74 to: 77}) error:
			([
			(self coverAll:
				{86 to: 89}) invalidQuantityErrorMessage ] valueCoveringAll:
				{91 to: 117}) ] valueCoveringAll:
			{79 to: 84} ]] valueCoveringAll:
		{63 to: 70}.! !
!Behavior method!
assertIsValidItem: anItem
	[
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includesKey:
		(anItem
			cover: (51 to: 56)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			(self coverAll:
				{82 to: 85}) invalidItemErrorMessage ] valueCoveringAll:
				{87 to: 109}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{59 to: 66}.! !
!Behavior method!
invalidItemErrorMessage
	^ 'Item is not in catalog' coverAll:
		{29 to: 52}.! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/11/2021 15:03:25'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/11/2021 15:03:25'!
PASSED!
!Behavior method!
invalidQuantityErrorMessage
	^ 'Invalid number of items' coverAll:
		{33 to: 57}.! !

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/11/2021 15:03:25'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/11/2021 15:03:25'!
PASSED!
!Behavior method!
includes: anItem
	^ [
	(items
		cover: (21 to: 25)
		declaredAt: (21 to: 25)) includes:
		(anItem
			cover: (37 to: 42)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{27 to: 35}.! !

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/11/2021 15:03:25'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/11/2021 15:03:25'!
PASSED!
!Behavior method!
occurrencesOf: anItem
	^ [
	(items
		cover: (26 to: 30)
		declaredAt: (26 to: 30)) occurrencesOf:
		(anItem
			cover: (47 to: 52)
			declaredAt: (16 to: 21)) ] valueCoveringAll:
		{32 to: 45}.! !

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/11/2021 15:03:25'!
PASSED!
!Behavior method!
notExpiredCreditCard
	^ [
	(CreditCard
		cover: (26 to: 35)
		declaredAt: (26 to: 35)) expiringOn:
		([
		(Month
			cover: (50 to: 54)
			declaredAt: (50 to: 54))
			month:
				([
				(today
					cover: (63 to: 67)
					declaredAt: (63 to: 67)) monthIndex ] valueCoveringAll:
					{69 to: 78})
			year:
				([
				([
				(today
					cover: (86 to: 90)
					declaredAt: (63 to: 67)) yearNumber ] valueCoveringAll:
					{92 to: 101}) +
					(1 coverAll:
						{105 to: 105}) ] valueCoveringAll:
					{103 to: 103}) ] valueCoveringAll:
			{56 to: 61. 80 to: 84}) ] valueCoveringAll:
		{37 to: 47}.! !
!Behavior method!
expiringOn: aMonth
	^ [
	([
	(self coverAll:
		{25 to: 28}) new ] valueCoveringAll:
		{30 to: 32}) initializeExpiringOn:
		(aMonth
			cover: (56 to: 61)
			declaredAt: (13 to: 18)) ] valueCoveringAll:
		{34 to: 54}.! !
!Behavior method!
initializeExpiringOn: aMonth
	(expiration _ aMonth
		cover: (48 to: 53)
		declaredAt: (23 to: 28))
		cover: (34 to: 43)
		declaredAt: (34 to: 43).! !
!Behavior method!
today
	^ today
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !
!Behavior method!
transactionID
	^ self coverAll:
		{18 to: 21}.! !
!Behavior method!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook with: aTransactionId
	[
	(self coverAll:
		{131 to: 134}) assertIsNotEmpty:
		(aCart
			cover: (154 to: 158)
			declaredAt: (13 to: 17)) ] valueCoveringAll:
		{136 to: 152}.
	[
	(self coverAll:
		{162 to: 165})
		assertIsNotExpired:
			(aCreditCard
				cover: (187 to: 197)
				declaredAt: (29 to: 39))
		on:
			(aDate
				cover: (203 to: 207)
				declaredAt: (74 to: 78)) ] valueCoveringAll:
		{167 to: 185. 199 to: 201}.
	^ [
	([
	(self coverAll:
		{214 to: 217}) new ] valueCoveringAll:
		{219 to: 221})
		initializeToCheckout:
			(aCart
				cover: (245 to: 249)
				declaredAt: (13 to: 17))
		charging:
			(aCreditCard
				cover: (261 to: 271)
				declaredAt: (29 to: 39))
		throught:
			(aMerchantProcessor
				cover: (283 to: 300)
				declaredAt: (51 to: 68))
		registeringOn:
			(aSalesBook
				cover: (317 to: 326)
				declaredAt: (95 to: 104))
		with:
			(aTransactionId
				cover: (334 to: 347)
				declaredAt: (112 to: 125)) ] valueCoveringAll:
		{223 to: 243. 251 to: 259. 273 to: 281. 302 to: 315. 328 to: 332}.! !
!Behavior method!
assertIsNotEmpty: aCart
	[
	([
	(aCart
		cover: (29 to: 33)
		declaredAt: (19 to: 23)) isEmpty ] valueCoveringAll:
		{35 to: 41}) ifTrue: [
		[
		(self coverAll:
			{52 to: 55}) error:
			([
			(self coverAll:
				{64 to: 67}) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
				{69 to: 97}) ] valueCoveringAll:
			{57 to: 62} ]] valueCoveringAll:
		{43 to: 49}.! !
!Behavior method!
cartCanNotBeEmptyErrorMessage
	^ 'Can not check out an empty cart' coverAll:
		{35 to: 67}.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/11/2021 15:03:25'!
PASSED!
!Behavior method!
assertIsNotExpired: aCreditCard on: aDate
	[
	([
	(aCreditCard
		cover: (47 to: 57)
		declaredAt: (21 to: 31)) isExpiredOn:
		(aDate
			cover: (72 to: 76)
			declaredAt: (37 to: 41)) ] valueCoveringAll:
		{59 to: 70}) ifTrue: [
		[
		(self coverAll:
			{89 to: 92}) error:
			([
			(self coverAll:
				{101 to: 104}) canNotChargeAnExpiredCreditCardErrorMessage ] valueCoveringAll:
				{106 to: 148}) ] valueCoveringAll:
			{94 to: 99} ]] valueCoveringAll:
		{79 to: 85}.! !
!Behavior method!
isExpiredOn: aDate
	^ [
	([
	(expiration
		cover: (25 to: 34)
		declaredAt: (25 to: 34)) start ] valueCoveringAll:
		{36 to: 40}) <
		([
		([
		(Month
			cover: (45 to: 49)
			declaredAt: (45 to: 49))
			month:
				([
				(aDate
					cover: (58 to: 62)
					declaredAt: (14 to: 18)) monthIndex ] valueCoveringAll:
					{64 to: 73})
			year:
				([
				(aDate
					cover: (81 to: 85)
					declaredAt: (14 to: 18)) yearNumber ] valueCoveringAll:
					{87 to: 96}) ] valueCoveringAll:
			{51 to: 56. 75 to: 79}) start ] valueCoveringAll:
			{99 to: 103}) ] valueCoveringAll:
		{42 to: 42}.! !
!Behavior method!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook with: aTransactionID
	(cart _ aCart
		cover: (138 to: 142)
		declaredAt: (23 to: 27))
		cover: (130 to: 133)
		declaredAt: (130 to: 133).
	(creditCard _ aCreditCard
		cover: (160 to: 170)
		declaredAt: (39 to: 49))
		cover: (146 to: 155)
		declaredAt: (146 to: 155).
	(merchantProcessor _ aMerchantProcessor
		cover: (195 to: 212)
		declaredAt: (61 to: 78))
		cover: (174 to: 190)
		declaredAt: (174 to: 190).
	(salesBook _ aSalesBook
		cover: (229 to: 238)
		declaredAt: (95 to: 104))
		cover: (216 to: 224)
		declaredAt: (216 to: 224).
	(transactionsIDs _ aTransactionID
		cover: (261 to: 274)
		declaredAt: (112 to: 125))
		cover: (242 to: 256)
		declaredAt: (242 to: 256).! !
!Behavior method!
checkOut
	| sale |
	[
	(self coverAll:
		{22 to: 25}) calculateTotal ] valueCoveringAll:
		{27 to: 40}.
	[
	(self coverAll:
		{44 to: 47}) debitTotal ] valueCoveringAll:
		{49 to: 58}.
	(sale _ [
	(self coverAll:
		{70 to: 73}) registerSale ] valueCoveringAll:
		{75 to: 86})
		cover: (62 to: 65)
		declaredAt: (14 to: 17).
	^ sale
		cover: (93 to: 96)
		declaredAt: (14 to: 17).! !
!Behavior method!
calculateTotal
	(total _ [
	(cart
		cover: (27 to: 30)
		declaredAt: (27 to: 30)) total ] valueCoveringAll:
		{32 to: 36})
		cover: (18 to: 22)
		declaredAt: (18 to: 22).! !
!Behavior method!
total
	^ [
	(items
		cover: (11 to: 15)
		declaredAt: (11 to: 15)) sum: [ :anItem |
		[
		(catalog
			cover: (34 to: 40)
			declaredAt: (34 to: 40)) at:
			(anItem
				cover: (46 to: 51)
				declaredAt: (25 to: 30)) ] valueCoveringAll:
			{42 to: 44} ]] valueCoveringAll:
		{17 to: 20}.! !
!Behavior method!
debitTotal
	[
	(merchantProcessor
		cover: (14 to: 30)
		declaredAt: (14 to: 30))
		debit:
			(total
				cover: (39 to: 43)
				declaredAt: (39 to: 43))
		from:
			(creditCard
				cover: (51 to: 60)
				declaredAt: (51 to: 60)) ] valueCoveringAll:
		{32 to: 37. 45 to: 49}.! !
!Behavior method!
registerSale
	| sale transactionID |
	(sale _ [
	(self coverAll:
		{48 to: 51}) createSale ] valueCoveringAll:
		{53 to: 62})
		cover: (40 to: 43)
		declaredAt: (18 to: 21).
	(transactionID _ [
	(transactionsIDs
		cover: (83 to: 97)
		declaredAt: (83 to: 97)) nextTransactionId ] valueCoveringAll:
		{99 to: 115})
		cover: (66 to: 78)
		declaredAt: (23 to: 35).
	[
	(salesBook
		cover: (122 to: 130)
		declaredAt: (122 to: 130))
		at:
			(transactionID
				cover: (136 to: 148)
				declaredAt: (23 to: 35))
		put:
			(sale
				cover: (155 to: 158)
				declaredAt: (18 to: 21)) ] valueCoveringAll:
		{132 to: 134. 150 to: 153}.
	^ transactionID
		cover: (165 to: 177)
		declaredAt: (23 to: 35).! !
!Behavior method!
createSale
	^ [
	(Sale
		cover: (16 to: 19)
		declaredAt: (16 to: 19))
		of:
			([
			(cart
				cover: (24 to: 27)
				declaredAt: (24 to: 27)) detail ] valueCoveringAll:
				{29 to: 34})
		with:
			(total
				cover: (42 to: 46)
				declaredAt: (42 to: 46)) ] valueCoveringAll:
		{21 to: 23. 36 to: 40}.! !
!Behavior method!
detail
	| detail |
	(detail _ [
	(OrderedDictionary
		cover: (33 to: 49)
		declaredAt: (33 to: 49)) new ] valueCoveringAll:
		{51 to: 53})
		cover: (23 to: 28)
		declaredAt: (11 to: 16).
	[
	(items
		cover: (58 to: 62)
		declaredAt: (58 to: 62)) do: [ :item |
		[
		(detail
			cover: (77 to: 82)
			declaredAt: (11 to: 16))
			at:
				(item
					cover: (88 to: 91)
					declaredAt: (71 to: 74))
			put:
				([
				(items
					cover: (99 to: 103)
					declaredAt: (58 to: 62)) occurrencesOf:
					(item
						cover: (120 to: 123)
						declaredAt: (71 to: 74)) ] valueCoveringAll:
					{105 to: 118}) ] valueCoveringAll:
			{84 to: 86. 93 to: 96} ]] valueCoveringAll:
		{64 to: 66}.
	^ detail
		cover: (135 to: 140)
		declaredAt: (11 to: 16).! !
!Behavior method!
of: someItems with: aTotal
	"should assert total is not negative or 0!!"
	^ [
	([
	(self coverAll:
		{76 to: 79}) new ] valueCoveringAll:
		{81 to: 83})
		initializeWith:
			(someItems
				cover: (101 to: 109)
				declaredAt: (5 to: 13))
		andTotal:
			(aTotal
				cover: (121 to: 126)
				declaredAt: (21 to: 26)) ] valueCoveringAll:
		{85 to: 99. 111 to: 119}.! !
!Behavior method!
initializeWith: someItems andTotal: aTotal
	(total _ aTotal
		cover: (55 to: 60)
		declaredAt: (37 to: 42))
		cover: (46 to: 50)
		declaredAt: (46 to: 50).
	(items _ someItems
		cover: (73 to: 81)
		declaredAt: (17 to: 25))
		cover: (64 to: 68)
		declaredAt: (64 to: 68).! !
!Behavior method!
nextTransactionId
	(transactionID _ [
	(transactionID
		cover: (21 to: 33)
		declaredAt: (21 to: 33)) +
		(1 coverAll:
			{53 to: 53}) ] valueCoveringAll:
		{52 to: 52})
		cover: (38 to: 50)
		declaredAt: (21 to: 33).
	^ [
	(transactionID
		cover: (60 to: 72)
		declaredAt: (21 to: 33)) -
		(1 coverAll:
			{74 to: 74}) ] valueCoveringAll:
		{73 to: 73}.! !
!Behavior method!
total
	^ total
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/11/2021 15:03:25'!
PASSED!
!Behavior method!
expiredCreditCard
	^ [
	(CreditCard
		cover: (23 to: 32)
		declaredAt: (23 to: 32)) expiringOn:
		([
		(Month
			cover: (47 to: 51)
			declaredAt: (47 to: 51))
			month:
				([
				(today
					cover: (60 to: 64)
					declaredAt: (60 to: 64)) monthIndex ] valueCoveringAll:
					{66 to: 75})
			year:
				([
				([
				(today
					cover: (83 to: 87)
					declaredAt: (60 to: 64)) yearNumber ] valueCoveringAll:
					{89 to: 98}) -
					(1 coverAll:
						{102 to: 102}) ] valueCoveringAll:
					{100 to: 100}) ] valueCoveringAll:
			{53 to: 58. 77 to: 81}) ] valueCoveringAll:
		{34 to: 44}.! !
!Behavior method!
canNotChargeAnExpiredCreditCardErrorMessage
	^ 'Can not charge an expired credit card' coverAll:
		{49 to: 87}.! !

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/11/2021 15:03:25'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/11/2021 15:03:25'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/11/2021 15:03:25'!
PASSED!
!Behavior method!
creditCardHasNoCreditErrorMessage
	^ 'Credit card has no credit' coverAll:
		{39 to: 65}.! !

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/11/2021 15:03:25'!
PASSED!
!Behavior method!
for: aTime
	^ [
	([
	(self coverAll:
		{15 to: 18}) new ] valueCoveringAll:
		{20 to: 22}) initializeWith:
		(aTime
			cover: (40 to: 44)
			declaredAt: (6 to: 10)) ] valueCoveringAll:
		{24 to: 38}.! !
!Behavior method!
initializeWith: aTime
	(now _ aTime
		cover: (32 to: 36)
		declaredAt: (17 to: 21))
		cover: (25 to: 27)
		declaredAt: (25 to: 27).! !
!Behavior method!
withUsers: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock
	^ [
	([
	(self coverAll:
		{144 to: 147}) new ] valueCoveringAll:
		{149 to: 151})
		initializeWith:
			(usersWithPasswords
				cover: (169 to: 186)
				declaredAt: (12 to: 29))
		withCatalog:
			(aCatalog
				cover: (201 to: 208)
				declaredAt: (44 to: 51))
		withSalesBook:
			(aSalesBook
				cover: (225 to: 234)
				declaredAt: (68 to: 77))
		withMerchantProcessor:
			(aMerchantProcessor
				cover: (259 to: 276)
				declaredAt: (102 to: 119))
		withClock:
			(aClock
				cover: (289 to: 294)
				declaredAt: (132 to: 137)) ] valueCoveringAll:
		{153 to: 167. 188 to: 199. 210 to: 223. 236 to: 257. 278 to: 287}.! !
!Behavior method!
initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock
	(validUsers _ usersWithPasswords
		cover: (163 to: 180)
		declaredAt: (17 to: 34))
		cover: (149 to: 158)
		declaredAt: (149 to: 158).
	(catalog _ aCatalog
		cover: (195 to: 202)
		declaredAt: (49 to: 56))
		cover: (184 to: 190)
		declaredAt: (184 to: 190).
	(salesBook _ aSalesBook
		cover: (219 to: 228)
		declaredAt: (73 to: 82))
		cover: (206 to: 214)
		declaredAt: (206 to: 214).
	(merchantProcessor _ aMerchantProcessor
		cover: (253 to: 270)
		declaredAt: (107 to: 124))
		cover: (232 to: 248)
		declaredAt: (232 to: 248).
	(cartSessions _ [
	(Dictionary
		cover: (291 to: 300)
		declaredAt: (291 to: 300)) new ] valueCoveringAll:
		{302 to: 304})
		cover: (275 to: 286)
		declaredAt: (275 to: 286).
	(cartIdCounter _ 0 coverAll:
		{325 to: 325})
		cover: (308 to: 320)
		declaredAt: (308 to: 320).
	(transactionID _ 1 coverAll:
		{348 to: 348})
		cover: (331 to: 343)
		declaredAt: (331 to: 343).
	(cartToClient _ [
	(Dictionary
		cover: (370 to: 379)
		declaredAt: (291 to: 300)) new ] valueCoveringAll:
		{381 to: 383})
		cover: (354 to: 365)
		declaredAt: (354 to: 365).
	(clientToCart _ [
	(Dictionary
		cover: (403 to: 412)
		declaredAt: (291 to: 300)) new ] valueCoveringAll:
		{414 to: 416})
		cover: (387 to: 398)
		declaredAt: (387 to: 398).
	(clientsTransactions _ [
	(Dictionary
		cover: (445 to: 454)
		declaredAt: (291 to: 300)) new ] valueCoveringAll:
		{456 to: 458})
		cover: (422 to: 440)
		declaredAt: (422 to: 440).
	(clock _ aClock
		cover: (471 to: 476)
		declaredAt: (137 to: 142))
		cover: (462 to: 466)
		declaredAt: (462 to: 466).! !
!Behavior method!
createCartFor: aUser with: aUserPassword
	| password cart |
	[
	(validUsers
		cover: (65 to: 74)
		declaredAt: (65 to: 74))
		at:
			(aUser
				cover: (80 to: 84)
				declaredAt: (16 to: 20))
		ifAbsent: [
			[
			(self coverAll:
				{96 to: 99}) error:
				([
				(self coverAll:
					{108 to: 111}) invalidUserOrPasswordErrorDescription ] valueCoveringAll:
					{113 to: 149}) ] valueCoveringAll:
				{101 to: 106} ]] valueCoveringAll:
		{76 to: 78. 86 to: 94}.
	(password _ [
	(validUsers
		cover: (168 to: 177)
		declaredAt: (65 to: 74)) at:
		(aUser
			cover: (183 to: 187)
			declaredAt: (16 to: 20)) ] valueCoveringAll:
		{179 to: 181})
		cover: (156 to: 163)
		declaredAt: (47 to: 54).
	[
	([
	(password
		cover: (195 to: 202)
		declaredAt: (47 to: 54)) =
		(aUserPassword
			cover: (206 to: 218)
			declaredAt: (28 to: 40)) ] valueCoveringAll:
		{204 to: 204}) ifFalse: [
		[
		(self coverAll:
			{231 to: 234}) error:
			([
			(self coverAll:
				{243 to: 246}) invalidUserOrPasswordErrorDescription ] valueCoveringAll:
				{248 to: 284}) ] valueCoveringAll:
			{236 to: 241} ]] valueCoveringAll:
		{222 to: 229}.
	(cartIdCounter _ [
	(cartIdCounter
		cover: (291 to: 303)
		declaredAt: (291 to: 303)) +
		(1 coverAll:
			{324 to: 324}) ] valueCoveringAll:
		{322 to: 322})
		cover: (308 to: 320)
		declaredAt: (291 to: 303).
	(cart _ [
	(CartSession
		cover: (338 to: 348)
		declaredAt: (338 to: 348))
		for:
			([
			(Cart
				cover: (356 to: 359)
				declaredAt: (356 to: 359)) acceptingItemsOf:
				(catalog
					cover: (379 to: 385)
					declaredAt: (379 to: 385)) ] valueCoveringAll:
				{361 to: 377})
		ownedBy:
			(aUser
				cover: (397 to: 401)
				declaredAt: (16 to: 20))
		with:
			(self coverAll:
				{409 to: 412}) ] valueCoveringAll:
		{350 to: 353. 388 to: 395. 403 to: 407})
		cover: (330 to: 333)
		declaredAt: (56 to: 59).
	[
	(cartSessions
		cover: (418 to: 429)
		declaredAt: (418 to: 429))
		at:
			(cartIdCounter
				cover: (435 to: 447)
				declaredAt: (291 to: 303))
		put:
			(cart
				cover: (453 to: 456)
				declaredAt: (56 to: 59)) ] valueCoveringAll:
		{431 to: 433. 449 to: 452}.
	[
	(cartToClient
		cover: (462 to: 473)
		declaredAt: (462 to: 473))
		at:
			(cartIdCounter
				cover: (479 to: 491)
				declaredAt: (291 to: 303))
		put:
			(aUser
				cover: (498 to: 502)
				declaredAt: (16 to: 20)) ] valueCoveringAll:
		{475 to: 477. 493 to: 496}.
	^ cartIdCounter
		cover: (509 to: 521)
		declaredAt: (291 to: 303).! !
!Behavior method!
invalidUserOrPasswordErrorDescription
	^ 'Invalid user or password' coverAll:
		{42 to: 67}.! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 15:03:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 15:03:25'!
PASSED!
!Behavior method!
for: aCart ownedBy: aCustomer with: aSystemFacade
	^ [
	([
	(self coverAll:
		{54 to: 57}) new ] valueCoveringAll:
		{59 to: 61})
		initializedWith:
			(aCart
				cover: (80 to: 84)
				declaredAt: (6 to: 10))
		ownedBy:
			(aCustomer
				cover: (95 to: 103)
				declaredAt: (21 to: 29))
		with:
			(aSystemFacade
				cover: (111 to: 123)
				declaredAt: (37 to: 49)) ] valueCoveringAll:
		{63 to: 78. 86 to: 93. 105 to: 109}.! !
!Behavior method!
initializedWith: aCart ownedBy: aCustomer with: aFacade
	(cart _ aCart
		cover: (67 to: 71)
		declaredAt: (18 to: 22))
		cover: (59 to: 62)
		declaredAt: (59 to: 62).
	(owner _ aCustomer
		cover: (84 to: 92)
		declaredAt: (33 to: 41))
		cover: (75 to: 79)
		declaredAt: (75 to: 79).
	(facade _ aFacade
		cover: (107 to: 113)
		declaredAt: (49 to: 55))
		cover: (97 to: 102)
		declaredAt: (97 to: 102).
	(lastTime _ [
	(aFacade
		cover: (129 to: 135)
		declaredAt: (49 to: 55)) now ] valueCoveringAll:
		{137 to: 139})
		cover: (117 to: 124)
		declaredAt: (117 to: 124).! !
!Behavior method!
now
	^ [
	(clock
		cover: (8 to: 12)
		declaredAt: (8 to: 12)) now ] valueCoveringAll:
		{14 to: 16}.! !
!Behavior method!
now
	^ now
		cover: (8 to: 10)
		declaredAt: (8 to: 10).! !
!Behavior method!
listCart: aCartId
	^ [
	([
	(cartSessions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) at:
		(aCartId
			cover: (43 to: 49)
			declaredAt: (11 to: 17)) ] valueCoveringAll:
		{39 to: 41}) getItems ] valueCoveringAll:
		{52 to: 59}.! !
!Behavior method!
getItems
	[
	([
	([
	(lastTime
		cover: (12 to: 19)
		declaredAt: (12 to: 19)) +
		([
		(facade
			cover: (23 to: 28)
			declaredAt: (23 to: 28)) sessionDuration ] valueCoveringAll:
			{30 to: 44}) ] valueCoveringAll:
		{21 to: 21}) <
		([
		(facade
			cover: (49 to: 54)
			declaredAt: (23 to: 28)) now ] valueCoveringAll:
			{56 to: 58}) ] valueCoveringAll:
		{47 to: 47}) ifTrue: [
		[
		(self coverAll:
			{70 to: 73}) signalCartSessionExpired ] valueCoveringAll:
			{75 to: 98} ]] valueCoveringAll:
		{60 to: 66}.
	^ [
	(cart
		cover: (106 to: 109)
		declaredAt: (106 to: 109)) getItems ] valueCoveringAll:
		{111 to: 118}.! !
!Behavior method!
sessionDuration
	^ [
	(30 coverAll:
		{21 to: 22}) minutes ] valueCoveringAll:
		{24 to: 30}.! !
!Behavior method!
getItems
	^ [
	(items
		cover: (14 to: 18)
		declaredAt: (14 to: 18)) copy ] valueCoveringAll:
		{20 to: 23}.! !

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 15:03:25'!
PASSED!
!Behavior method!
addToCart: cartId book: aBook bookQuantity: aQuantity
	| cart |
	(cart _ [
	(cartSessions
		cover: (76 to: 87)
		declaredAt: (76 to: 87))
		at:
			(cartId
				cover: (93 to: 98)
				declaredAt: (12 to: 17))
		ifAbsent: [ ^ [
			(self coverAll:
				{112 to: 115}) error:
				([
				(self coverAll:
					{124 to: 127}) invalidCartIdErrorMessage ] valueCoveringAll:
					{129 to: 153}) ] valueCoveringAll:
				{117 to: 122} ]] valueCoveringAll:
		{89 to: 91. 100 to: 108})
		cover: (68 to: 71)
		declaredAt: (61 to: 64).
	[
	(catalog
		cover: (160 to: 166)
		declaredAt: (160 to: 166))
		at:
			(aBook
				cover: (172 to: 176)
				declaredAt: (25 to: 29))
		ifAbsent: [ ^ [
			(self coverAll:
				{190 to: 193}) error:
				([
				(self coverAll:
					{202 to: 205}) invalidItemErrorMessage ] valueCoveringAll:
					{207 to: 229}) ] valueCoveringAll:
				{195 to: 200} ]] valueCoveringAll:
		{168 to: 170. 178 to: 186}.
	[
	(cart
		cover: (236 to: 239)
		declaredAt: (61 to: 64))
		add:
			(aQuantity
				cover: (246 to: 254)
				declaredAt: (45 to: 53))
		of:
			(aBook
				cover: (260 to: 264)
				declaredAt: (25 to: 29)) ] valueCoveringAll:
		{241 to: 244. 256 to: 258}.! !
!Behavior method!
invalidItemErrorMessage
	^ 'Invalid item' coverAll:
		{28 to: 41}.! !

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 15:03:25'!
PASSED!
!Behavior method!
invalidCartIdErrorMessage
	^ 'Invalid CartId' coverAll:
		{30 to: 45}.! !

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 15:03:25'!
PASSED!
!Behavior method!
add: anAmount of: aBook
	[
	([
	([
	(lastTime
		cover: (30 to: 37)
		declaredAt: (30 to: 37)) +
		([
		(facade
			cover: (41 to: 46)
			declaredAt: (41 to: 46)) sessionDuration ] valueCoveringAll:
			{48 to: 62}) ] valueCoveringAll:
		{39 to: 39}) <
		([
		(facade
			cover: (67 to: 72)
			declaredAt: (41 to: 46)) now ] valueCoveringAll:
			{74 to: 76}) ] valueCoveringAll:
		{65 to: 65}) ifTrue: [
		[
		(self coverAll:
			{88 to: 91}) signalCartSessionExpired ] valueCoveringAll:
			{93 to: 116} ]] valueCoveringAll:
		{78 to: 84}.
	^ [
	(cart
		cover: (124 to: 127)
		declaredAt: (124 to: 127))
		add:
			(anAmount
				cover: (134 to: 141)
				declaredAt: (6 to: 13))
		of:
			(aBook
				cover: (147 to: 151)
				declaredAt: (19 to: 23)) ] valueCoveringAll:
		{129 to: 132. 143 to: 145}.! !

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 15:03:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 15:03:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 15:03:25'!
PASSED!
!Behavior method!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	| cart cashier transactionId client clientTransactions |
	(cart _ [
	(cartSessions
		cover: (132 to: 143)
		declaredAt: (132 to: 143))
		at:
			(cartId
				cover: (149 to: 154)
				declaredAt: (11 to: 16))
		ifAbsent: [
			[
			(self coverAll:
				{166 to: 169}) error:
				([
				(self coverAll:
					{178 to: 181}) invalidCartIdErrorMessage ] valueCoveringAll:
					{183 to: 207}) ] valueCoveringAll:
				{171 to: 176} ]] valueCoveringAll:
		{145 to: 147. 156 to: 164})
		cover: (124 to: 127)
		declaredAt: (66 to: 69).
	[
	([
	(cart
		cover: (215 to: 218)
		declaredAt: (66 to: 69)) isEmpty ] valueCoveringAll:
		{220 to: 226}) ifTrue: [
		[
		(self coverAll:
			{237 to: 240}) error:
			([
			(self coverAll:
				{249 to: 252}) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
				{254 to: 282}) ] valueCoveringAll:
			{242 to: 247} ]] valueCoveringAll:
		{229 to: 235}.
	[
	(cart
		cover: (289 to: 292)
		declaredAt: (66 to: 69)) isNotExpired ] valueCoveringAll:
		{294 to: 305}.
	(cashier _ [
	(Cashier
		cover: (320 to: 326)
		declaredAt: (320 to: 326))
		toCheckout:
			(cart
				cover: (343 to: 346)
				declaredAt: (66 to: 69))
		charging:
			(aCreditCard
				cover: (361 to: 371)
				declaredAt: (40 to: 50))
		throught:
			(merchantProcessor
				cover: (387 to: 403)
				declaredAt: (387 to: 403))
		on:
			(aDate
				cover: (412 to: 416)
				declaredAt: (56 to: 60))
		registeringOn:
			(salesBook
				cover: (436 to: 444)
				declaredAt: (436 to: 444))
		with:
			(self coverAll:
				{454 to: 457}) ] valueCoveringAll:
		{331 to: 341. 351 to: 359. 377 to: 385. 408 to: 410. 421 to: 434. 448 to: 452})
		cover: (309 to: 315)
		declaredAt: (71 to: 77).
	(transactionId _ [
	(cashier
		cover: (481 to: 487)
		declaredAt: (71 to: 77)) checkOut ] valueCoveringAll:
		{489 to: 496})
		cover: (464 to: 476)
		declaredAt: (79 to: 91).
	(client _ [
	(cartToClient
		cover: (513 to: 524)
		declaredAt: (513 to: 524)) removeKey:
		(cartId
			cover: (537 to: 542)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{526 to: 535})
		cover: (503 to: 508)
		declaredAt: (93 to: 98).
	(clientTransactions _ [
	(clientsTransactions
		cover: (570 to: 588)
		declaredAt: (570 to: 588))
		at:
			(client
				cover: (594 to: 599)
				declaredAt: (93 to: 98))
		ifAbsent: [
			[
			(OrderedCollection
				cover: (613 to: 629)
				declaredAt: (613 to: 629)) new ] valueCoveringAll:
				{631 to: 633} ]] valueCoveringAll:
		{590 to: 592. 601 to: 609})
		cover: (548 to: 565)
		declaredAt: (100 to: 117).
	[
	(clientTransactions
		cover: (639 to: 656)
		declaredAt: (100 to: 117)) add:
		(transactionId
			cover: (663 to: 675)
			declaredAt: (79 to: 91)) ] valueCoveringAll:
		{658 to: 661}.
	[
	(clientsTransactions
		cover: (680 to: 698)
		declaredAt: (570 to: 588))
		at:
			(client
				cover: (704 to: 709)
				declaredAt: (93 to: 98))
		put:
			(clientTransactions
				cover: (716 to: 733)
				declaredAt: (100 to: 117)) ] valueCoveringAll:
		{700 to: 702. 711 to: 714}.
	^ transactionId
		cover: (741 to: 753)
		declaredAt: (79 to: 91).! !

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 15:03:25'!
PASSED!
!Behavior method!
isEmpty
	^ [
	(cart
		cover: (13 to: 16)
		declaredAt: (13 to: 16)) isEmpty ] valueCoveringAll:
		{18 to: 24}.! !
!Behavior method!
cartCanNotBeEmptyErrorMessage
	^ [
	(Cashier
		cover: (36 to: 42)
		declaredAt: (36 to: 42)) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
		{44 to: 72}.! !

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 15:03:25'!
PASSED!
!Behavior method!
isNotExpired
	[
	([
	([
	(lastTime
		cover: (17 to: 24)
		declaredAt: (17 to: 24)) +
		([
		(facade
			cover: (28 to: 33)
			declaredAt: (28 to: 33)) sessionDuration ] valueCoveringAll:
			{35 to: 49}) ] valueCoveringAll:
		{26 to: 26}) <
		([
		(facade
			cover: (54 to: 59)
			declaredAt: (28 to: 33)) now ] valueCoveringAll:
			{61 to: 63}) ] valueCoveringAll:
		{52 to: 52}) ifTrue: [
		[
		(self coverAll:
			{75 to: 78}) signalCartSessionExpired ] valueCoveringAll:
			{80 to: 103} ]] valueCoveringAll:
		{65 to: 71}.! !
!Behavior method!
canNotChargeAnExpiredCreditCardErrorMessage
	^ [
	(Cashier
		cover: (50 to: 56)
		declaredAt: (50 to: 56)) canNotChargeAnExpiredCreditCardErrorMessage ] valueCoveringAll:
		{58 to: 100}.! !

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 15:03:25'!
PASSED!
!Behavior method!
total
	^ [
	(cart
		cover: (11 to: 14)
		declaredAt: (11 to: 14)) total ] valueCoveringAll:
		{16 to: 20}.! !
!Behavior method!
detail
	^ [
	(cart
		cover: (12 to: 15)
		declaredAt: (12 to: 15)) detail ] valueCoveringAll:
		{17 to: 22}.! !
!Behavior method!
nextTransactionId
	(transactionID _ [
	(transactionID
		cover: (22 to: 34)
		declaredAt: (22 to: 34)) +
		(1 coverAll:
			{54 to: 54}) ] valueCoveringAll:
		{53 to: 53})
		cover: (39 to: 51)
		declaredAt: (22 to: 34).
	^ [
	(transactionID
		cover: (61 to: 73)
		declaredAt: (22 to: 34)) -
		(1 coverAll:
			{76 to: 76}) ] valueCoveringAll:
		{75 to: 75}.! !
!Behavior method!
listPurchases: aUser withPassword: aPassword
	| clientTransactions items total sales password |
	[
	(validUsers
		cover: (101 to: 110)
		declaredAt: (101 to: 110))
		at:
			(aUser
				cover: (116 to: 120)
				declaredAt: (16 to: 20))
		ifAbsent: [
			[
			(self coverAll:
				{132 to: 135}) error:
				([
				(self coverAll:
					{144 to: 147}) invalidUserOrPasswordErrorDescription ] valueCoveringAll:
					{149 to: 185}) ] valueCoveringAll:
				{137 to: 142} ]] valueCoveringAll:
		{112 to: 114. 122 to: 130}.
	(password _ [
	(validUsers
		cover: (204 to: 213)
		declaredAt: (101 to: 110)) at:
		(aUser
			cover: (219 to: 223)
			declaredAt: (16 to: 20)) ] valueCoveringAll:
		{215 to: 217})
		cover: (192 to: 199)
		declaredAt: (88 to: 95).
	[
	([
	(password
		cover: (231 to: 238)
		declaredAt: (88 to: 95)) =
		(aPassword
			cover: (242 to: 250)
			declaredAt: (36 to: 44)) ] valueCoveringAll:
		{240 to: 240}) ifFalse: [
		[
		(self coverAll:
			{263 to: 266}) error:
			([
			(self coverAll:
				{275 to: 278}) invalidUserOrPasswordErrorDescription ] valueCoveringAll:
				{280 to: 316}) ] valueCoveringAll:
			{268 to: 273} ]] valueCoveringAll:
		{254 to: 261}.
	(clientTransactions _ [
	(clientsTransactions
		cover: (345 to: 363)
		declaredAt: (345 to: 363))
		at:
			(aUser
				cover: (369 to: 373)
				declaredAt: (16 to: 20))
		ifAbsent: [
			[
			(OrderedCollection
				cover: (386 to: 402)
				declaredAt: (386 to: 402)) new ] valueCoveringAll:
				{404 to: 406} ]] valueCoveringAll:
		{365 to: 367. 375 to: 383})
		cover: (323 to: 340)
		declaredAt: (51 to: 68).
	(sales _ [
	(clientTransactions
		cover: (421 to: 438)
		declaredAt: (51 to: 68)) collect: [ :aTransactionID |
		[
		(salesBook
			cover: (468 to: 476)
			declaredAt: (468 to: 476)) at:
			(aTransactionID
				cover: (482 to: 495)
				declaredAt: (451 to: 464)) ] valueCoveringAll:
			{478 to: 480} ]] valueCoveringAll:
		{440 to: 447})
		cover: (412 to: 416)
		declaredAt: (82 to: 86).
	(total _ 0 coverAll:
		{512 to: 512})
		cover: (503 to: 507)
		declaredAt: (76 to: 80).
	(items _ [
	(Dictionary
		cover: (524 to: 533)
		declaredAt: (524 to: 533)) new ] valueCoveringAll:
		{535 to: 537})
		cover: (516 to: 520)
		declaredAt: (70 to: 74).
	[
	(sales
		cover: (543 to: 547)
		declaredAt: (82 to: 86)) do: [ :aSale |
		[
		([
		(aSale
			cover: (564 to: 568)
			declaredAt: (554 to: 558)) items ] valueCoveringAll:
			{570 to: 574}) associationsDo: [ :aSaleItem | | quantity |
			(quantity _ [
			(items
				cover: (634 to: 638)
				declaredAt: (70 to: 74))
				at:
					([
					(aSaleItem
						cover: (644 to: 652)
						declaredAt: (594 to: 602)) key ] valueCoveringAll:
						{654 to: 656})
				ifAbsent: [
					0 coverAll:
						{669 to: 669} ]] valueCoveringAll:
				{640 to: 642. 658 to: 666})
				cover: (622 to: 629)
				declaredAt: (608 to: 615).
			[
			(items
				cover: (676 to: 680)
				declaredAt: (70 to: 74))
				at:
					([
					(aSaleItem
						cover: (686 to: 694)
						declaredAt: (594 to: 602)) key ] valueCoveringAll:
						{696 to: 698})
				put:
					([
					(quantity
						cover: (705 to: 712)
						declaredAt: (608 to: 615)) +
						([
						(aSaleItem
							cover: (716 to: 724)
							declaredAt: (594 to: 602)) value ] valueCoveringAll:
							{726 to: 730}) ] valueCoveringAll:
						{714 to: 714}) ] valueCoveringAll:
				{682 to: 684. 700 to: 703} ]] valueCoveringAll:
			{576 to: 590}.
		(total _ [
		(total
			cover: (740 to: 744)
			declaredAt: (76 to: 80)) +
			([
			(aSale
				cover: (757 to: 761)
				declaredAt: (554 to: 558)) total ] valueCoveringAll:
				{763 to: 767}) ] valueCoveringAll:
			{755 to: 755})
			cover: (749 to: 753)
			declaredAt: (76 to: 80) ]] valueCoveringAll:
		{549 to: 551}.
	[
	(items
		cover: (775 to: 779)
		declaredAt: (70 to: 74))
		at:
			('Total' coverAll:
				{785 to: 791})
		put:
			(total
				cover: (798 to: 802)
				declaredAt: (76 to: 80)) ] valueCoveringAll:
		{781 to: 783. 793 to: 796}.
	^ items
		cover: (811 to: 815)
		declaredAt: (70 to: 74).! !
!Behavior method!
items
	^ items
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 15:03:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 15:03:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 15:03:25'!
PASSED!
!Behavior method!
advanceTime: aDuration
	(now _ [
	(now
		cover: (28 to: 30)
		declaredAt: (28 to: 30)) +
		(aDuration
			cover: (41 to: 49)
			declaredAt: (14 to: 22)) ] valueCoveringAll:
		{39 to: 39})
		cover: (35 to: 37)
		declaredAt: (28 to: 30).! !
!Behavior method!
signalCartSessionExpired
	[
	(self coverAll:
		{28 to: 31}) error:
		([
		(facade
			cover: (40 to: 45)
			declaredAt: (40 to: 45)) sessionHasExpiredErrorDescription ] valueCoveringAll:
			{47 to: 79}) ] valueCoveringAll:
		{33 to: 38}.! !
!Behavior method!
sessionHasExpiredErrorDescription
	^ 'The cart session is expired' coverAll:
		{38 to: 66}.! !
!Behavior method!
revertTime: aDuration
	(now _ [
	(now
		cover: (25 to: 27)
		declaredAt: (25 to: 27)) +
		([
		(aDuration
			cover: (38 to: 46)
			declaredAt: (13 to: 21)) negated ] valueCoveringAll:
			{48 to: 54}) ] valueCoveringAll:
		{36 to: 36})
		cover: (32 to: 34)
		declaredAt: (25 to: 27).! !

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:03:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:03:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:03:25'!
PASSED!

!methodRemoval: CreditCard #customerName stamp: 'MS 11/11/2021 15:03:48'!
customerName

	^ customerName .!
!Behavior method!
initialize
	(today _ [
	(DateAndTime
		cover: (23 to: 33)
		declaredAt: (23 to: 33)) now ] valueCoveringAll:
		{35 to: 37})
		cover: (14 to: 18)
		declaredAt: (14 to: 18).
	(transactionID _ 1 coverAll:
		{58 to: 58})
		cover: (41 to: 53)
		declaredAt: (41 to: 53).! !
!Behavior method!
createCart
	^ [
	(Cart
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) acceptingItemsOf:
		([
		(self coverAll:
			{39 to: 42}) defaultCatalog ] valueCoveringAll:
			{44 to: 57}) ] valueCoveringAll:
		{21 to: 37}.! !
!Behavior method!
defaultCatalog
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(Dictionary
		cover: (21 to: 30)
		declaredAt: (21 to: 30)) new ] valueCoveringAll:
		{32 to: 34}.
	[
	cascadeReceiver
		at: self itemSellByTheStore
		put: self itemSellByTheStorePrice ] valueCoveringAll:
		{38 to: 98}.
	[
	cascadeReceiver
		at: self anotherItemSellByTheStore
		put: self anotherItemSellByTheStorePrice ] valueCoveringAll:
		{103 to: 177}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{182 to: 189} ] value.! !
!Behavior method!
itemSellByTheStore
	^ 'validBook' coverAll:
		{25 to: 35}.! !
!Behavior method!
itemSellByTheStorePrice
	^ 10 coverAll:
		{29 to: 30}.! !
!Behavior method!
anotherItemSellByTheStore
	^ 'validBook2' coverAll:
		{32 to: 43}.! !
!Behavior method!
anotherItemSellByTheStorePrice
	^ 20 coverAll:
		{37 to: 38}.! !
!Behavior method!
acceptingItemsOf: aCatalog
	^ [
	([
	(self coverAll:
		{31 to: 34}) new ] valueCoveringAll:
		{36 to: 38}) initializeAcceptingItemsOf:
		(aCatalog
			cover: (68 to: 75)
			declaredAt: (19 to: 26)) ] valueCoveringAll:
		{40 to: 66}.! !
!Behavior method!
initializeAcceptingItemsOf: aCatalog
	(catalog _ aCatalog
		cover: (51 to: 58)
		declaredAt: (29 to: 36))
		cover: (40 to: 46)
		declaredAt: (40 to: 46).
	(items _ [
	(Bag
		cover: (71 to: 73)
		declaredAt: (71 to: 73)) new ] valueCoveringAll:
		{75 to: 77})
		cover: (62 to: 66)
		declaredAt: (62 to: 66).! !
!Behavior method!
isEmpty
	^ [
	(items
		cover: (13 to: 17)
		declaredAt: (13 to: 17)) isEmpty ] valueCoveringAll:
		{19 to: 25}.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/11/2021 15:04:13'!
PASSED!
!Behavior method!
itemNotSellByTheStore
	^ 'invalidBook' coverAll:
		{27 to: 39}.! !
!Behavior method!
add: anItem
	^ [
	(self coverAll:
		{17 to: 20})
		add:
			(1 coverAll:
				{27 to: 27})
		of:
			(anItem
				cover: (33 to: 38)
				declaredAt: (6 to: 11)) ] valueCoveringAll:
		{22 to: 25. 29 to: 31}.! !
!Behavior method!
add: aQuantity of: anItem
	[
	(self coverAll:
		{29 to: 32}) assertIsValidQuantity:
		(aQuantity
			cover: (57 to: 65)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{34 to: 55}.
	[
	(self coverAll:
		{69 to: 72}) assertIsValidItem:
		(anItem
			cover: (93 to: 98)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{74 to: 91}.
	[
	(1 coverAll:
		{103 to: 103})
		to:
			(aQuantity
				cover: (109 to: 117)
				declaredAt: (6 to: 14))
		do: [ :aNumber |
			[
			(items
				cover: (136 to: 140)
				declaredAt: (136 to: 140)) add:
				(anItem
					cover: (147 to: 152)
					declaredAt: (20 to: 25)) ] valueCoveringAll:
				{142 to: 145} ]] valueCoveringAll:
		{105 to: 107. 119 to: 121}.! !
!Behavior method!
assertIsValidQuantity: aQuantity
	[
	([
	(aQuantity
		cover: (36 to: 44)
		declaredAt: (24 to: 32)) strictlyPositive ] valueCoveringAll:
		{46 to: 61}) ifFalse: [
		[
		(self coverAll:
			{74 to: 77}) error:
			([
			(self coverAll:
				{86 to: 89}) invalidQuantityErrorMessage ] valueCoveringAll:
				{91 to: 117}) ] valueCoveringAll:
			{79 to: 84} ]] valueCoveringAll:
		{63 to: 70}.! !
!Behavior method!
assertIsValidItem: anItem
	[
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includesKey:
		(anItem
			cover: (51 to: 56)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			(self coverAll:
				{82 to: 85}) invalidItemErrorMessage ] valueCoveringAll:
				{87 to: 109}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{59 to: 66}.! !
!Behavior method!
invalidItemErrorMessage
	^ 'Item is not in catalog' coverAll:
		{29 to: 52}.! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/11/2021 15:04:13'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/11/2021 15:04:13'!
PASSED!
!Behavior method!
invalidQuantityErrorMessage
	^ 'Invalid number of items' coverAll:
		{33 to: 57}.! !

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/11/2021 15:04:13'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/11/2021 15:04:13'!
PASSED!
!Behavior method!
includes: anItem
	^ [
	(items
		cover: (21 to: 25)
		declaredAt: (21 to: 25)) includes:
		(anItem
			cover: (37 to: 42)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{27 to: 35}.! !

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/11/2021 15:04:13'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/11/2021 15:04:13'!
PASSED!
!Behavior method!
occurrencesOf: anItem
	^ [
	(items
		cover: (26 to: 30)
		declaredAt: (26 to: 30)) occurrencesOf:
		(anItem
			cover: (47 to: 52)
			declaredAt: (16 to: 21)) ] valueCoveringAll:
		{32 to: 45}.! !

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/11/2021 15:04:13'!
PASSED!
!Behavior method!
notExpiredCreditCard
	^ [
	(CreditCard
		cover: (26 to: 35)
		declaredAt: (26 to: 35)) expiringOn:
		([
		(Month
			cover: (50 to: 54)
			declaredAt: (50 to: 54))
			month:
				([
				(today
					cover: (63 to: 67)
					declaredAt: (63 to: 67)) monthIndex ] valueCoveringAll:
					{69 to: 78})
			year:
				([
				([
				(today
					cover: (86 to: 90)
					declaredAt: (63 to: 67)) yearNumber ] valueCoveringAll:
					{92 to: 101}) +
					(1 coverAll:
						{105 to: 105}) ] valueCoveringAll:
					{103 to: 103}) ] valueCoveringAll:
			{56 to: 61. 80 to: 84}) ] valueCoveringAll:
		{37 to: 47}.! !
!Behavior method!
expiringOn: aMonth
	^ [
	([
	(self coverAll:
		{25 to: 28}) new ] valueCoveringAll:
		{30 to: 32}) initializeExpiringOn:
		(aMonth
			cover: (56 to: 61)
			declaredAt: (13 to: 18)) ] valueCoveringAll:
		{34 to: 54}.! !
!Behavior method!
initializeExpiringOn: aMonth
	(expiration _ aMonth
		cover: (48 to: 53)
		declaredAt: (23 to: 28))
		cover: (34 to: 43)
		declaredAt: (34 to: 43).! !
!Behavior method!
today
	^ today
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !
!Behavior method!
transactionID
	^ self coverAll:
		{18 to: 21}.! !
!Behavior method!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook with: aTransactionId
	[
	(self coverAll:
		{131 to: 134}) assertIsNotEmpty:
		(aCart
			cover: (154 to: 158)
			declaredAt: (13 to: 17)) ] valueCoveringAll:
		{136 to: 152}.
	[
	(self coverAll:
		{162 to: 165})
		assertIsNotExpired:
			(aCreditCard
				cover: (187 to: 197)
				declaredAt: (29 to: 39))
		on:
			(aDate
				cover: (203 to: 207)
				declaredAt: (74 to: 78)) ] valueCoveringAll:
		{167 to: 185. 199 to: 201}.
	^ [
	([
	(self coverAll:
		{214 to: 217}) new ] valueCoveringAll:
		{219 to: 221})
		initializeToCheckout:
			(aCart
				cover: (245 to: 249)
				declaredAt: (13 to: 17))
		charging:
			(aCreditCard
				cover: (261 to: 271)
				declaredAt: (29 to: 39))
		throught:
			(aMerchantProcessor
				cover: (283 to: 300)
				declaredAt: (51 to: 68))
		registeringOn:
			(aSalesBook
				cover: (317 to: 326)
				declaredAt: (95 to: 104))
		with:
			(aTransactionId
				cover: (334 to: 347)
				declaredAt: (112 to: 125)) ] valueCoveringAll:
		{223 to: 243. 251 to: 259. 273 to: 281. 302 to: 315. 328 to: 332}.! !
!Behavior method!
assertIsNotEmpty: aCart
	[
	([
	(aCart
		cover: (29 to: 33)
		declaredAt: (19 to: 23)) isEmpty ] valueCoveringAll:
		{35 to: 41}) ifTrue: [
		[
		(self coverAll:
			{52 to: 55}) error:
			([
			(self coverAll:
				{64 to: 67}) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
				{69 to: 97}) ] valueCoveringAll:
			{57 to: 62} ]] valueCoveringAll:
		{43 to: 49}.! !
!Behavior method!
cartCanNotBeEmptyErrorMessage
	^ 'Can not check out an empty cart' coverAll:
		{35 to: 67}.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/11/2021 15:04:13'!
PASSED!
!Behavior method!
assertIsNotExpired: aCreditCard on: aDate
	[
	([
	(aCreditCard
		cover: (47 to: 57)
		declaredAt: (21 to: 31)) isExpiredOn:
		(aDate
			cover: (72 to: 76)
			declaredAt: (37 to: 41)) ] valueCoveringAll:
		{59 to: 70}) ifTrue: [
		[
		(self coverAll:
			{89 to: 92}) error:
			([
			(self coverAll:
				{101 to: 104}) canNotChargeAnExpiredCreditCardErrorMessage ] valueCoveringAll:
				{106 to: 148}) ] valueCoveringAll:
			{94 to: 99} ]] valueCoveringAll:
		{79 to: 85}.! !
!Behavior method!
isExpiredOn: aDate
	^ [
	([
	(expiration
		cover: (25 to: 34)
		declaredAt: (25 to: 34)) start ] valueCoveringAll:
		{36 to: 40}) <
		([
		([
		(Month
			cover: (45 to: 49)
			declaredAt: (45 to: 49))
			month:
				([
				(aDate
					cover: (58 to: 62)
					declaredAt: (14 to: 18)) monthIndex ] valueCoveringAll:
					{64 to: 73})
			year:
				([
				(aDate
					cover: (81 to: 85)
					declaredAt: (14 to: 18)) yearNumber ] valueCoveringAll:
					{87 to: 96}) ] valueCoveringAll:
			{51 to: 56. 75 to: 79}) start ] valueCoveringAll:
			{99 to: 103}) ] valueCoveringAll:
		{42 to: 42}.! !
!Behavior method!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook with: aTransactionID
	(cart _ aCart
		cover: (138 to: 142)
		declaredAt: (23 to: 27))
		cover: (130 to: 133)
		declaredAt: (130 to: 133).
	(creditCard _ aCreditCard
		cover: (160 to: 170)
		declaredAt: (39 to: 49))
		cover: (146 to: 155)
		declaredAt: (146 to: 155).
	(merchantProcessor _ aMerchantProcessor
		cover: (195 to: 212)
		declaredAt: (61 to: 78))
		cover: (174 to: 190)
		declaredAt: (174 to: 190).
	(salesBook _ aSalesBook
		cover: (229 to: 238)
		declaredAt: (95 to: 104))
		cover: (216 to: 224)
		declaredAt: (216 to: 224).
	(transactionsIDs _ aTransactionID
		cover: (261 to: 274)
		declaredAt: (112 to: 125))
		cover: (242 to: 256)
		declaredAt: (242 to: 256).! !
!Behavior method!
checkOut
	| sale |
	[
	(self coverAll:
		{22 to: 25}) calculateTotal ] valueCoveringAll:
		{27 to: 40}.
	[
	(self coverAll:
		{44 to: 47}) debitTotal ] valueCoveringAll:
		{49 to: 58}.
	(sale _ [
	(self coverAll:
		{70 to: 73}) registerSale ] valueCoveringAll:
		{75 to: 86})
		cover: (62 to: 65)
		declaredAt: (14 to: 17).
	^ sale
		cover: (93 to: 96)
		declaredAt: (14 to: 17).! !
!Behavior method!
calculateTotal
	(total _ [
	(cart
		cover: (27 to: 30)
		declaredAt: (27 to: 30)) total ] valueCoveringAll:
		{32 to: 36})
		cover: (18 to: 22)
		declaredAt: (18 to: 22).! !
!Behavior method!
total
	^ [
	(items
		cover: (11 to: 15)
		declaredAt: (11 to: 15)) sum: [ :anItem |
		[
		(catalog
			cover: (34 to: 40)
			declaredAt: (34 to: 40)) at:
			(anItem
				cover: (46 to: 51)
				declaredAt: (25 to: 30)) ] valueCoveringAll:
			{42 to: 44} ]] valueCoveringAll:
		{17 to: 20}.! !
!Behavior method!
debitTotal
	[
	(merchantProcessor
		cover: (14 to: 30)
		declaredAt: (14 to: 30))
		debit:
			(total
				cover: (39 to: 43)
				declaredAt: (39 to: 43))
		from:
			(creditCard
				cover: (51 to: 60)
				declaredAt: (51 to: 60)) ] valueCoveringAll:
		{32 to: 37. 45 to: 49}.! !
!Behavior method!
registerSale
	| sale transactionID |
	(sale _ [
	(self coverAll:
		{48 to: 51}) createSale ] valueCoveringAll:
		{53 to: 62})
		cover: (40 to: 43)
		declaredAt: (18 to: 21).
	(transactionID _ [
	(transactionsIDs
		cover: (83 to: 97)
		declaredAt: (83 to: 97)) nextTransactionId ] valueCoveringAll:
		{99 to: 115})
		cover: (66 to: 78)
		declaredAt: (23 to: 35).
	[
	(salesBook
		cover: (122 to: 130)
		declaredAt: (122 to: 130))
		at:
			(transactionID
				cover: (136 to: 148)
				declaredAt: (23 to: 35))
		put:
			(sale
				cover: (155 to: 158)
				declaredAt: (18 to: 21)) ] valueCoveringAll:
		{132 to: 134. 150 to: 153}.
	^ transactionID
		cover: (165 to: 177)
		declaredAt: (23 to: 35).! !
!Behavior method!
createSale
	^ [
	(Sale
		cover: (16 to: 19)
		declaredAt: (16 to: 19))
		of:
			([
			(cart
				cover: (24 to: 27)
				declaredAt: (24 to: 27)) detail ] valueCoveringAll:
				{29 to: 34})
		with:
			(total
				cover: (42 to: 46)
				declaredAt: (42 to: 46)) ] valueCoveringAll:
		{21 to: 23. 36 to: 40}.! !
!Behavior method!
detail
	| detail |
	(detail _ [
	(OrderedDictionary
		cover: (33 to: 49)
		declaredAt: (33 to: 49)) new ] valueCoveringAll:
		{51 to: 53})
		cover: (23 to: 28)
		declaredAt: (11 to: 16).
	[
	(items
		cover: (58 to: 62)
		declaredAt: (58 to: 62)) do: [ :item |
		[
		(detail
			cover: (77 to: 82)
			declaredAt: (11 to: 16))
			at:
				(item
					cover: (88 to: 91)
					declaredAt: (71 to: 74))
			put:
				([
				(items
					cover: (99 to: 103)
					declaredAt: (58 to: 62)) occurrencesOf:
					(item
						cover: (120 to: 123)
						declaredAt: (71 to: 74)) ] valueCoveringAll:
					{105 to: 118}) ] valueCoveringAll:
			{84 to: 86. 93 to: 96} ]] valueCoveringAll:
		{64 to: 66}.
	^ detail
		cover: (135 to: 140)
		declaredAt: (11 to: 16).! !
!Behavior method!
of: someItems with: aTotal
	"should assert total is not negative or 0!!"
	^ [
	([
	(self coverAll:
		{76 to: 79}) new ] valueCoveringAll:
		{81 to: 83})
		initializeWith:
			(someItems
				cover: (101 to: 109)
				declaredAt: (5 to: 13))
		andTotal:
			(aTotal
				cover: (121 to: 126)
				declaredAt: (21 to: 26)) ] valueCoveringAll:
		{85 to: 99. 111 to: 119}.! !
!Behavior method!
initializeWith: someItems andTotal: aTotal
	(total _ aTotal
		cover: (55 to: 60)
		declaredAt: (37 to: 42))
		cover: (46 to: 50)
		declaredAt: (46 to: 50).
	(items _ someItems
		cover: (73 to: 81)
		declaredAt: (17 to: 25))
		cover: (64 to: 68)
		declaredAt: (64 to: 68).! !
!Behavior method!
nextTransactionId
	(transactionID _ [
	(transactionID
		cover: (21 to: 33)
		declaredAt: (21 to: 33)) +
		(1 coverAll:
			{53 to: 53}) ] valueCoveringAll:
		{52 to: 52})
		cover: (38 to: 50)
		declaredAt: (21 to: 33).
	^ [
	(transactionID
		cover: (60 to: 72)
		declaredAt: (21 to: 33)) -
		(1 coverAll:
			{74 to: 74}) ] valueCoveringAll:
		{73 to: 73}.! !
!Behavior method!
total
	^ total
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/11/2021 15:04:13'!
PASSED!
!Behavior method!
expiredCreditCard
	^ [
	(CreditCard
		cover: (23 to: 32)
		declaredAt: (23 to: 32)) expiringOn:
		([
		(Month
			cover: (47 to: 51)
			declaredAt: (47 to: 51))
			month:
				([
				(today
					cover: (60 to: 64)
					declaredAt: (60 to: 64)) monthIndex ] valueCoveringAll:
					{66 to: 75})
			year:
				([
				([
				(today
					cover: (83 to: 87)
					declaredAt: (60 to: 64)) yearNumber ] valueCoveringAll:
					{89 to: 98}) -
					(1 coverAll:
						{102 to: 102}) ] valueCoveringAll:
					{100 to: 100}) ] valueCoveringAll:
			{53 to: 58. 77 to: 81}) ] valueCoveringAll:
		{34 to: 44}.! !
!Behavior method!
canNotChargeAnExpiredCreditCardErrorMessage
	^ 'Can not charge an expired credit card' coverAll:
		{49 to: 87}.! !

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/11/2021 15:04:13'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/11/2021 15:04:13'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/11/2021 15:04:13'!
PASSED!
!Behavior method!
creditCardHasNoCreditErrorMessage
	^ 'Credit card has no credit' coverAll:
		{39 to: 65}.! !

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/11/2021 15:04:13'!
PASSED!
!Behavior method!
for: aTime
	^ [
	([
	(self coverAll:
		{15 to: 18}) new ] valueCoveringAll:
		{20 to: 22}) initializeWith:
		(aTime
			cover: (40 to: 44)
			declaredAt: (6 to: 10)) ] valueCoveringAll:
		{24 to: 38}.! !
!Behavior method!
initializeWith: aTime
	(now _ aTime
		cover: (32 to: 36)
		declaredAt: (17 to: 21))
		cover: (25 to: 27)
		declaredAt: (25 to: 27).! !
!Behavior method!
withUsers: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock
	^ [
	([
	(self coverAll:
		{144 to: 147}) new ] valueCoveringAll:
		{149 to: 151})
		initializeWith:
			(usersWithPasswords
				cover: (169 to: 186)
				declaredAt: (12 to: 29))
		withCatalog:
			(aCatalog
				cover: (201 to: 208)
				declaredAt: (44 to: 51))
		withSalesBook:
			(aSalesBook
				cover: (225 to: 234)
				declaredAt: (68 to: 77))
		withMerchantProcessor:
			(aMerchantProcessor
				cover: (259 to: 276)
				declaredAt: (102 to: 119))
		withClock:
			(aClock
				cover: (289 to: 294)
				declaredAt: (132 to: 137)) ] valueCoveringAll:
		{153 to: 167. 188 to: 199. 210 to: 223. 236 to: 257. 278 to: 287}.! !
!Behavior method!
initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock
	(validUsers _ usersWithPasswords
		cover: (163 to: 180)
		declaredAt: (17 to: 34))
		cover: (149 to: 158)
		declaredAt: (149 to: 158).
	(catalog _ aCatalog
		cover: (195 to: 202)
		declaredAt: (49 to: 56))
		cover: (184 to: 190)
		declaredAt: (184 to: 190).
	(salesBook _ aSalesBook
		cover: (219 to: 228)
		declaredAt: (73 to: 82))
		cover: (206 to: 214)
		declaredAt: (206 to: 214).
	(merchantProcessor _ aMerchantProcessor
		cover: (253 to: 270)
		declaredAt: (107 to: 124))
		cover: (232 to: 248)
		declaredAt: (232 to: 248).
	(cartSessions _ [
	(Dictionary
		cover: (291 to: 300)
		declaredAt: (291 to: 300)) new ] valueCoveringAll:
		{302 to: 304})
		cover: (275 to: 286)
		declaredAt: (275 to: 286).
	(cartIdCounter _ 0 coverAll:
		{325 to: 325})
		cover: (308 to: 320)
		declaredAt: (308 to: 320).
	(transactionID _ 1 coverAll:
		{348 to: 348})
		cover: (331 to: 343)
		declaredAt: (331 to: 343).
	(cartToClient _ [
	(Dictionary
		cover: (370 to: 379)
		declaredAt: (291 to: 300)) new ] valueCoveringAll:
		{381 to: 383})
		cover: (354 to: 365)
		declaredAt: (354 to: 365).
	(clientToCart _ [
	(Dictionary
		cover: (403 to: 412)
		declaredAt: (291 to: 300)) new ] valueCoveringAll:
		{414 to: 416})
		cover: (387 to: 398)
		declaredAt: (387 to: 398).
	(clientsTransactions _ [
	(Dictionary
		cover: (445 to: 454)
		declaredAt: (291 to: 300)) new ] valueCoveringAll:
		{456 to: 458})
		cover: (422 to: 440)
		declaredAt: (422 to: 440).
	(clock _ aClock
		cover: (471 to: 476)
		declaredAt: (137 to: 142))
		cover: (462 to: 466)
		declaredAt: (462 to: 466).! !
!Behavior method!
createCartFor: aUser with: aUserPassword
	| password cart |
	[
	(validUsers
		cover: (65 to: 74)
		declaredAt: (65 to: 74))
		at:
			(aUser
				cover: (80 to: 84)
				declaredAt: (16 to: 20))
		ifAbsent: [
			[
			(self coverAll:
				{96 to: 99}) error:
				([
				(self coverAll:
					{108 to: 111}) invalidUserOrPasswordErrorDescription ] valueCoveringAll:
					{113 to: 149}) ] valueCoveringAll:
				{101 to: 106} ]] valueCoveringAll:
		{76 to: 78. 86 to: 94}.
	(password _ [
	(validUsers
		cover: (168 to: 177)
		declaredAt: (65 to: 74)) at:
		(aUser
			cover: (183 to: 187)
			declaredAt: (16 to: 20)) ] valueCoveringAll:
		{179 to: 181})
		cover: (156 to: 163)
		declaredAt: (47 to: 54).
	[
	([
	(password
		cover: (195 to: 202)
		declaredAt: (47 to: 54)) =
		(aUserPassword
			cover: (206 to: 218)
			declaredAt: (28 to: 40)) ] valueCoveringAll:
		{204 to: 204}) ifFalse: [
		[
		(self coverAll:
			{231 to: 234}) error:
			([
			(self coverAll:
				{243 to: 246}) invalidUserOrPasswordErrorDescription ] valueCoveringAll:
				{248 to: 284}) ] valueCoveringAll:
			{236 to: 241} ]] valueCoveringAll:
		{222 to: 229}.
	(cartIdCounter _ [
	(cartIdCounter
		cover: (291 to: 303)
		declaredAt: (291 to: 303)) +
		(1 coverAll:
			{324 to: 324}) ] valueCoveringAll:
		{322 to: 322})
		cover: (308 to: 320)
		declaredAt: (291 to: 303).
	(cart _ [
	(CartSession
		cover: (338 to: 348)
		declaredAt: (338 to: 348))
		for:
			([
			(Cart
				cover: (356 to: 359)
				declaredAt: (356 to: 359)) acceptingItemsOf:
				(catalog
					cover: (379 to: 385)
					declaredAt: (379 to: 385)) ] valueCoveringAll:
				{361 to: 377})
		ownedBy:
			(aUser
				cover: (397 to: 401)
				declaredAt: (16 to: 20))
		with:
			(self coverAll:
				{409 to: 412}) ] valueCoveringAll:
		{350 to: 353. 388 to: 395. 403 to: 407})
		cover: (330 to: 333)
		declaredAt: (56 to: 59).
	[
	(cartSessions
		cover: (418 to: 429)
		declaredAt: (418 to: 429))
		at:
			(cartIdCounter
				cover: (435 to: 447)
				declaredAt: (291 to: 303))
		put:
			(cart
				cover: (453 to: 456)
				declaredAt: (56 to: 59)) ] valueCoveringAll:
		{431 to: 433. 449 to: 452}.
	[
	(cartToClient
		cover: (462 to: 473)
		declaredAt: (462 to: 473))
		at:
			(cartIdCounter
				cover: (479 to: 491)
				declaredAt: (291 to: 303))
		put:
			(aUser
				cover: (498 to: 502)
				declaredAt: (16 to: 20)) ] valueCoveringAll:
		{475 to: 477. 493 to: 496}.
	^ cartIdCounter
		cover: (509 to: 521)
		declaredAt: (291 to: 303).! !
!Behavior method!
invalidUserOrPasswordErrorDescription
	^ 'Invalid user or password' coverAll:
		{42 to: 67}.! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 15:04:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 15:04:13'!
PASSED!
!Behavior method!
for: aCart ownedBy: aCustomer with: aSystemFacade
	^ [
	([
	(self coverAll:
		{54 to: 57}) new ] valueCoveringAll:
		{59 to: 61})
		initializedWith:
			(aCart
				cover: (80 to: 84)
				declaredAt: (6 to: 10))
		ownedBy:
			(aCustomer
				cover: (95 to: 103)
				declaredAt: (21 to: 29))
		with:
			(aSystemFacade
				cover: (111 to: 123)
				declaredAt: (37 to: 49)) ] valueCoveringAll:
		{63 to: 78. 86 to: 93. 105 to: 109}.! !
!Behavior method!
initializedWith: aCart ownedBy: aCustomer with: aFacade
	(cart _ aCart
		cover: (67 to: 71)
		declaredAt: (18 to: 22))
		cover: (59 to: 62)
		declaredAt: (59 to: 62).
	(owner _ aCustomer
		cover: (84 to: 92)
		declaredAt: (33 to: 41))
		cover: (75 to: 79)
		declaredAt: (75 to: 79).
	(facade _ aFacade
		cover: (107 to: 113)
		declaredAt: (49 to: 55))
		cover: (97 to: 102)
		declaredAt: (97 to: 102).
	(lastTime _ [
	(aFacade
		cover: (129 to: 135)
		declaredAt: (49 to: 55)) now ] valueCoveringAll:
		{137 to: 139})
		cover: (117 to: 124)
		declaredAt: (117 to: 124).! !
!Behavior method!
now
	^ [
	(clock
		cover: (8 to: 12)
		declaredAt: (8 to: 12)) now ] valueCoveringAll:
		{14 to: 16}.! !
!Behavior method!
now
	^ now
		cover: (8 to: 10)
		declaredAt: (8 to: 10).! !
!Behavior method!
listCart: aCartId
	^ [
	([
	(cartSessions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) at:
		(aCartId
			cover: (43 to: 49)
			declaredAt: (11 to: 17)) ] valueCoveringAll:
		{39 to: 41}) getItems ] valueCoveringAll:
		{52 to: 59}.! !
!Behavior method!
getItems
	[
	([
	([
	(lastTime
		cover: (12 to: 19)
		declaredAt: (12 to: 19)) +
		([
		(facade
			cover: (23 to: 28)
			declaredAt: (23 to: 28)) sessionDuration ] valueCoveringAll:
			{30 to: 44}) ] valueCoveringAll:
		{21 to: 21}) <
		([
		(facade
			cover: (49 to: 54)
			declaredAt: (23 to: 28)) now ] valueCoveringAll:
			{56 to: 58}) ] valueCoveringAll:
		{47 to: 47}) ifTrue: [
		[
		(self coverAll:
			{70 to: 73}) signalCartSessionExpired ] valueCoveringAll:
			{75 to: 98} ]] valueCoveringAll:
		{60 to: 66}.
	^ [
	(cart
		cover: (106 to: 109)
		declaredAt: (106 to: 109)) getItems ] valueCoveringAll:
		{111 to: 118}.! !
!Behavior method!
sessionDuration
	^ [
	(30 coverAll:
		{21 to: 22}) minutes ] valueCoveringAll:
		{24 to: 30}.! !
!Behavior method!
getItems
	^ [
	(items
		cover: (14 to: 18)
		declaredAt: (14 to: 18)) copy ] valueCoveringAll:
		{20 to: 23}.! !

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 15:04:13'!
PASSED!
!Behavior method!
addToCart: cartId book: aBook bookQuantity: aQuantity
	| cart |
	(cart _ [
	(cartSessions
		cover: (76 to: 87)
		declaredAt: (76 to: 87))
		at:
			(cartId
				cover: (93 to: 98)
				declaredAt: (12 to: 17))
		ifAbsent: [ ^ [
			(self coverAll:
				{112 to: 115}) error:
				([
				(self coverAll:
					{124 to: 127}) invalidCartIdErrorMessage ] valueCoveringAll:
					{129 to: 153}) ] valueCoveringAll:
				{117 to: 122} ]] valueCoveringAll:
		{89 to: 91. 100 to: 108})
		cover: (68 to: 71)
		declaredAt: (61 to: 64).
	[
	(catalog
		cover: (160 to: 166)
		declaredAt: (160 to: 166))
		at:
			(aBook
				cover: (172 to: 176)
				declaredAt: (25 to: 29))
		ifAbsent: [ ^ [
			(self coverAll:
				{190 to: 193}) error:
				([
				(self coverAll:
					{202 to: 205}) invalidItemErrorMessage ] valueCoveringAll:
					{207 to: 229}) ] valueCoveringAll:
				{195 to: 200} ]] valueCoveringAll:
		{168 to: 170. 178 to: 186}.
	[
	(cart
		cover: (236 to: 239)
		declaredAt: (61 to: 64))
		add:
			(aQuantity
				cover: (246 to: 254)
				declaredAt: (45 to: 53))
		of:
			(aBook
				cover: (260 to: 264)
				declaredAt: (25 to: 29)) ] valueCoveringAll:
		{241 to: 244. 256 to: 258}.! !
!Behavior method!
invalidItemErrorMessage
	^ 'Invalid item' coverAll:
		{28 to: 41}.! !

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 15:04:13'!
PASSED!
!Behavior method!
invalidCartIdErrorMessage
	^ 'Invalid CartId' coverAll:
		{30 to: 45}.! !

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 15:04:13'!
PASSED!
!Behavior method!
add: anAmount of: aBook
	[
	([
	([
	(lastTime
		cover: (30 to: 37)
		declaredAt: (30 to: 37)) +
		([
		(facade
			cover: (41 to: 46)
			declaredAt: (41 to: 46)) sessionDuration ] valueCoveringAll:
			{48 to: 62}) ] valueCoveringAll:
		{39 to: 39}) <
		([
		(facade
			cover: (67 to: 72)
			declaredAt: (41 to: 46)) now ] valueCoveringAll:
			{74 to: 76}) ] valueCoveringAll:
		{65 to: 65}) ifTrue: [
		[
		(self coverAll:
			{88 to: 91}) signalCartSessionExpired ] valueCoveringAll:
			{93 to: 116} ]] valueCoveringAll:
		{78 to: 84}.
	^ [
	(cart
		cover: (124 to: 127)
		declaredAt: (124 to: 127))
		add:
			(anAmount
				cover: (134 to: 141)
				declaredAt: (6 to: 13))
		of:
			(aBook
				cover: (147 to: 151)
				declaredAt: (19 to: 23)) ] valueCoveringAll:
		{129 to: 132. 143 to: 145}.! !

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 15:04:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 15:04:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 15:04:13'!
PASSED!
!Behavior method!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	| cart cashier transactionId client clientTransactions |
	(cart _ [
	(cartSessions
		cover: (132 to: 143)
		declaredAt: (132 to: 143))
		at:
			(cartId
				cover: (149 to: 154)
				declaredAt: (11 to: 16))
		ifAbsent: [
			[
			(self coverAll:
				{166 to: 169}) error:
				([
				(self coverAll:
					{178 to: 181}) invalidCartIdErrorMessage ] valueCoveringAll:
					{183 to: 207}) ] valueCoveringAll:
				{171 to: 176} ]] valueCoveringAll:
		{145 to: 147. 156 to: 164})
		cover: (124 to: 127)
		declaredAt: (66 to: 69).
	[
	([
	(cart
		cover: (215 to: 218)
		declaredAt: (66 to: 69)) isEmpty ] valueCoveringAll:
		{220 to: 226}) ifTrue: [
		[
		(self coverAll:
			{237 to: 240}) error:
			([
			(self coverAll:
				{249 to: 252}) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
				{254 to: 282}) ] valueCoveringAll:
			{242 to: 247} ]] valueCoveringAll:
		{229 to: 235}.
	[
	(cart
		cover: (289 to: 292)
		declaredAt: (66 to: 69)) isNotExpired ] valueCoveringAll:
		{294 to: 305}.
	(cashier _ [
	(Cashier
		cover: (320 to: 326)
		declaredAt: (320 to: 326))
		toCheckout:
			(cart
				cover: (343 to: 346)
				declaredAt: (66 to: 69))
		charging:
			(aCreditCard
				cover: (361 to: 371)
				declaredAt: (40 to: 50))
		throught:
			(merchantProcessor
				cover: (387 to: 403)
				declaredAt: (387 to: 403))
		on:
			(aDate
				cover: (412 to: 416)
				declaredAt: (56 to: 60))
		registeringOn:
			(salesBook
				cover: (436 to: 444)
				declaredAt: (436 to: 444))
		with:
			(self coverAll:
				{454 to: 457}) ] valueCoveringAll:
		{331 to: 341. 351 to: 359. 377 to: 385. 408 to: 410. 421 to: 434. 448 to: 452})
		cover: (309 to: 315)
		declaredAt: (71 to: 77).
	(transactionId _ [
	(cashier
		cover: (481 to: 487)
		declaredAt: (71 to: 77)) checkOut ] valueCoveringAll:
		{489 to: 496})
		cover: (464 to: 476)
		declaredAt: (79 to: 91).
	(client _ [
	(cartToClient
		cover: (513 to: 524)
		declaredAt: (513 to: 524)) removeKey:
		(cartId
			cover: (537 to: 542)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{526 to: 535})
		cover: (503 to: 508)
		declaredAt: (93 to: 98).
	(clientTransactions _ [
	(clientsTransactions
		cover: (570 to: 588)
		declaredAt: (570 to: 588))
		at:
			(client
				cover: (594 to: 599)
				declaredAt: (93 to: 98))
		ifAbsent: [
			[
			(OrderedCollection
				cover: (613 to: 629)
				declaredAt: (613 to: 629)) new ] valueCoveringAll:
				{631 to: 633} ]] valueCoveringAll:
		{590 to: 592. 601 to: 609})
		cover: (548 to: 565)
		declaredAt: (100 to: 117).
	[
	(clientTransactions
		cover: (639 to: 656)
		declaredAt: (100 to: 117)) add:
		(transactionId
			cover: (663 to: 675)
			declaredAt: (79 to: 91)) ] valueCoveringAll:
		{658 to: 661}.
	[
	(clientsTransactions
		cover: (680 to: 698)
		declaredAt: (570 to: 588))
		at:
			(client
				cover: (704 to: 709)
				declaredAt: (93 to: 98))
		put:
			(clientTransactions
				cover: (716 to: 733)
				declaredAt: (100 to: 117)) ] valueCoveringAll:
		{700 to: 702. 711 to: 714}.
	^ transactionId
		cover: (741 to: 753)
		declaredAt: (79 to: 91).! !

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 15:04:13'!
PASSED!
!Behavior method!
isEmpty
	^ [
	(cart
		cover: (13 to: 16)
		declaredAt: (13 to: 16)) isEmpty ] valueCoveringAll:
		{18 to: 24}.! !
!Behavior method!
cartCanNotBeEmptyErrorMessage
	^ [
	(Cashier
		cover: (36 to: 42)
		declaredAt: (36 to: 42)) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
		{44 to: 72}.! !

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 15:04:13'!
PASSED!
!Behavior method!
isNotExpired
	[
	([
	([
	(lastTime
		cover: (17 to: 24)
		declaredAt: (17 to: 24)) +
		([
		(facade
			cover: (28 to: 33)
			declaredAt: (28 to: 33)) sessionDuration ] valueCoveringAll:
			{35 to: 49}) ] valueCoveringAll:
		{26 to: 26}) <
		([
		(facade
			cover: (54 to: 59)
			declaredAt: (28 to: 33)) now ] valueCoveringAll:
			{61 to: 63}) ] valueCoveringAll:
		{52 to: 52}) ifTrue: [
		[
		(self coverAll:
			{75 to: 78}) signalCartSessionExpired ] valueCoveringAll:
			{80 to: 103} ]] valueCoveringAll:
		{65 to: 71}.! !
!Behavior method!
canNotChargeAnExpiredCreditCardErrorMessage
	^ [
	(Cashier
		cover: (50 to: 56)
		declaredAt: (50 to: 56)) canNotChargeAnExpiredCreditCardErrorMessage ] valueCoveringAll:
		{58 to: 100}.! !

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 15:04:13'!
PASSED!
!Behavior method!
total
	^ [
	(cart
		cover: (11 to: 14)
		declaredAt: (11 to: 14)) total ] valueCoveringAll:
		{16 to: 20}.! !
!Behavior method!
detail
	^ [
	(cart
		cover: (12 to: 15)
		declaredAt: (12 to: 15)) detail ] valueCoveringAll:
		{17 to: 22}.! !
!Behavior method!
nextTransactionId
	(transactionID _ [
	(transactionID
		cover: (22 to: 34)
		declaredAt: (22 to: 34)) +
		(1 coverAll:
			{54 to: 54}) ] valueCoveringAll:
		{53 to: 53})
		cover: (39 to: 51)
		declaredAt: (22 to: 34).
	^ [
	(transactionID
		cover: (61 to: 73)
		declaredAt: (22 to: 34)) -
		(1 coverAll:
			{76 to: 76}) ] valueCoveringAll:
		{75 to: 75}.! !
!Behavior method!
listPurchases: aUser withPassword: aPassword
	| clientTransactions items total sales password |
	[
	(validUsers
		cover: (101 to: 110)
		declaredAt: (101 to: 110))
		at:
			(aUser
				cover: (116 to: 120)
				declaredAt: (16 to: 20))
		ifAbsent: [
			[
			(self coverAll:
				{132 to: 135}) error:
				([
				(self coverAll:
					{144 to: 147}) invalidUserOrPasswordErrorDescription ] valueCoveringAll:
					{149 to: 185}) ] valueCoveringAll:
				{137 to: 142} ]] valueCoveringAll:
		{112 to: 114. 122 to: 130}.
	(password _ [
	(validUsers
		cover: (204 to: 213)
		declaredAt: (101 to: 110)) at:
		(aUser
			cover: (219 to: 223)
			declaredAt: (16 to: 20)) ] valueCoveringAll:
		{215 to: 217})
		cover: (192 to: 199)
		declaredAt: (88 to: 95).
	[
	([
	(password
		cover: (231 to: 238)
		declaredAt: (88 to: 95)) =
		(aPassword
			cover: (242 to: 250)
			declaredAt: (36 to: 44)) ] valueCoveringAll:
		{240 to: 240}) ifFalse: [
		[
		(self coverAll:
			{263 to: 266}) error:
			([
			(self coverAll:
				{275 to: 278}) invalidUserOrPasswordErrorDescription ] valueCoveringAll:
				{280 to: 316}) ] valueCoveringAll:
			{268 to: 273} ]] valueCoveringAll:
		{254 to: 261}.
	(clientTransactions _ [
	(clientsTransactions
		cover: (345 to: 363)
		declaredAt: (345 to: 363))
		at:
			(aUser
				cover: (369 to: 373)
				declaredAt: (16 to: 20))
		ifAbsent: [
			[
			(OrderedCollection
				cover: (386 to: 402)
				declaredAt: (386 to: 402)) new ] valueCoveringAll:
				{404 to: 406} ]] valueCoveringAll:
		{365 to: 367. 375 to: 383})
		cover: (323 to: 340)
		declaredAt: (51 to: 68).
	(sales _ [
	(clientTransactions
		cover: (421 to: 438)
		declaredAt: (51 to: 68)) collect: [ :aTransactionID |
		[
		(salesBook
			cover: (468 to: 476)
			declaredAt: (468 to: 476)) at:
			(aTransactionID
				cover: (482 to: 495)
				declaredAt: (451 to: 464)) ] valueCoveringAll:
			{478 to: 480} ]] valueCoveringAll:
		{440 to: 447})
		cover: (412 to: 416)
		declaredAt: (82 to: 86).
	(total _ 0 coverAll:
		{512 to: 512})
		cover: (503 to: 507)
		declaredAt: (76 to: 80).
	(items _ [
	(Dictionary
		cover: (524 to: 533)
		declaredAt: (524 to: 533)) new ] valueCoveringAll:
		{535 to: 537})
		cover: (516 to: 520)
		declaredAt: (70 to: 74).
	[
	(sales
		cover: (543 to: 547)
		declaredAt: (82 to: 86)) do: [ :aSale |
		[
		([
		(aSale
			cover: (564 to: 568)
			declaredAt: (554 to: 558)) items ] valueCoveringAll:
			{570 to: 574}) associationsDo: [ :aSaleItem | | quantity |
			(quantity _ [
			(items
				cover: (634 to: 638)
				declaredAt: (70 to: 74))
				at:
					([
					(aSaleItem
						cover: (644 to: 652)
						declaredAt: (594 to: 602)) key ] valueCoveringAll:
						{654 to: 656})
				ifAbsent: [
					0 coverAll:
						{669 to: 669} ]] valueCoveringAll:
				{640 to: 642. 658 to: 666})
				cover: (622 to: 629)
				declaredAt: (608 to: 615).
			[
			(items
				cover: (676 to: 680)
				declaredAt: (70 to: 74))
				at:
					([
					(aSaleItem
						cover: (686 to: 694)
						declaredAt: (594 to: 602)) key ] valueCoveringAll:
						{696 to: 698})
				put:
					([
					(quantity
						cover: (705 to: 712)
						declaredAt: (608 to: 615)) +
						([
						(aSaleItem
							cover: (716 to: 724)
							declaredAt: (594 to: 602)) value ] valueCoveringAll:
							{726 to: 730}) ] valueCoveringAll:
						{714 to: 714}) ] valueCoveringAll:
				{682 to: 684. 700 to: 703} ]] valueCoveringAll:
			{576 to: 590}.
		(total _ [
		(total
			cover: (740 to: 744)
			declaredAt: (76 to: 80)) +
			([
			(aSale
				cover: (757 to: 761)
				declaredAt: (554 to: 558)) total ] valueCoveringAll:
				{763 to: 767}) ] valueCoveringAll:
			{755 to: 755})
			cover: (749 to: 753)
			declaredAt: (76 to: 80) ]] valueCoveringAll:
		{549 to: 551}.
	[
	(items
		cover: (775 to: 779)
		declaredAt: (70 to: 74))
		at:
			('Total' coverAll:
				{785 to: 791})
		put:
			(total
				cover: (798 to: 802)
				declaredAt: (76 to: 80)) ] valueCoveringAll:
		{781 to: 783. 793 to: 796}.
	^ items
		cover: (811 to: 815)
		declaredAt: (70 to: 74).! !
!Behavior method!
items
	^ items
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 15:04:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 15:04:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 15:04:13'!
PASSED!
!Behavior method!
advanceTime: aDuration
	(now _ [
	(now
		cover: (28 to: 30)
		declaredAt: (28 to: 30)) +
		(aDuration
			cover: (41 to: 49)
			declaredAt: (14 to: 22)) ] valueCoveringAll:
		{39 to: 39})
		cover: (35 to: 37)
		declaredAt: (28 to: 30).! !
!Behavior method!
signalCartSessionExpired
	[
	(self coverAll:
		{28 to: 31}) error:
		([
		(facade
			cover: (40 to: 45)
			declaredAt: (40 to: 45)) sessionHasExpiredErrorDescription ] valueCoveringAll:
			{47 to: 79}) ] valueCoveringAll:
		{33 to: 38}.! !
!Behavior method!
sessionHasExpiredErrorDescription
	^ 'The cart session is expired' coverAll:
		{38 to: 66}.! !
!Behavior method!
revertTime: aDuration
	(now _ [
	(now
		cover: (25 to: 27)
		declaredAt: (25 to: 27)) +
		([
		(aDuration
			cover: (38 to: 46)
			declaredAt: (13 to: 21)) negated ] valueCoveringAll:
			{48 to: 54}) ] valueCoveringAll:
		{36 to: 36})
		cover: (32 to: 34)
		declaredAt: (25 to: 27).! !

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:04:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:04:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:04:13'!
PASSED!

!methodRemoval: CartSession #addToCart:of: stamp: 'MS 11/11/2021 15:04:25'!
addToCart: anAmount of: aBook
	
	(lastTime + facade sessionDuration) < facade now ifTrue: [ self signalCartSessionExpired ].
	^cart add: anAmount of: aBook!
!Behavior method!
initialize
	(today _ [
	(DateAndTime
		cover: (23 to: 33)
		declaredAt: (23 to: 33)) now ] valueCoveringAll:
		{35 to: 37})
		cover: (14 to: 18)
		declaredAt: (14 to: 18).
	(transactionID _ 1 coverAll:
		{58 to: 58})
		cover: (41 to: 53)
		declaredAt: (41 to: 53).! !
!Behavior method!
createCart
	^ [
	(Cart
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) acceptingItemsOf:
		([
		(self coverAll:
			{39 to: 42}) defaultCatalog ] valueCoveringAll:
			{44 to: 57}) ] valueCoveringAll:
		{21 to: 37}.! !
!Behavior method!
defaultCatalog
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(Dictionary
		cover: (21 to: 30)
		declaredAt: (21 to: 30)) new ] valueCoveringAll:
		{32 to: 34}.
	[
	cascadeReceiver
		at: self itemSellByTheStore
		put: self itemSellByTheStorePrice ] valueCoveringAll:
		{38 to: 98}.
	[
	cascadeReceiver
		at: self anotherItemSellByTheStore
		put: self anotherItemSellByTheStorePrice ] valueCoveringAll:
		{103 to: 177}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{182 to: 189} ] value.! !
!Behavior method!
itemSellByTheStore
	^ 'validBook' coverAll:
		{25 to: 35}.! !
!Behavior method!
itemSellByTheStorePrice
	^ 10 coverAll:
		{29 to: 30}.! !
!Behavior method!
anotherItemSellByTheStore
	^ 'validBook2' coverAll:
		{32 to: 43}.! !
!Behavior method!
anotherItemSellByTheStorePrice
	^ 20 coverAll:
		{37 to: 38}.! !
!Behavior method!
acceptingItemsOf: aCatalog
	^ [
	([
	(self coverAll:
		{31 to: 34}) new ] valueCoveringAll:
		{36 to: 38}) initializeAcceptingItemsOf:
		(aCatalog
			cover: (68 to: 75)
			declaredAt: (19 to: 26)) ] valueCoveringAll:
		{40 to: 66}.! !
!Behavior method!
initializeAcceptingItemsOf: aCatalog
	(catalog _ aCatalog
		cover: (51 to: 58)
		declaredAt: (29 to: 36))
		cover: (40 to: 46)
		declaredAt: (40 to: 46).
	(items _ [
	(Bag
		cover: (71 to: 73)
		declaredAt: (71 to: 73)) new ] valueCoveringAll:
		{75 to: 77})
		cover: (62 to: 66)
		declaredAt: (62 to: 66).! !
!Behavior method!
isEmpty
	^ [
	(items
		cover: (13 to: 17)
		declaredAt: (13 to: 17)) isEmpty ] valueCoveringAll:
		{19 to: 25}.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/11/2021 15:04:33'!
PASSED!
!Behavior method!
itemNotSellByTheStore
	^ 'invalidBook' coverAll:
		{27 to: 39}.! !
!Behavior method!
add: anItem
	^ [
	(self coverAll:
		{17 to: 20})
		add:
			(1 coverAll:
				{27 to: 27})
		of:
			(anItem
				cover: (33 to: 38)
				declaredAt: (6 to: 11)) ] valueCoveringAll:
		{22 to: 25. 29 to: 31}.! !
!Behavior method!
add: aQuantity of: anItem
	[
	(self coverAll:
		{29 to: 32}) assertIsValidQuantity:
		(aQuantity
			cover: (57 to: 65)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{34 to: 55}.
	[
	(self coverAll:
		{69 to: 72}) assertIsValidItem:
		(anItem
			cover: (93 to: 98)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{74 to: 91}.
	[
	(1 coverAll:
		{103 to: 103})
		to:
			(aQuantity
				cover: (109 to: 117)
				declaredAt: (6 to: 14))
		do: [ :aNumber |
			[
			(items
				cover: (136 to: 140)
				declaredAt: (136 to: 140)) add:
				(anItem
					cover: (147 to: 152)
					declaredAt: (20 to: 25)) ] valueCoveringAll:
				{142 to: 145} ]] valueCoveringAll:
		{105 to: 107. 119 to: 121}.! !
!Behavior method!
assertIsValidQuantity: aQuantity
	[
	([
	(aQuantity
		cover: (36 to: 44)
		declaredAt: (24 to: 32)) strictlyPositive ] valueCoveringAll:
		{46 to: 61}) ifFalse: [
		[
		(self coverAll:
			{74 to: 77}) error:
			([
			(self coverAll:
				{86 to: 89}) invalidQuantityErrorMessage ] valueCoveringAll:
				{91 to: 117}) ] valueCoveringAll:
			{79 to: 84} ]] valueCoveringAll:
		{63 to: 70}.! !
!Behavior method!
assertIsValidItem: anItem
	[
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includesKey:
		(anItem
			cover: (51 to: 56)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			(self coverAll:
				{82 to: 85}) invalidItemErrorMessage ] valueCoveringAll:
				{87 to: 109}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{59 to: 66}.! !
!Behavior method!
invalidItemErrorMessage
	^ 'Item is not in catalog' coverAll:
		{29 to: 52}.! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/11/2021 15:04:33'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/11/2021 15:04:33'!
PASSED!
!Behavior method!
invalidQuantityErrorMessage
	^ 'Invalid number of items' coverAll:
		{33 to: 57}.! !

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/11/2021 15:04:33'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/11/2021 15:04:33'!
PASSED!
!Behavior method!
includes: anItem
	^ [
	(items
		cover: (21 to: 25)
		declaredAt: (21 to: 25)) includes:
		(anItem
			cover: (37 to: 42)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{27 to: 35}.! !

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/11/2021 15:04:33'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/11/2021 15:04:33'!
PASSED!
!Behavior method!
occurrencesOf: anItem
	^ [
	(items
		cover: (26 to: 30)
		declaredAt: (26 to: 30)) occurrencesOf:
		(anItem
			cover: (47 to: 52)
			declaredAt: (16 to: 21)) ] valueCoveringAll:
		{32 to: 45}.! !

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/11/2021 15:04:33'!
PASSED!
!Behavior method!
notExpiredCreditCard
	^ [
	(CreditCard
		cover: (26 to: 35)
		declaredAt: (26 to: 35)) expiringOn:
		([
		(Month
			cover: (50 to: 54)
			declaredAt: (50 to: 54))
			month:
				([
				(today
					cover: (63 to: 67)
					declaredAt: (63 to: 67)) monthIndex ] valueCoveringAll:
					{69 to: 78})
			year:
				([
				([
				(today
					cover: (86 to: 90)
					declaredAt: (63 to: 67)) yearNumber ] valueCoveringAll:
					{92 to: 101}) +
					(1 coverAll:
						{105 to: 105}) ] valueCoveringAll:
					{103 to: 103}) ] valueCoveringAll:
			{56 to: 61. 80 to: 84}) ] valueCoveringAll:
		{37 to: 47}.! !
!Behavior method!
expiringOn: aMonth
	^ [
	([
	(self coverAll:
		{25 to: 28}) new ] valueCoveringAll:
		{30 to: 32}) initializeExpiringOn:
		(aMonth
			cover: (56 to: 61)
			declaredAt: (13 to: 18)) ] valueCoveringAll:
		{34 to: 54}.! !
!Behavior method!
initializeExpiringOn: aMonth
	(expiration _ aMonth
		cover: (48 to: 53)
		declaredAt: (23 to: 28))
		cover: (34 to: 43)
		declaredAt: (34 to: 43).! !
!Behavior method!
today
	^ today
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !
!Behavior method!
transactionID
	^ self coverAll:
		{18 to: 21}.! !
!Behavior method!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook with: aTransactionId
	[
	(self coverAll:
		{131 to: 134}) assertIsNotEmpty:
		(aCart
			cover: (154 to: 158)
			declaredAt: (13 to: 17)) ] valueCoveringAll:
		{136 to: 152}.
	[
	(self coverAll:
		{162 to: 165})
		assertIsNotExpired:
			(aCreditCard
				cover: (187 to: 197)
				declaredAt: (29 to: 39))
		on:
			(aDate
				cover: (203 to: 207)
				declaredAt: (74 to: 78)) ] valueCoveringAll:
		{167 to: 185. 199 to: 201}.
	^ [
	([
	(self coverAll:
		{214 to: 217}) new ] valueCoveringAll:
		{219 to: 221})
		initializeToCheckout:
			(aCart
				cover: (245 to: 249)
				declaredAt: (13 to: 17))
		charging:
			(aCreditCard
				cover: (261 to: 271)
				declaredAt: (29 to: 39))
		throught:
			(aMerchantProcessor
				cover: (283 to: 300)
				declaredAt: (51 to: 68))
		registeringOn:
			(aSalesBook
				cover: (317 to: 326)
				declaredAt: (95 to: 104))
		with:
			(aTransactionId
				cover: (334 to: 347)
				declaredAt: (112 to: 125)) ] valueCoveringAll:
		{223 to: 243. 251 to: 259. 273 to: 281. 302 to: 315. 328 to: 332}.! !
!Behavior method!
assertIsNotEmpty: aCart
	[
	([
	(aCart
		cover: (29 to: 33)
		declaredAt: (19 to: 23)) isEmpty ] valueCoveringAll:
		{35 to: 41}) ifTrue: [
		[
		(self coverAll:
			{52 to: 55}) error:
			([
			(self coverAll:
				{64 to: 67}) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
				{69 to: 97}) ] valueCoveringAll:
			{57 to: 62} ]] valueCoveringAll:
		{43 to: 49}.! !
!Behavior method!
cartCanNotBeEmptyErrorMessage
	^ 'Can not check out an empty cart' coverAll:
		{35 to: 67}.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/11/2021 15:04:33'!
PASSED!
!Behavior method!
assertIsNotExpired: aCreditCard on: aDate
	[
	([
	(aCreditCard
		cover: (47 to: 57)
		declaredAt: (21 to: 31)) isExpiredOn:
		(aDate
			cover: (72 to: 76)
			declaredAt: (37 to: 41)) ] valueCoveringAll:
		{59 to: 70}) ifTrue: [
		[
		(self coverAll:
			{89 to: 92}) error:
			([
			(self coverAll:
				{101 to: 104}) canNotChargeAnExpiredCreditCardErrorMessage ] valueCoveringAll:
				{106 to: 148}) ] valueCoveringAll:
			{94 to: 99} ]] valueCoveringAll:
		{79 to: 85}.! !
!Behavior method!
isExpiredOn: aDate
	^ [
	([
	(expiration
		cover: (25 to: 34)
		declaredAt: (25 to: 34)) start ] valueCoveringAll:
		{36 to: 40}) <
		([
		([
		(Month
			cover: (45 to: 49)
			declaredAt: (45 to: 49))
			month:
				([
				(aDate
					cover: (58 to: 62)
					declaredAt: (14 to: 18)) monthIndex ] valueCoveringAll:
					{64 to: 73})
			year:
				([
				(aDate
					cover: (81 to: 85)
					declaredAt: (14 to: 18)) yearNumber ] valueCoveringAll:
					{87 to: 96}) ] valueCoveringAll:
			{51 to: 56. 75 to: 79}) start ] valueCoveringAll:
			{99 to: 103}) ] valueCoveringAll:
		{42 to: 42}.! !
!Behavior method!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook with: aTransactionID
	(cart _ aCart
		cover: (138 to: 142)
		declaredAt: (23 to: 27))
		cover: (130 to: 133)
		declaredAt: (130 to: 133).
	(creditCard _ aCreditCard
		cover: (160 to: 170)
		declaredAt: (39 to: 49))
		cover: (146 to: 155)
		declaredAt: (146 to: 155).
	(merchantProcessor _ aMerchantProcessor
		cover: (195 to: 212)
		declaredAt: (61 to: 78))
		cover: (174 to: 190)
		declaredAt: (174 to: 190).
	(salesBook _ aSalesBook
		cover: (229 to: 238)
		declaredAt: (95 to: 104))
		cover: (216 to: 224)
		declaredAt: (216 to: 224).
	(transactionsIDs _ aTransactionID
		cover: (261 to: 274)
		declaredAt: (112 to: 125))
		cover: (242 to: 256)
		declaredAt: (242 to: 256).! !
!Behavior method!
checkOut
	| sale |
	[
	(self coverAll:
		{22 to: 25}) calculateTotal ] valueCoveringAll:
		{27 to: 40}.
	[
	(self coverAll:
		{44 to: 47}) debitTotal ] valueCoveringAll:
		{49 to: 58}.
	(sale _ [
	(self coverAll:
		{70 to: 73}) registerSale ] valueCoveringAll:
		{75 to: 86})
		cover: (62 to: 65)
		declaredAt: (14 to: 17).
	^ sale
		cover: (93 to: 96)
		declaredAt: (14 to: 17).! !
!Behavior method!
calculateTotal
	(total _ [
	(cart
		cover: (27 to: 30)
		declaredAt: (27 to: 30)) total ] valueCoveringAll:
		{32 to: 36})
		cover: (18 to: 22)
		declaredAt: (18 to: 22).! !
!Behavior method!
total
	^ [
	(items
		cover: (11 to: 15)
		declaredAt: (11 to: 15)) sum: [ :anItem |
		[
		(catalog
			cover: (34 to: 40)
			declaredAt: (34 to: 40)) at:
			(anItem
				cover: (46 to: 51)
				declaredAt: (25 to: 30)) ] valueCoveringAll:
			{42 to: 44} ]] valueCoveringAll:
		{17 to: 20}.! !
!Behavior method!
debitTotal
	[
	(merchantProcessor
		cover: (14 to: 30)
		declaredAt: (14 to: 30))
		debit:
			(total
				cover: (39 to: 43)
				declaredAt: (39 to: 43))
		from:
			(creditCard
				cover: (51 to: 60)
				declaredAt: (51 to: 60)) ] valueCoveringAll:
		{32 to: 37. 45 to: 49}.! !
!Behavior method!
registerSale
	| sale transactionID |
	(sale _ [
	(self coverAll:
		{48 to: 51}) createSale ] valueCoveringAll:
		{53 to: 62})
		cover: (40 to: 43)
		declaredAt: (18 to: 21).
	(transactionID _ [
	(transactionsIDs
		cover: (83 to: 97)
		declaredAt: (83 to: 97)) nextTransactionId ] valueCoveringAll:
		{99 to: 115})
		cover: (66 to: 78)
		declaredAt: (23 to: 35).
	[
	(salesBook
		cover: (122 to: 130)
		declaredAt: (122 to: 130))
		at:
			(transactionID
				cover: (136 to: 148)
				declaredAt: (23 to: 35))
		put:
			(sale
				cover: (155 to: 158)
				declaredAt: (18 to: 21)) ] valueCoveringAll:
		{132 to: 134. 150 to: 153}.
	^ transactionID
		cover: (165 to: 177)
		declaredAt: (23 to: 35).! !
!Behavior method!
createSale
	^ [
	(Sale
		cover: (16 to: 19)
		declaredAt: (16 to: 19))
		of:
			([
			(cart
				cover: (24 to: 27)
				declaredAt: (24 to: 27)) detail ] valueCoveringAll:
				{29 to: 34})
		with:
			(total
				cover: (42 to: 46)
				declaredAt: (42 to: 46)) ] valueCoveringAll:
		{21 to: 23. 36 to: 40}.! !
!Behavior method!
detail
	| detail |
	(detail _ [
	(OrderedDictionary
		cover: (33 to: 49)
		declaredAt: (33 to: 49)) new ] valueCoveringAll:
		{51 to: 53})
		cover: (23 to: 28)
		declaredAt: (11 to: 16).
	[
	(items
		cover: (58 to: 62)
		declaredAt: (58 to: 62)) do: [ :item |
		[
		(detail
			cover: (77 to: 82)
			declaredAt: (11 to: 16))
			at:
				(item
					cover: (88 to: 91)
					declaredAt: (71 to: 74))
			put:
				([
				(items
					cover: (99 to: 103)
					declaredAt: (58 to: 62)) occurrencesOf:
					(item
						cover: (120 to: 123)
						declaredAt: (71 to: 74)) ] valueCoveringAll:
					{105 to: 118}) ] valueCoveringAll:
			{84 to: 86. 93 to: 96} ]] valueCoveringAll:
		{64 to: 66}.
	^ detail
		cover: (135 to: 140)
		declaredAt: (11 to: 16).! !
!Behavior method!
of: someItems with: aTotal
	"should assert total is not negative or 0!!"
	^ [
	([
	(self coverAll:
		{76 to: 79}) new ] valueCoveringAll:
		{81 to: 83})
		initializeWith:
			(someItems
				cover: (101 to: 109)
				declaredAt: (5 to: 13))
		andTotal:
			(aTotal
				cover: (121 to: 126)
				declaredAt: (21 to: 26)) ] valueCoveringAll:
		{85 to: 99. 111 to: 119}.! !
!Behavior method!
initializeWith: someItems andTotal: aTotal
	(total _ aTotal
		cover: (55 to: 60)
		declaredAt: (37 to: 42))
		cover: (46 to: 50)
		declaredAt: (46 to: 50).
	(items _ someItems
		cover: (73 to: 81)
		declaredAt: (17 to: 25))
		cover: (64 to: 68)
		declaredAt: (64 to: 68).! !
!Behavior method!
nextTransactionId
	(transactionID _ [
	(transactionID
		cover: (21 to: 33)
		declaredAt: (21 to: 33)) +
		(1 coverAll:
			{53 to: 53}) ] valueCoveringAll:
		{52 to: 52})
		cover: (38 to: 50)
		declaredAt: (21 to: 33).
	^ [
	(transactionID
		cover: (60 to: 72)
		declaredAt: (21 to: 33)) -
		(1 coverAll:
			{74 to: 74}) ] valueCoveringAll:
		{73 to: 73}.! !
!Behavior method!
total
	^ total
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/11/2021 15:04:33'!
PASSED!
!Behavior method!
expiredCreditCard
	^ [
	(CreditCard
		cover: (23 to: 32)
		declaredAt: (23 to: 32)) expiringOn:
		([
		(Month
			cover: (47 to: 51)
			declaredAt: (47 to: 51))
			month:
				([
				(today
					cover: (60 to: 64)
					declaredAt: (60 to: 64)) monthIndex ] valueCoveringAll:
					{66 to: 75})
			year:
				([
				([
				(today
					cover: (83 to: 87)
					declaredAt: (60 to: 64)) yearNumber ] valueCoveringAll:
					{89 to: 98}) -
					(1 coverAll:
						{102 to: 102}) ] valueCoveringAll:
					{100 to: 100}) ] valueCoveringAll:
			{53 to: 58. 77 to: 81}) ] valueCoveringAll:
		{34 to: 44}.! !
!Behavior method!
canNotChargeAnExpiredCreditCardErrorMessage
	^ 'Can not charge an expired credit card' coverAll:
		{49 to: 87}.! !

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/11/2021 15:04:33'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/11/2021 15:04:33'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/11/2021 15:04:33'!
PASSED!
!Behavior method!
creditCardHasNoCreditErrorMessage
	^ 'Credit card has no credit' coverAll:
		{39 to: 65}.! !

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/11/2021 15:04:33'!
PASSED!
!Behavior method!
for: aTime
	^ [
	([
	(self coverAll:
		{15 to: 18}) new ] valueCoveringAll:
		{20 to: 22}) initializeWith:
		(aTime
			cover: (40 to: 44)
			declaredAt: (6 to: 10)) ] valueCoveringAll:
		{24 to: 38}.! !
!Behavior method!
initializeWith: aTime
	(now _ aTime
		cover: (32 to: 36)
		declaredAt: (17 to: 21))
		cover: (25 to: 27)
		declaredAt: (25 to: 27).! !
!Behavior method!
withUsers: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock
	^ [
	([
	(self coverAll:
		{144 to: 147}) new ] valueCoveringAll:
		{149 to: 151})
		initializeWith:
			(usersWithPasswords
				cover: (169 to: 186)
				declaredAt: (12 to: 29))
		withCatalog:
			(aCatalog
				cover: (201 to: 208)
				declaredAt: (44 to: 51))
		withSalesBook:
			(aSalesBook
				cover: (225 to: 234)
				declaredAt: (68 to: 77))
		withMerchantProcessor:
			(aMerchantProcessor
				cover: (259 to: 276)
				declaredAt: (102 to: 119))
		withClock:
			(aClock
				cover: (289 to: 294)
				declaredAt: (132 to: 137)) ] valueCoveringAll:
		{153 to: 167. 188 to: 199. 210 to: 223. 236 to: 257. 278 to: 287}.! !
!Behavior method!
initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock
	(validUsers _ usersWithPasswords
		cover: (163 to: 180)
		declaredAt: (17 to: 34))
		cover: (149 to: 158)
		declaredAt: (149 to: 158).
	(catalog _ aCatalog
		cover: (195 to: 202)
		declaredAt: (49 to: 56))
		cover: (184 to: 190)
		declaredAt: (184 to: 190).
	(salesBook _ aSalesBook
		cover: (219 to: 228)
		declaredAt: (73 to: 82))
		cover: (206 to: 214)
		declaredAt: (206 to: 214).
	(merchantProcessor _ aMerchantProcessor
		cover: (253 to: 270)
		declaredAt: (107 to: 124))
		cover: (232 to: 248)
		declaredAt: (232 to: 248).
	(cartSessions _ [
	(Dictionary
		cover: (291 to: 300)
		declaredAt: (291 to: 300)) new ] valueCoveringAll:
		{302 to: 304})
		cover: (275 to: 286)
		declaredAt: (275 to: 286).
	(cartIdCounter _ 0 coverAll:
		{325 to: 325})
		cover: (308 to: 320)
		declaredAt: (308 to: 320).
	(transactionID _ 1 coverAll:
		{348 to: 348})
		cover: (331 to: 343)
		declaredAt: (331 to: 343).
	(cartToClient _ [
	(Dictionary
		cover: (370 to: 379)
		declaredAt: (291 to: 300)) new ] valueCoveringAll:
		{381 to: 383})
		cover: (354 to: 365)
		declaredAt: (354 to: 365).
	(clientToCart _ [
	(Dictionary
		cover: (403 to: 412)
		declaredAt: (291 to: 300)) new ] valueCoveringAll:
		{414 to: 416})
		cover: (387 to: 398)
		declaredAt: (387 to: 398).
	(clientsTransactions _ [
	(Dictionary
		cover: (445 to: 454)
		declaredAt: (291 to: 300)) new ] valueCoveringAll:
		{456 to: 458})
		cover: (422 to: 440)
		declaredAt: (422 to: 440).
	(clock _ aClock
		cover: (471 to: 476)
		declaredAt: (137 to: 142))
		cover: (462 to: 466)
		declaredAt: (462 to: 466).! !
!Behavior method!
createCartFor: aUser with: aUserPassword
	| password cart |
	[
	(validUsers
		cover: (65 to: 74)
		declaredAt: (65 to: 74))
		at:
			(aUser
				cover: (80 to: 84)
				declaredAt: (16 to: 20))
		ifAbsent: [
			[
			(self coverAll:
				{96 to: 99}) error:
				([
				(self coverAll:
					{108 to: 111}) invalidUserOrPasswordErrorDescription ] valueCoveringAll:
					{113 to: 149}) ] valueCoveringAll:
				{101 to: 106} ]] valueCoveringAll:
		{76 to: 78. 86 to: 94}.
	(password _ [
	(validUsers
		cover: (168 to: 177)
		declaredAt: (65 to: 74)) at:
		(aUser
			cover: (183 to: 187)
			declaredAt: (16 to: 20)) ] valueCoveringAll:
		{179 to: 181})
		cover: (156 to: 163)
		declaredAt: (47 to: 54).
	[
	([
	(password
		cover: (195 to: 202)
		declaredAt: (47 to: 54)) =
		(aUserPassword
			cover: (206 to: 218)
			declaredAt: (28 to: 40)) ] valueCoveringAll:
		{204 to: 204}) ifFalse: [
		[
		(self coverAll:
			{231 to: 234}) error:
			([
			(self coverAll:
				{243 to: 246}) invalidUserOrPasswordErrorDescription ] valueCoveringAll:
				{248 to: 284}) ] valueCoveringAll:
			{236 to: 241} ]] valueCoveringAll:
		{222 to: 229}.
	(cartIdCounter _ [
	(cartIdCounter
		cover: (291 to: 303)
		declaredAt: (291 to: 303)) +
		(1 coverAll:
			{324 to: 324}) ] valueCoveringAll:
		{322 to: 322})
		cover: (308 to: 320)
		declaredAt: (291 to: 303).
	(cart _ [
	(CartSession
		cover: (338 to: 348)
		declaredAt: (338 to: 348))
		for:
			([
			(Cart
				cover: (356 to: 359)
				declaredAt: (356 to: 359)) acceptingItemsOf:
				(catalog
					cover: (379 to: 385)
					declaredAt: (379 to: 385)) ] valueCoveringAll:
				{361 to: 377})
		ownedBy:
			(aUser
				cover: (397 to: 401)
				declaredAt: (16 to: 20))
		with:
			(self coverAll:
				{409 to: 412}) ] valueCoveringAll:
		{350 to: 353. 388 to: 395. 403 to: 407})
		cover: (330 to: 333)
		declaredAt: (56 to: 59).
	[
	(cartSessions
		cover: (418 to: 429)
		declaredAt: (418 to: 429))
		at:
			(cartIdCounter
				cover: (435 to: 447)
				declaredAt: (291 to: 303))
		put:
			(cart
				cover: (453 to: 456)
				declaredAt: (56 to: 59)) ] valueCoveringAll:
		{431 to: 433. 449 to: 452}.
	[
	(cartToClient
		cover: (462 to: 473)
		declaredAt: (462 to: 473))
		at:
			(cartIdCounter
				cover: (479 to: 491)
				declaredAt: (291 to: 303))
		put:
			(aUser
				cover: (498 to: 502)
				declaredAt: (16 to: 20)) ] valueCoveringAll:
		{475 to: 477. 493 to: 496}.
	^ cartIdCounter
		cover: (509 to: 521)
		declaredAt: (291 to: 303).! !
!Behavior method!
invalidUserOrPasswordErrorDescription
	^ 'Invalid user or password' coverAll:
		{42 to: 67}.! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 15:04:33'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 15:04:33'!
PASSED!
!Behavior method!
for: aCart ownedBy: aCustomer with: aSystemFacade
	^ [
	([
	(self coverAll:
		{54 to: 57}) new ] valueCoveringAll:
		{59 to: 61})
		initializedWith:
			(aCart
				cover: (80 to: 84)
				declaredAt: (6 to: 10))
		ownedBy:
			(aCustomer
				cover: (95 to: 103)
				declaredAt: (21 to: 29))
		with:
			(aSystemFacade
				cover: (111 to: 123)
				declaredAt: (37 to: 49)) ] valueCoveringAll:
		{63 to: 78. 86 to: 93. 105 to: 109}.! !
!Behavior method!
initializedWith: aCart ownedBy: aCustomer with: aFacade
	(cart _ aCart
		cover: (67 to: 71)
		declaredAt: (18 to: 22))
		cover: (59 to: 62)
		declaredAt: (59 to: 62).
	(owner _ aCustomer
		cover: (84 to: 92)
		declaredAt: (33 to: 41))
		cover: (75 to: 79)
		declaredAt: (75 to: 79).
	(facade _ aFacade
		cover: (107 to: 113)
		declaredAt: (49 to: 55))
		cover: (97 to: 102)
		declaredAt: (97 to: 102).
	(lastTime _ [
	(aFacade
		cover: (129 to: 135)
		declaredAt: (49 to: 55)) now ] valueCoveringAll:
		{137 to: 139})
		cover: (117 to: 124)
		declaredAt: (117 to: 124).! !
!Behavior method!
now
	^ [
	(clock
		cover: (8 to: 12)
		declaredAt: (8 to: 12)) now ] valueCoveringAll:
		{14 to: 16}.! !
!Behavior method!
now
	^ now
		cover: (8 to: 10)
		declaredAt: (8 to: 10).! !
!Behavior method!
listCart: aCartId
	^ [
	([
	(cartSessions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) at:
		(aCartId
			cover: (43 to: 49)
			declaredAt: (11 to: 17)) ] valueCoveringAll:
		{39 to: 41}) getItems ] valueCoveringAll:
		{52 to: 59}.! !
!Behavior method!
getItems
	[
	([
	([
	(lastTime
		cover: (12 to: 19)
		declaredAt: (12 to: 19)) +
		([
		(facade
			cover: (23 to: 28)
			declaredAt: (23 to: 28)) sessionDuration ] valueCoveringAll:
			{30 to: 44}) ] valueCoveringAll:
		{21 to: 21}) <
		([
		(facade
			cover: (49 to: 54)
			declaredAt: (23 to: 28)) now ] valueCoveringAll:
			{56 to: 58}) ] valueCoveringAll:
		{47 to: 47}) ifTrue: [
		[
		(self coverAll:
			{70 to: 73}) signalCartSessionExpired ] valueCoveringAll:
			{75 to: 98} ]] valueCoveringAll:
		{60 to: 66}.
	^ [
	(cart
		cover: (106 to: 109)
		declaredAt: (106 to: 109)) getItems ] valueCoveringAll:
		{111 to: 118}.! !
!Behavior method!
sessionDuration
	^ [
	(30 coverAll:
		{21 to: 22}) minutes ] valueCoveringAll:
		{24 to: 30}.! !
!Behavior method!
getItems
	^ [
	(items
		cover: (14 to: 18)
		declaredAt: (14 to: 18)) copy ] valueCoveringAll:
		{20 to: 23}.! !

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 15:04:34'!
PASSED!
!Behavior method!
addToCart: cartId book: aBook bookQuantity: aQuantity
	| cart |
	(cart _ [
	(cartSessions
		cover: (76 to: 87)
		declaredAt: (76 to: 87))
		at:
			(cartId
				cover: (93 to: 98)
				declaredAt: (12 to: 17))
		ifAbsent: [ ^ [
			(self coverAll:
				{112 to: 115}) error:
				([
				(self coverAll:
					{124 to: 127}) invalidCartIdErrorMessage ] valueCoveringAll:
					{129 to: 153}) ] valueCoveringAll:
				{117 to: 122} ]] valueCoveringAll:
		{89 to: 91. 100 to: 108})
		cover: (68 to: 71)
		declaredAt: (61 to: 64).
	[
	(catalog
		cover: (160 to: 166)
		declaredAt: (160 to: 166))
		at:
			(aBook
				cover: (172 to: 176)
				declaredAt: (25 to: 29))
		ifAbsent: [ ^ [
			(self coverAll:
				{190 to: 193}) error:
				([
				(self coverAll:
					{202 to: 205}) invalidItemErrorMessage ] valueCoveringAll:
					{207 to: 229}) ] valueCoveringAll:
				{195 to: 200} ]] valueCoveringAll:
		{168 to: 170. 178 to: 186}.
	[
	(cart
		cover: (236 to: 239)
		declaredAt: (61 to: 64))
		add:
			(aQuantity
				cover: (246 to: 254)
				declaredAt: (45 to: 53))
		of:
			(aBook
				cover: (260 to: 264)
				declaredAt: (25 to: 29)) ] valueCoveringAll:
		{241 to: 244. 256 to: 258}.! !
!Behavior method!
invalidItemErrorMessage
	^ 'Invalid item' coverAll:
		{28 to: 41}.! !

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 15:04:34'!
PASSED!
!Behavior method!
invalidCartIdErrorMessage
	^ 'Invalid CartId' coverAll:
		{30 to: 45}.! !

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 15:04:34'!
PASSED!
!Behavior method!
add: anAmount of: aBook
	[
	([
	([
	(lastTime
		cover: (30 to: 37)
		declaredAt: (30 to: 37)) +
		([
		(facade
			cover: (41 to: 46)
			declaredAt: (41 to: 46)) sessionDuration ] valueCoveringAll:
			{48 to: 62}) ] valueCoveringAll:
		{39 to: 39}) <
		([
		(facade
			cover: (67 to: 72)
			declaredAt: (41 to: 46)) now ] valueCoveringAll:
			{74 to: 76}) ] valueCoveringAll:
		{65 to: 65}) ifTrue: [
		[
		(self coverAll:
			{88 to: 91}) signalCartSessionExpired ] valueCoveringAll:
			{93 to: 116} ]] valueCoveringAll:
		{78 to: 84}.
	^ [
	(cart
		cover: (124 to: 127)
		declaredAt: (124 to: 127))
		add:
			(anAmount
				cover: (134 to: 141)
				declaredAt: (6 to: 13))
		of:
			(aBook
				cover: (147 to: 151)
				declaredAt: (19 to: 23)) ] valueCoveringAll:
		{129 to: 132. 143 to: 145}.! !

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 15:04:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 15:04:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 15:04:34'!
PASSED!
!Behavior method!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	| cart cashier transactionId client clientTransactions |
	(cart _ [
	(cartSessions
		cover: (132 to: 143)
		declaredAt: (132 to: 143))
		at:
			(cartId
				cover: (149 to: 154)
				declaredAt: (11 to: 16))
		ifAbsent: [
			[
			(self coverAll:
				{166 to: 169}) error:
				([
				(self coverAll:
					{178 to: 181}) invalidCartIdErrorMessage ] valueCoveringAll:
					{183 to: 207}) ] valueCoveringAll:
				{171 to: 176} ]] valueCoveringAll:
		{145 to: 147. 156 to: 164})
		cover: (124 to: 127)
		declaredAt: (66 to: 69).
	[
	([
	(cart
		cover: (215 to: 218)
		declaredAt: (66 to: 69)) isEmpty ] valueCoveringAll:
		{220 to: 226}) ifTrue: [
		[
		(self coverAll:
			{237 to: 240}) error:
			([
			(self coverAll:
				{249 to: 252}) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
				{254 to: 282}) ] valueCoveringAll:
			{242 to: 247} ]] valueCoveringAll:
		{229 to: 235}.
	[
	(cart
		cover: (289 to: 292)
		declaredAt: (66 to: 69)) isNotExpired ] valueCoveringAll:
		{294 to: 305}.
	(cashier _ [
	(Cashier
		cover: (320 to: 326)
		declaredAt: (320 to: 326))
		toCheckout:
			(cart
				cover: (343 to: 346)
				declaredAt: (66 to: 69))
		charging:
			(aCreditCard
				cover: (361 to: 371)
				declaredAt: (40 to: 50))
		throught:
			(merchantProcessor
				cover: (387 to: 403)
				declaredAt: (387 to: 403))
		on:
			(aDate
				cover: (412 to: 416)
				declaredAt: (56 to: 60))
		registeringOn:
			(salesBook
				cover: (436 to: 444)
				declaredAt: (436 to: 444))
		with:
			(self coverAll:
				{454 to: 457}) ] valueCoveringAll:
		{331 to: 341. 351 to: 359. 377 to: 385. 408 to: 410. 421 to: 434. 448 to: 452})
		cover: (309 to: 315)
		declaredAt: (71 to: 77).
	(transactionId _ [
	(cashier
		cover: (481 to: 487)
		declaredAt: (71 to: 77)) checkOut ] valueCoveringAll:
		{489 to: 496})
		cover: (464 to: 476)
		declaredAt: (79 to: 91).
	(client _ [
	(cartToClient
		cover: (513 to: 524)
		declaredAt: (513 to: 524)) removeKey:
		(cartId
			cover: (537 to: 542)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{526 to: 535})
		cover: (503 to: 508)
		declaredAt: (93 to: 98).
	(clientTransactions _ [
	(clientsTransactions
		cover: (570 to: 588)
		declaredAt: (570 to: 588))
		at:
			(client
				cover: (594 to: 599)
				declaredAt: (93 to: 98))
		ifAbsent: [
			[
			(OrderedCollection
				cover: (613 to: 629)
				declaredAt: (613 to: 629)) new ] valueCoveringAll:
				{631 to: 633} ]] valueCoveringAll:
		{590 to: 592. 601 to: 609})
		cover: (548 to: 565)
		declaredAt: (100 to: 117).
	[
	(clientTransactions
		cover: (639 to: 656)
		declaredAt: (100 to: 117)) add:
		(transactionId
			cover: (663 to: 675)
			declaredAt: (79 to: 91)) ] valueCoveringAll:
		{658 to: 661}.
	[
	(clientsTransactions
		cover: (680 to: 698)
		declaredAt: (570 to: 588))
		at:
			(client
				cover: (704 to: 709)
				declaredAt: (93 to: 98))
		put:
			(clientTransactions
				cover: (716 to: 733)
				declaredAt: (100 to: 117)) ] valueCoveringAll:
		{700 to: 702. 711 to: 714}.
	^ transactionId
		cover: (741 to: 753)
		declaredAt: (79 to: 91).! !

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 15:04:34'!
PASSED!
!Behavior method!
isEmpty
	^ [
	(cart
		cover: (13 to: 16)
		declaredAt: (13 to: 16)) isEmpty ] valueCoveringAll:
		{18 to: 24}.! !
!Behavior method!
cartCanNotBeEmptyErrorMessage
	^ [
	(Cashier
		cover: (36 to: 42)
		declaredAt: (36 to: 42)) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
		{44 to: 72}.! !

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 15:04:34'!
PASSED!
!Behavior method!
isNotExpired
	[
	([
	([
	(lastTime
		cover: (17 to: 24)
		declaredAt: (17 to: 24)) +
		([
		(facade
			cover: (28 to: 33)
			declaredAt: (28 to: 33)) sessionDuration ] valueCoveringAll:
			{35 to: 49}) ] valueCoveringAll:
		{26 to: 26}) <
		([
		(facade
			cover: (54 to: 59)
			declaredAt: (28 to: 33)) now ] valueCoveringAll:
			{61 to: 63}) ] valueCoveringAll:
		{52 to: 52}) ifTrue: [
		[
		(self coverAll:
			{75 to: 78}) signalCartSessionExpired ] valueCoveringAll:
			{80 to: 103} ]] valueCoveringAll:
		{65 to: 71}.! !
!Behavior method!
canNotChargeAnExpiredCreditCardErrorMessage
	^ [
	(Cashier
		cover: (50 to: 56)
		declaredAt: (50 to: 56)) canNotChargeAnExpiredCreditCardErrorMessage ] valueCoveringAll:
		{58 to: 100}.! !

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 15:04:34'!
PASSED!
!Behavior method!
total
	^ [
	(cart
		cover: (11 to: 14)
		declaredAt: (11 to: 14)) total ] valueCoveringAll:
		{16 to: 20}.! !
!Behavior method!
detail
	^ [
	(cart
		cover: (12 to: 15)
		declaredAt: (12 to: 15)) detail ] valueCoveringAll:
		{17 to: 22}.! !
!Behavior method!
nextTransactionId
	(transactionID _ [
	(transactionID
		cover: (22 to: 34)
		declaredAt: (22 to: 34)) +
		(1 coverAll:
			{54 to: 54}) ] valueCoveringAll:
		{53 to: 53})
		cover: (39 to: 51)
		declaredAt: (22 to: 34).
	^ [
	(transactionID
		cover: (61 to: 73)
		declaredAt: (22 to: 34)) -
		(1 coverAll:
			{76 to: 76}) ] valueCoveringAll:
		{75 to: 75}.! !
!Behavior method!
listPurchases: aUser withPassword: aPassword
	| clientTransactions items total sales password |
	[
	(validUsers
		cover: (101 to: 110)
		declaredAt: (101 to: 110))
		at:
			(aUser
				cover: (116 to: 120)
				declaredAt: (16 to: 20))
		ifAbsent: [
			[
			(self coverAll:
				{132 to: 135}) error:
				([
				(self coverAll:
					{144 to: 147}) invalidUserOrPasswordErrorDescription ] valueCoveringAll:
					{149 to: 185}) ] valueCoveringAll:
				{137 to: 142} ]] valueCoveringAll:
		{112 to: 114. 122 to: 130}.
	(password _ [
	(validUsers
		cover: (204 to: 213)
		declaredAt: (101 to: 110)) at:
		(aUser
			cover: (219 to: 223)
			declaredAt: (16 to: 20)) ] valueCoveringAll:
		{215 to: 217})
		cover: (192 to: 199)
		declaredAt: (88 to: 95).
	[
	([
	(password
		cover: (231 to: 238)
		declaredAt: (88 to: 95)) =
		(aPassword
			cover: (242 to: 250)
			declaredAt: (36 to: 44)) ] valueCoveringAll:
		{240 to: 240}) ifFalse: [
		[
		(self coverAll:
			{263 to: 266}) error:
			([
			(self coverAll:
				{275 to: 278}) invalidUserOrPasswordErrorDescription ] valueCoveringAll:
				{280 to: 316}) ] valueCoveringAll:
			{268 to: 273} ]] valueCoveringAll:
		{254 to: 261}.
	(clientTransactions _ [
	(clientsTransactions
		cover: (345 to: 363)
		declaredAt: (345 to: 363))
		at:
			(aUser
				cover: (369 to: 373)
				declaredAt: (16 to: 20))
		ifAbsent: [
			[
			(OrderedCollection
				cover: (386 to: 402)
				declaredAt: (386 to: 402)) new ] valueCoveringAll:
				{404 to: 406} ]] valueCoveringAll:
		{365 to: 367. 375 to: 383})
		cover: (323 to: 340)
		declaredAt: (51 to: 68).
	(sales _ [
	(clientTransactions
		cover: (421 to: 438)
		declaredAt: (51 to: 68)) collect: [ :aTransactionID |
		[
		(salesBook
			cover: (468 to: 476)
			declaredAt: (468 to: 476)) at:
			(aTransactionID
				cover: (482 to: 495)
				declaredAt: (451 to: 464)) ] valueCoveringAll:
			{478 to: 480} ]] valueCoveringAll:
		{440 to: 447})
		cover: (412 to: 416)
		declaredAt: (82 to: 86).
	(total _ 0 coverAll:
		{512 to: 512})
		cover: (503 to: 507)
		declaredAt: (76 to: 80).
	(items _ [
	(Dictionary
		cover: (524 to: 533)
		declaredAt: (524 to: 533)) new ] valueCoveringAll:
		{535 to: 537})
		cover: (516 to: 520)
		declaredAt: (70 to: 74).
	[
	(sales
		cover: (543 to: 547)
		declaredAt: (82 to: 86)) do: [ :aSale |
		[
		([
		(aSale
			cover: (564 to: 568)
			declaredAt: (554 to: 558)) items ] valueCoveringAll:
			{570 to: 574}) associationsDo: [ :aSaleItem | | quantity |
			(quantity _ [
			(items
				cover: (634 to: 638)
				declaredAt: (70 to: 74))
				at:
					([
					(aSaleItem
						cover: (644 to: 652)
						declaredAt: (594 to: 602)) key ] valueCoveringAll:
						{654 to: 656})
				ifAbsent: [
					0 coverAll:
						{669 to: 669} ]] valueCoveringAll:
				{640 to: 642. 658 to: 666})
				cover: (622 to: 629)
				declaredAt: (608 to: 615).
			[
			(items
				cover: (676 to: 680)
				declaredAt: (70 to: 74))
				at:
					([
					(aSaleItem
						cover: (686 to: 694)
						declaredAt: (594 to: 602)) key ] valueCoveringAll:
						{696 to: 698})
				put:
					([
					(quantity
						cover: (705 to: 712)
						declaredAt: (608 to: 615)) +
						([
						(aSaleItem
							cover: (716 to: 724)
							declaredAt: (594 to: 602)) value ] valueCoveringAll:
							{726 to: 730}) ] valueCoveringAll:
						{714 to: 714}) ] valueCoveringAll:
				{682 to: 684. 700 to: 703} ]] valueCoveringAll:
			{576 to: 590}.
		(total _ [
		(total
			cover: (740 to: 744)
			declaredAt: (76 to: 80)) +
			([
			(aSale
				cover: (757 to: 761)
				declaredAt: (554 to: 558)) total ] valueCoveringAll:
				{763 to: 767}) ] valueCoveringAll:
			{755 to: 755})
			cover: (749 to: 753)
			declaredAt: (76 to: 80) ]] valueCoveringAll:
		{549 to: 551}.
	[
	(items
		cover: (775 to: 779)
		declaredAt: (70 to: 74))
		at:
			('Total' coverAll:
				{785 to: 791})
		put:
			(total
				cover: (798 to: 802)
				declaredAt: (76 to: 80)) ] valueCoveringAll:
		{781 to: 783. 793 to: 796}.
	^ items
		cover: (811 to: 815)
		declaredAt: (70 to: 74).! !
!Behavior method!
items
	^ items
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 15:04:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 15:04:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 15:04:34'!
PASSED!
!Behavior method!
advanceTime: aDuration
	(now _ [
	(now
		cover: (28 to: 30)
		declaredAt: (28 to: 30)) +
		(aDuration
			cover: (41 to: 49)
			declaredAt: (14 to: 22)) ] valueCoveringAll:
		{39 to: 39})
		cover: (35 to: 37)
		declaredAt: (28 to: 30).! !
!Behavior method!
signalCartSessionExpired
	[
	(self coverAll:
		{28 to: 31}) error:
		([
		(facade
			cover: (40 to: 45)
			declaredAt: (40 to: 45)) sessionHasExpiredErrorDescription ] valueCoveringAll:
			{47 to: 79}) ] valueCoveringAll:
		{33 to: 38}.! !
!Behavior method!
sessionHasExpiredErrorDescription
	^ 'The cart session is expired' coverAll:
		{38 to: 66}.! !
!Behavior method!
revertTime: aDuration
	(now _ [
	(now
		cover: (25 to: 27)
		declaredAt: (25 to: 27)) +
		([
		(aDuration
			cover: (38 to: 46)
			declaredAt: (13 to: 21)) negated ] valueCoveringAll:
			{48 to: 54}) ] valueCoveringAll:
		{36 to: 36})
		cover: (32 to: 34)
		declaredAt: (25 to: 27).! !

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:04:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:04:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:04:34'!
PASSED!

Object subclass: #TusLibrosFacade
	instanceVariableNames: 'catalog salesBook merchantProcessor validUsers cartIdCounter transactionsId cartSessions transactionID cartToClient clientsTransactions clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosFacade category: 'TusLibros' stamp: 'MS 11/11/2021 15:06:24'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'catalog salesBook merchantProcessor validUsers cartIdCounter transactionsId cartSessions transactionID cartToClient clientsTransactions clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/11/2021 15:06:30' prior: 50974370!
initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock  
	
	validUsers := usersWithPasswords.
	catalog := aCatalog.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.

	cartSessions := Dictionary new.
	cartIdCounter := 0.
	
	transactionID := 1.
	
	cartToClient := Dictionary new.
	
	clientsTransactions := Dictionary new.
	clock := aClock.! !

Object subclass: #TusLibrosFacade
	instanceVariableNames: 'catalog salesBook merchantProcessor validUsers cartIdCounter cartSessions transactionID cartToClient clientsTransactions clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosFacade category: 'TusLibros' stamp: 'MS 11/11/2021 15:07:00'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'catalog salesBook merchantProcessor validUsers cartIdCounter cartSessions transactionID cartToClient clientsTransactions clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosFacade category: 'TusLibros' stamp: 'MS 11/11/2021 15:07:39'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'catalog salesBook merchantProcessor users cartIdCounter cartSessions transactionID cartToClient clientsTransactions clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:07:39' prior: 50973835!
listPurchases: aUser withPassword: aPassword 
	
	|clientTransactions items total sales password|
	
	users at: aUser ifAbsent:[self error: self invalidUserOrPasswordErrorDescription].
	
	password := users at: aUser.
	
	( password = aPassword ) ifFalse:[self error: self invalidUserOrPasswordErrorDescription].
	
	clientTransactions := clientsTransactions at: aUser ifAbsent: [OrderedCollection new.].
	sales := clientTransactions collect: [:aTransactionID | salesBook at: aTransactionID ].
	
	total := 0.
	items:= Dictionary new.
	
	sales do:[:aSale| 
		aSale items associationsDo: [:aSaleItem | | quantity |
			quantity := items at: aSaleItem key ifAbsent: [0].
			items at: aSaleItem key put: quantity + aSaleItem value
			].
		total := total + aSale total.
	].
	items at: 'Total' put: total. 
	
	^ items.
	
	! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:07:39' prior: 50983381!
initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock  
	
	users := usersWithPasswords.
	catalog := aCatalog.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.

	cartSessions := Dictionary new.
	cartIdCounter := 0.
	
	transactionID := 1.
	
	cartToClient := Dictionary new.
	
	clientsTransactions := Dictionary new.
	clock := aClock.! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:07:39' prior: 50974541!
createCartFor: aUser with: aUserPassword 
	
	|password cart|
	
	users at: aUser ifAbsent:[self error: self invalidUserOrPasswordErrorDescription].
	
	password := users at: aUser.
	
	( password = aUserPassword ) ifFalse:[self error: self invalidUserOrPasswordErrorDescription].
	
	cartIdCounter := cartIdCounter + 1.
	
	cart := CartSession for: (Cart acceptingItemsOf: catalog) ownedBy: aUser with: self.
	
	cartSessions at: cartIdCounter put:cart.
	
	cartToClient at: cartIdCounter put: aUser.
	
	^cartIdCounter.
	! !
!Sale class methodsFor: 'instance creation' stamp: 'MS 11/11/2021 15:42:56' prior: 50973260!
of: someItems with: aTotal

	^self new initializeWith: someItems andTotal: aTotal
! !
!Sale class methodsFor: 'instance creation' stamp: 'MS 11/11/2021 15:43:07'!
for: someItems with: aTotal

	^self new initializeWith: someItems andTotal: aTotal
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:43:07' prior: 50973393!
createSale

	^ Sale for:cart detail with: total .
! !

!methodRemoval: Sale class #of:with: stamp: 'MS 11/11/2021 15:43:07'!
of: someItems with: aTotal

	^self new initializeWith: someItems andTotal: aTotal
!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/11/2021 15:43:09'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/11/2021 15:43:09'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/11/2021 15:43:09'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/11/2021 15:43:09'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/11/2021 15:43:09'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/11/2021 15:43:09'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/11/2021 15:43:09'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/11/2021 15:43:09'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/11/2021 15:43:09'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/11/2021 15:43:09'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/11/2021 15:43:09'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/11/2021 15:43:09'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/11/2021 15:43:09'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/11/2021 15:43:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 15:43:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 15:43:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 15:43:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 15:43:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 15:43:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 15:43:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 15:43:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 15:43:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 15:43:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 15:43:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 15:43:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 15:43:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 15:43:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 15:43:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:43:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:43:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:43:09'!
PASSED!
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:43:49' prior: 50975502!
getItems
	
	(lastTime + facade sessionDuration) < facade now ifTrue: [ self signalCartSessionExpired ].	
	^cart getItems! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:44:14'!
assertHasNotExpired

	(lastTime + facade sessionDuration) < facade now ifTrue: [ self signalCartSessionExpired ].	
! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:44:14' prior: 50975674!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier transactionId client clientTransactions |
	
	cart := cartSessions at: cartId ifAbsent:[self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[self error: self cartCanNotBeEmptyErrorMessage].
	
	cart assertHasNotExpired.
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook
		with: self.
		
	transactionId := cashier checkOut .
	
	client := cartToClient removeKey: cartId.
	
	clientTransactions := clientsTransactions at: client ifAbsent: [ OrderedCollection new ].
	clientTransactions add: transactionId .
	clientsTransactions at: client put: clientTransactions .
	
	^transactionId.
	
	
	! !

!methodRemoval: CartSession #isNotExpired stamp: 'MS 11/11/2021 15:44:14'!
isNotExpired

	(lastTime + facade sessionDuration) < facade now ifTrue: [ self signalCartSessionExpired ].	
!
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:44:29' prior: 50975399!
add: anAmount of: aBook 
	
	self assertHasNotExpired .

	^cart add: anAmount of: aBook .! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/11/2021 15:44:32'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/11/2021 15:44:32'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/11/2021 15:44:32'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/11/2021 15:44:32'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/11/2021 15:44:32'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/11/2021 15:44:32'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/11/2021 15:44:32'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/11/2021 15:44:32'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/11/2021 15:44:32'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/11/2021 15:44:32'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/11/2021 15:44:32'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/11/2021 15:44:32'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/11/2021 15:44:32'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/11/2021 15:44:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 15:44:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 15:44:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 15:44:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 15:44:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 15:44:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 15:44:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 15:44:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 15:44:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 15:44:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 15:44:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 15:44:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 15:44:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 15:44:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 15:44:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:44:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:44:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:44:32'!
PASSED!
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:44:43'!
assertCartHasNotExpired

	(lastTime + facade sessionDuration) < facade now ifTrue: [ self signalCartSessionExpired ].	
! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:44:43' prior: 50983635!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier transactionId client clientTransactions |
	
	cart := cartSessions at: cartId ifAbsent:[self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[self error: self cartCanNotBeEmptyErrorMessage].
	
	cart assertCartHasNotExpired.
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook
		with: self.
		
	transactionId := cashier checkOut .
	
	client := cartToClient removeKey: cartId.
	
	clientTransactions := clientsTransactions at: client ifAbsent: [ OrderedCollection new ].
	clientTransactions add: transactionId .
	clientsTransactions at: client put: clientTransactions .
	
	^transactionId.
	
	
	! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:44:43' prior: 50983668!
add: anAmount of: aBook 
	
	self assertCartHasNotExpired .

	^cart add: anAmount of: aBook .! !

!methodRemoval: CartSession #assertHasNotExpired stamp: 'MS 11/11/2021 15:44:43'!
assertHasNotExpired

	(lastTime + facade sessionDuration) < facade now ifTrue: [ self signalCartSessionExpired ].	
!
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:44:53' prior: 50983621!
getItems
	
	self assertCartHasNotExpired .
	^cart getItems! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:44:55' prior: 50983826!
getItems
	
	self assertCartHasNotExpired.
	^cart getItems! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:46:15' prior: 50968229!
test01cannotCreateCartWithInvalidUser
	
	| anInvalidUser aPassword|
	
	anInvalidUser := 'InvalidUser'.
	aPassword := 'pw'.
	
	self should:[ interface createCartFor: anInvalidUser with: aPassword ]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[ : anError | 
			self assert: anError messageText equals: interface invalidUserOrPasswordErrorDescription]
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:46:34' prior: 50968244!
test02cannotCreateCartWithInvalidPassword
	
	| aValidUser anInvalidPassword|
	
	aValidUser := 'ValidUser1'.
	anInvalidPassword := 'InvalidPassword1'.
	
	self should:[ interface createCartFor: aValidUser with: anInvalidPassword ]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[ : anError | 
			self assert: anError messageText equals: interface canNotChargeAnExpiredCreditCardErrorMessage ]
	
	
	! !

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 15:46:35'!
FAILURE!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:46:45' prior: 50983852!
test02cannotCreateCartWithInvalidPassword
	
	| aValidUser anInvalidPassword|
	
	aValidUser := 'ValidUser1'.
	anInvalidPassword := 'InvalidPassword1'.
	
	self should:[ interface createCartFor: aValidUser with: anInvalidPassword ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError | self assert: anError messageText equals: interface invalidUserOrPasswordErrorDescription]
	
	
	! !

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 15:46:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 15:46:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 15:46:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 15:46:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 15:46:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 15:46:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 15:46:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 15:46:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 15:46:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 15:46:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 15:46:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 15:46:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 15:46:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 15:46:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 15:46:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:46:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:46:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:46:45'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:46:52' prior: 50983872!
test02cannotCreateCartWithInvalidPassword
	
	| aValidUser anInvalidPassword|
	
	aValidUser := 'ValidUser1'.
	anInvalidPassword := 'InvalidPassword1'.
	
	self should:[ interface createCartFor: aValidUser with: anInvalidPassword ]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[ : anError | 
			self assert: anError messageText equals: interface invalidUserOrPasswordErrorDescription]
	
	
	! !

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 15:46:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 15:46:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 15:46:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 15:46:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 15:46:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 15:46:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 15:46:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 15:46:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 15:46:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 15:46:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 15:46:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 15:46:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 15:46:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 15:46:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 15:46:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:46:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:46:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:46:53'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:48:03'!
aValidUser
	
	^'ValidUser1'.
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:48:25'!
anInvalidUser
	^'InvalidUser'.
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:48:28' prior: 50984033!
anInvalidUser
	
	^'InvalidUser'.
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:48:50' prior: 50983837!
test01cannotCreateCartWithInvalidUser
	
	| aPassword|
	
	aPassword := 'pw'.
	
	self should:[ interface createCartFor: self anInvalidUser with: aPassword ]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[ : anError | 
			self assert: anError messageText equals: interface invalidUserOrPasswordErrorDescription]
	
	
	! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 15:48:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 15:48:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 15:48:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 15:48:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 15:48:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 15:48:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 15:48:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 15:48:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 15:48:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 15:48:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 15:48:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 15:48:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 15:48:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 15:48:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 15:48:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:48:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:48:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:48:54'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:49:20'!
anInvalidPassword
	
	^'InvalidPassword1'.
		
! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:49:39' prior: 50983951!
test02cannotCreateCartWithInvalidPassword
	
	self should:[ interface createCartFor: self aValidUser with: self anInvalidPassword ]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[ : anError | 
			self assert: anError messageText equals: interface invalidUserOrPasswordErrorDescription]
	
	
	! !

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 15:49:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 15:49:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 15:49:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 15:49:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 15:49:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 15:49:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 15:49:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 15:49:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 15:49:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 15:49:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 15:49:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 15:49:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 15:49:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 15:49:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 15:49:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:49:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:49:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:49:40'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:49:55'!
aValidPassword
	
	^'ValidPassword1'.
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:50:08' prior: 50984043!
test01cannotCreateCartWithInvalidUser
	
	self should:[ interface createCartFor: self anInvalidUser with: self aValidPassword ]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[ : anError | 
			self assert: anError messageText equals: interface invalidUserOrPasswordErrorDescription]
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:50:36' prior: 50968260!
test03anEmptyCartHasZeroItems
	
	| cartId|
		
	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	
	self assert: (interface listCart: cartId) isEmpty.
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:50:44' prior: 50968272!
test04addingAnInvalidBookToCartShouldThrowError
	
	| aValidUser aValidPassword cartId|
	
	aValidUser := 'ValidUser1'.
	aValidPassword := 'ValidPassword1'.
	
	cartId := interface createCartFor: aValidUser with: aValidPassword.
	
	
	self should:[ interface addToCart: cartId book:'anInvalidBook' bookQuantity:1 ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError |
		self assert: anError messageText equals: interface invalidItemErrorMessage.
		self assert: (interface listCart: cartId) isEmpty.]
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:50:55' prior: 50984227!
test04addingAnInvalidBookToCartShouldThrowError
	
	|cartId|
	
	cartId := interface createCartFor: self aValidUser with:self aValidPassword.
	
	
	self should:[ interface addToCart: cartId book:'anInvalidBook' bookQuantity:1 ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError |
		self assert: anError messageText equals: interface invalidItemErrorMessage.
		self assert: (interface listCart: cartId) isEmpty.]
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:50:58' prior: 50984247!
test04addingAnInvalidBookToCartShouldThrowError
	
	|cartId|
	
	cartId := interface createCartFor: self aValidUser with:self aValidPassword.
	
	self should:[ interface addToCart: cartId book:'anInvalidBook' bookQuantity:1 ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError |
		self assert: anError messageText equals: interface invalidItemErrorMessage.
		self assert: (interface listCart: cartId) isEmpty.]
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:51:25'!
anInvalidBook
	
	^'anInvalidBook'.! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:51:41'!
aValidBook
	
	^'validBook' ! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:51:50' prior: 50984264!
test04addingAnInvalidBookToCartShouldThrowError
	
	|cartId|
	
	cartId := interface createCartFor: self aValidUser with:self aValidPassword.
	
	self should:[ interface addToCart: cartId book:self anInvalidBook bookQuantity:1 ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError |
		self assert: anError messageText equals: interface invalidItemErrorMessage.
		self assert: (interface listCart: cartId) isEmpty.]
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 15:51:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 15:51:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 15:51:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 15:51:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 15:51:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 15:51:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 15:51:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 15:51:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 15:51:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 15:51:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 15:51:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 15:51:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 15:51:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 15:51:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 15:51:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:51:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:51:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:51:51'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:52:00' prior: 50968292!
test05addingAValidBookToInvalidCartIdShouldThrowError
	
	
	self should:[ interface addToCart: -50 book: self aValidBook bookQuantity:1 ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError |
		self assert: anError messageText equals: interface invalidCartIdErrorMessage.
		]
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 15:52:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 15:52:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 15:52:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 15:52:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 15:52:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 15:52:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 15:52:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 15:52:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 15:52:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 15:52:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 15:52:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 15:52:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 15:52:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 15:52:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 15:52:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:52:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:52:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:52:02'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:52:20' prior: 50968304!
test06listingACartWithValidCartIdReturnsItsItems
	
	|cartId booksInCart bag|
	
	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:1.
	
	booksInCart := interface listCart: cartId.
	
	bag := Bag new.
	bag add:'validBook'.
	
	self assert: bag equals: booksInCart.
	
	
	
	
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:52:30' prior: 50984446!
test06listingACartWithValidCartIdReturnsItsItems
	
	|cartId booksInCart bag|
	
	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:1.
	
	booksInCart := interface listCart: cartId.
	
	bag := Bag new.
	bag add:'validBook'.
	
	self assert: bag equals: booksInCart.! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:53:02' prior: 50984461!
test06listingACartWithValidCartIdReturnsItsItems
	
	|cartId booksInCart bag|
	
	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:1.
	
	booksInCart := interface listCart: cartId.
	
	bag := Bag new with: self aValidBook .

	self assert: bag equals: booksInCart.! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:53:10' prior: 50984476!
test06listingACartWithValidCartIdReturnsItsItems
	
	|cartId booksInCart expected|
	
	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:1.
	
	booksInCart := interface listCart: cartId.
	
	expected := Bag new with: self aValidBook .

	self assert: expected equals: booksInCart.! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:53:36' prior: 50968321!
test07listingACartWithValidCartIdReturnsItsThreeItems
	
	| cartId booksInCart bag|
	
	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:3.
	
	booksInCart := interface listCart: cartId.
	
	bag := Bag new.
	bag add:'validBook'.
	bag add:'validBook'.
	bag add:'validBook'.
	
	self assert: bag equals: booksInCart.
	
	
	
	
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:54:21' prior: 50984506!
test07listingACartWithValidCartIdReturnsItsThreeItems
	
	| cartId booksInCart bag|
	
	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:3.
	
	booksInCart := interface listCart: cartId.
	
	bag := Bag new.
	bag add:'validBook' withOccurrences: 3.
	
	self assert: bag equals: booksInCart.
	
	
	
	
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:54:25' prior: 50984523!
test07listingACartWithValidCartIdReturnsItsThreeItems
	
	| cartId booksInCart expected|
	
	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:3.
	
	booksInCart := interface listCart: cartId.
	
	expected := Bag new.
	expected add:'validBook' withOccurrences: 3.
	
	self assert: expected equals: booksInCart.
	
	
	
	
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 15:54:28'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:54:44' prior: 50968340!
test08listingACartWithValidCartIdReturnsItsFiveItems
	
	| cartId booksInCart bag|
	
	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:2.
	interface addToCart: cartId book:'validBook2' bookQuantity:3.
	
	booksInCart := interface listCart: cartId.
	
	bag := Bag new.
	bag add:'validBook' withOccurrences:2.
	bag add:'validBook2' withOccurrences:3.
	
	
	self assert: bag equals: booksInCart.
	
	
	
	
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:54:49' prior: 50984560!
test08listingACartWithValidCartIdReturnsItsFiveItems
	
	| cartId booksInCart bag|
	
	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:2.
	interface addToCart: cartId book:'validBook2' bookQuantity:3.
	
	booksInCart := interface listCart: cartId.
	
	bag := Bag new.
	bag add:'validBook' withOccurrences:2.
	bag add:'validBook2' withOccurrences:3.
	
	self assert: bag equals: booksInCart.
	
	
	
	
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:54:56' prior: 50984579!
test08listingACartWithValidCartIdReturnsItsFiveItems
	
	| cartId booksInCart expected|
	
	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:2.
	interface addToCart: cartId book:'validBook2' bookQuantity:3.
	
	booksInCart := interface listCart: cartId.
	
	expected := Bag new.
	expected add:'validBook' withOccurrences:2.
	expected add:'validBook2' withOccurrences:3.
	
	self assert: expected equals: booksInCart.
	
	
	
	
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:55:26' prior: 50968361!
test09cannotCheckoutWithInvalidCartId
	
	self should:[ interface checkOut: -50 withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[ : anError |
			self assert: anError messageText equals: interface invalidCartIdErrorMessage.		]
	
	
	
	
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:55:44' prior: 50975105!
test10cannotCheckoutEmptyCart
	| cartId |
	
	cartId := interface createCartFor: self aValidUser with:  self aValidPassword.
	
	self should:[ interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError |
		self assert: anError messageText equals: interface cartCanNotBeEmptyErrorMessage.
		]
	
	
	
	
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:56:13' prior: 50968395!
test11cannotCheckoutWithAnExpiredCreditCard
	| cartId |
	
	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	interface addToCart: cartId book: self aValidBook  bookQuantity: 1.
	
	self should:[ interface checkOut: cartId withCreditCardNumber: testObjectsFactory expiredCreditCard on: testObjectsFactory today]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError |
		self assert: anError messageText equals: interface canNotChargeAnExpiredCreditCardErrorMessage.
		]
	
	
	
	
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:56:21' prior: 50984650!
test11cannotCheckoutWithAnExpiredCreditCard
	| cartId |
	
	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	interface addToCart: cartId book: self aValidBook  bookQuantity: 1.
	
	self should:[ interface checkOut: cartId withCreditCardNumber: testObjectsFactory expiredCreditCard on: testObjectsFactory today]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[ : anError |
			self assert: anError messageText equals: interface canNotChargeAnExpiredCreditCardErrorMessage.]
	
	
	
	
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:56:47' prior: 50973584!
test12
	
	| cartId expected purchases|
	
	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:2.
	interface addToCart: cartId book:'validBook2' bookQuantity:5.
	
	expected := Dictionary new
		at: 'validBook' put: 2;
		at: 'validBook2' put: 5;
		at: 'Total' put: (20+100);
		yourself.
	
	interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today.
	
	purchases := interface listPurchases: self aValidUser withPassword: self aValidPassword.
		
	self assert: purchases equals: expected.
	! !

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 15:56:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 15:56:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 15:56:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 15:56:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 15:56:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 15:56:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 15:56:52'!
ERROR!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 15:56:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 15:56:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 15:56:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 15:56:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 15:56:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 15:56:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 15:56:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 15:56:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:56:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:56:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:56:52'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 15:56:52'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 15:57:03'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 15:57:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 15:57:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 15:57:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 15:57:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 15:57:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 15:57:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 15:57:06'!
ERROR!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 15:57:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 15:57:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 15:57:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 15:57:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 15:57:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 15:57:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 15:57:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 15:57:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:57:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:57:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:57:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 15:57:06'!
ERROR!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 15:57:14'!
ERROR!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:57:30' prior: 50984491!
test06listingACartWithValidCartIdReturnsItsItems
	
	|cartId booksInCart expected|
	
	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:1.
	
	booksInCart := interface listCart: cartId.
	
	expected := Bag with: self aValidBook .

	self assert: expected equals: booksInCart.! !

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 15:57:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 15:57:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 15:57:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 15:57:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 15:57:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 15:57:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 15:57:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 15:57:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 15:57:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 15:57:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 15:57:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 15:57:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 15:57:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 15:57:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 15:57:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:57:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:57:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:57:31'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:57:55' prior: 50973821!
test13
	
	self
		should: [interface listPurchases: self anInvalidUser  withPassword: self aValidPassword]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface invalidUserOrPasswordErrorDescription ]! !

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 15:57:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 15:57:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 15:57:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 15:57:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 15:57:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 15:57:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 15:57:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 15:57:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 15:57:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 15:57:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 15:57:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 15:57:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 15:57:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 15:57:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 15:57:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:57:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:57:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:57:56'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:58:00' prior: 50984928!
test13
	
	self
		should: [interface listPurchases: self anInvalidUser withPassword: self aValidPassword]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface invalidUserOrPasswordErrorDescription ]! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:58:19' prior: 50977252!
test14
	
	self
		should: [interface listPurchases: self aValidUser  withPassword: self anInvalidPassword  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface invalidUserOrPasswordErrorDescription ]! !

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 15:58:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 15:58:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 15:58:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 15:58:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 15:58:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 15:58:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 15:58:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 15:58:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 15:58:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 15:58:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 15:58:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 15:58:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 15:58:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 15:58:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 15:58:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:58:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:58:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:58:20'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:58:42' prior: 50974435!
test15canNotAddToCartWhenSessionIsExpired

	| cartId |

	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	clock advanceTime: (interface sessionDuration + 1 minutes) .
	self
		should: [interface addToCart: cartId book:'validBook'  bookQuantity: 1.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface sessionHasExpiredErrorDescription.
			clock revertTime: interface sessionDuration.
			self assert: (interface listCart: cartId) isEmpty ]! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:58:56' prior: 50985088!
test15canNotAddToCartWhenSessionIsExpired

	| cartId |

	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	clock advanceTime: (interface sessionDuration + 1 minutes) .
	self
		should: [interface addToCart: cartId book: self aValidBook  bookQuantity: 1.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface sessionHasExpiredErrorDescription.
			clock revertTime: interface sessionDuration.
			self assert: (interface listCart: cartId) isEmpty ]! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:59:12' prior: 50975482!
test16canNotListCartWhenSessionIsExpired

	| cartId |

	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	clock advanceTime: (interface sessionDuration + 1 minutes) .
	self
		should: [interface listCart: cartId]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface sessionHasExpiredErrorDescription ]! !

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:59:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 15:59:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 15:59:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 15:59:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 15:59:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 15:59:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 15:59:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 15:59:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 15:59:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 15:59:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 15:59:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 15:59:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 15:59:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 15:59:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 15:59:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:59:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:59:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:59:13'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:59:29' prior: 50975950!
test17canNotCheckOutCartWhenSessionIsExpired

	| cartId purchase expectedPurchase |

	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	interface addToCart: cartId book: 'validBook' bookQuantity: 2.
	clock advanceTime: (interface sessionDuration + 1 minutes) .
	self
		should: [interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface sessionHasExpiredErrorDescription.
			purchase := interface listPurchases: 'ValidUser1' withPassword:'ValidPassword1'.
			expectedPurchase := Dictionary new at: 'Total' put: 0; yourself.
			self assert: expectedPurchase equals: purchase ]! !

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:59:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 15:59:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 15:59:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 15:59:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 15:59:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 15:59:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 15:59:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 15:59:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 15:59:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 15:59:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 15:59:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 15:59:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 15:59:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 15:59:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 15:59:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:59:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:59:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 15:59:30'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:59:36' prior: 50985209!
test17canNotCheckOutCartWhenSessionIsExpired

	| cartId purchase expectedPurchase |

	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	interface addToCart: cartId book: self aValidBook bookQuantity: 2.
	clock advanceTime: (interface sessionDuration + 1 minutes) .
	self
		should: [interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface sessionHasExpiredErrorDescription.
			purchase := interface listPurchases: 'ValidUser1' withPassword:'ValidPassword1'.
			expectedPurchase := Dictionary new at: 'Total' put: 0; yourself.
			self assert: expectedPurchase equals: purchase ]! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 15:59:53' prior: 50985300!
test17canNotCheckOutCartWhenSessionIsExpired

	| cartId purchase expectedPurchase |

	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	interface addToCart: cartId book: self aValidBook bookQuantity: 2.
	clock advanceTime: (interface sessionDuration + 1 minutes) .
	self
		should: [interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface sessionHasExpiredErrorDescription.
			purchase := interface listPurchases: self aValidUser withPassword: self aValidPassword.
			expectedPurchase := Dictionary new at: 'Total' put: 0; yourself.
			self assert: expectedPurchase equals: purchase ]! !
!Clock methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 16:00:25' prior: 50974458!
revertTime: aDuration

	now := now - aDuration  ! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 16:00:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 16:00:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 16:00:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 16:00:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 16:00:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 16:00:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 16:00:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 16:00:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 16:00:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 16:00:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 16:00:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 16:00:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 16:00:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 16:00:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:00:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:00:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:00:27'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/11/2021 16:00:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/11/2021 16:00:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/11/2021 16:00:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/11/2021 16:00:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/11/2021 16:00:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/11/2021 16:00:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/11/2021 16:00:29'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/11/2021 16:00:29'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/11/2021 16:00:29'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/11/2021 16:00:29'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/11/2021 16:00:29'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/11/2021 16:00:29'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/11/2021 16:00:29'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/11/2021 16:00:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 16:00:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 16:00:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 16:00:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 16:00:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 16:00:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 16:00:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 16:00:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 16:00:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 16:00:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 16:00:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 16:00:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 16:00:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 16:00:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 16:00:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:00:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:00:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:00:29'!
PASSED!

----SNAPSHOT----(11 November 2021 16:02:09) CuisUniversity-4913.image priorSource: 20544845!
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/11/2021 16:04:45'!
assert: validUser with: validPassword
	
	|password cart|
	
	users at: validUser ifAbsent:[self error: self invalidUserOrPasswordErrorDescription].
	
	password := users at: validUser.
	
	( password = validPassword ) ifFalse:[self error: self invalidUserOrPasswordErrorDescription].
	
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/11/2021 16:04:49' prior: 50985528!
assert: validUser with: validPassword
	
	|password|
	
	users at: validUser ifAbsent:[self error: self invalidUserOrPasswordErrorDescription].
	
	password := users at: validUser.
	
	( password = validPassword ) ifFalse:[self error: self invalidUserOrPasswordErrorDescription].
	
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/11/2021 16:05:28' prior: 50983474!
createCartFor: aUser with: aUserPassword 
	
	|password cart|
	
	self assert: aUser with: aUserPassword.
	
	cartIdCounter := cartIdCounter + 1.
	
	cart := CartSession for: (Cart acceptingItemsOf: catalog) ownedBy: aUser with: self.
	
	cartSessions at: cartIdCounter put:cart.
	
	cartToClient at: cartIdCounter put: aUser.
	
	^cartIdCounter.
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/11/2021 16:05:32' prior: 50985552!
createCartFor: aUser with: aUserPassword 
	
	| cart|
	
	self assert: aUser with: aUserPassword.
	
	cartIdCounter := cartIdCounter + 1.
	
	cart := CartSession for: (Cart acceptingItemsOf: catalog) ownedBy: aUser with: self.
	
	cartSessions at: cartIdCounter put:cart.
	
	cartToClient at: cartIdCounter put: aUser.
	
	^cartIdCounter.
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/11/2021 16:06:17' prior: 50983428!
listPurchases: aUser withPassword: aPassword 
	
	|clientTransactions items total sales password|
	
	self assert: aUser with: aPassword.
	
	clientTransactions := clientsTransactions at: aUser ifAbsent: [OrderedCollection new.].
	sales := clientTransactions collect: [:aTransactionID | salesBook at: aTransactionID ].
	
	total := 0.
	items:= Dictionary new.
	
	sales do:[:aSale| 
		aSale items associationsDo: [:aSaleItem | | quantity |
			quantity := items at: aSaleItem key ifAbsent: [0].
			items at: aSaleItem key put: quantity + aSaleItem value
			].
		total := total + aSale total.
	].
	items at: 'Total' put: total. 
	
	^ items.
	
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/11/2021 16:06:22' prior: 50985580!
listPurchases: aUser withPassword: aPassword 
	
	|clientTransactions items total sales |
	
	self assert: aUser with: aPassword.
	
	clientTransactions := clientsTransactions at: aUser ifAbsent: [OrderedCollection new.].
	sales := clientTransactions collect: [:aTransactionID | salesBook at: aTransactionID ].
	
	total := 0.
	items:= Dictionary new.
	
	sales do:[:aSale| 
		aSale items associationsDo: [:aSaleItem | | quantity |
			quantity := items at: aSaleItem key ifAbsent: [0].
			items at: aSaleItem key put: quantity + aSaleItem value
			].
		total := total + aSale total.
	].
	items at: 'Total' put: total. 
	
	^ items.
	
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/11/2021 16:07:15' prior: 50983785!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier transactionId client clientTransactions |
	
	cart := cartSessions at: cartId ifAbsent:[self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[self error: self cartCanNotBeEmptyErrorMessage].
	
	cart assertCartHasNotExpired.
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook
		with: self.
		
	transactionId := cashier checkOut .
	
	client := cartToClient removeKey: cartId.
	
	clientTransactions := clientsTransactions at: client ifAbsent: [ OrderedCollection new ].
	clientTransactions add: transactionId .
	clientsTransactions at: client put: clientTransactions .
	
	^transactionId.
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 16:10:58'!
test11canNotCheckoutWithAnExpiredCreditCard
	| cartId |
	
	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	interface addToCart: cartId book: self aValidBook  bookQuantity: 1.
	
	self should:[ interface checkOut: cartId withCreditCardNumber: testObjectsFactory expiredCreditCard on: testObjectsFactory today]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[ : anError |
			self assert: anError messageText equals: interface canNotChargeAnExpiredCreditCardErrorMessage.]
	
	
	
	
	
	
	
	
	! !

!methodRemoval: TusLibrosFacadeTest #test11cannotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 16:10:58'!
test11cannotCheckoutWithAnExpiredCreditCard
	| cartId |
	
	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	interface addToCart: cartId book: self aValidBook  bookQuantity: 1.
	
	self should:[ interface checkOut: cartId withCreditCardNumber: testObjectsFactory expiredCreditCard on: testObjectsFactory today]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[ : anError |
			self assert: anError messageText equals: interface canNotChargeAnExpiredCreditCardErrorMessage.]
	
	
	
	
	
	
	
	
	!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 16:11:20' prior: 50984690!
test12
	
	| cartId expected purchases|
	
	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:2.
	interface addToCart: cartId book:'validBook2' bookQuantity:5.
	
	expected := Dictionary new
		at: 'validBook' put: 2;
		at: 'validBook2' put: 5;
		at: 'Total' put: (20+100);
		yourself.
	
	interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today.
	
	purchases := interface listPurchases: self aValidUser withPassword: self aValidPassword.
		
	self assert: expected equals: purchases .
	! !

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 16:11:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 16:11:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 16:11:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 16:11:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 16:11:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 16:11:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 16:11:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 16:11:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 16:11:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 16:11:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 16:11:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11canNotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 16:11:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 16:11:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 16:11:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 16:11:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:11:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:11:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:11:21'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 16:11:31' prior: 50985693!
test12
	
	| cartId expected purchases|
	
	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:2.
	interface addToCart: cartId book:'validBook2' bookQuantity:5.
	
	interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today.
	
	purchases := interface listPurchases: self aValidUser withPassword: self aValidPassword.
	
	expected := Dictionary new
		at: 'validBook' put: 2;
		at: 'validBook2' put: 5;
		at: 'Total' put: (20+100);
		yourself.	
		
	self assert: expected equals: purchases .
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 16:12:12'!
test12listPurchasesReturnsEveryBookWithTotal
	
	| cartId expected purchases|
	
	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:2.
	interface addToCart: cartId book:'validBook2' bookQuantity:5.
	
	interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today.
	
	purchases := interface listPurchases: self aValidUser withPassword: self aValidPassword.
	
	expected := Dictionary new
		at: 'validBook' put: 2;
		at: 'validBook2' put: 5;
		at: 'Total' put: (20+100);
		yourself.	
		
	self assert: expected equals: purchases .
	! !

!methodRemoval: TusLibrosFacadeTest #test12 stamp: 'MS 11/11/2021 16:12:12'!
test12
	
	| cartId expected purchases|
	
	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:2.
	interface addToCart: cartId book:'validBook2' bookQuantity:5.
	
	interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today.
	
	purchases := interface listPurchases: self aValidUser withPassword: self aValidPassword.
	
	expected := Dictionary new
		at: 'validBook' put: 2;
		at: 'validBook2' put: 5;
		at: 'Total' put: (20+100);
		yourself.	
		
	self assert: expected equals: purchases .
	!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 16:12:19'!
test12listPurchasesReturnsEveryBookAndTotalPrice
	
	| cartId expected purchases|
	
	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:2.
	interface addToCart: cartId book:'validBook2' bookQuantity:5.
	
	interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today.
	
	purchases := interface listPurchases: self aValidUser withPassword: self aValidPassword.
	
	expected := Dictionary new
		at: 'validBook' put: 2;
		at: 'validBook2' put: 5;
		at: 'Total' put: (20+100);
		yourself.	
		
	self assert: expected equals: purchases .
	! !

!methodRemoval: TusLibrosFacadeTest #test12listPurchasesReturnsEveryBookWithTotal stamp: 'MS 11/11/2021 16:12:19'!
test12listPurchasesReturnsEveryBookWithTotal
	
	| cartId expected purchases|
	
	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:2.
	interface addToCart: cartId book:'validBook2' bookQuantity:5.
	
	interface checkOut: cartId withCreditCardNumber: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today.
	
	purchases := interface listPurchases: self aValidUser withPassword: self aValidPassword.
	
	expected := Dictionary new
		at: 'validBook' put: 2;
		at: 'validBook2' put: 5;
		at: 'Total' put: (20+100);
		yourself.	
		
	self assert: expected equals: purchases .
	!
!TusLibrosFacade methodsFor: 'check out' stamp: 'MS 11/11/2021 16:12:47'!
checkOut: cartId withCreditCard: aCreditCard on: aDate
	
	|cart cashier transactionId client clientTransactions |
	
	cart := cartSessions at: cartId ifAbsent:[self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[self error: self cartCanNotBeEmptyErrorMessage].
	
	cart assertCartHasNotExpired.
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook
		with: self.
		
	transactionId := cashier checkOut .
	
	client := cartToClient removeKey: cartId.
	
	clientTransactions := clientsTransactions at: client ifAbsent: [ OrderedCollection new ].
	clientTransactions add: transactionId .
	clientsTransactions at: client put: clientTransactions .
	
	^transactionId.
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 16:12:47' prior: 50985848!
test12listPurchasesReturnsEveryBookAndTotalPrice
	
	| cartId expected purchases|
	
	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	
	interface addToCart: cartId book:'validBook' bookQuantity:2.
	interface addToCart: cartId book:'validBook2' bookQuantity:5.
	
	interface checkOut: cartId withCreditCard: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today.
	
	purchases := interface listPurchases: self aValidUser withPassword: self aValidPassword.
	
	expected := Dictionary new
		at: 'validBook' put: 2;
		at: 'validBook2' put: 5;
		at: 'Total' put: (20+100);
		yourself.	
		
	self assert: expected equals: purchases .
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 16:12:47' prior: 50984633!
test10cannotCheckoutEmptyCart
	| cartId |
	
	cartId := interface createCartFor: self aValidUser with:  self aValidPassword.
	
	self should:[ interface checkOut: cartId withCreditCard: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ : anError |
		self assert: anError messageText equals: interface cartCanNotBeEmptyErrorMessage.
		]
	
	
	
	
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 16:12:47' prior: 50984618!
test09cannotCheckoutWithInvalidCartId
	
	self should:[ interface checkOut: -50 withCreditCard: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[ : anError |
			self assert: anError messageText equals: interface invalidCartIdErrorMessage.		]
	
	
	
	
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 16:12:47' prior: 50985653!
test11canNotCheckoutWithAnExpiredCreditCard
	| cartId |
	
	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	interface addToCart: cartId book: self aValidBook  bookQuantity: 1.
	
	self should:[ interface checkOut: cartId withCreditCard: testObjectsFactory expiredCreditCard on: testObjectsFactory today]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[ : anError |
			self assert: anError messageText equals: interface canNotChargeAnExpiredCreditCardErrorMessage.]
	
	
	
	
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 16:12:47' prior: 50985329!
test17canNotCheckOutCartWhenSessionIsExpired

	| cartId purchase expectedPurchase |

	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	interface addToCart: cartId book: self aValidBook bookQuantity: 2.
	clock advanceTime: (interface sessionDuration + 1 minutes) .
	self
		should: [interface checkOut: cartId withCreditCard: testObjectsFactory notExpiredCreditCard on: testObjectsFactory today]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface sessionHasExpiredErrorDescription.
			purchase := interface listPurchases: self aValidUser withPassword: self aValidPassword.
			expectedPurchase := Dictionary new at: 'Total' put: 0; yourself.
			self assert: expectedPurchase equals: purchase ]! !

!methodRemoval: TusLibrosFacade #checkOut:withCreditCardNumber:on: stamp: 'MS 11/11/2021 16:12:47'!
checkOut: cartId withCreditCardNumber: aCreditCard on: aDate
	
	|cart cashier transactionId client clientTransactions |
	
	cart := cartSessions at: cartId ifAbsent:[self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[self error: self cartCanNotBeEmptyErrorMessage].
	
	cart assertCartHasNotExpired.
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook
		with: self.
		
	transactionId := cashier checkOut .
	
	client := cartToClient removeKey: cartId.
	
	clientTransactions := clientsTransactions at: client ifAbsent: [ OrderedCollection new ].
	clientTransactions add: transactionId .
	clientsTransactions at: client put: clientTransactions .
	
	^transactionId.
	
	
	!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 16:12:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 16:12:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 16:12:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 16:12:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 16:12:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 16:12:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 16:12:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 16:12:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 16:12:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 16:12:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11canNotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 16:12:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12listPurchasesReturnsEveryBookAndTotalPrice stamp: 'MS 11/11/2021 16:12:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 16:12:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 16:12:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:12:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:12:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:12:49'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 16:13:05' prior: 50985002!
test13
	
	self
		should: [interface listPurchases: self anInvalidUser withPassword: self aValidPassword]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface invalidUserOrPasswordErrorDescription ]! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 16:13:38'!
test13canNotListPurchaseOfAnInvalidCustomer
	
	self
		should: [interface listPurchases: self anInvalidUser withPassword: self aValidPassword]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface invalidUserOrPasswordErrorDescription ]! !

!methodRemoval: TusLibrosFacadeTest #test13 stamp: 'MS 11/11/2021 16:13:39'!
test13
	
	self
		should: [interface listPurchases: self anInvalidUser withPassword: self aValidPassword]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface invalidUserOrPasswordErrorDescription ]!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 16:14:01'!
test14canNotListPurchaseOfAValidUserWithInvalidPassword
	
	self
		should: [interface listPurchases: self aValidUser  withPassword: self anInvalidPassword  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface invalidUserOrPasswordErrorDescription ]! !

!methodRemoval: TusLibrosFacadeTest #test14 stamp: 'MS 11/11/2021 16:14:01'!
test14
	
	self
		should: [interface listPurchases: self aValidUser  withPassword: self anInvalidPassword  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface invalidUserOrPasswordErrorDescription ]!
!TusLibrosFacade methodsFor: 'check out' stamp: 'MS 11/11/2021 16:20:08'!
updateClienTransactions: aClient with: aTransactionID

	|clientTransactions|
	clientTransactions := clientsTransactions at: aClient ifAbsent: [ OrderedCollection new ].
	clientTransactions add: aTransactionID .
	clientsTransactions at: aClient put: clientTransactions .
	
	
	
	! !
!TusLibrosFacade methodsFor: 'check out' stamp: 'MS 11/11/2021 16:20:31' prior: 50985897!
checkOut: cartId withCreditCard: aCreditCard on: aDate
	
	|cart cashier transactionId client |
	
	cart := cartSessions at: cartId ifAbsent:[self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[self error: self cartCanNotBeEmptyErrorMessage].
	
	cart assertCartHasNotExpired.
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook
		with: self.
		
	transactionId := cashier checkOut .
	
	client := cartToClient removeKey: cartId.
	
	self updateClienTransactions: client with: transactionId.
	
	^transactionId.
	
	
	! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 16:20:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 16:20:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 16:20:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 16:20:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 16:20:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 16:20:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 16:20:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 16:20:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 16:20:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 16:20:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11canNotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 16:20:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12listPurchasesReturnsEveryBookAndTotalPrice stamp: 'MS 11/11/2021 16:20:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13canNotListPurchaseOfAnInvalidCustomer stamp: 'MS 11/11/2021 16:20:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14canNotListPurchaseOfAValidUserWithInvalidPassword stamp: 'MS 11/11/2021 16:20:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:20:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:20:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:20:37'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/11/2021 16:20:38'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/11/2021 16:20:38'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/11/2021 16:20:38'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/11/2021 16:20:38'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/11/2021 16:20:38'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/11/2021 16:20:38'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/11/2021 16:20:38'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/11/2021 16:20:38'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/11/2021 16:20:38'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/11/2021 16:20:38'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/11/2021 16:20:38'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/11/2021 16:20:38'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/11/2021 16:20:38'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/11/2021 16:20:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 16:20:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 16:20:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 16:20:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 16:20:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 16:20:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 16:20:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 16:20:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 16:20:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 16:20:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 16:20:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11canNotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 16:20:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12listPurchasesReturnsEveryBookAndTotalPrice stamp: 'MS 11/11/2021 16:20:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13canNotListPurchaseOfAnInvalidCustomer stamp: 'MS 11/11/2021 16:20:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14canNotListPurchaseOfAValidUserWithInvalidPassword stamp: 'MS 11/11/2021 16:20:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:20:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:20:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:20:38'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/11/2021 16:20:39'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/11/2021 16:20:39'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/11/2021 16:20:39'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/11/2021 16:20:39'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/11/2021 16:20:39'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/11/2021 16:20:39'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/11/2021 16:20:39'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/11/2021 16:20:39'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/11/2021 16:20:39'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/11/2021 16:20:39'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/11/2021 16:20:39'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/11/2021 16:20:39'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/11/2021 16:20:39'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/11/2021 16:20:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 16:20:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 16:20:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 16:20:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 16:20:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 16:20:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 16:20:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 16:20:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 16:20:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 16:20:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 16:20:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11canNotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 16:20:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12listPurchasesReturnsEveryBookAndTotalPrice stamp: 'MS 11/11/2021 16:20:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13canNotListPurchaseOfAnInvalidCustomer stamp: 'MS 11/11/2021 16:20:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14canNotListPurchaseOfAValidUserWithInvalidPassword stamp: 'MS 11/11/2021 16:20:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:20:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:20:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:20:39'!
PASSED!
!TusLibrosFacade methodsFor: 'check out' stamp: 'MS 11/11/2021 16:21:20' prior: 50986177!
updateClienTransactions: aClient with: aTransactionID

	|clientTransactions|
	
	clientTransactions := clientsTransactions at: aClient ifAbsent: [ OrderedCollection new ].
	clientTransactions add: aTransactionID .
	clientsTransactions at: aClient put: clientTransactions .
	
	
	
	! !
!TusLibrosFacade methodsFor: 'check out' stamp: 'MS 11/11/2021 16:21:25' prior: 50986492!
updateClienTransactions: aClient with: aTransactionID

	|clientTransactions|
	
	clientTransactions := clientsTransactions at: aClient ifAbsent: [ OrderedCollection new ].
	clientTransactions add: aTransactionID .
	clientsTransactions at: aClient put: clientTransactions .
	
	
	
	! !
!TusLibrosFacade methodsFor: 'check out' stamp: 'MS 11/11/2021 16:22:02' prior: 50986189!
checkOut: cartId withCreditCard: aCreditCard on: aDate
	
	|cart cashier transactionId client |
	
	cart := cartSessions at: cartId ifAbsent:[self error: self invalidCartIdErrorMessage].
	
	(cart isEmpty) ifTrue:[self error: self cartCanNotBeEmptyErrorMessage].
	
	cart assertCartHasNotExpired.
	
	cashier := Cashier 
		toCheckout: cart 
		charging: aCreditCard  
		throught: merchantProcessor 
		on: aDate 
		registeringOn: salesBook
		with: self.
		
	transactionId := cashier checkOut .
	
	client := cartToClient removeKey: cartId.
	
	self updateClienTransactions: client with: transactionId.
	
	^transactionId.
	
	
	! !
!TusLibrosFacade methodsFor: 'unclassified' stamp: 'MS 11/11/2021 16:23:03' prior: 50985603!
listPurchases: aUser withPassword: aPassword 
	
	|clientTransactions items total sales |
	
	self assert: aUser with: aPassword.
	
	clientTransactions := clientsTransactions at: aUser ifAbsent: [OrderedCollection new.].
	sales := clientTransactions collect: [:aTransactionID | salesBook at: aTransactionID ].
	
	total := 0.
	items:= Dictionary new.
	
	sales do:[:aSale| 
		aSale items associationsDo: [:aSaleItem | | aQuantity |
			aQuantity := items at: aSaleItem key ifAbsent: [0].
			items at: aSaleItem key put: aQuantity + aSaleItem value
			].
		total := total + aSale total.
	].
	items at: 'Total' put: total. 
	
	^ items.
	
	! !
!Behavior method!
initialize
	(today _ [
	(DateAndTime
		cover: (23 to: 33)
		declaredAt: (23 to: 33)) now ] valueCoveringAll:
		{35 to: 37})
		cover: (14 to: 18)
		declaredAt: (14 to: 18).
	(transactionID _ 1 coverAll:
		{58 to: 58})
		cover: (41 to: 53)
		declaredAt: (41 to: 53).! !
!Behavior method!
createCart
	^ [
	(Cart
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) acceptingItemsOf:
		([
		(self coverAll:
			{39 to: 42}) defaultCatalog ] valueCoveringAll:
			{44 to: 57}) ] valueCoveringAll:
		{21 to: 37}.! !
!Behavior method!
defaultCatalog
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(Dictionary
		cover: (21 to: 30)
		declaredAt: (21 to: 30)) new ] valueCoveringAll:
		{32 to: 34}.
	[
	cascadeReceiver
		at: self itemSellByTheStore
		put: self itemSellByTheStorePrice ] valueCoveringAll:
		{38 to: 98}.
	[
	cascadeReceiver
		at: self anotherItemSellByTheStore
		put: self anotherItemSellByTheStorePrice ] valueCoveringAll:
		{103 to: 177}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{182 to: 189} ] value.! !
!Behavior method!
itemSellByTheStore
	^ 'validBook' coverAll:
		{25 to: 35}.! !
!Behavior method!
itemSellByTheStorePrice
	^ 10 coverAll:
		{29 to: 30}.! !
!Behavior method!
anotherItemSellByTheStore
	^ 'validBook2' coverAll:
		{32 to: 43}.! !
!Behavior method!
anotherItemSellByTheStorePrice
	^ 20 coverAll:
		{37 to: 38}.! !
!Behavior method!
acceptingItemsOf: aCatalog
	^ [
	([
	(self coverAll:
		{31 to: 34}) new ] valueCoveringAll:
		{36 to: 38}) initializeAcceptingItemsOf:
		(aCatalog
			cover: (68 to: 75)
			declaredAt: (19 to: 26)) ] valueCoveringAll:
		{40 to: 66}.! !
!Behavior method!
initializeAcceptingItemsOf: aCatalog
	(catalog _ aCatalog
		cover: (51 to: 58)
		declaredAt: (29 to: 36))
		cover: (40 to: 46)
		declaredAt: (40 to: 46).
	(items _ [
	(Bag
		cover: (71 to: 73)
		declaredAt: (71 to: 73)) new ] valueCoveringAll:
		{75 to: 77})
		cover: (62 to: 66)
		declaredAt: (62 to: 66).! !
!Behavior method!
isEmpty
	^ [
	(items
		cover: (13 to: 17)
		declaredAt: (13 to: 17)) isEmpty ] valueCoveringAll:
		{19 to: 25}.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/11/2021 16:23:27'!
PASSED!
!Behavior method!
itemNotSellByTheStore
	^ 'invalidBook' coverAll:
		{27 to: 39}.! !
!Behavior method!
add: anItem
	^ [
	(self coverAll:
		{17 to: 20})
		add:
			(1 coverAll:
				{27 to: 27})
		of:
			(anItem
				cover: (33 to: 38)
				declaredAt: (6 to: 11)) ] valueCoveringAll:
		{22 to: 25. 29 to: 31}.! !
!Behavior method!
add: aQuantity of: anItem
	[
	(self coverAll:
		{29 to: 32}) assertIsValidQuantity:
		(aQuantity
			cover: (57 to: 65)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{34 to: 55}.
	[
	(self coverAll:
		{69 to: 72}) assertIsValidItem:
		(anItem
			cover: (93 to: 98)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{74 to: 91}.
	[
	(1 coverAll:
		{103 to: 103})
		to:
			(aQuantity
				cover: (109 to: 117)
				declaredAt: (6 to: 14))
		do: [ :aNumber |
			[
			(items
				cover: (136 to: 140)
				declaredAt: (136 to: 140)) add:
				(anItem
					cover: (147 to: 152)
					declaredAt: (20 to: 25)) ] valueCoveringAll:
				{142 to: 145} ]] valueCoveringAll:
		{105 to: 107. 119 to: 121}.! !
!Behavior method!
assertIsValidQuantity: aQuantity
	[
	([
	(aQuantity
		cover: (36 to: 44)
		declaredAt: (24 to: 32)) strictlyPositive ] valueCoveringAll:
		{46 to: 61}) ifFalse: [
		[
		(self coverAll:
			{74 to: 77}) error:
			([
			(self coverAll:
				{86 to: 89}) invalidQuantityErrorMessage ] valueCoveringAll:
				{91 to: 117}) ] valueCoveringAll:
			{79 to: 84} ]] valueCoveringAll:
		{63 to: 70}.! !
!Behavior method!
assertIsValidItem: anItem
	[
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includesKey:
		(anItem
			cover: (51 to: 56)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			(self coverAll:
				{82 to: 85}) invalidItemErrorMessage ] valueCoveringAll:
				{87 to: 109}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{59 to: 66}.! !
!Behavior method!
invalidItemErrorMessage
	^ 'Item is not in catalog' coverAll:
		{29 to: 52}.! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/11/2021 16:23:27'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/11/2021 16:23:27'!
PASSED!
!Behavior method!
invalidQuantityErrorMessage
	^ 'Invalid number of items' coverAll:
		{33 to: 57}.! !

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/11/2021 16:23:27'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/11/2021 16:23:27'!
PASSED!
!Behavior method!
includes: anItem
	^ [
	(items
		cover: (21 to: 25)
		declaredAt: (21 to: 25)) includes:
		(anItem
			cover: (37 to: 42)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{27 to: 35}.! !

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/11/2021 16:23:27'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/11/2021 16:23:27'!
PASSED!
!Behavior method!
occurrencesOf: anItem
	^ [
	(items
		cover: (26 to: 30)
		declaredAt: (26 to: 30)) occurrencesOf:
		(anItem
			cover: (47 to: 52)
			declaredAt: (16 to: 21)) ] valueCoveringAll:
		{32 to: 45}.! !

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/11/2021 16:23:27'!
PASSED!
!Behavior method!
notExpiredCreditCard
	^ [
	(CreditCard
		cover: (26 to: 35)
		declaredAt: (26 to: 35)) expiringOn:
		([
		(Month
			cover: (50 to: 54)
			declaredAt: (50 to: 54))
			month:
				([
				(today
					cover: (63 to: 67)
					declaredAt: (63 to: 67)) monthIndex ] valueCoveringAll:
					{69 to: 78})
			year:
				([
				([
				(today
					cover: (86 to: 90)
					declaredAt: (63 to: 67)) yearNumber ] valueCoveringAll:
					{92 to: 101}) +
					(1 coverAll:
						{105 to: 105}) ] valueCoveringAll:
					{103 to: 103}) ] valueCoveringAll:
			{56 to: 61. 80 to: 84}) ] valueCoveringAll:
		{37 to: 47}.! !
!Behavior method!
expiringOn: aMonth
	^ [
	([
	(self coverAll:
		{25 to: 28}) new ] valueCoveringAll:
		{30 to: 32}) initializeExpiringOn:
		(aMonth
			cover: (56 to: 61)
			declaredAt: (13 to: 18)) ] valueCoveringAll:
		{34 to: 54}.! !
!Behavior method!
initializeExpiringOn: aMonth
	(expiration _ aMonth
		cover: (48 to: 53)
		declaredAt: (23 to: 28))
		cover: (34 to: 43)
		declaredAt: (34 to: 43).! !
!Behavior method!
today
	^ today
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !
!Behavior method!
transactionID
	^ self coverAll:
		{18 to: 21}.! !
!Behavior method!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook with: aTransactionId
	[
	(self coverAll:
		{131 to: 134}) assertIsNotEmpty:
		(aCart
			cover: (154 to: 158)
			declaredAt: (13 to: 17)) ] valueCoveringAll:
		{136 to: 152}.
	[
	(self coverAll:
		{162 to: 165})
		assertIsNotExpired:
			(aCreditCard
				cover: (187 to: 197)
				declaredAt: (29 to: 39))
		on:
			(aDate
				cover: (203 to: 207)
				declaredAt: (74 to: 78)) ] valueCoveringAll:
		{167 to: 185. 199 to: 201}.
	^ [
	([
	(self coverAll:
		{214 to: 217}) new ] valueCoveringAll:
		{219 to: 221})
		initializeToCheckout:
			(aCart
				cover: (245 to: 249)
				declaredAt: (13 to: 17))
		charging:
			(aCreditCard
				cover: (261 to: 271)
				declaredAt: (29 to: 39))
		throught:
			(aMerchantProcessor
				cover: (283 to: 300)
				declaredAt: (51 to: 68))
		registeringOn:
			(aSalesBook
				cover: (317 to: 326)
				declaredAt: (95 to: 104))
		with:
			(aTransactionId
				cover: (334 to: 347)
				declaredAt: (112 to: 125)) ] valueCoveringAll:
		{223 to: 243. 251 to: 259. 273 to: 281. 302 to: 315. 328 to: 332}.! !
!Behavior method!
assertIsNotEmpty: aCart
	[
	([
	(aCart
		cover: (29 to: 33)
		declaredAt: (19 to: 23)) isEmpty ] valueCoveringAll:
		{35 to: 41}) ifTrue: [
		[
		(self coverAll:
			{52 to: 55}) error:
			([
			(self coverAll:
				{64 to: 67}) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
				{69 to: 97}) ] valueCoveringAll:
			{57 to: 62} ]] valueCoveringAll:
		{43 to: 49}.! !
!Behavior method!
cartCanNotBeEmptyErrorMessage
	^ 'Can not check out an empty cart' coverAll:
		{35 to: 67}.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/11/2021 16:23:27'!
PASSED!
!Behavior method!
assertIsNotExpired: aCreditCard on: aDate
	[
	([
	(aCreditCard
		cover: (47 to: 57)
		declaredAt: (21 to: 31)) isExpiredOn:
		(aDate
			cover: (72 to: 76)
			declaredAt: (37 to: 41)) ] valueCoveringAll:
		{59 to: 70}) ifTrue: [
		[
		(self coverAll:
			{89 to: 92}) error:
			([
			(self coverAll:
				{101 to: 104}) canNotChargeAnExpiredCreditCardErrorMessage ] valueCoveringAll:
				{106 to: 148}) ] valueCoveringAll:
			{94 to: 99} ]] valueCoveringAll:
		{79 to: 85}.! !
!Behavior method!
isExpiredOn: aDate
	^ [
	([
	(expiration
		cover: (25 to: 34)
		declaredAt: (25 to: 34)) start ] valueCoveringAll:
		{36 to: 40}) <
		([
		([
		(Month
			cover: (45 to: 49)
			declaredAt: (45 to: 49))
			month:
				([
				(aDate
					cover: (58 to: 62)
					declaredAt: (14 to: 18)) monthIndex ] valueCoveringAll:
					{64 to: 73})
			year:
				([
				(aDate
					cover: (81 to: 85)
					declaredAt: (14 to: 18)) yearNumber ] valueCoveringAll:
					{87 to: 96}) ] valueCoveringAll:
			{51 to: 56. 75 to: 79}) start ] valueCoveringAll:
			{99 to: 103}) ] valueCoveringAll:
		{42 to: 42}.! !
!Behavior method!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook with: aTransactionID
	(cart _ aCart
		cover: (138 to: 142)
		declaredAt: (23 to: 27))
		cover: (130 to: 133)
		declaredAt: (130 to: 133).
	(creditCard _ aCreditCard
		cover: (160 to: 170)
		declaredAt: (39 to: 49))
		cover: (146 to: 155)
		declaredAt: (146 to: 155).
	(merchantProcessor _ aMerchantProcessor
		cover: (195 to: 212)
		declaredAt: (61 to: 78))
		cover: (174 to: 190)
		declaredAt: (174 to: 190).
	(salesBook _ aSalesBook
		cover: (229 to: 238)
		declaredAt: (95 to: 104))
		cover: (216 to: 224)
		declaredAt: (216 to: 224).
	(transactionsIDs _ aTransactionID
		cover: (261 to: 274)
		declaredAt: (112 to: 125))
		cover: (242 to: 256)
		declaredAt: (242 to: 256).! !
!Behavior method!
checkOut
	| sale |
	[
	(self coverAll:
		{22 to: 25}) calculateTotal ] valueCoveringAll:
		{27 to: 40}.
	[
	(self coverAll:
		{44 to: 47}) debitTotal ] valueCoveringAll:
		{49 to: 58}.
	(sale _ [
	(self coverAll:
		{70 to: 73}) registerSale ] valueCoveringAll:
		{75 to: 86})
		cover: (62 to: 65)
		declaredAt: (14 to: 17).
	^ sale
		cover: (93 to: 96)
		declaredAt: (14 to: 17).! !
!Behavior method!
calculateTotal
	(total _ [
	(cart
		cover: (27 to: 30)
		declaredAt: (27 to: 30)) total ] valueCoveringAll:
		{32 to: 36})
		cover: (18 to: 22)
		declaredAt: (18 to: 22).! !
!Behavior method!
total
	^ [
	(items
		cover: (11 to: 15)
		declaredAt: (11 to: 15)) sum: [ :anItem |
		[
		(catalog
			cover: (34 to: 40)
			declaredAt: (34 to: 40)) at:
			(anItem
				cover: (46 to: 51)
				declaredAt: (25 to: 30)) ] valueCoveringAll:
			{42 to: 44} ]] valueCoveringAll:
		{17 to: 20}.! !
!Behavior method!
debitTotal
	[
	(merchantProcessor
		cover: (14 to: 30)
		declaredAt: (14 to: 30))
		debit:
			(total
				cover: (39 to: 43)
				declaredAt: (39 to: 43))
		from:
			(creditCard
				cover: (51 to: 60)
				declaredAt: (51 to: 60)) ] valueCoveringAll:
		{32 to: 37. 45 to: 49}.! !
!Behavior method!
registerSale
	| sale transactionID |
	(sale _ [
	(self coverAll:
		{48 to: 51}) createSale ] valueCoveringAll:
		{53 to: 62})
		cover: (40 to: 43)
		declaredAt: (18 to: 21).
	(transactionID _ [
	(transactionsIDs
		cover: (83 to: 97)
		declaredAt: (83 to: 97)) nextTransactionId ] valueCoveringAll:
		{99 to: 115})
		cover: (66 to: 78)
		declaredAt: (23 to: 35).
	[
	(salesBook
		cover: (122 to: 130)
		declaredAt: (122 to: 130))
		at:
			(transactionID
				cover: (136 to: 148)
				declaredAt: (23 to: 35))
		put:
			(sale
				cover: (155 to: 158)
				declaredAt: (18 to: 21)) ] valueCoveringAll:
		{132 to: 134. 150 to: 153}.
	^ transactionID
		cover: (165 to: 177)
		declaredAt: (23 to: 35).! !
!Behavior method!
createSale
	^ [
	(Sale
		cover: (16 to: 19)
		declaredAt: (16 to: 19))
		for:
			([
			(cart
				cover: (25 to: 28)
				declaredAt: (25 to: 28)) detail ] valueCoveringAll:
				{30 to: 35})
		with:
			(total
				cover: (43 to: 47)
				declaredAt: (43 to: 47)) ] valueCoveringAll:
		{21 to: 24. 37 to: 41}.! !
!Behavior method!
detail
	| detail |
	(detail _ [
	(OrderedDictionary
		cover: (33 to: 49)
		declaredAt: (33 to: 49)) new ] valueCoveringAll:
		{51 to: 53})
		cover: (23 to: 28)
		declaredAt: (11 to: 16).
	[
	(items
		cover: (58 to: 62)
		declaredAt: (58 to: 62)) do: [ :item |
		[
		(detail
			cover: (77 to: 82)
			declaredAt: (11 to: 16))
			at:
				(item
					cover: (88 to: 91)
					declaredAt: (71 to: 74))
			put:
				([
				(items
					cover: (99 to: 103)
					declaredAt: (58 to: 62)) occurrencesOf:
					(item
						cover: (120 to: 123)
						declaredAt: (71 to: 74)) ] valueCoveringAll:
					{105 to: 118}) ] valueCoveringAll:
			{84 to: 86. 93 to: 96} ]] valueCoveringAll:
		{64 to: 66}.
	^ detail
		cover: (135 to: 140)
		declaredAt: (11 to: 16).! !
!Behavior method!
for: someItems with: aTotal
	^ [
	([
	(self coverAll:
		{32 to: 35}) new ] valueCoveringAll:
		{37 to: 39})
		initializeWith:
			(someItems
				cover: (57 to: 65)
				declaredAt: (6 to: 14))
		andTotal:
			(aTotal
				cover: (77 to: 82)
				declaredAt: (22 to: 27)) ] valueCoveringAll:
		{41 to: 55. 67 to: 75}.! !
!Behavior method!
initializeWith: someItems andTotal: aTotal
	(total _ aTotal
		cover: (55 to: 60)
		declaredAt: (37 to: 42))
		cover: (46 to: 50)
		declaredAt: (46 to: 50).
	(items _ someItems
		cover: (73 to: 81)
		declaredAt: (17 to: 25))
		cover: (64 to: 68)
		declaredAt: (64 to: 68).! !
!Behavior method!
nextTransactionId
	(transactionID _ [
	(transactionID
		cover: (21 to: 33)
		declaredAt: (21 to: 33)) +
		(1 coverAll:
			{53 to: 53}) ] valueCoveringAll:
		{52 to: 52})
		cover: (38 to: 50)
		declaredAt: (21 to: 33).
	^ [
	(transactionID
		cover: (60 to: 72)
		declaredAt: (21 to: 33)) -
		(1 coverAll:
			{74 to: 74}) ] valueCoveringAll:
		{73 to: 73}.! !
!Behavior method!
total
	^ total
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/11/2021 16:23:27'!
PASSED!
!Behavior method!
expiredCreditCard
	^ [
	(CreditCard
		cover: (23 to: 32)
		declaredAt: (23 to: 32)) expiringOn:
		([
		(Month
			cover: (47 to: 51)
			declaredAt: (47 to: 51))
			month:
				([
				(today
					cover: (60 to: 64)
					declaredAt: (60 to: 64)) monthIndex ] valueCoveringAll:
					{66 to: 75})
			year:
				([
				([
				(today
					cover: (83 to: 87)
					declaredAt: (60 to: 64)) yearNumber ] valueCoveringAll:
					{89 to: 98}) -
					(1 coverAll:
						{102 to: 102}) ] valueCoveringAll:
					{100 to: 100}) ] valueCoveringAll:
			{53 to: 58. 77 to: 81}) ] valueCoveringAll:
		{34 to: 44}.! !
!Behavior method!
canNotChargeAnExpiredCreditCardErrorMessage
	^ 'Can not charge an expired credit card' coverAll:
		{49 to: 87}.! !

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/11/2021 16:23:27'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/11/2021 16:23:27'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/11/2021 16:23:27'!
PASSED!
!Behavior method!
creditCardHasNoCreditErrorMessage
	^ 'Credit card has no credit' coverAll:
		{39 to: 65}.! !

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/11/2021 16:23:27'!
PASSED!
!Behavior method!
for: aTime
	^ [
	([
	(self coverAll:
		{15 to: 18}) new ] valueCoveringAll:
		{20 to: 22}) initializeWith:
		(aTime
			cover: (40 to: 44)
			declaredAt: (6 to: 10)) ] valueCoveringAll:
		{24 to: 38}.! !
!Behavior method!
initializeWith: aTime
	(now _ aTime
		cover: (32 to: 36)
		declaredAt: (17 to: 21))
		cover: (25 to: 27)
		declaredAt: (25 to: 27).! !
!Behavior method!
withUsers: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock
	^ [
	([
	(self coverAll:
		{144 to: 147}) new ] valueCoveringAll:
		{149 to: 151})
		initializeWith:
			(usersWithPasswords
				cover: (169 to: 186)
				declaredAt: (12 to: 29))
		withCatalog:
			(aCatalog
				cover: (201 to: 208)
				declaredAt: (44 to: 51))
		withSalesBook:
			(aSalesBook
				cover: (225 to: 234)
				declaredAt: (68 to: 77))
		withMerchantProcessor:
			(aMerchantProcessor
				cover: (259 to: 276)
				declaredAt: (102 to: 119))
		withClock:
			(aClock
				cover: (289 to: 294)
				declaredAt: (132 to: 137)) ] valueCoveringAll:
		{153 to: 167. 188 to: 199. 210 to: 223. 236 to: 257. 278 to: 287}.! !
!Behavior method!
initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock
	(users _ usersWithPasswords
		cover: (158 to: 175)
		declaredAt: (17 to: 34))
		cover: (149 to: 153)
		declaredAt: (149 to: 153).
	(catalog _ aCatalog
		cover: (190 to: 197)
		declaredAt: (49 to: 56))
		cover: (179 to: 185)
		declaredAt: (179 to: 185).
	(salesBook _ aSalesBook
		cover: (214 to: 223)
		declaredAt: (73 to: 82))
		cover: (201 to: 209)
		declaredAt: (201 to: 209).
	(merchantProcessor _ aMerchantProcessor
		cover: (248 to: 265)
		declaredAt: (107 to: 124))
		cover: (227 to: 243)
		declaredAt: (227 to: 243).
	(cartSessions _ [
	(Dictionary
		cover: (286 to: 295)
		declaredAt: (286 to: 295)) new ] valueCoveringAll:
		{297 to: 299})
		cover: (270 to: 281)
		declaredAt: (270 to: 281).
	(cartIdCounter _ 0 coverAll:
		{320 to: 320})
		cover: (303 to: 315)
		declaredAt: (303 to: 315).
	(transactionID _ 1 coverAll:
		{343 to: 343})
		cover: (326 to: 338)
		declaredAt: (326 to: 338).
	(cartToClient _ [
	(Dictionary
		cover: (365 to: 374)
		declaredAt: (286 to: 295)) new ] valueCoveringAll:
		{376 to: 378})
		cover: (349 to: 360)
		declaredAt: (349 to: 360).
	(clientsTransactions _ [
	(Dictionary
		cover: (407 to: 416)
		declaredAt: (286 to: 295)) new ] valueCoveringAll:
		{418 to: 420})
		cover: (384 to: 402)
		declaredAt: (384 to: 402).
	(clock _ aClock
		cover: (433 to: 438)
		declaredAt: (137 to: 142))
		cover: (424 to: 428)
		declaredAt: (424 to: 428).! !
!Behavior method!
createCartFor: aUser with: aUserPassword
	| cart |
	[
	(self coverAll:
		{57 to: 60})
		assert:
			(aUser
				cover: (70 to: 74)
				declaredAt: (16 to: 20))
		with:
			(aUserPassword
				cover: (82 to: 94)
				declaredAt: (28 to: 40)) ] valueCoveringAll:
		{62 to: 68. 76 to: 80}.
	(cartIdCounter _ [
	(cartIdCounter
		cover: (100 to: 112)
		declaredAt: (100 to: 112)) +
		(1 coverAll:
			{133 to: 133}) ] valueCoveringAll:
		{131 to: 131})
		cover: (117 to: 129)
		declaredAt: (100 to: 112).
	(cart _ [
	(CartSession
		cover: (147 to: 157)
		declaredAt: (147 to: 157))
		for:
			([
			(Cart
				cover: (165 to: 168)
				declaredAt: (165 to: 168)) acceptingItemsOf:
				(catalog
					cover: (188 to: 194)
					declaredAt: (188 to: 194)) ] valueCoveringAll:
				{170 to: 186})
		ownedBy:
			(aUser
				cover: (206 to: 210)
				declaredAt: (16 to: 20))
		with:
			(self coverAll:
				{218 to: 221}) ] valueCoveringAll:
		{159 to: 162. 197 to: 204. 212 to: 216})
		cover: (139 to: 142)
		declaredAt: (48 to: 51).
	[
	(cartSessions
		cover: (227 to: 238)
		declaredAt: (227 to: 238))
		at:
			(cartIdCounter
				cover: (244 to: 256)
				declaredAt: (100 to: 112))
		put:
			(cart
				cover: (262 to: 265)
				declaredAt: (48 to: 51)) ] valueCoveringAll:
		{240 to: 242. 258 to: 261}.
	[
	(cartToClient
		cover: (271 to: 282)
		declaredAt: (271 to: 282))
		at:
			(cartIdCounter
				cover: (288 to: 300)
				declaredAt: (100 to: 112))
		put:
			(aUser
				cover: (307 to: 311)
				declaredAt: (16 to: 20)) ] valueCoveringAll:
		{284 to: 286. 302 to: 305}.
	^ cartIdCounter
		cover: (318 to: 330)
		declaredAt: (100 to: 112).! !
!Behavior method!
assert: validUser with: validPassword
	| password |
	[
	(users
		cover: (56 to: 60)
		declaredAt: (56 to: 60))
		at:
			(validUser
				cover: (66 to: 74)
				declaredAt: (9 to: 17))
		ifAbsent: [
			[
			(self coverAll:
				{86 to: 89}) error:
				([
				(self coverAll:
					{98 to: 101}) invalidUserOrPasswordErrorDescription ] valueCoveringAll:
					{103 to: 139}) ] valueCoveringAll:
				{91 to: 96} ]] valueCoveringAll:
		{62 to: 64. 76 to: 84}.
	(password _ [
	(users
		cover: (158 to: 162)
		declaredAt: (56 to: 60)) at:
		(validUser
			cover: (168 to: 176)
			declaredAt: (9 to: 17)) ] valueCoveringAll:
		{164 to: 166})
		cover: (146 to: 153)
		declaredAt: (43 to: 50).
	[
	([
	(password
		cover: (184 to: 191)
		declaredAt: (43 to: 50)) =
		(validPassword
			cover: (195 to: 207)
			declaredAt: (25 to: 37)) ] valueCoveringAll:
		{193 to: 193}) ifFalse: [
		[
		(self coverAll:
			{220 to: 223}) error:
			([
			(self coverAll:
				{232 to: 235}) invalidUserOrPasswordErrorDescription ] valueCoveringAll:
				{237 to: 273}) ] valueCoveringAll:
			{225 to: 230} ]] valueCoveringAll:
		{211 to: 218}.! !
!Behavior method!
invalidUserOrPasswordErrorDescription
	^ 'Invalid user or password' coverAll:
		{42 to: 67}.! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 16:23:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 16:23:27'!
PASSED!
!Behavior method!
for: aCart ownedBy: aCustomer with: aSystemFacade
	^ [
	([
	(self coverAll:
		{54 to: 57}) new ] valueCoveringAll:
		{59 to: 61})
		initializedWith:
			(aCart
				cover: (80 to: 84)
				declaredAt: (6 to: 10))
		ownedBy:
			(aCustomer
				cover: (95 to: 103)
				declaredAt: (21 to: 29))
		with:
			(aSystemFacade
				cover: (111 to: 123)
				declaredAt: (37 to: 49)) ] valueCoveringAll:
		{63 to: 78. 86 to: 93. 105 to: 109}.! !
!Behavior method!
initializedWith: aCart ownedBy: aCustomer with: aFacade
	(cart _ aCart
		cover: (67 to: 71)
		declaredAt: (18 to: 22))
		cover: (59 to: 62)
		declaredAt: (59 to: 62).
	(owner _ aCustomer
		cover: (84 to: 92)
		declaredAt: (33 to: 41))
		cover: (75 to: 79)
		declaredAt: (75 to: 79).
	(facade _ aFacade
		cover: (107 to: 113)
		declaredAt: (49 to: 55))
		cover: (97 to: 102)
		declaredAt: (97 to: 102).
	(lastTime _ [
	(aFacade
		cover: (129 to: 135)
		declaredAt: (49 to: 55)) now ] valueCoveringAll:
		{137 to: 139})
		cover: (117 to: 124)
		declaredAt: (117 to: 124).! !
!Behavior method!
now
	^ [
	(clock
		cover: (8 to: 12)
		declaredAt: (8 to: 12)) now ] valueCoveringAll:
		{14 to: 16}.! !
!Behavior method!
now
	^ now
		cover: (8 to: 10)
		declaredAt: (8 to: 10).! !
!Behavior method!
listCart: aCartId
	^ [
	([
	(cartSessions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) at:
		(aCartId
			cover: (43 to: 49)
			declaredAt: (11 to: 17)) ] valueCoveringAll:
		{39 to: 41}) getItems ] valueCoveringAll:
		{52 to: 59}.! !
!Behavior method!
getItems
	[
	(self coverAll:
		{13 to: 16}) assertCartHasNotExpired ] valueCoveringAll:
		{18 to: 40}.
	^ [
	(cart
		cover: (45 to: 48)
		declaredAt: (45 to: 48)) getItems ] valueCoveringAll:
		{50 to: 57}.! !
!Behavior method!
assertCartHasNotExpired
	[
	([
	([
	(lastTime
		cover: (28 to: 35)
		declaredAt: (28 to: 35)) +
		([
		(facade
			cover: (39 to: 44)
			declaredAt: (39 to: 44)) sessionDuration ] valueCoveringAll:
			{46 to: 60}) ] valueCoveringAll:
		{37 to: 37}) <
		([
		(facade
			cover: (65 to: 70)
			declaredAt: (39 to: 44)) now ] valueCoveringAll:
			{72 to: 74}) ] valueCoveringAll:
		{63 to: 63}) ifTrue: [
		[
		(self coverAll:
			{86 to: 89}) signalCartSessionExpired ] valueCoveringAll:
			{91 to: 114} ]] valueCoveringAll:
		{76 to: 82}.! !
!Behavior method!
sessionDuration
	^ [
	(30 coverAll:
		{21 to: 22}) minutes ] valueCoveringAll:
		{24 to: 30}.! !
!Behavior method!
getItems
	^ [
	(items
		cover: (14 to: 18)
		declaredAt: (14 to: 18)) copy ] valueCoveringAll:
		{20 to: 23}.! !

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 16:23:28'!
PASSED!
!Behavior method!
addToCart: cartId book: aBook bookQuantity: aQuantity
	| cart |
	(cart _ [
	(cartSessions
		cover: (76 to: 87)
		declaredAt: (76 to: 87))
		at:
			(cartId
				cover: (93 to: 98)
				declaredAt: (12 to: 17))
		ifAbsent: [ ^ [
			(self coverAll:
				{112 to: 115}) error:
				([
				(self coverAll:
					{124 to: 127}) invalidCartIdErrorMessage ] valueCoveringAll:
					{129 to: 153}) ] valueCoveringAll:
				{117 to: 122} ]] valueCoveringAll:
		{89 to: 91. 100 to: 108})
		cover: (68 to: 71)
		declaredAt: (61 to: 64).
	[
	(catalog
		cover: (160 to: 166)
		declaredAt: (160 to: 166))
		at:
			(aBook
				cover: (172 to: 176)
				declaredAt: (25 to: 29))
		ifAbsent: [ ^ [
			(self coverAll:
				{190 to: 193}) error:
				([
				(self coverAll:
					{202 to: 205}) invalidItemErrorMessage ] valueCoveringAll:
					{207 to: 229}) ] valueCoveringAll:
				{195 to: 200} ]] valueCoveringAll:
		{168 to: 170. 178 to: 186}.
	[
	(cart
		cover: (236 to: 239)
		declaredAt: (61 to: 64))
		add:
			(aQuantity
				cover: (246 to: 254)
				declaredAt: (45 to: 53))
		of:
			(aBook
				cover: (260 to: 264)
				declaredAt: (25 to: 29)) ] valueCoveringAll:
		{241 to: 244. 256 to: 258}.! !
!Behavior method!
invalidItemErrorMessage
	^ 'Invalid item' coverAll:
		{28 to: 41}.! !

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 16:23:28'!
PASSED!
!Behavior method!
invalidCartIdErrorMessage
	^ 'Invalid CartId' coverAll:
		{30 to: 45}.! !

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 16:23:28'!
PASSED!
!Behavior method!
add: anAmount of: aBook
	[
	(self coverAll:
		{29 to: 32}) assertCartHasNotExpired ] valueCoveringAll:
		{34 to: 56}.
	^ [
	(cart
		cover: (63 to: 66)
		declaredAt: (63 to: 66))
		add:
			(anAmount
				cover: (73 to: 80)
				declaredAt: (6 to: 13))
		of:
			(aBook
				cover: (86 to: 90)
				declaredAt: (19 to: 23)) ] valueCoveringAll:
		{68 to: 71. 82 to: 84}.! !

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 16:23:28'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 16:23:28'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 16:23:28'!
PASSED!
!Behavior method!
checkOut: cartId withCreditCard: aCreditCard on: aDate
	| cart cashier transactionId client |
	(cart _ [
	(cartSessions
		cover: (107 to: 118)
		declaredAt: (107 to: 118))
		at:
			(cartId
				cover: (124 to: 129)
				declaredAt: (11 to: 16))
		ifAbsent: [
			[
			(self coverAll:
				{141 to: 144}) error:
				([
				(self coverAll:
					{153 to: 156}) invalidCartIdErrorMessage ] valueCoveringAll:
					{158 to: 182}) ] valueCoveringAll:
				{146 to: 151} ]] valueCoveringAll:
		{120 to: 122. 131 to: 139})
		cover: (99 to: 102)
		declaredAt: (60 to: 63).
	[
	([
	(cart
		cover: (190 to: 193)
		declaredAt: (60 to: 63)) isEmpty ] valueCoveringAll:
		{195 to: 201}) ifTrue: [
		[
		(self coverAll:
			{212 to: 215}) error:
			([
			(self coverAll:
				{224 to: 227}) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
				{229 to: 257}) ] valueCoveringAll:
			{217 to: 222} ]] valueCoveringAll:
		{204 to: 210}.
	[
	(cart
		cover: (264 to: 267)
		declaredAt: (60 to: 63)) assertCartHasNotExpired ] valueCoveringAll:
		{269 to: 291}.
	(cashier _ [
	(Cashier
		cover: (308 to: 314)
		declaredAt: (308 to: 314))
		toCheckout:
			(cart
				cover: (331 to: 334)
				declaredAt: (60 to: 63))
		charging:
			(aCreditCard
				cover: (349 to: 359)
				declaredAt: (34 to: 44))
		throught:
			(merchantProcessor
				cover: (375 to: 391)
				declaredAt: (375 to: 391))
		on:
			(aDate
				cover: (400 to: 404)
				declaredAt: (50 to: 54))
		registeringOn:
			(salesBook
				cover: (424 to: 432)
				declaredAt: (424 to: 432))
		with:
			(self coverAll:
				{442 to: 445}) ] valueCoveringAll:
		{319 to: 329. 339 to: 347. 365 to: 373. 396 to: 398. 409 to: 422. 436 to: 440})
		cover: (297 to: 303)
		declaredAt: (65 to: 71).
	(transactionId _ [
	(cashier
		cover: (469 to: 475)
		declaredAt: (65 to: 71)) checkOut ] valueCoveringAll:
		{477 to: 484})
		cover: (452 to: 464)
		declaredAt: (73 to: 85).
	(client _ [
	(cartToClient
		cover: (501 to: 512)
		declaredAt: (501 to: 512)) removeKey:
		(cartId
			cover: (525 to: 530)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{514 to: 523})
		cover: (491 to: 496)
		declaredAt: (87 to: 92).
	[
	(self coverAll:
		{536 to: 539})
		updateClienTransactions:
			(client
				cover: (566 to: 571)
				declaredAt: (87 to: 92))
		with:
			(transactionId
				cover: (579 to: 591)
				declaredAt: (73 to: 85)) ] valueCoveringAll:
		{541 to: 564. 573 to: 577}.
	^ transactionId
		cover: (598 to: 610)
		declaredAt: (73 to: 85).! !

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 16:23:28'!
PASSED!
!Behavior method!
isEmpty
	^ [
	(cart
		cover: (13 to: 16)
		declaredAt: (13 to: 16)) isEmpty ] valueCoveringAll:
		{18 to: 24}.! !
!Behavior method!
cartCanNotBeEmptyErrorMessage
	^ [
	(Cashier
		cover: (36 to: 42)
		declaredAt: (36 to: 42)) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
		{44 to: 72}.! !

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 16:23:28'!
PASSED!
!Behavior method!
canNotChargeAnExpiredCreditCardErrorMessage
	^ [
	(Cashier
		cover: (50 to: 56)
		declaredAt: (50 to: 56)) canNotChargeAnExpiredCreditCardErrorMessage ] valueCoveringAll:
		{58 to: 100}.! !

!testRun: #TusLibrosFacadeTest #test11canNotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 16:23:28'!
PASSED!
!Behavior method!
total
	^ [
	(cart
		cover: (11 to: 14)
		declaredAt: (11 to: 14)) total ] valueCoveringAll:
		{16 to: 20}.! !
!Behavior method!
detail
	^ [
	(cart
		cover: (12 to: 15)
		declaredAt: (12 to: 15)) detail ] valueCoveringAll:
		{17 to: 22}.! !
!Behavior method!
nextTransactionId
	(transactionID _ [
	(transactionID
		cover: (22 to: 34)
		declaredAt: (22 to: 34)) +
		(1 coverAll:
			{54 to: 54}) ] valueCoveringAll:
		{53 to: 53})
		cover: (39 to: 51)
		declaredAt: (22 to: 34).
	^ [
	(transactionID
		cover: (61 to: 73)
		declaredAt: (22 to: 34)) -
		(1 coverAll:
			{76 to: 76}) ] valueCoveringAll:
		{75 to: 75}.! !
!Behavior method!
updateClienTransactions: aClient with: aTransactionID
	| clientTransactions |
	(clientTransactions _ [
	(clientsTransactions
		cover: (103 to: 121)
		declaredAt: (103 to: 121))
		at:
			(aClient
				cover: (127 to: 133)
				declaredAt: (26 to: 32))
		ifAbsent: [
			[
			(OrderedCollection
				cover: (147 to: 163)
				declaredAt: (147 to: 163)) new ] valueCoveringAll:
				{165 to: 167} ]] valueCoveringAll:
		{123 to: 125. 135 to: 143})
		cover: (81 to: 98)
		declaredAt: (58 to: 75).
	[
	(clientTransactions
		cover: (173 to: 190)
		declaredAt: (58 to: 75)) add:
		(aTransactionID
			cover: (197 to: 210)
			declaredAt: (40 to: 53)) ] valueCoveringAll:
		{192 to: 195}.
	[
	(clientsTransactions
		cover: (215 to: 233)
		declaredAt: (103 to: 121))
		at:
			(aClient
				cover: (239 to: 245)
				declaredAt: (26 to: 32))
		put:
			(clientTransactions
				cover: (252 to: 269)
				declaredAt: (58 to: 75)) ] valueCoveringAll:
		{235 to: 237. 247 to: 250}.! !
!Behavior method!
listPurchases: aUser withPassword: aPassword
	| clientTransactions items total sales |
	[
	(self coverAll:
		{93 to: 96})
		assert:
			(aUser
				cover: (106 to: 110)
				declaredAt: (16 to: 20))
		with:
			(aPassword
				cover: (118 to: 126)
				declaredAt: (36 to: 44)) ] valueCoveringAll:
		{98 to: 104. 112 to: 116}.
	(clientTransactions _ [
	(clientsTransactions
		cover: (154 to: 172)
		declaredAt: (154 to: 172))
		at:
			(aUser
				cover: (178 to: 182)
				declaredAt: (16 to: 20))
		ifAbsent: [
			[
			(OrderedCollection
				cover: (195 to: 211)
				declaredAt: (195 to: 211)) new ] valueCoveringAll:
				{213 to: 215} ]] valueCoveringAll:
		{174 to: 176. 184 to: 192})
		cover: (132 to: 149)
		declaredAt: (51 to: 68).
	(sales _ [
	(clientTransactions
		cover: (230 to: 247)
		declaredAt: (51 to: 68)) collect: [ :aTransactionID |
		[
		(salesBook
			cover: (277 to: 285)
			declaredAt: (277 to: 285)) at:
			(aTransactionID
				cover: (291 to: 304)
				declaredAt: (260 to: 273)) ] valueCoveringAll:
			{287 to: 289} ]] valueCoveringAll:
		{249 to: 256})
		cover: (221 to: 225)
		declaredAt: (82 to: 86).
	(total _ 0 coverAll:
		{321 to: 321})
		cover: (312 to: 316)
		declaredAt: (76 to: 80).
	(items _ [
	(Dictionary
		cover: (333 to: 342)
		declaredAt: (333 to: 342)) new ] valueCoveringAll:
		{344 to: 346})
		cover: (325 to: 329)
		declaredAt: (70 to: 74).
	[
	(sales
		cover: (352 to: 356)
		declaredAt: (82 to: 86)) do: [ :aSale |
		[
		([
		(aSale
			cover: (373 to: 377)
			declaredAt: (363 to: 367)) items ] valueCoveringAll:
			{379 to: 383}) associationsDo: [ :aSaleItem | | aQuantity |
			(aQuantity _ [
			(items
				cover: (445 to: 449)
				declaredAt: (70 to: 74))
				at:
					([
					(aSaleItem
						cover: (455 to: 463)
						declaredAt: (403 to: 411)) key ] valueCoveringAll:
						{465 to: 467})
				ifAbsent: [
					0 coverAll:
						{480 to: 480} ]] valueCoveringAll:
				{451 to: 453. 469 to: 477})
				cover: (432 to: 440)
				declaredAt: (417 to: 425).
			[
			(items
				cover: (487 to: 491)
				declaredAt: (70 to: 74))
				at:
					([
					(aSaleItem
						cover: (497 to: 505)
						declaredAt: (403 to: 411)) key ] valueCoveringAll:
						{507 to: 509})
				put:
					([
					(aQuantity
						cover: (516 to: 524)
						declaredAt: (417 to: 425)) +
						([
						(aSaleItem
							cover: (528 to: 536)
							declaredAt: (403 to: 411)) value ] valueCoveringAll:
							{538 to: 542}) ] valueCoveringAll:
						{526 to: 526}) ] valueCoveringAll:
				{493 to: 495. 511 to: 514} ]] valueCoveringAll:
			{385 to: 399}.
		(total _ [
		(total
			cover: (552 to: 556)
			declaredAt: (76 to: 80)) +
			([
			(aSale
				cover: (569 to: 573)
				declaredAt: (363 to: 367)) total ] valueCoveringAll:
				{575 to: 579}) ] valueCoveringAll:
			{567 to: 567})
			cover: (561 to: 565)
			declaredAt: (76 to: 80) ]] valueCoveringAll:
		{358 to: 360}.
	[
	(items
		cover: (587 to: 591)
		declaredAt: (70 to: 74))
		at:
			('Total' coverAll:
				{597 to: 603})
		put:
			(total
				cover: (610 to: 614)
				declaredAt: (76 to: 80)) ] valueCoveringAll:
		{593 to: 595. 605 to: 608}.
	^ items
		cover: (623 to: 627)
		declaredAt: (70 to: 74).! !
!Behavior method!
items
	^ items
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !

!testRun: #TusLibrosFacadeTest #test12listPurchasesReturnsEveryBookAndTotalPrice stamp: 'MS 11/11/2021 16:23:28'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13canNotListPurchaseOfAnInvalidCustomer stamp: 'MS 11/11/2021 16:23:28'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14canNotListPurchaseOfAValidUserWithInvalidPassword stamp: 'MS 11/11/2021 16:23:28'!
PASSED!
!Behavior method!
advanceTime: aDuration
	(now _ [
	(now
		cover: (28 to: 30)
		declaredAt: (28 to: 30)) +
		(aDuration
			cover: (41 to: 49)
			declaredAt: (14 to: 22)) ] valueCoveringAll:
		{39 to: 39})
		cover: (35 to: 37)
		declaredAt: (28 to: 30).! !
!Behavior method!
signalCartSessionExpired
	[
	(self coverAll:
		{28 to: 31}) error:
		([
		(facade
			cover: (40 to: 45)
			declaredAt: (40 to: 45)) sessionHasExpiredErrorDescription ] valueCoveringAll:
			{47 to: 79}) ] valueCoveringAll:
		{33 to: 38}.! !
!Behavior method!
sessionHasExpiredErrorDescription
	^ 'The cart session is expired' coverAll:
		{38 to: 66}.! !
!Behavior method!
revertTime: aDuration
	(now _ [
	(now
		cover: (25 to: 27)
		declaredAt: (25 to: 27)) -
		(aDuration
			cover: (38 to: 46)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{36 to: 36})
		cover: (32 to: 34)
		declaredAt: (25 to: 27).! !

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:23:28'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:23:28'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:23:28'!
PASSED!
!Cart methodsFor: 'adding' stamp: 'MS 11/11/2021 16:24:05' prior: 50968501!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ items add: anItem ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/11/2021 16:24:06'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/11/2021 16:24:06'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/11/2021 16:24:06'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/11/2021 16:24:06'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/11/2021 16:24:06'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/11/2021 16:24:06'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/11/2021 16:24:06'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/11/2021 16:24:06'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/11/2021 16:24:06'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/11/2021 16:24:06'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/11/2021 16:24:06'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/11/2021 16:24:06'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/11/2021 16:24:06'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/11/2021 16:24:06'!
ERROR!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 16:24:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 16:24:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 16:24:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 16:24:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 16:24:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 16:24:06'!
ERROR!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 16:24:06'!
ERROR!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 16:24:06'!
ERROR!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 16:24:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 16:24:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11canNotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 16:24:06'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12listPurchasesReturnsEveryBookAndTotalPrice stamp: 'MS 11/11/2021 16:24:06'!
ERROR!

!testRun: #TusLibrosFacadeTest #test13canNotListPurchaseOfAnInvalidCustomer stamp: 'MS 11/11/2021 16:24:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14canNotListPurchaseOfAValidUserWithInvalidPassword stamp: 'MS 11/11/2021 16:24:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:24:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:24:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:24:06'!
ERROR!
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:51' prior: 50987735!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !
!Behavior method!
initialize
	(today _ [
	(DateAndTime
		cover: (23 to: 33)
		declaredAt: (23 to: 33)) now ] valueCoveringAll:
		{35 to: 37})
		cover: (14 to: 18)
		declaredAt: (14 to: 18).
	(transactionID _ 1 coverAll:
		{58 to: 58})
		cover: (41 to: 53)
		declaredAt: (41 to: 53).! !
!Behavior method!
createCart
	^ [
	(Cart
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) acceptingItemsOf:
		([
		(self coverAll:
			{39 to: 42}) defaultCatalog ] valueCoveringAll:
			{44 to: 57}) ] valueCoveringAll:
		{21 to: 37}.! !
!Behavior method!
defaultCatalog
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(Dictionary
		cover: (21 to: 30)
		declaredAt: (21 to: 30)) new ] valueCoveringAll:
		{32 to: 34}.
	[
	cascadeReceiver
		at: self itemSellByTheStore
		put: self itemSellByTheStorePrice ] valueCoveringAll:
		{38 to: 98}.
	[
	cascadeReceiver
		at: self anotherItemSellByTheStore
		put: self anotherItemSellByTheStorePrice ] valueCoveringAll:
		{103 to: 177}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{182 to: 189} ] value.! !
!Behavior method!
itemSellByTheStore
	^ 'validBook' coverAll:
		{25 to: 35}.! !
!Behavior method!
itemSellByTheStorePrice
	^ 10 coverAll:
		{29 to: 30}.! !
!Behavior method!
anotherItemSellByTheStore
	^ 'validBook2' coverAll:
		{32 to: 43}.! !
!Behavior method!
anotherItemSellByTheStorePrice
	^ 20 coverAll:
		{37 to: 38}.! !
!Behavior method!
acceptingItemsOf: aCatalog
	^ [
	([
	(self coverAll:
		{31 to: 34}) new ] valueCoveringAll:
		{36 to: 38}) initializeAcceptingItemsOf:
		(aCatalog
			cover: (68 to: 75)
			declaredAt: (19 to: 26)) ] valueCoveringAll:
		{40 to: 66}.! !
!Behavior method!
initializeAcceptingItemsOf: aCatalog
	(catalog _ aCatalog
		cover: (51 to: 58)
		declaredAt: (29 to: 36))
		cover: (40 to: 46)
		declaredAt: (40 to: 46).
	(items _ [
	(Bag
		cover: (71 to: 73)
		declaredAt: (71 to: 73)) new ] valueCoveringAll:
		{75 to: 77})
		cover: (62 to: 66)
		declaredAt: (62 to: 66).! !
!Behavior method!
isEmpty
	^ [
	(items
		cover: (13 to: 17)
		declaredAt: (13 to: 17)) isEmpty ] valueCoveringAll:
		{19 to: 25}.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/11/2021 16:24:29'!
PASSED!
!Behavior method!
itemNotSellByTheStore
	^ 'invalidBook' coverAll:
		{27 to: 39}.! !
!Behavior method!
add: anItem
	^ [
	(self coverAll:
		{17 to: 20})
		add:
			(1 coverAll:
				{27 to: 27})
		of:
			(anItem
				cover: (33 to: 38)
				declaredAt: (6 to: 11)) ] valueCoveringAll:
		{22 to: 25. 29 to: 31}.! !
!Behavior method!
add: aQuantity of: anItem
	[
	(self coverAll:
		{29 to: 32}) assertIsValidQuantity:
		(aQuantity
			cover: (57 to: 65)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{34 to: 55}.
	[
	(self coverAll:
		{69 to: 72}) assertIsValidItem:
		(anItem
			cover: (93 to: 98)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{74 to: 91}.
	[
	(1 coverAll:
		{103 to: 103})
		to:
			(aQuantity
				cover: (109 to: 117)
				declaredAt: (6 to: 14))
		do: [ :aNumber |
			[
			(items
				cover: (136 to: 140)
				declaredAt: (136 to: 140)) add:
				(anItem
					cover: (147 to: 152)
					declaredAt: (20 to: 25)) ] valueCoveringAll:
				{142 to: 145} ]] valueCoveringAll:
		{105 to: 107. 119 to: 121}.! !
!Behavior method!
assertIsValidQuantity: aQuantity
	[
	([
	(aQuantity
		cover: (36 to: 44)
		declaredAt: (24 to: 32)) strictlyPositive ] valueCoveringAll:
		{46 to: 61}) ifFalse: [
		[
		(self coverAll:
			{74 to: 77}) error:
			([
			(self coverAll:
				{86 to: 89}) invalidQuantityErrorMessage ] valueCoveringAll:
				{91 to: 117}) ] valueCoveringAll:
			{79 to: 84} ]] valueCoveringAll:
		{63 to: 70}.! !
!Behavior method!
assertIsValidItem: anItem
	[
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includesKey:
		(anItem
			cover: (51 to: 56)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			(self coverAll:
				{82 to: 85}) invalidItemErrorMessage ] valueCoveringAll:
				{87 to: 109}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{59 to: 66}.! !
!Behavior method!
invalidItemErrorMessage
	^ 'Item is not in catalog' coverAll:
		{29 to: 52}.! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/11/2021 16:24:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/11/2021 16:24:29'!
PASSED!
!Behavior method!
invalidQuantityErrorMessage
	^ 'Invalid number of items' coverAll:
		{33 to: 57}.! !

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/11/2021 16:24:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/11/2021 16:24:29'!
PASSED!
!Behavior method!
includes: anItem
	^ [
	(items
		cover: (21 to: 25)
		declaredAt: (21 to: 25)) includes:
		(anItem
			cover: (37 to: 42)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{27 to: 35}.! !

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/11/2021 16:24:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/11/2021 16:24:29'!
PASSED!
!Behavior method!
occurrencesOf: anItem
	^ [
	(items
		cover: (26 to: 30)
		declaredAt: (26 to: 30)) occurrencesOf:
		(anItem
			cover: (47 to: 52)
			declaredAt: (16 to: 21)) ] valueCoveringAll:
		{32 to: 45}.! !

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/11/2021 16:24:29'!
PASSED!
!Behavior method!
notExpiredCreditCard
	^ [
	(CreditCard
		cover: (26 to: 35)
		declaredAt: (26 to: 35)) expiringOn:
		([
		(Month
			cover: (50 to: 54)
			declaredAt: (50 to: 54))
			month:
				([
				(today
					cover: (63 to: 67)
					declaredAt: (63 to: 67)) monthIndex ] valueCoveringAll:
					{69 to: 78})
			year:
				([
				([
				(today
					cover: (86 to: 90)
					declaredAt: (63 to: 67)) yearNumber ] valueCoveringAll:
					{92 to: 101}) +
					(1 coverAll:
						{105 to: 105}) ] valueCoveringAll:
					{103 to: 103}) ] valueCoveringAll:
			{56 to: 61. 80 to: 84}) ] valueCoveringAll:
		{37 to: 47}.! !
!Behavior method!
expiringOn: aMonth
	^ [
	([
	(self coverAll:
		{25 to: 28}) new ] valueCoveringAll:
		{30 to: 32}) initializeExpiringOn:
		(aMonth
			cover: (56 to: 61)
			declaredAt: (13 to: 18)) ] valueCoveringAll:
		{34 to: 54}.! !
!Behavior method!
initializeExpiringOn: aMonth
	(expiration _ aMonth
		cover: (48 to: 53)
		declaredAt: (23 to: 28))
		cover: (34 to: 43)
		declaredAt: (34 to: 43).! !
!Behavior method!
today
	^ today
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !
!Behavior method!
transactionID
	^ self coverAll:
		{18 to: 21}.! !
!Behavior method!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook with: aTransactionId
	[
	(self coverAll:
		{131 to: 134}) assertIsNotEmpty:
		(aCart
			cover: (154 to: 158)
			declaredAt: (13 to: 17)) ] valueCoveringAll:
		{136 to: 152}.
	[
	(self coverAll:
		{162 to: 165})
		assertIsNotExpired:
			(aCreditCard
				cover: (187 to: 197)
				declaredAt: (29 to: 39))
		on:
			(aDate
				cover: (203 to: 207)
				declaredAt: (74 to: 78)) ] valueCoveringAll:
		{167 to: 185. 199 to: 201}.
	^ [
	([
	(self coverAll:
		{214 to: 217}) new ] valueCoveringAll:
		{219 to: 221})
		initializeToCheckout:
			(aCart
				cover: (245 to: 249)
				declaredAt: (13 to: 17))
		charging:
			(aCreditCard
				cover: (261 to: 271)
				declaredAt: (29 to: 39))
		throught:
			(aMerchantProcessor
				cover: (283 to: 300)
				declaredAt: (51 to: 68))
		registeringOn:
			(aSalesBook
				cover: (317 to: 326)
				declaredAt: (95 to: 104))
		with:
			(aTransactionId
				cover: (334 to: 347)
				declaredAt: (112 to: 125)) ] valueCoveringAll:
		{223 to: 243. 251 to: 259. 273 to: 281. 302 to: 315. 328 to: 332}.! !
!Behavior method!
assertIsNotEmpty: aCart
	[
	([
	(aCart
		cover: (29 to: 33)
		declaredAt: (19 to: 23)) isEmpty ] valueCoveringAll:
		{35 to: 41}) ifTrue: [
		[
		(self coverAll:
			{52 to: 55}) error:
			([
			(self coverAll:
				{64 to: 67}) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
				{69 to: 97}) ] valueCoveringAll:
			{57 to: 62} ]] valueCoveringAll:
		{43 to: 49}.! !
!Behavior method!
cartCanNotBeEmptyErrorMessage
	^ 'Can not check out an empty cart' coverAll:
		{35 to: 67}.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/11/2021 16:24:29'!
PASSED!
!Behavior method!
assertIsNotExpired: aCreditCard on: aDate
	[
	([
	(aCreditCard
		cover: (47 to: 57)
		declaredAt: (21 to: 31)) isExpiredOn:
		(aDate
			cover: (72 to: 76)
			declaredAt: (37 to: 41)) ] valueCoveringAll:
		{59 to: 70}) ifTrue: [
		[
		(self coverAll:
			{89 to: 92}) error:
			([
			(self coverAll:
				{101 to: 104}) canNotChargeAnExpiredCreditCardErrorMessage ] valueCoveringAll:
				{106 to: 148}) ] valueCoveringAll:
			{94 to: 99} ]] valueCoveringAll:
		{79 to: 85}.! !
!Behavior method!
isExpiredOn: aDate
	^ [
	([
	(expiration
		cover: (25 to: 34)
		declaredAt: (25 to: 34)) start ] valueCoveringAll:
		{36 to: 40}) <
		([
		([
		(Month
			cover: (45 to: 49)
			declaredAt: (45 to: 49))
			month:
				([
				(aDate
					cover: (58 to: 62)
					declaredAt: (14 to: 18)) monthIndex ] valueCoveringAll:
					{64 to: 73})
			year:
				([
				(aDate
					cover: (81 to: 85)
					declaredAt: (14 to: 18)) yearNumber ] valueCoveringAll:
					{87 to: 96}) ] valueCoveringAll:
			{51 to: 56. 75 to: 79}) start ] valueCoveringAll:
			{99 to: 103}) ] valueCoveringAll:
		{42 to: 42}.! !
!Behavior method!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook with: aTransactionID
	(cart _ aCart
		cover: (138 to: 142)
		declaredAt: (23 to: 27))
		cover: (130 to: 133)
		declaredAt: (130 to: 133).
	(creditCard _ aCreditCard
		cover: (160 to: 170)
		declaredAt: (39 to: 49))
		cover: (146 to: 155)
		declaredAt: (146 to: 155).
	(merchantProcessor _ aMerchantProcessor
		cover: (195 to: 212)
		declaredAt: (61 to: 78))
		cover: (174 to: 190)
		declaredAt: (174 to: 190).
	(salesBook _ aSalesBook
		cover: (229 to: 238)
		declaredAt: (95 to: 104))
		cover: (216 to: 224)
		declaredAt: (216 to: 224).
	(transactionsIDs _ aTransactionID
		cover: (261 to: 274)
		declaredAt: (112 to: 125))
		cover: (242 to: 256)
		declaredAt: (242 to: 256).! !
!Behavior method!
checkOut
	| sale |
	[
	(self coverAll:
		{22 to: 25}) calculateTotal ] valueCoveringAll:
		{27 to: 40}.
	[
	(self coverAll:
		{44 to: 47}) debitTotal ] valueCoveringAll:
		{49 to: 58}.
	(sale _ [
	(self coverAll:
		{70 to: 73}) registerSale ] valueCoveringAll:
		{75 to: 86})
		cover: (62 to: 65)
		declaredAt: (14 to: 17).
	^ sale
		cover: (93 to: 96)
		declaredAt: (14 to: 17).! !
!Behavior method!
calculateTotal
	(total _ [
	(cart
		cover: (27 to: 30)
		declaredAt: (27 to: 30)) total ] valueCoveringAll:
		{32 to: 36})
		cover: (18 to: 22)
		declaredAt: (18 to: 22).! !
!Behavior method!
total
	^ [
	(items
		cover: (11 to: 15)
		declaredAt: (11 to: 15)) sum: [ :anItem |
		[
		(catalog
			cover: (34 to: 40)
			declaredAt: (34 to: 40)) at:
			(anItem
				cover: (46 to: 51)
				declaredAt: (25 to: 30)) ] valueCoveringAll:
			{42 to: 44} ]] valueCoveringAll:
		{17 to: 20}.! !
!Behavior method!
debitTotal
	[
	(merchantProcessor
		cover: (14 to: 30)
		declaredAt: (14 to: 30))
		debit:
			(total
				cover: (39 to: 43)
				declaredAt: (39 to: 43))
		from:
			(creditCard
				cover: (51 to: 60)
				declaredAt: (51 to: 60)) ] valueCoveringAll:
		{32 to: 37. 45 to: 49}.! !
!Behavior method!
registerSale
	| sale transactionID |
	(sale _ [
	(self coverAll:
		{48 to: 51}) createSale ] valueCoveringAll:
		{53 to: 62})
		cover: (40 to: 43)
		declaredAt: (18 to: 21).
	(transactionID _ [
	(transactionsIDs
		cover: (83 to: 97)
		declaredAt: (83 to: 97)) nextTransactionId ] valueCoveringAll:
		{99 to: 115})
		cover: (66 to: 78)
		declaredAt: (23 to: 35).
	[
	(salesBook
		cover: (122 to: 130)
		declaredAt: (122 to: 130))
		at:
			(transactionID
				cover: (136 to: 148)
				declaredAt: (23 to: 35))
		put:
			(sale
				cover: (155 to: 158)
				declaredAt: (18 to: 21)) ] valueCoveringAll:
		{132 to: 134. 150 to: 153}.
	^ transactionID
		cover: (165 to: 177)
		declaredAt: (23 to: 35).! !
!Behavior method!
createSale
	^ [
	(Sale
		cover: (16 to: 19)
		declaredAt: (16 to: 19))
		for:
			([
			(cart
				cover: (25 to: 28)
				declaredAt: (25 to: 28)) detail ] valueCoveringAll:
				{30 to: 35})
		with:
			(total
				cover: (43 to: 47)
				declaredAt: (43 to: 47)) ] valueCoveringAll:
		{21 to: 24. 37 to: 41}.! !
!Behavior method!
detail
	| detail |
	(detail _ [
	(OrderedDictionary
		cover: (33 to: 49)
		declaredAt: (33 to: 49)) new ] valueCoveringAll:
		{51 to: 53})
		cover: (23 to: 28)
		declaredAt: (11 to: 16).
	[
	(items
		cover: (58 to: 62)
		declaredAt: (58 to: 62)) do: [ :item |
		[
		(detail
			cover: (77 to: 82)
			declaredAt: (11 to: 16))
			at:
				(item
					cover: (88 to: 91)
					declaredAt: (71 to: 74))
			put:
				([
				(items
					cover: (99 to: 103)
					declaredAt: (58 to: 62)) occurrencesOf:
					(item
						cover: (120 to: 123)
						declaredAt: (71 to: 74)) ] valueCoveringAll:
					{105 to: 118}) ] valueCoveringAll:
			{84 to: 86. 93 to: 96} ]] valueCoveringAll:
		{64 to: 66}.
	^ detail
		cover: (135 to: 140)
		declaredAt: (11 to: 16).! !
!Behavior method!
for: someItems with: aTotal
	^ [
	([
	(self coverAll:
		{32 to: 35}) new ] valueCoveringAll:
		{37 to: 39})
		initializeWith:
			(someItems
				cover: (57 to: 65)
				declaredAt: (6 to: 14))
		andTotal:
			(aTotal
				cover: (77 to: 82)
				declaredAt: (22 to: 27)) ] valueCoveringAll:
		{41 to: 55. 67 to: 75}.! !
!Behavior method!
initializeWith: someItems andTotal: aTotal
	(total _ aTotal
		cover: (55 to: 60)
		declaredAt: (37 to: 42))
		cover: (46 to: 50)
		declaredAt: (46 to: 50).
	(items _ someItems
		cover: (73 to: 81)
		declaredAt: (17 to: 25))
		cover: (64 to: 68)
		declaredAt: (64 to: 68).! !
!Behavior method!
nextTransactionId
	(transactionID _ [
	(transactionID
		cover: (21 to: 33)
		declaredAt: (21 to: 33)) +
		(1 coverAll:
			{53 to: 53}) ] valueCoveringAll:
		{52 to: 52})
		cover: (38 to: 50)
		declaredAt: (21 to: 33).
	^ [
	(transactionID
		cover: (60 to: 72)
		declaredAt: (21 to: 33)) -
		(1 coverAll:
			{74 to: 74}) ] valueCoveringAll:
		{73 to: 73}.! !
!Behavior method!
total
	^ total
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/11/2021 16:24:29'!
PASSED!
!Behavior method!
expiredCreditCard
	^ [
	(CreditCard
		cover: (23 to: 32)
		declaredAt: (23 to: 32)) expiringOn:
		([
		(Month
			cover: (47 to: 51)
			declaredAt: (47 to: 51))
			month:
				([
				(today
					cover: (60 to: 64)
					declaredAt: (60 to: 64)) monthIndex ] valueCoveringAll:
					{66 to: 75})
			year:
				([
				([
				(today
					cover: (83 to: 87)
					declaredAt: (60 to: 64)) yearNumber ] valueCoveringAll:
					{89 to: 98}) -
					(1 coverAll:
						{102 to: 102}) ] valueCoveringAll:
					{100 to: 100}) ] valueCoveringAll:
			{53 to: 58. 77 to: 81}) ] valueCoveringAll:
		{34 to: 44}.! !
!Behavior method!
canNotChargeAnExpiredCreditCardErrorMessage
	^ 'Can not charge an expired credit card' coverAll:
		{49 to: 87}.! !

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/11/2021 16:24:29'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/11/2021 16:24:29'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/11/2021 16:24:29'!
PASSED!
!Behavior method!
creditCardHasNoCreditErrorMessage
	^ 'Credit card has no credit' coverAll:
		{39 to: 65}.! !

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/11/2021 16:24:29'!
PASSED!
!Behavior method!
for: aTime
	^ [
	([
	(self coverAll:
		{15 to: 18}) new ] valueCoveringAll:
		{20 to: 22}) initializeWith:
		(aTime
			cover: (40 to: 44)
			declaredAt: (6 to: 10)) ] valueCoveringAll:
		{24 to: 38}.! !
!Behavior method!
initializeWith: aTime
	(now _ aTime
		cover: (32 to: 36)
		declaredAt: (17 to: 21))
		cover: (25 to: 27)
		declaredAt: (25 to: 27).! !
!Behavior method!
withUsers: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock
	^ [
	([
	(self coverAll:
		{144 to: 147}) new ] valueCoveringAll:
		{149 to: 151})
		initializeWith:
			(usersWithPasswords
				cover: (169 to: 186)
				declaredAt: (12 to: 29))
		withCatalog:
			(aCatalog
				cover: (201 to: 208)
				declaredAt: (44 to: 51))
		withSalesBook:
			(aSalesBook
				cover: (225 to: 234)
				declaredAt: (68 to: 77))
		withMerchantProcessor:
			(aMerchantProcessor
				cover: (259 to: 276)
				declaredAt: (102 to: 119))
		withClock:
			(aClock
				cover: (289 to: 294)
				declaredAt: (132 to: 137)) ] valueCoveringAll:
		{153 to: 167. 188 to: 199. 210 to: 223. 236 to: 257. 278 to: 287}.! !
!Behavior method!
initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock
	(users _ usersWithPasswords
		cover: (158 to: 175)
		declaredAt: (17 to: 34))
		cover: (149 to: 153)
		declaredAt: (149 to: 153).
	(catalog _ aCatalog
		cover: (190 to: 197)
		declaredAt: (49 to: 56))
		cover: (179 to: 185)
		declaredAt: (179 to: 185).
	(salesBook _ aSalesBook
		cover: (214 to: 223)
		declaredAt: (73 to: 82))
		cover: (201 to: 209)
		declaredAt: (201 to: 209).
	(merchantProcessor _ aMerchantProcessor
		cover: (248 to: 265)
		declaredAt: (107 to: 124))
		cover: (227 to: 243)
		declaredAt: (227 to: 243).
	(cartSessions _ [
	(Dictionary
		cover: (286 to: 295)
		declaredAt: (286 to: 295)) new ] valueCoveringAll:
		{297 to: 299})
		cover: (270 to: 281)
		declaredAt: (270 to: 281).
	(cartIdCounter _ 0 coverAll:
		{320 to: 320})
		cover: (303 to: 315)
		declaredAt: (303 to: 315).
	(transactionID _ 1 coverAll:
		{343 to: 343})
		cover: (326 to: 338)
		declaredAt: (326 to: 338).
	(cartToClient _ [
	(Dictionary
		cover: (365 to: 374)
		declaredAt: (286 to: 295)) new ] valueCoveringAll:
		{376 to: 378})
		cover: (349 to: 360)
		declaredAt: (349 to: 360).
	(clientsTransactions _ [
	(Dictionary
		cover: (407 to: 416)
		declaredAt: (286 to: 295)) new ] valueCoveringAll:
		{418 to: 420})
		cover: (384 to: 402)
		declaredAt: (384 to: 402).
	(clock _ aClock
		cover: (433 to: 438)
		declaredAt: (137 to: 142))
		cover: (424 to: 428)
		declaredAt: (424 to: 428).! !
!Behavior method!
createCartFor: aUser with: aUserPassword
	| cart |
	[
	(self coverAll:
		{57 to: 60})
		assert:
			(aUser
				cover: (70 to: 74)
				declaredAt: (16 to: 20))
		with:
			(aUserPassword
				cover: (82 to: 94)
				declaredAt: (28 to: 40)) ] valueCoveringAll:
		{62 to: 68. 76 to: 80}.
	(cartIdCounter _ [
	(cartIdCounter
		cover: (100 to: 112)
		declaredAt: (100 to: 112)) +
		(1 coverAll:
			{133 to: 133}) ] valueCoveringAll:
		{131 to: 131})
		cover: (117 to: 129)
		declaredAt: (100 to: 112).
	(cart _ [
	(CartSession
		cover: (147 to: 157)
		declaredAt: (147 to: 157))
		for:
			([
			(Cart
				cover: (165 to: 168)
				declaredAt: (165 to: 168)) acceptingItemsOf:
				(catalog
					cover: (188 to: 194)
					declaredAt: (188 to: 194)) ] valueCoveringAll:
				{170 to: 186})
		ownedBy:
			(aUser
				cover: (206 to: 210)
				declaredAt: (16 to: 20))
		with:
			(self coverAll:
				{218 to: 221}) ] valueCoveringAll:
		{159 to: 162. 197 to: 204. 212 to: 216})
		cover: (139 to: 142)
		declaredAt: (48 to: 51).
	[
	(cartSessions
		cover: (227 to: 238)
		declaredAt: (227 to: 238))
		at:
			(cartIdCounter
				cover: (244 to: 256)
				declaredAt: (100 to: 112))
		put:
			(cart
				cover: (262 to: 265)
				declaredAt: (48 to: 51)) ] valueCoveringAll:
		{240 to: 242. 258 to: 261}.
	[
	(cartToClient
		cover: (271 to: 282)
		declaredAt: (271 to: 282))
		at:
			(cartIdCounter
				cover: (288 to: 300)
				declaredAt: (100 to: 112))
		put:
			(aUser
				cover: (307 to: 311)
				declaredAt: (16 to: 20)) ] valueCoveringAll:
		{284 to: 286. 302 to: 305}.
	^ cartIdCounter
		cover: (318 to: 330)
		declaredAt: (100 to: 112).! !
!Behavior method!
assert: validUser with: validPassword
	| password |
	[
	(users
		cover: (56 to: 60)
		declaredAt: (56 to: 60))
		at:
			(validUser
				cover: (66 to: 74)
				declaredAt: (9 to: 17))
		ifAbsent: [
			[
			(self coverAll:
				{86 to: 89}) error:
				([
				(self coverAll:
					{98 to: 101}) invalidUserOrPasswordErrorDescription ] valueCoveringAll:
					{103 to: 139}) ] valueCoveringAll:
				{91 to: 96} ]] valueCoveringAll:
		{62 to: 64. 76 to: 84}.
	(password _ [
	(users
		cover: (158 to: 162)
		declaredAt: (56 to: 60)) at:
		(validUser
			cover: (168 to: 176)
			declaredAt: (9 to: 17)) ] valueCoveringAll:
		{164 to: 166})
		cover: (146 to: 153)
		declaredAt: (43 to: 50).
	[
	([
	(password
		cover: (184 to: 191)
		declaredAt: (43 to: 50)) =
		(validPassword
			cover: (195 to: 207)
			declaredAt: (25 to: 37)) ] valueCoveringAll:
		{193 to: 193}) ifFalse: [
		[
		(self coverAll:
			{220 to: 223}) error:
			([
			(self coverAll:
				{232 to: 235}) invalidUserOrPasswordErrorDescription ] valueCoveringAll:
				{237 to: 273}) ] valueCoveringAll:
			{225 to: 230} ]] valueCoveringAll:
		{211 to: 218}.! !
!Behavior method!
invalidUserOrPasswordErrorDescription
	^ 'Invalid user or password' coverAll:
		{42 to: 67}.! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 16:24:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 16:24:29'!
PASSED!
!Behavior method!
for: aCart ownedBy: aCustomer with: aSystemFacade
	^ [
	([
	(self coverAll:
		{54 to: 57}) new ] valueCoveringAll:
		{59 to: 61})
		initializedWith:
			(aCart
				cover: (80 to: 84)
				declaredAt: (6 to: 10))
		ownedBy:
			(aCustomer
				cover: (95 to: 103)
				declaredAt: (21 to: 29))
		with:
			(aSystemFacade
				cover: (111 to: 123)
				declaredAt: (37 to: 49)) ] valueCoveringAll:
		{63 to: 78. 86 to: 93. 105 to: 109}.! !
!Behavior method!
initializedWith: aCart ownedBy: aCustomer with: aFacade
	(cart _ aCart
		cover: (67 to: 71)
		declaredAt: (18 to: 22))
		cover: (59 to: 62)
		declaredAt: (59 to: 62).
	(owner _ aCustomer
		cover: (84 to: 92)
		declaredAt: (33 to: 41))
		cover: (75 to: 79)
		declaredAt: (75 to: 79).
	(facade _ aFacade
		cover: (107 to: 113)
		declaredAt: (49 to: 55))
		cover: (97 to: 102)
		declaredAt: (97 to: 102).
	(lastTime _ [
	(aFacade
		cover: (129 to: 135)
		declaredAt: (49 to: 55)) now ] valueCoveringAll:
		{137 to: 139})
		cover: (117 to: 124)
		declaredAt: (117 to: 124).! !
!Behavior method!
now
	^ [
	(clock
		cover: (8 to: 12)
		declaredAt: (8 to: 12)) now ] valueCoveringAll:
		{14 to: 16}.! !
!Behavior method!
now
	^ now
		cover: (8 to: 10)
		declaredAt: (8 to: 10).! !
!Behavior method!
listCart: aCartId
	^ [
	([
	(cartSessions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) at:
		(aCartId
			cover: (43 to: 49)
			declaredAt: (11 to: 17)) ] valueCoveringAll:
		{39 to: 41}) getItems ] valueCoveringAll:
		{52 to: 59}.! !
!Behavior method!
getItems
	[
	(self coverAll:
		{13 to: 16}) assertCartHasNotExpired ] valueCoveringAll:
		{18 to: 40}.
	^ [
	(cart
		cover: (45 to: 48)
		declaredAt: (45 to: 48)) getItems ] valueCoveringAll:
		{50 to: 57}.! !
!Behavior method!
assertCartHasNotExpired
	[
	([
	([
	(lastTime
		cover: (28 to: 35)
		declaredAt: (28 to: 35)) +
		([
		(facade
			cover: (39 to: 44)
			declaredAt: (39 to: 44)) sessionDuration ] valueCoveringAll:
			{46 to: 60}) ] valueCoveringAll:
		{37 to: 37}) <
		([
		(facade
			cover: (65 to: 70)
			declaredAt: (39 to: 44)) now ] valueCoveringAll:
			{72 to: 74}) ] valueCoveringAll:
		{63 to: 63}) ifTrue: [
		[
		(self coverAll:
			{86 to: 89}) signalCartSessionExpired ] valueCoveringAll:
			{91 to: 114} ]] valueCoveringAll:
		{76 to: 82}.! !
!Behavior method!
sessionDuration
	^ [
	(30 coverAll:
		{21 to: 22}) minutes ] valueCoveringAll:
		{24 to: 30}.! !
!Behavior method!
getItems
	^ [
	(items
		cover: (14 to: 18)
		declaredAt: (14 to: 18)) copy ] valueCoveringAll:
		{20 to: 23}.! !

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 16:24:29'!
PASSED!
!Behavior method!
addToCart: cartId book: aBook bookQuantity: aQuantity
	| cart |
	(cart _ [
	(cartSessions
		cover: (76 to: 87)
		declaredAt: (76 to: 87))
		at:
			(cartId
				cover: (93 to: 98)
				declaredAt: (12 to: 17))
		ifAbsent: [ ^ [
			(self coverAll:
				{112 to: 115}) error:
				([
				(self coverAll:
					{124 to: 127}) invalidCartIdErrorMessage ] valueCoveringAll:
					{129 to: 153}) ] valueCoveringAll:
				{117 to: 122} ]] valueCoveringAll:
		{89 to: 91. 100 to: 108})
		cover: (68 to: 71)
		declaredAt: (61 to: 64).
	[
	(catalog
		cover: (160 to: 166)
		declaredAt: (160 to: 166))
		at:
			(aBook
				cover: (172 to: 176)
				declaredAt: (25 to: 29))
		ifAbsent: [ ^ [
			(self coverAll:
				{190 to: 193}) error:
				([
				(self coverAll:
					{202 to: 205}) invalidItemErrorMessage ] valueCoveringAll:
					{207 to: 229}) ] valueCoveringAll:
				{195 to: 200} ]] valueCoveringAll:
		{168 to: 170. 178 to: 186}.
	[
	(cart
		cover: (236 to: 239)
		declaredAt: (61 to: 64))
		add:
			(aQuantity
				cover: (246 to: 254)
				declaredAt: (45 to: 53))
		of:
			(aBook
				cover: (260 to: 264)
				declaredAt: (25 to: 29)) ] valueCoveringAll:
		{241 to: 244. 256 to: 258}.! !
!Behavior method!
invalidItemErrorMessage
	^ 'Invalid item' coverAll:
		{28 to: 41}.! !

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 16:24:29'!
PASSED!
!Behavior method!
invalidCartIdErrorMessage
	^ 'Invalid CartId' coverAll:
		{30 to: 45}.! !

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 16:24:29'!
PASSED!
!Behavior method!
add: anAmount of: aBook
	[
	(self coverAll:
		{29 to: 32}) assertCartHasNotExpired ] valueCoveringAll:
		{34 to: 56}.
	^ [
	(cart
		cover: (63 to: 66)
		declaredAt: (63 to: 66))
		add:
			(anAmount
				cover: (73 to: 80)
				declaredAt: (6 to: 13))
		of:
			(aBook
				cover: (86 to: 90)
				declaredAt: (19 to: 23)) ] valueCoveringAll:
		{68 to: 71. 82 to: 84}.! !

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 16:24:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 16:24:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 16:24:29'!
PASSED!
!Behavior method!
checkOut: cartId withCreditCard: aCreditCard on: aDate
	| cart cashier transactionId client |
	(cart _ [
	(cartSessions
		cover: (107 to: 118)
		declaredAt: (107 to: 118))
		at:
			(cartId
				cover: (124 to: 129)
				declaredAt: (11 to: 16))
		ifAbsent: [
			[
			(self coverAll:
				{141 to: 144}) error:
				([
				(self coverAll:
					{153 to: 156}) invalidCartIdErrorMessage ] valueCoveringAll:
					{158 to: 182}) ] valueCoveringAll:
				{146 to: 151} ]] valueCoveringAll:
		{120 to: 122. 131 to: 139})
		cover: (99 to: 102)
		declaredAt: (60 to: 63).
	[
	([
	(cart
		cover: (190 to: 193)
		declaredAt: (60 to: 63)) isEmpty ] valueCoveringAll:
		{195 to: 201}) ifTrue: [
		[
		(self coverAll:
			{212 to: 215}) error:
			([
			(self coverAll:
				{224 to: 227}) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
				{229 to: 257}) ] valueCoveringAll:
			{217 to: 222} ]] valueCoveringAll:
		{204 to: 210}.
	[
	(cart
		cover: (264 to: 267)
		declaredAt: (60 to: 63)) assertCartHasNotExpired ] valueCoveringAll:
		{269 to: 291}.
	(cashier _ [
	(Cashier
		cover: (308 to: 314)
		declaredAt: (308 to: 314))
		toCheckout:
			(cart
				cover: (331 to: 334)
				declaredAt: (60 to: 63))
		charging:
			(aCreditCard
				cover: (349 to: 359)
				declaredAt: (34 to: 44))
		throught:
			(merchantProcessor
				cover: (375 to: 391)
				declaredAt: (375 to: 391))
		on:
			(aDate
				cover: (400 to: 404)
				declaredAt: (50 to: 54))
		registeringOn:
			(salesBook
				cover: (424 to: 432)
				declaredAt: (424 to: 432))
		with:
			(self coverAll:
				{442 to: 445}) ] valueCoveringAll:
		{319 to: 329. 339 to: 347. 365 to: 373. 396 to: 398. 409 to: 422. 436 to: 440})
		cover: (297 to: 303)
		declaredAt: (65 to: 71).
	(transactionId _ [
	(cashier
		cover: (469 to: 475)
		declaredAt: (65 to: 71)) checkOut ] valueCoveringAll:
		{477 to: 484})
		cover: (452 to: 464)
		declaredAt: (73 to: 85).
	(client _ [
	(cartToClient
		cover: (501 to: 512)
		declaredAt: (501 to: 512)) removeKey:
		(cartId
			cover: (525 to: 530)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{514 to: 523})
		cover: (491 to: 496)
		declaredAt: (87 to: 92).
	[
	(self coverAll:
		{536 to: 539})
		updateClienTransactions:
			(client
				cover: (566 to: 571)
				declaredAt: (87 to: 92))
		with:
			(transactionId
				cover: (579 to: 591)
				declaredAt: (73 to: 85)) ] valueCoveringAll:
		{541 to: 564. 573 to: 577}.
	^ transactionId
		cover: (598 to: 610)
		declaredAt: (73 to: 85).! !

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 16:24:29'!
PASSED!
!Behavior method!
isEmpty
	^ [
	(cart
		cover: (13 to: 16)
		declaredAt: (13 to: 16)) isEmpty ] valueCoveringAll:
		{18 to: 24}.! !
!Behavior method!
cartCanNotBeEmptyErrorMessage
	^ [
	(Cashier
		cover: (36 to: 42)
		declaredAt: (36 to: 42)) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
		{44 to: 72}.! !

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 16:24:30'!
PASSED!
!Behavior method!
canNotChargeAnExpiredCreditCardErrorMessage
	^ [
	(Cashier
		cover: (50 to: 56)
		declaredAt: (50 to: 56)) canNotChargeAnExpiredCreditCardErrorMessage ] valueCoveringAll:
		{58 to: 100}.! !

!testRun: #TusLibrosFacadeTest #test11canNotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 16:24:30'!
PASSED!
!Behavior method!
total
	^ [
	(cart
		cover: (11 to: 14)
		declaredAt: (11 to: 14)) total ] valueCoveringAll:
		{16 to: 20}.! !
!Behavior method!
detail
	^ [
	(cart
		cover: (12 to: 15)
		declaredAt: (12 to: 15)) detail ] valueCoveringAll:
		{17 to: 22}.! !
!Behavior method!
nextTransactionId
	(transactionID _ [
	(transactionID
		cover: (22 to: 34)
		declaredAt: (22 to: 34)) +
		(1 coverAll:
			{54 to: 54}) ] valueCoveringAll:
		{53 to: 53})
		cover: (39 to: 51)
		declaredAt: (22 to: 34).
	^ [
	(transactionID
		cover: (61 to: 73)
		declaredAt: (22 to: 34)) -
		(1 coverAll:
			{76 to: 76}) ] valueCoveringAll:
		{75 to: 75}.! !
!Behavior method!
updateClienTransactions: aClient with: aTransactionID
	| clientTransactions |
	(clientTransactions _ [
	(clientsTransactions
		cover: (103 to: 121)
		declaredAt: (103 to: 121))
		at:
			(aClient
				cover: (127 to: 133)
				declaredAt: (26 to: 32))
		ifAbsent: [
			[
			(OrderedCollection
				cover: (147 to: 163)
				declaredAt: (147 to: 163)) new ] valueCoveringAll:
				{165 to: 167} ]] valueCoveringAll:
		{123 to: 125. 135 to: 143})
		cover: (81 to: 98)
		declaredAt: (58 to: 75).
	[
	(clientTransactions
		cover: (173 to: 190)
		declaredAt: (58 to: 75)) add:
		(aTransactionID
			cover: (197 to: 210)
			declaredAt: (40 to: 53)) ] valueCoveringAll:
		{192 to: 195}.
	[
	(clientsTransactions
		cover: (215 to: 233)
		declaredAt: (103 to: 121))
		at:
			(aClient
				cover: (239 to: 245)
				declaredAt: (26 to: 32))
		put:
			(clientTransactions
				cover: (252 to: 269)
				declaredAt: (58 to: 75)) ] valueCoveringAll:
		{235 to: 237. 247 to: 250}.! !
!Behavior method!
listPurchases: aUser withPassword: aPassword
	| clientTransactions items total sales |
	[
	(self coverAll:
		{93 to: 96})
		assert:
			(aUser
				cover: (106 to: 110)
				declaredAt: (16 to: 20))
		with:
			(aPassword
				cover: (118 to: 126)
				declaredAt: (36 to: 44)) ] valueCoveringAll:
		{98 to: 104. 112 to: 116}.
	(clientTransactions _ [
	(clientsTransactions
		cover: (154 to: 172)
		declaredAt: (154 to: 172))
		at:
			(aUser
				cover: (178 to: 182)
				declaredAt: (16 to: 20))
		ifAbsent: [
			[
			(OrderedCollection
				cover: (195 to: 211)
				declaredAt: (195 to: 211)) new ] valueCoveringAll:
				{213 to: 215} ]] valueCoveringAll:
		{174 to: 176. 184 to: 192})
		cover: (132 to: 149)
		declaredAt: (51 to: 68).
	(sales _ [
	(clientTransactions
		cover: (230 to: 247)
		declaredAt: (51 to: 68)) collect: [ :aTransactionID |
		[
		(salesBook
			cover: (277 to: 285)
			declaredAt: (277 to: 285)) at:
			(aTransactionID
				cover: (291 to: 304)
				declaredAt: (260 to: 273)) ] valueCoveringAll:
			{287 to: 289} ]] valueCoveringAll:
		{249 to: 256})
		cover: (221 to: 225)
		declaredAt: (82 to: 86).
	(total _ 0 coverAll:
		{321 to: 321})
		cover: (312 to: 316)
		declaredAt: (76 to: 80).
	(items _ [
	(Dictionary
		cover: (333 to: 342)
		declaredAt: (333 to: 342)) new ] valueCoveringAll:
		{344 to: 346})
		cover: (325 to: 329)
		declaredAt: (70 to: 74).
	[
	(sales
		cover: (352 to: 356)
		declaredAt: (82 to: 86)) do: [ :aSale |
		[
		([
		(aSale
			cover: (373 to: 377)
			declaredAt: (363 to: 367)) items ] valueCoveringAll:
			{379 to: 383}) associationsDo: [ :aSaleItem | | aQuantity |
			(aQuantity _ [
			(items
				cover: (445 to: 449)
				declaredAt: (70 to: 74))
				at:
					([
					(aSaleItem
						cover: (455 to: 463)
						declaredAt: (403 to: 411)) key ] valueCoveringAll:
						{465 to: 467})
				ifAbsent: [
					0 coverAll:
						{480 to: 480} ]] valueCoveringAll:
				{451 to: 453. 469 to: 477})
				cover: (432 to: 440)
				declaredAt: (417 to: 425).
			[
			(items
				cover: (487 to: 491)
				declaredAt: (70 to: 74))
				at:
					([
					(aSaleItem
						cover: (497 to: 505)
						declaredAt: (403 to: 411)) key ] valueCoveringAll:
						{507 to: 509})
				put:
					([
					(aQuantity
						cover: (516 to: 524)
						declaredAt: (417 to: 425)) +
						([
						(aSaleItem
							cover: (528 to: 536)
							declaredAt: (403 to: 411)) value ] valueCoveringAll:
							{538 to: 542}) ] valueCoveringAll:
						{526 to: 526}) ] valueCoveringAll:
				{493 to: 495. 511 to: 514} ]] valueCoveringAll:
			{385 to: 399}.
		(total _ [
		(total
			cover: (552 to: 556)
			declaredAt: (76 to: 80)) +
			([
			(aSale
				cover: (569 to: 573)
				declaredAt: (363 to: 367)) total ] valueCoveringAll:
				{575 to: 579}) ] valueCoveringAll:
			{567 to: 567})
			cover: (561 to: 565)
			declaredAt: (76 to: 80) ]] valueCoveringAll:
		{358 to: 360}.
	[
	(items
		cover: (587 to: 591)
		declaredAt: (70 to: 74))
		at:
			('Total' coverAll:
				{597 to: 603})
		put:
			(total
				cover: (610 to: 614)
				declaredAt: (76 to: 80)) ] valueCoveringAll:
		{593 to: 595. 605 to: 608}.
	^ items
		cover: (623 to: 627)
		declaredAt: (70 to: 74).! !
!Behavior method!
items
	^ items
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !

!testRun: #TusLibrosFacadeTest #test12listPurchasesReturnsEveryBookAndTotalPrice stamp: 'MS 11/11/2021 16:24:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13canNotListPurchaseOfAnInvalidCustomer stamp: 'MS 11/11/2021 16:24:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14canNotListPurchaseOfAValidUserWithInvalidPassword stamp: 'MS 11/11/2021 16:24:30'!
PASSED!
!Behavior method!
advanceTime: aDuration
	(now _ [
	(now
		cover: (28 to: 30)
		declaredAt: (28 to: 30)) +
		(aDuration
			cover: (41 to: 49)
			declaredAt: (14 to: 22)) ] valueCoveringAll:
		{39 to: 39})
		cover: (35 to: 37)
		declaredAt: (28 to: 30).! !
!Behavior method!
signalCartSessionExpired
	[
	(self coverAll:
		{28 to: 31}) error:
		([
		(facade
			cover: (40 to: 45)
			declaredAt: (40 to: 45)) sessionHasExpiredErrorDescription ] valueCoveringAll:
			{47 to: 79}) ] valueCoveringAll:
		{33 to: 38}.! !
!Behavior method!
sessionHasExpiredErrorDescription
	^ 'The cart session is expired' coverAll:
		{38 to: 66}.! !
!Behavior method!
revertTime: aDuration
	(now _ [
	(now
		cover: (25 to: 27)
		declaredAt: (25 to: 27)) -
		(aDuration
			cover: (38 to: 46)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{36 to: 36})
		cover: (32 to: 34)
		declaredAt: (25 to: 27).! !

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:24:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:24:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:24:30'!
PASSED!

!methodRemoval: Cart #content stamp: 'MS 11/11/2021 16:25:18'!
content

	| content |
	
	content := Dictionary new.

	items do: [ :item |
		content at: item put: (items occurrencesOf: item)
		].
	
	^ content!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/11/2021 16:25:20'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/11/2021 16:25:20'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/11/2021 16:25:20'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/11/2021 16:25:20'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/11/2021 16:25:20'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/11/2021 16:25:20'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/11/2021 16:25:20'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/11/2021 16:25:20'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/11/2021 16:25:20'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/11/2021 16:25:20'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/11/2021 16:25:20'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/11/2021 16:25:20'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/11/2021 16:25:20'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/11/2021 16:25:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 16:25:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 16:25:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 16:25:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 16:25:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 16:25:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 16:25:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 16:25:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 16:25:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 16:25:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 16:25:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11canNotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 16:25:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12listPurchasesReturnsEveryBookAndTotalPrice stamp: 'MS 11/11/2021 16:25:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13canNotListPurchaseOfAnInvalidCustomer stamp: 'MS 11/11/2021 16:25:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14canNotListPurchaseOfAValidUserWithInvalidPassword stamp: 'MS 11/11/2021 16:25:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:25:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:25:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:25:20'!
PASSED!
!Behavior method!
initialize
	(today _ [
	(DateAndTime
		cover: (23 to: 33)
		declaredAt: (23 to: 33)) now ] valueCoveringAll:
		{35 to: 37})
		cover: (14 to: 18)
		declaredAt: (14 to: 18).
	(transactionID _ 1 coverAll:
		{58 to: 58})
		cover: (41 to: 53)
		declaredAt: (41 to: 53).! !
!Behavior method!
createCart
	^ [
	(Cart
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) acceptingItemsOf:
		([
		(self coverAll:
			{39 to: 42}) defaultCatalog ] valueCoveringAll:
			{44 to: 57}) ] valueCoveringAll:
		{21 to: 37}.! !
!Behavior method!
defaultCatalog
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(Dictionary
		cover: (21 to: 30)
		declaredAt: (21 to: 30)) new ] valueCoveringAll:
		{32 to: 34}.
	[
	cascadeReceiver
		at: self itemSellByTheStore
		put: self itemSellByTheStorePrice ] valueCoveringAll:
		{38 to: 98}.
	[
	cascadeReceiver
		at: self anotherItemSellByTheStore
		put: self anotherItemSellByTheStorePrice ] valueCoveringAll:
		{103 to: 177}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{182 to: 189} ] value.! !
!Behavior method!
itemSellByTheStore
	^ 'validBook' coverAll:
		{25 to: 35}.! !
!Behavior method!
itemSellByTheStorePrice
	^ 10 coverAll:
		{29 to: 30}.! !
!Behavior method!
anotherItemSellByTheStore
	^ 'validBook2' coverAll:
		{32 to: 43}.! !
!Behavior method!
anotherItemSellByTheStorePrice
	^ 20 coverAll:
		{37 to: 38}.! !
!Behavior method!
acceptingItemsOf: aCatalog
	^ [
	([
	(self coverAll:
		{31 to: 34}) new ] valueCoveringAll:
		{36 to: 38}) initializeAcceptingItemsOf:
		(aCatalog
			cover: (68 to: 75)
			declaredAt: (19 to: 26)) ] valueCoveringAll:
		{40 to: 66}.! !
!Behavior method!
initializeAcceptingItemsOf: aCatalog
	(catalog _ aCatalog
		cover: (51 to: 58)
		declaredAt: (29 to: 36))
		cover: (40 to: 46)
		declaredAt: (40 to: 46).
	(items _ [
	(Bag
		cover: (71 to: 73)
		declaredAt: (71 to: 73)) new ] valueCoveringAll:
		{75 to: 77})
		cover: (62 to: 66)
		declaredAt: (62 to: 66).! !
!Behavior method!
isEmpty
	^ [
	(items
		cover: (13 to: 17)
		declaredAt: (13 to: 17)) isEmpty ] valueCoveringAll:
		{19 to: 25}.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/11/2021 16:25:25'!
PASSED!
!Behavior method!
itemNotSellByTheStore
	^ 'invalidBook' coverAll:
		{27 to: 39}.! !
!Behavior method!
add: anItem
	^ [
	(self coverAll:
		{17 to: 20})
		add:
			(1 coverAll:
				{27 to: 27})
		of:
			(anItem
				cover: (33 to: 38)
				declaredAt: (6 to: 11)) ] valueCoveringAll:
		{22 to: 25. 29 to: 31}.! !
!Behavior method!
add: aQuantity of: anItem
	[
	(self coverAll:
		{29 to: 32}) assertIsValidQuantity:
		(aQuantity
			cover: (57 to: 65)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{34 to: 55}.
	[
	(self coverAll:
		{69 to: 72}) assertIsValidItem:
		(anItem
			cover: (93 to: 98)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{74 to: 91}.
	[
	(1 coverAll:
		{103 to: 103})
		to:
			(aQuantity
				cover: (109 to: 117)
				declaredAt: (6 to: 14))
		do: [ :aNumber |
			[
			(items
				cover: (136 to: 140)
				declaredAt: (136 to: 140)) add:
				(anItem
					cover: (147 to: 152)
					declaredAt: (20 to: 25)) ] valueCoveringAll:
				{142 to: 145} ]] valueCoveringAll:
		{105 to: 107. 119 to: 121}.! !
!Behavior method!
assertIsValidQuantity: aQuantity
	[
	([
	(aQuantity
		cover: (36 to: 44)
		declaredAt: (24 to: 32)) strictlyPositive ] valueCoveringAll:
		{46 to: 61}) ifFalse: [
		[
		(self coverAll:
			{74 to: 77}) error:
			([
			(self coverAll:
				{86 to: 89}) invalidQuantityErrorMessage ] valueCoveringAll:
				{91 to: 117}) ] valueCoveringAll:
			{79 to: 84} ]] valueCoveringAll:
		{63 to: 70}.! !
!Behavior method!
assertIsValidItem: anItem
	[
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includesKey:
		(anItem
			cover: (51 to: 56)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			(self coverAll:
				{82 to: 85}) invalidItemErrorMessage ] valueCoveringAll:
				{87 to: 109}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{59 to: 66}.! !
!Behavior method!
invalidItemErrorMessage
	^ 'Item is not in catalog' coverAll:
		{29 to: 52}.! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/11/2021 16:25:25'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/11/2021 16:25:25'!
PASSED!
!Behavior method!
invalidQuantityErrorMessage
	^ 'Invalid number of items' coverAll:
		{33 to: 57}.! !

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/11/2021 16:25:25'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/11/2021 16:25:25'!
PASSED!
!Behavior method!
includes: anItem
	^ [
	(items
		cover: (21 to: 25)
		declaredAt: (21 to: 25)) includes:
		(anItem
			cover: (37 to: 42)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{27 to: 35}.! !

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/11/2021 16:25:25'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/11/2021 16:25:25'!
PASSED!
!Behavior method!
occurrencesOf: anItem
	^ [
	(items
		cover: (26 to: 30)
		declaredAt: (26 to: 30)) occurrencesOf:
		(anItem
			cover: (47 to: 52)
			declaredAt: (16 to: 21)) ] valueCoveringAll:
		{32 to: 45}.! !

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/11/2021 16:25:25'!
PASSED!
!Behavior method!
notExpiredCreditCard
	^ [
	(CreditCard
		cover: (26 to: 35)
		declaredAt: (26 to: 35)) expiringOn:
		([
		(Month
			cover: (50 to: 54)
			declaredAt: (50 to: 54))
			month:
				([
				(today
					cover: (63 to: 67)
					declaredAt: (63 to: 67)) monthIndex ] valueCoveringAll:
					{69 to: 78})
			year:
				([
				([
				(today
					cover: (86 to: 90)
					declaredAt: (63 to: 67)) yearNumber ] valueCoveringAll:
					{92 to: 101}) +
					(1 coverAll:
						{105 to: 105}) ] valueCoveringAll:
					{103 to: 103}) ] valueCoveringAll:
			{56 to: 61. 80 to: 84}) ] valueCoveringAll:
		{37 to: 47}.! !
!Behavior method!
expiringOn: aMonth
	^ [
	([
	(self coverAll:
		{25 to: 28}) new ] valueCoveringAll:
		{30 to: 32}) initializeExpiringOn:
		(aMonth
			cover: (56 to: 61)
			declaredAt: (13 to: 18)) ] valueCoveringAll:
		{34 to: 54}.! !
!Behavior method!
initializeExpiringOn: aMonth
	(expiration _ aMonth
		cover: (48 to: 53)
		declaredAt: (23 to: 28))
		cover: (34 to: 43)
		declaredAt: (34 to: 43).! !
!Behavior method!
today
	^ today
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !
!Behavior method!
transactionID
	^ self coverAll:
		{18 to: 21}.! !
!Behavior method!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook with: aTransactionId
	[
	(self coverAll:
		{131 to: 134}) assertIsNotEmpty:
		(aCart
			cover: (154 to: 158)
			declaredAt: (13 to: 17)) ] valueCoveringAll:
		{136 to: 152}.
	[
	(self coverAll:
		{162 to: 165})
		assertIsNotExpired:
			(aCreditCard
				cover: (187 to: 197)
				declaredAt: (29 to: 39))
		on:
			(aDate
				cover: (203 to: 207)
				declaredAt: (74 to: 78)) ] valueCoveringAll:
		{167 to: 185. 199 to: 201}.
	^ [
	([
	(self coverAll:
		{214 to: 217}) new ] valueCoveringAll:
		{219 to: 221})
		initializeToCheckout:
			(aCart
				cover: (245 to: 249)
				declaredAt: (13 to: 17))
		charging:
			(aCreditCard
				cover: (261 to: 271)
				declaredAt: (29 to: 39))
		throught:
			(aMerchantProcessor
				cover: (283 to: 300)
				declaredAt: (51 to: 68))
		registeringOn:
			(aSalesBook
				cover: (317 to: 326)
				declaredAt: (95 to: 104))
		with:
			(aTransactionId
				cover: (334 to: 347)
				declaredAt: (112 to: 125)) ] valueCoveringAll:
		{223 to: 243. 251 to: 259. 273 to: 281. 302 to: 315. 328 to: 332}.! !
!Behavior method!
assertIsNotEmpty: aCart
	[
	([
	(aCart
		cover: (29 to: 33)
		declaredAt: (19 to: 23)) isEmpty ] valueCoveringAll:
		{35 to: 41}) ifTrue: [
		[
		(self coverAll:
			{52 to: 55}) error:
			([
			(self coverAll:
				{64 to: 67}) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
				{69 to: 97}) ] valueCoveringAll:
			{57 to: 62} ]] valueCoveringAll:
		{43 to: 49}.! !
!Behavior method!
cartCanNotBeEmptyErrorMessage
	^ 'Can not check out an empty cart' coverAll:
		{35 to: 67}.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/11/2021 16:25:25'!
PASSED!
!Behavior method!
assertIsNotExpired: aCreditCard on: aDate
	[
	([
	(aCreditCard
		cover: (47 to: 57)
		declaredAt: (21 to: 31)) isExpiredOn:
		(aDate
			cover: (72 to: 76)
			declaredAt: (37 to: 41)) ] valueCoveringAll:
		{59 to: 70}) ifTrue: [
		[
		(self coverAll:
			{89 to: 92}) error:
			([
			(self coverAll:
				{101 to: 104}) canNotChargeAnExpiredCreditCardErrorMessage ] valueCoveringAll:
				{106 to: 148}) ] valueCoveringAll:
			{94 to: 99} ]] valueCoveringAll:
		{79 to: 85}.! !
!Behavior method!
isExpiredOn: aDate
	^ [
	([
	(expiration
		cover: (25 to: 34)
		declaredAt: (25 to: 34)) start ] valueCoveringAll:
		{36 to: 40}) <
		([
		([
		(Month
			cover: (45 to: 49)
			declaredAt: (45 to: 49))
			month:
				([
				(aDate
					cover: (58 to: 62)
					declaredAt: (14 to: 18)) monthIndex ] valueCoveringAll:
					{64 to: 73})
			year:
				([
				(aDate
					cover: (81 to: 85)
					declaredAt: (14 to: 18)) yearNumber ] valueCoveringAll:
					{87 to: 96}) ] valueCoveringAll:
			{51 to: 56. 75 to: 79}) start ] valueCoveringAll:
			{99 to: 103}) ] valueCoveringAll:
		{42 to: 42}.! !
!Behavior method!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook with: aTransactionID
	(cart _ aCart
		cover: (138 to: 142)
		declaredAt: (23 to: 27))
		cover: (130 to: 133)
		declaredAt: (130 to: 133).
	(creditCard _ aCreditCard
		cover: (160 to: 170)
		declaredAt: (39 to: 49))
		cover: (146 to: 155)
		declaredAt: (146 to: 155).
	(merchantProcessor _ aMerchantProcessor
		cover: (195 to: 212)
		declaredAt: (61 to: 78))
		cover: (174 to: 190)
		declaredAt: (174 to: 190).
	(salesBook _ aSalesBook
		cover: (229 to: 238)
		declaredAt: (95 to: 104))
		cover: (216 to: 224)
		declaredAt: (216 to: 224).
	(transactionsIDs _ aTransactionID
		cover: (261 to: 274)
		declaredAt: (112 to: 125))
		cover: (242 to: 256)
		declaredAt: (242 to: 256).! !
!Behavior method!
checkOut
	| sale |
	[
	(self coverAll:
		{22 to: 25}) calculateTotal ] valueCoveringAll:
		{27 to: 40}.
	[
	(self coverAll:
		{44 to: 47}) debitTotal ] valueCoveringAll:
		{49 to: 58}.
	(sale _ [
	(self coverAll:
		{70 to: 73}) registerSale ] valueCoveringAll:
		{75 to: 86})
		cover: (62 to: 65)
		declaredAt: (14 to: 17).
	^ sale
		cover: (93 to: 96)
		declaredAt: (14 to: 17).! !
!Behavior method!
calculateTotal
	(total _ [
	(cart
		cover: (27 to: 30)
		declaredAt: (27 to: 30)) total ] valueCoveringAll:
		{32 to: 36})
		cover: (18 to: 22)
		declaredAt: (18 to: 22).! !
!Behavior method!
total
	^ [
	(items
		cover: (11 to: 15)
		declaredAt: (11 to: 15)) sum: [ :anItem |
		[
		(catalog
			cover: (34 to: 40)
			declaredAt: (34 to: 40)) at:
			(anItem
				cover: (46 to: 51)
				declaredAt: (25 to: 30)) ] valueCoveringAll:
			{42 to: 44} ]] valueCoveringAll:
		{17 to: 20}.! !
!Behavior method!
debitTotal
	[
	(merchantProcessor
		cover: (14 to: 30)
		declaredAt: (14 to: 30))
		debit:
			(total
				cover: (39 to: 43)
				declaredAt: (39 to: 43))
		from:
			(creditCard
				cover: (51 to: 60)
				declaredAt: (51 to: 60)) ] valueCoveringAll:
		{32 to: 37. 45 to: 49}.! !
!Behavior method!
registerSale
	| sale transactionID |
	(sale _ [
	(self coverAll:
		{48 to: 51}) createSale ] valueCoveringAll:
		{53 to: 62})
		cover: (40 to: 43)
		declaredAt: (18 to: 21).
	(transactionID _ [
	(transactionsIDs
		cover: (83 to: 97)
		declaredAt: (83 to: 97)) nextTransactionId ] valueCoveringAll:
		{99 to: 115})
		cover: (66 to: 78)
		declaredAt: (23 to: 35).
	[
	(salesBook
		cover: (122 to: 130)
		declaredAt: (122 to: 130))
		at:
			(transactionID
				cover: (136 to: 148)
				declaredAt: (23 to: 35))
		put:
			(sale
				cover: (155 to: 158)
				declaredAt: (18 to: 21)) ] valueCoveringAll:
		{132 to: 134. 150 to: 153}.
	^ transactionID
		cover: (165 to: 177)
		declaredAt: (23 to: 35).! !
!Behavior method!
createSale
	^ [
	(Sale
		cover: (16 to: 19)
		declaredAt: (16 to: 19))
		for:
			([
			(cart
				cover: (25 to: 28)
				declaredAt: (25 to: 28)) detail ] valueCoveringAll:
				{30 to: 35})
		with:
			(total
				cover: (43 to: 47)
				declaredAt: (43 to: 47)) ] valueCoveringAll:
		{21 to: 24. 37 to: 41}.! !
!Behavior method!
detail
	| detail |
	(detail _ [
	(OrderedDictionary
		cover: (33 to: 49)
		declaredAt: (33 to: 49)) new ] valueCoveringAll:
		{51 to: 53})
		cover: (23 to: 28)
		declaredAt: (11 to: 16).
	[
	(items
		cover: (58 to: 62)
		declaredAt: (58 to: 62)) do: [ :item |
		[
		(detail
			cover: (77 to: 82)
			declaredAt: (11 to: 16))
			at:
				(item
					cover: (88 to: 91)
					declaredAt: (71 to: 74))
			put:
				([
				(items
					cover: (99 to: 103)
					declaredAt: (58 to: 62)) occurrencesOf:
					(item
						cover: (120 to: 123)
						declaredAt: (71 to: 74)) ] valueCoveringAll:
					{105 to: 118}) ] valueCoveringAll:
			{84 to: 86. 93 to: 96} ]] valueCoveringAll:
		{64 to: 66}.
	^ detail
		cover: (135 to: 140)
		declaredAt: (11 to: 16).! !
!Behavior method!
for: someItems with: aTotal
	^ [
	([
	(self coverAll:
		{32 to: 35}) new ] valueCoveringAll:
		{37 to: 39})
		initializeWith:
			(someItems
				cover: (57 to: 65)
				declaredAt: (6 to: 14))
		andTotal:
			(aTotal
				cover: (77 to: 82)
				declaredAt: (22 to: 27)) ] valueCoveringAll:
		{41 to: 55. 67 to: 75}.! !
!Behavior method!
initializeWith: someItems andTotal: aTotal
	(total _ aTotal
		cover: (55 to: 60)
		declaredAt: (37 to: 42))
		cover: (46 to: 50)
		declaredAt: (46 to: 50).
	(items _ someItems
		cover: (73 to: 81)
		declaredAt: (17 to: 25))
		cover: (64 to: 68)
		declaredAt: (64 to: 68).! !
!Behavior method!
nextTransactionId
	(transactionID _ [
	(transactionID
		cover: (21 to: 33)
		declaredAt: (21 to: 33)) +
		(1 coverAll:
			{53 to: 53}) ] valueCoveringAll:
		{52 to: 52})
		cover: (38 to: 50)
		declaredAt: (21 to: 33).
	^ [
	(transactionID
		cover: (60 to: 72)
		declaredAt: (21 to: 33)) -
		(1 coverAll:
			{74 to: 74}) ] valueCoveringAll:
		{73 to: 73}.! !
!Behavior method!
total
	^ total
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/11/2021 16:25:26'!
PASSED!
!Behavior method!
expiredCreditCard
	^ [
	(CreditCard
		cover: (23 to: 32)
		declaredAt: (23 to: 32)) expiringOn:
		([
		(Month
			cover: (47 to: 51)
			declaredAt: (47 to: 51))
			month:
				([
				(today
					cover: (60 to: 64)
					declaredAt: (60 to: 64)) monthIndex ] valueCoveringAll:
					{66 to: 75})
			year:
				([
				([
				(today
					cover: (83 to: 87)
					declaredAt: (60 to: 64)) yearNumber ] valueCoveringAll:
					{89 to: 98}) -
					(1 coverAll:
						{102 to: 102}) ] valueCoveringAll:
					{100 to: 100}) ] valueCoveringAll:
			{53 to: 58. 77 to: 81}) ] valueCoveringAll:
		{34 to: 44}.! !
!Behavior method!
canNotChargeAnExpiredCreditCardErrorMessage
	^ 'Can not charge an expired credit card' coverAll:
		{49 to: 87}.! !

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/11/2021 16:25:26'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/11/2021 16:25:26'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/11/2021 16:25:26'!
PASSED!
!Behavior method!
creditCardHasNoCreditErrorMessage
	^ 'Credit card has no credit' coverAll:
		{39 to: 65}.! !

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/11/2021 16:25:26'!
PASSED!
!Behavior method!
for: aTime
	^ [
	([
	(self coverAll:
		{15 to: 18}) new ] valueCoveringAll:
		{20 to: 22}) initializeWith:
		(aTime
			cover: (40 to: 44)
			declaredAt: (6 to: 10)) ] valueCoveringAll:
		{24 to: 38}.! !
!Behavior method!
initializeWith: aTime
	(now _ aTime
		cover: (32 to: 36)
		declaredAt: (17 to: 21))
		cover: (25 to: 27)
		declaredAt: (25 to: 27).! !
!Behavior method!
withUsers: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock
	^ [
	([
	(self coverAll:
		{144 to: 147}) new ] valueCoveringAll:
		{149 to: 151})
		initializeWith:
			(usersWithPasswords
				cover: (169 to: 186)
				declaredAt: (12 to: 29))
		withCatalog:
			(aCatalog
				cover: (201 to: 208)
				declaredAt: (44 to: 51))
		withSalesBook:
			(aSalesBook
				cover: (225 to: 234)
				declaredAt: (68 to: 77))
		withMerchantProcessor:
			(aMerchantProcessor
				cover: (259 to: 276)
				declaredAt: (102 to: 119))
		withClock:
			(aClock
				cover: (289 to: 294)
				declaredAt: (132 to: 137)) ] valueCoveringAll:
		{153 to: 167. 188 to: 199. 210 to: 223. 236 to: 257. 278 to: 287}.! !
!Behavior method!
initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock
	(users _ usersWithPasswords
		cover: (158 to: 175)
		declaredAt: (17 to: 34))
		cover: (149 to: 153)
		declaredAt: (149 to: 153).
	(catalog _ aCatalog
		cover: (190 to: 197)
		declaredAt: (49 to: 56))
		cover: (179 to: 185)
		declaredAt: (179 to: 185).
	(salesBook _ aSalesBook
		cover: (214 to: 223)
		declaredAt: (73 to: 82))
		cover: (201 to: 209)
		declaredAt: (201 to: 209).
	(merchantProcessor _ aMerchantProcessor
		cover: (248 to: 265)
		declaredAt: (107 to: 124))
		cover: (227 to: 243)
		declaredAt: (227 to: 243).
	(cartSessions _ [
	(Dictionary
		cover: (286 to: 295)
		declaredAt: (286 to: 295)) new ] valueCoveringAll:
		{297 to: 299})
		cover: (270 to: 281)
		declaredAt: (270 to: 281).
	(cartIdCounter _ 0 coverAll:
		{320 to: 320})
		cover: (303 to: 315)
		declaredAt: (303 to: 315).
	(transactionID _ 1 coverAll:
		{343 to: 343})
		cover: (326 to: 338)
		declaredAt: (326 to: 338).
	(cartToClient _ [
	(Dictionary
		cover: (365 to: 374)
		declaredAt: (286 to: 295)) new ] valueCoveringAll:
		{376 to: 378})
		cover: (349 to: 360)
		declaredAt: (349 to: 360).
	(clientsTransactions _ [
	(Dictionary
		cover: (407 to: 416)
		declaredAt: (286 to: 295)) new ] valueCoveringAll:
		{418 to: 420})
		cover: (384 to: 402)
		declaredAt: (384 to: 402).
	(clock _ aClock
		cover: (433 to: 438)
		declaredAt: (137 to: 142))
		cover: (424 to: 428)
		declaredAt: (424 to: 428).! !
!Behavior method!
createCartFor: aUser with: aUserPassword
	| cart |
	[
	(self coverAll:
		{57 to: 60})
		assert:
			(aUser
				cover: (70 to: 74)
				declaredAt: (16 to: 20))
		with:
			(aUserPassword
				cover: (82 to: 94)
				declaredAt: (28 to: 40)) ] valueCoveringAll:
		{62 to: 68. 76 to: 80}.
	(cartIdCounter _ [
	(cartIdCounter
		cover: (100 to: 112)
		declaredAt: (100 to: 112)) +
		(1 coverAll:
			{133 to: 133}) ] valueCoveringAll:
		{131 to: 131})
		cover: (117 to: 129)
		declaredAt: (100 to: 112).
	(cart _ [
	(CartSession
		cover: (147 to: 157)
		declaredAt: (147 to: 157))
		for:
			([
			(Cart
				cover: (165 to: 168)
				declaredAt: (165 to: 168)) acceptingItemsOf:
				(catalog
					cover: (188 to: 194)
					declaredAt: (188 to: 194)) ] valueCoveringAll:
				{170 to: 186})
		ownedBy:
			(aUser
				cover: (206 to: 210)
				declaredAt: (16 to: 20))
		with:
			(self coverAll:
				{218 to: 221}) ] valueCoveringAll:
		{159 to: 162. 197 to: 204. 212 to: 216})
		cover: (139 to: 142)
		declaredAt: (48 to: 51).
	[
	(cartSessions
		cover: (227 to: 238)
		declaredAt: (227 to: 238))
		at:
			(cartIdCounter
				cover: (244 to: 256)
				declaredAt: (100 to: 112))
		put:
			(cart
				cover: (262 to: 265)
				declaredAt: (48 to: 51)) ] valueCoveringAll:
		{240 to: 242. 258 to: 261}.
	[
	(cartToClient
		cover: (271 to: 282)
		declaredAt: (271 to: 282))
		at:
			(cartIdCounter
				cover: (288 to: 300)
				declaredAt: (100 to: 112))
		put:
			(aUser
				cover: (307 to: 311)
				declaredAt: (16 to: 20)) ] valueCoveringAll:
		{284 to: 286. 302 to: 305}.
	^ cartIdCounter
		cover: (318 to: 330)
		declaredAt: (100 to: 112).! !
!Behavior method!
assert: validUser with: validPassword
	| password |
	[
	(users
		cover: (56 to: 60)
		declaredAt: (56 to: 60))
		at:
			(validUser
				cover: (66 to: 74)
				declaredAt: (9 to: 17))
		ifAbsent: [
			[
			(self coverAll:
				{86 to: 89}) error:
				([
				(self coverAll:
					{98 to: 101}) invalidUserOrPasswordErrorDescription ] valueCoveringAll:
					{103 to: 139}) ] valueCoveringAll:
				{91 to: 96} ]] valueCoveringAll:
		{62 to: 64. 76 to: 84}.
	(password _ [
	(users
		cover: (158 to: 162)
		declaredAt: (56 to: 60)) at:
		(validUser
			cover: (168 to: 176)
			declaredAt: (9 to: 17)) ] valueCoveringAll:
		{164 to: 166})
		cover: (146 to: 153)
		declaredAt: (43 to: 50).
	[
	([
	(password
		cover: (184 to: 191)
		declaredAt: (43 to: 50)) =
		(validPassword
			cover: (195 to: 207)
			declaredAt: (25 to: 37)) ] valueCoveringAll:
		{193 to: 193}) ifFalse: [
		[
		(self coverAll:
			{220 to: 223}) error:
			([
			(self coverAll:
				{232 to: 235}) invalidUserOrPasswordErrorDescription ] valueCoveringAll:
				{237 to: 273}) ] valueCoveringAll:
			{225 to: 230} ]] valueCoveringAll:
		{211 to: 218}.! !
!Behavior method!
invalidUserOrPasswordErrorDescription
	^ 'Invalid user or password' coverAll:
		{42 to: 67}.! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 16:25:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 16:25:26'!
PASSED!
!Behavior method!
for: aCart ownedBy: aCustomer with: aSystemFacade
	^ [
	([
	(self coverAll:
		{54 to: 57}) new ] valueCoveringAll:
		{59 to: 61})
		initializedWith:
			(aCart
				cover: (80 to: 84)
				declaredAt: (6 to: 10))
		ownedBy:
			(aCustomer
				cover: (95 to: 103)
				declaredAt: (21 to: 29))
		with:
			(aSystemFacade
				cover: (111 to: 123)
				declaredAt: (37 to: 49)) ] valueCoveringAll:
		{63 to: 78. 86 to: 93. 105 to: 109}.! !
!Behavior method!
initializedWith: aCart ownedBy: aCustomer with: aFacade
	(cart _ aCart
		cover: (67 to: 71)
		declaredAt: (18 to: 22))
		cover: (59 to: 62)
		declaredAt: (59 to: 62).
	(owner _ aCustomer
		cover: (84 to: 92)
		declaredAt: (33 to: 41))
		cover: (75 to: 79)
		declaredAt: (75 to: 79).
	(facade _ aFacade
		cover: (107 to: 113)
		declaredAt: (49 to: 55))
		cover: (97 to: 102)
		declaredAt: (97 to: 102).
	(lastTime _ [
	(aFacade
		cover: (129 to: 135)
		declaredAt: (49 to: 55)) now ] valueCoveringAll:
		{137 to: 139})
		cover: (117 to: 124)
		declaredAt: (117 to: 124).! !
!Behavior method!
now
	^ [
	(clock
		cover: (8 to: 12)
		declaredAt: (8 to: 12)) now ] valueCoveringAll:
		{14 to: 16}.! !
!Behavior method!
now
	^ now
		cover: (8 to: 10)
		declaredAt: (8 to: 10).! !
!Behavior method!
listCart: aCartId
	^ [
	([
	(cartSessions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) at:
		(aCartId
			cover: (43 to: 49)
			declaredAt: (11 to: 17)) ] valueCoveringAll:
		{39 to: 41}) getItems ] valueCoveringAll:
		{52 to: 59}.! !
!Behavior method!
getItems
	[
	(self coverAll:
		{13 to: 16}) assertCartHasNotExpired ] valueCoveringAll:
		{18 to: 40}.
	^ [
	(cart
		cover: (45 to: 48)
		declaredAt: (45 to: 48)) getItems ] valueCoveringAll:
		{50 to: 57}.! !
!Behavior method!
assertCartHasNotExpired
	[
	([
	([
	(lastTime
		cover: (28 to: 35)
		declaredAt: (28 to: 35)) +
		([
		(facade
			cover: (39 to: 44)
			declaredAt: (39 to: 44)) sessionDuration ] valueCoveringAll:
			{46 to: 60}) ] valueCoveringAll:
		{37 to: 37}) <
		([
		(facade
			cover: (65 to: 70)
			declaredAt: (39 to: 44)) now ] valueCoveringAll:
			{72 to: 74}) ] valueCoveringAll:
		{63 to: 63}) ifTrue: [
		[
		(self coverAll:
			{86 to: 89}) signalCartSessionExpired ] valueCoveringAll:
			{91 to: 114} ]] valueCoveringAll:
		{76 to: 82}.! !
!Behavior method!
sessionDuration
	^ [
	(30 coverAll:
		{21 to: 22}) minutes ] valueCoveringAll:
		{24 to: 30}.! !
!Behavior method!
getItems
	^ [
	(items
		cover: (14 to: 18)
		declaredAt: (14 to: 18)) copy ] valueCoveringAll:
		{20 to: 23}.! !

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 16:25:26'!
PASSED!
!Behavior method!
addToCart: cartId book: aBook bookQuantity: aQuantity
	| cart |
	(cart _ [
	(cartSessions
		cover: (76 to: 87)
		declaredAt: (76 to: 87))
		at:
			(cartId
				cover: (93 to: 98)
				declaredAt: (12 to: 17))
		ifAbsent: [ ^ [
			(self coverAll:
				{112 to: 115}) error:
				([
				(self coverAll:
					{124 to: 127}) invalidCartIdErrorMessage ] valueCoveringAll:
					{129 to: 153}) ] valueCoveringAll:
				{117 to: 122} ]] valueCoveringAll:
		{89 to: 91. 100 to: 108})
		cover: (68 to: 71)
		declaredAt: (61 to: 64).
	[
	(catalog
		cover: (160 to: 166)
		declaredAt: (160 to: 166))
		at:
			(aBook
				cover: (172 to: 176)
				declaredAt: (25 to: 29))
		ifAbsent: [ ^ [
			(self coverAll:
				{190 to: 193}) error:
				([
				(self coverAll:
					{202 to: 205}) invalidItemErrorMessage ] valueCoveringAll:
					{207 to: 229}) ] valueCoveringAll:
				{195 to: 200} ]] valueCoveringAll:
		{168 to: 170. 178 to: 186}.
	[
	(cart
		cover: (236 to: 239)
		declaredAt: (61 to: 64))
		add:
			(aQuantity
				cover: (246 to: 254)
				declaredAt: (45 to: 53))
		of:
			(aBook
				cover: (260 to: 264)
				declaredAt: (25 to: 29)) ] valueCoveringAll:
		{241 to: 244. 256 to: 258}.! !
!Behavior method!
invalidItemErrorMessage
	^ 'Invalid item' coverAll:
		{28 to: 41}.! !

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 16:25:26'!
PASSED!
!Behavior method!
invalidCartIdErrorMessage
	^ 'Invalid CartId' coverAll:
		{30 to: 45}.! !

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 16:25:26'!
PASSED!
!Behavior method!
add: anAmount of: aBook
	[
	(self coverAll:
		{29 to: 32}) assertCartHasNotExpired ] valueCoveringAll:
		{34 to: 56}.
	^ [
	(cart
		cover: (63 to: 66)
		declaredAt: (63 to: 66))
		add:
			(anAmount
				cover: (73 to: 80)
				declaredAt: (6 to: 13))
		of:
			(aBook
				cover: (86 to: 90)
				declaredAt: (19 to: 23)) ] valueCoveringAll:
		{68 to: 71. 82 to: 84}.! !

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 16:25:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 16:25:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 16:25:26'!
PASSED!
!Behavior method!
checkOut: cartId withCreditCard: aCreditCard on: aDate
	| cart cashier transactionId client |
	(cart _ [
	(cartSessions
		cover: (107 to: 118)
		declaredAt: (107 to: 118))
		at:
			(cartId
				cover: (124 to: 129)
				declaredAt: (11 to: 16))
		ifAbsent: [
			[
			(self coverAll:
				{141 to: 144}) error:
				([
				(self coverAll:
					{153 to: 156}) invalidCartIdErrorMessage ] valueCoveringAll:
					{158 to: 182}) ] valueCoveringAll:
				{146 to: 151} ]] valueCoveringAll:
		{120 to: 122. 131 to: 139})
		cover: (99 to: 102)
		declaredAt: (60 to: 63).
	[
	([
	(cart
		cover: (190 to: 193)
		declaredAt: (60 to: 63)) isEmpty ] valueCoveringAll:
		{195 to: 201}) ifTrue: [
		[
		(self coverAll:
			{212 to: 215}) error:
			([
			(self coverAll:
				{224 to: 227}) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
				{229 to: 257}) ] valueCoveringAll:
			{217 to: 222} ]] valueCoveringAll:
		{204 to: 210}.
	[
	(cart
		cover: (264 to: 267)
		declaredAt: (60 to: 63)) assertCartHasNotExpired ] valueCoveringAll:
		{269 to: 291}.
	(cashier _ [
	(Cashier
		cover: (308 to: 314)
		declaredAt: (308 to: 314))
		toCheckout:
			(cart
				cover: (331 to: 334)
				declaredAt: (60 to: 63))
		charging:
			(aCreditCard
				cover: (349 to: 359)
				declaredAt: (34 to: 44))
		throught:
			(merchantProcessor
				cover: (375 to: 391)
				declaredAt: (375 to: 391))
		on:
			(aDate
				cover: (400 to: 404)
				declaredAt: (50 to: 54))
		registeringOn:
			(salesBook
				cover: (424 to: 432)
				declaredAt: (424 to: 432))
		with:
			(self coverAll:
				{442 to: 445}) ] valueCoveringAll:
		{319 to: 329. 339 to: 347. 365 to: 373. 396 to: 398. 409 to: 422. 436 to: 440})
		cover: (297 to: 303)
		declaredAt: (65 to: 71).
	(transactionId _ [
	(cashier
		cover: (469 to: 475)
		declaredAt: (65 to: 71)) checkOut ] valueCoveringAll:
		{477 to: 484})
		cover: (452 to: 464)
		declaredAt: (73 to: 85).
	(client _ [
	(cartToClient
		cover: (501 to: 512)
		declaredAt: (501 to: 512)) removeKey:
		(cartId
			cover: (525 to: 530)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{514 to: 523})
		cover: (491 to: 496)
		declaredAt: (87 to: 92).
	[
	(self coverAll:
		{536 to: 539})
		updateClienTransactions:
			(client
				cover: (566 to: 571)
				declaredAt: (87 to: 92))
		with:
			(transactionId
				cover: (579 to: 591)
				declaredAt: (73 to: 85)) ] valueCoveringAll:
		{541 to: 564. 573 to: 577}.
	^ transactionId
		cover: (598 to: 610)
		declaredAt: (73 to: 85).! !

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 16:25:26'!
PASSED!
!Behavior method!
isEmpty
	^ [
	(cart
		cover: (13 to: 16)
		declaredAt: (13 to: 16)) isEmpty ] valueCoveringAll:
		{18 to: 24}.! !
!Behavior method!
cartCanNotBeEmptyErrorMessage
	^ [
	(Cashier
		cover: (36 to: 42)
		declaredAt: (36 to: 42)) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
		{44 to: 72}.! !

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 16:25:26'!
PASSED!
!Behavior method!
canNotChargeAnExpiredCreditCardErrorMessage
	^ [
	(Cashier
		cover: (50 to: 56)
		declaredAt: (50 to: 56)) canNotChargeAnExpiredCreditCardErrorMessage ] valueCoveringAll:
		{58 to: 100}.! !

!testRun: #TusLibrosFacadeTest #test11canNotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 16:25:26'!
PASSED!
!Behavior method!
total
	^ [
	(cart
		cover: (11 to: 14)
		declaredAt: (11 to: 14)) total ] valueCoveringAll:
		{16 to: 20}.! !
!Behavior method!
detail
	^ [
	(cart
		cover: (12 to: 15)
		declaredAt: (12 to: 15)) detail ] valueCoveringAll:
		{17 to: 22}.! !
!Behavior method!
nextTransactionId
	(transactionID _ [
	(transactionID
		cover: (22 to: 34)
		declaredAt: (22 to: 34)) +
		(1 coverAll:
			{54 to: 54}) ] valueCoveringAll:
		{53 to: 53})
		cover: (39 to: 51)
		declaredAt: (22 to: 34).
	^ [
	(transactionID
		cover: (61 to: 73)
		declaredAt: (22 to: 34)) -
		(1 coverAll:
			{76 to: 76}) ] valueCoveringAll:
		{75 to: 75}.! !
!Behavior method!
updateClienTransactions: aClient with: aTransactionID
	| clientTransactions |
	(clientTransactions _ [
	(clientsTransactions
		cover: (103 to: 121)
		declaredAt: (103 to: 121))
		at:
			(aClient
				cover: (127 to: 133)
				declaredAt: (26 to: 32))
		ifAbsent: [
			[
			(OrderedCollection
				cover: (147 to: 163)
				declaredAt: (147 to: 163)) new ] valueCoveringAll:
				{165 to: 167} ]] valueCoveringAll:
		{123 to: 125. 135 to: 143})
		cover: (81 to: 98)
		declaredAt: (58 to: 75).
	[
	(clientTransactions
		cover: (173 to: 190)
		declaredAt: (58 to: 75)) add:
		(aTransactionID
			cover: (197 to: 210)
			declaredAt: (40 to: 53)) ] valueCoveringAll:
		{192 to: 195}.
	[
	(clientsTransactions
		cover: (215 to: 233)
		declaredAt: (103 to: 121))
		at:
			(aClient
				cover: (239 to: 245)
				declaredAt: (26 to: 32))
		put:
			(clientTransactions
				cover: (252 to: 269)
				declaredAt: (58 to: 75)) ] valueCoveringAll:
		{235 to: 237. 247 to: 250}.! !
!Behavior method!
listPurchases: aUser withPassword: aPassword
	| clientTransactions items total sales |
	[
	(self coverAll:
		{93 to: 96})
		assert:
			(aUser
				cover: (106 to: 110)
				declaredAt: (16 to: 20))
		with:
			(aPassword
				cover: (118 to: 126)
				declaredAt: (36 to: 44)) ] valueCoveringAll:
		{98 to: 104. 112 to: 116}.
	(clientTransactions _ [
	(clientsTransactions
		cover: (154 to: 172)
		declaredAt: (154 to: 172))
		at:
			(aUser
				cover: (178 to: 182)
				declaredAt: (16 to: 20))
		ifAbsent: [
			[
			(OrderedCollection
				cover: (195 to: 211)
				declaredAt: (195 to: 211)) new ] valueCoveringAll:
				{213 to: 215} ]] valueCoveringAll:
		{174 to: 176. 184 to: 192})
		cover: (132 to: 149)
		declaredAt: (51 to: 68).
	(sales _ [
	(clientTransactions
		cover: (230 to: 247)
		declaredAt: (51 to: 68)) collect: [ :aTransactionID |
		[
		(salesBook
			cover: (277 to: 285)
			declaredAt: (277 to: 285)) at:
			(aTransactionID
				cover: (291 to: 304)
				declaredAt: (260 to: 273)) ] valueCoveringAll:
			{287 to: 289} ]] valueCoveringAll:
		{249 to: 256})
		cover: (221 to: 225)
		declaredAt: (82 to: 86).
	(total _ 0 coverAll:
		{321 to: 321})
		cover: (312 to: 316)
		declaredAt: (76 to: 80).
	(items _ [
	(Dictionary
		cover: (333 to: 342)
		declaredAt: (333 to: 342)) new ] valueCoveringAll:
		{344 to: 346})
		cover: (325 to: 329)
		declaredAt: (70 to: 74).
	[
	(sales
		cover: (352 to: 356)
		declaredAt: (82 to: 86)) do: [ :aSale |
		[
		([
		(aSale
			cover: (373 to: 377)
			declaredAt: (363 to: 367)) items ] valueCoveringAll:
			{379 to: 383}) associationsDo: [ :aSaleItem | | aQuantity |
			(aQuantity _ [
			(items
				cover: (445 to: 449)
				declaredAt: (70 to: 74))
				at:
					([
					(aSaleItem
						cover: (455 to: 463)
						declaredAt: (403 to: 411)) key ] valueCoveringAll:
						{465 to: 467})
				ifAbsent: [
					0 coverAll:
						{480 to: 480} ]] valueCoveringAll:
				{451 to: 453. 469 to: 477})
				cover: (432 to: 440)
				declaredAt: (417 to: 425).
			[
			(items
				cover: (487 to: 491)
				declaredAt: (70 to: 74))
				at:
					([
					(aSaleItem
						cover: (497 to: 505)
						declaredAt: (403 to: 411)) key ] valueCoveringAll:
						{507 to: 509})
				put:
					([
					(aQuantity
						cover: (516 to: 524)
						declaredAt: (417 to: 425)) +
						([
						(aSaleItem
							cover: (528 to: 536)
							declaredAt: (403 to: 411)) value ] valueCoveringAll:
							{538 to: 542}) ] valueCoveringAll:
						{526 to: 526}) ] valueCoveringAll:
				{493 to: 495. 511 to: 514} ]] valueCoveringAll:
			{385 to: 399}.
		(total _ [
		(total
			cover: (552 to: 556)
			declaredAt: (76 to: 80)) +
			([
			(aSale
				cover: (569 to: 573)
				declaredAt: (363 to: 367)) total ] valueCoveringAll:
				{575 to: 579}) ] valueCoveringAll:
			{567 to: 567})
			cover: (561 to: 565)
			declaredAt: (76 to: 80) ]] valueCoveringAll:
		{358 to: 360}.
	[
	(items
		cover: (587 to: 591)
		declaredAt: (70 to: 74))
		at:
			('Total' coverAll:
				{597 to: 603})
		put:
			(total
				cover: (610 to: 614)
				declaredAt: (76 to: 80)) ] valueCoveringAll:
		{593 to: 595. 605 to: 608}.
	^ items
		cover: (623 to: 627)
		declaredAt: (70 to: 74).! !
!Behavior method!
items
	^ items
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !

!testRun: #TusLibrosFacadeTest #test12listPurchasesReturnsEveryBookAndTotalPrice stamp: 'MS 11/11/2021 16:25:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13canNotListPurchaseOfAnInvalidCustomer stamp: 'MS 11/11/2021 16:25:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14canNotListPurchaseOfAValidUserWithInvalidPassword stamp: 'MS 11/11/2021 16:25:26'!
PASSED!
!Behavior method!
advanceTime: aDuration
	(now _ [
	(now
		cover: (28 to: 30)
		declaredAt: (28 to: 30)) +
		(aDuration
			cover: (41 to: 49)
			declaredAt: (14 to: 22)) ] valueCoveringAll:
		{39 to: 39})
		cover: (35 to: 37)
		declaredAt: (28 to: 30).! !
!Behavior method!
signalCartSessionExpired
	[
	(self coverAll:
		{28 to: 31}) error:
		([
		(facade
			cover: (40 to: 45)
			declaredAt: (40 to: 45)) sessionHasExpiredErrorDescription ] valueCoveringAll:
			{47 to: 79}) ] valueCoveringAll:
		{33 to: 38}.! !
!Behavior method!
sessionHasExpiredErrorDescription
	^ 'The cart session is expired' coverAll:
		{38 to: 66}.! !
!Behavior method!
revertTime: aDuration
	(now _ [
	(now
		cover: (25 to: 27)
		declaredAt: (25 to: 27)) -
		(aDuration
			cover: (38 to: 46)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{36 to: 36})
		cover: (32 to: 34)
		declaredAt: (25 to: 27).! !

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:25:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:25:26'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:25:26'!
PASSED!
!Cart methodsFor: 'adding' stamp: 'MS 11/11/2021 16:26:29' prior: 50987851!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	"1 to: aQuantity do: [ :aNumber | items add: anItem ]"
	
	items add: anItem  withOccurrences: aQuantity .! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/11/2021 16:26:31'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/11/2021 16:26:31'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/11/2021 16:26:31'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/11/2021 16:26:31'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/11/2021 16:26:31'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/11/2021 16:26:31'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/11/2021 16:26:31'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/11/2021 16:26:31'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/11/2021 16:26:31'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/11/2021 16:26:31'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/11/2021 16:26:31'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/11/2021 16:26:31'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/11/2021 16:26:31'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/11/2021 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11canNotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12listPurchasesReturnsEveryBookAndTotalPrice stamp: 'MS 11/11/2021 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13canNotListPurchaseOfAnInvalidCustomer stamp: 'MS 11/11/2021 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14canNotListPurchaseOfAValidUserWithInvalidPassword stamp: 'MS 11/11/2021 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:26:31'!
PASSED!
!Cart methodsFor: 'adding' stamp: 'MS 11/11/2021 16:26:36' prior: 50990320!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.
	
	items add: anItem  withOccurrences: aQuantity .! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/11/2021 16:26:38'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/11/2021 16:26:38'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/11/2021 16:26:38'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/11/2021 16:26:38'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/11/2021 16:26:38'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/11/2021 16:26:38'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/11/2021 16:26:38'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/11/2021 16:26:38'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/11/2021 16:26:38'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/11/2021 16:26:38'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/11/2021 16:26:38'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/11/2021 16:26:38'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/11/2021 16:26:38'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/11/2021 16:26:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 16:26:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 16:26:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 16:26:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 16:26:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 16:26:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 16:26:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 16:26:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 16:26:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 16:26:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 16:26:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11canNotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 16:26:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12listPurchasesReturnsEveryBookAndTotalPrice stamp: 'MS 11/11/2021 16:26:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13canNotListPurchaseOfAnInvalidCustomer stamp: 'MS 11/11/2021 16:26:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14canNotListPurchaseOfAValidUserWithInvalidPassword stamp: 'MS 11/11/2021 16:26:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:26:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:26:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:26:38'!
PASSED!
!Behavior method!
initialize
	(today _ [
	(DateAndTime
		cover: (23 to: 33)
		declaredAt: (23 to: 33)) now ] valueCoveringAll:
		{35 to: 37})
		cover: (14 to: 18)
		declaredAt: (14 to: 18).
	(transactionID _ 1 coverAll:
		{58 to: 58})
		cover: (41 to: 53)
		declaredAt: (41 to: 53).! !
!Behavior method!
createCart
	^ [
	(Cart
		cover: (16 to: 19)
		declaredAt: (16 to: 19)) acceptingItemsOf:
		([
		(self coverAll:
			{39 to: 42}) defaultCatalog ] valueCoveringAll:
			{44 to: 57}) ] valueCoveringAll:
		{21 to: 37}.! !
!Behavior method!
defaultCatalog
	^ [ | cascadeReceiver |
	cascadeReceiver _ [
	(Dictionary
		cover: (21 to: 30)
		declaredAt: (21 to: 30)) new ] valueCoveringAll:
		{32 to: 34}.
	[
	cascadeReceiver
		at: self itemSellByTheStore
		put: self itemSellByTheStorePrice ] valueCoveringAll:
		{38 to: 98}.
	[
	cascadeReceiver
		at: self anotherItemSellByTheStore
		put: self anotherItemSellByTheStorePrice ] valueCoveringAll:
		{103 to: 177}.
	[ cascadeReceiver yourself ] valueCoveringAll:
		{182 to: 189} ] value.! !
!Behavior method!
itemSellByTheStore
	^ 'validBook' coverAll:
		{25 to: 35}.! !
!Behavior method!
itemSellByTheStorePrice
	^ 10 coverAll:
		{29 to: 30}.! !
!Behavior method!
anotherItemSellByTheStore
	^ 'validBook2' coverAll:
		{32 to: 43}.! !
!Behavior method!
anotherItemSellByTheStorePrice
	^ 20 coverAll:
		{37 to: 38}.! !
!Behavior method!
acceptingItemsOf: aCatalog
	^ [
	([
	(self coverAll:
		{31 to: 34}) new ] valueCoveringAll:
		{36 to: 38}) initializeAcceptingItemsOf:
		(aCatalog
			cover: (68 to: 75)
			declaredAt: (19 to: 26)) ] valueCoveringAll:
		{40 to: 66}.! !
!Behavior method!
initializeAcceptingItemsOf: aCatalog
	(catalog _ aCatalog
		cover: (51 to: 58)
		declaredAt: (29 to: 36))
		cover: (40 to: 46)
		declaredAt: (40 to: 46).
	(items _ [
	(Bag
		cover: (71 to: 73)
		declaredAt: (71 to: 73)) new ] valueCoveringAll:
		{75 to: 77})
		cover: (62 to: 66)
		declaredAt: (62 to: 66).! !
!Behavior method!
isEmpty
	^ [
	(items
		cover: (13 to: 17)
		declaredAt: (13 to: 17)) isEmpty ] valueCoveringAll:
		{19 to: 25}.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/11/2021 16:26:42'!
PASSED!
!Behavior method!
itemNotSellByTheStore
	^ 'invalidBook' coverAll:
		{27 to: 39}.! !
!Behavior method!
add: anItem
	^ [
	(self coverAll:
		{17 to: 20})
		add:
			(1 coverAll:
				{27 to: 27})
		of:
			(anItem
				cover: (33 to: 38)
				declaredAt: (6 to: 11)) ] valueCoveringAll:
		{22 to: 25. 29 to: 31}.! !
!Behavior method!
add: aQuantity of: anItem
	[
	(self coverAll:
		{29 to: 32}) assertIsValidQuantity:
		(aQuantity
			cover: (57 to: 65)
			declaredAt: (6 to: 14)) ] valueCoveringAll:
		{34 to: 55}.
	[
	(self coverAll:
		{69 to: 72}) assertIsValidItem:
		(anItem
			cover: (93 to: 98)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{74 to: 91}.
	[
	(items
		cover: (104 to: 108)
		declaredAt: (104 to: 108))
		add:
			(anItem
				cover: (115 to: 120)
				declaredAt: (20 to: 25))
		withOccurrences:
			(aQuantity
				cover: (140 to: 148)
				declaredAt: (6 to: 14)) ] valueCoveringAll:
		{110 to: 113. 123 to: 138}.! !
!Behavior method!
assertIsValidQuantity: aQuantity
	[
	([
	(aQuantity
		cover: (36 to: 44)
		declaredAt: (24 to: 32)) strictlyPositive ] valueCoveringAll:
		{46 to: 61}) ifFalse: [
		[
		(self coverAll:
			{74 to: 77}) error:
			([
			(self coverAll:
				{86 to: 89}) invalidQuantityErrorMessage ] valueCoveringAll:
				{91 to: 117}) ] valueCoveringAll:
			{79 to: 84} ]] valueCoveringAll:
		{63 to: 70}.! !
!Behavior method!
assertIsValidItem: anItem
	[
	([
	(catalog
		cover: (30 to: 36)
		declaredAt: (30 to: 36)) includesKey:
		(anItem
			cover: (51 to: 56)
			declaredAt: (20 to: 25)) ] valueCoveringAll:
		{38 to: 49}) ifFalse: [
		[
		(self coverAll:
			{70 to: 73}) error:
			([
			(self coverAll:
				{82 to: 85}) invalidItemErrorMessage ] valueCoveringAll:
				{87 to: 109}) ] valueCoveringAll:
			{75 to: 80} ]] valueCoveringAll:
		{59 to: 66}.! !
!Behavior method!
invalidItemErrorMessage
	^ 'Item is not in catalog' coverAll:
		{29 to: 52}.! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/11/2021 16:26:42'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/11/2021 16:26:42'!
PASSED!
!Behavior method!
invalidQuantityErrorMessage
	^ 'Invalid number of items' coverAll:
		{33 to: 57}.! !

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/11/2021 16:26:42'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/11/2021 16:26:42'!
PASSED!
!Behavior method!
includes: anItem
	^ [
	(items
		cover: (21 to: 25)
		declaredAt: (21 to: 25)) includes:
		(anItem
			cover: (37 to: 42)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{27 to: 35}.! !

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/11/2021 16:26:42'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/11/2021 16:26:42'!
PASSED!
!Behavior method!
occurrencesOf: anItem
	^ [
	(items
		cover: (26 to: 30)
		declaredAt: (26 to: 30)) occurrencesOf:
		(anItem
			cover: (47 to: 52)
			declaredAt: (16 to: 21)) ] valueCoveringAll:
		{32 to: 45}.! !

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/11/2021 16:26:42'!
PASSED!
!Behavior method!
notExpiredCreditCard
	^ [
	(CreditCard
		cover: (26 to: 35)
		declaredAt: (26 to: 35)) expiringOn:
		([
		(Month
			cover: (50 to: 54)
			declaredAt: (50 to: 54))
			month:
				([
				(today
					cover: (63 to: 67)
					declaredAt: (63 to: 67)) monthIndex ] valueCoveringAll:
					{69 to: 78})
			year:
				([
				([
				(today
					cover: (86 to: 90)
					declaredAt: (63 to: 67)) yearNumber ] valueCoveringAll:
					{92 to: 101}) +
					(1 coverAll:
						{105 to: 105}) ] valueCoveringAll:
					{103 to: 103}) ] valueCoveringAll:
			{56 to: 61. 80 to: 84}) ] valueCoveringAll:
		{37 to: 47}.! !
!Behavior method!
expiringOn: aMonth
	^ [
	([
	(self coverAll:
		{25 to: 28}) new ] valueCoveringAll:
		{30 to: 32}) initializeExpiringOn:
		(aMonth
			cover: (56 to: 61)
			declaredAt: (13 to: 18)) ] valueCoveringAll:
		{34 to: 54}.! !
!Behavior method!
initializeExpiringOn: aMonth
	(expiration _ aMonth
		cover: (48 to: 53)
		declaredAt: (23 to: 28))
		cover: (34 to: 43)
		declaredAt: (34 to: 43).! !
!Behavior method!
today
	^ today
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !
!Behavior method!
transactionID
	^ self coverAll:
		{18 to: 21}.! !
!Behavior method!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook with: aTransactionId
	[
	(self coverAll:
		{131 to: 134}) assertIsNotEmpty:
		(aCart
			cover: (154 to: 158)
			declaredAt: (13 to: 17)) ] valueCoveringAll:
		{136 to: 152}.
	[
	(self coverAll:
		{162 to: 165})
		assertIsNotExpired:
			(aCreditCard
				cover: (187 to: 197)
				declaredAt: (29 to: 39))
		on:
			(aDate
				cover: (203 to: 207)
				declaredAt: (74 to: 78)) ] valueCoveringAll:
		{167 to: 185. 199 to: 201}.
	^ [
	([
	(self coverAll:
		{214 to: 217}) new ] valueCoveringAll:
		{219 to: 221})
		initializeToCheckout:
			(aCart
				cover: (245 to: 249)
				declaredAt: (13 to: 17))
		charging:
			(aCreditCard
				cover: (261 to: 271)
				declaredAt: (29 to: 39))
		throught:
			(aMerchantProcessor
				cover: (283 to: 300)
				declaredAt: (51 to: 68))
		registeringOn:
			(aSalesBook
				cover: (317 to: 326)
				declaredAt: (95 to: 104))
		with:
			(aTransactionId
				cover: (334 to: 347)
				declaredAt: (112 to: 125)) ] valueCoveringAll:
		{223 to: 243. 251 to: 259. 273 to: 281. 302 to: 315. 328 to: 332}.! !
!Behavior method!
assertIsNotEmpty: aCart
	[
	([
	(aCart
		cover: (29 to: 33)
		declaredAt: (19 to: 23)) isEmpty ] valueCoveringAll:
		{35 to: 41}) ifTrue: [
		[
		(self coverAll:
			{52 to: 55}) error:
			([
			(self coverAll:
				{64 to: 67}) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
				{69 to: 97}) ] valueCoveringAll:
			{57 to: 62} ]] valueCoveringAll:
		{43 to: 49}.! !
!Behavior method!
cartCanNotBeEmptyErrorMessage
	^ 'Can not check out an empty cart' coverAll:
		{35 to: 67}.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/11/2021 16:26:42'!
PASSED!
!Behavior method!
assertIsNotExpired: aCreditCard on: aDate
	[
	([
	(aCreditCard
		cover: (47 to: 57)
		declaredAt: (21 to: 31)) isExpiredOn:
		(aDate
			cover: (72 to: 76)
			declaredAt: (37 to: 41)) ] valueCoveringAll:
		{59 to: 70}) ifTrue: [
		[
		(self coverAll:
			{89 to: 92}) error:
			([
			(self coverAll:
				{101 to: 104}) canNotChargeAnExpiredCreditCardErrorMessage ] valueCoveringAll:
				{106 to: 148}) ] valueCoveringAll:
			{94 to: 99} ]] valueCoveringAll:
		{79 to: 85}.! !
!Behavior method!
isExpiredOn: aDate
	^ [
	([
	(expiration
		cover: (25 to: 34)
		declaredAt: (25 to: 34)) start ] valueCoveringAll:
		{36 to: 40}) <
		([
		([
		(Month
			cover: (45 to: 49)
			declaredAt: (45 to: 49))
			month:
				([
				(aDate
					cover: (58 to: 62)
					declaredAt: (14 to: 18)) monthIndex ] valueCoveringAll:
					{64 to: 73})
			year:
				([
				(aDate
					cover: (81 to: 85)
					declaredAt: (14 to: 18)) yearNumber ] valueCoveringAll:
					{87 to: 96}) ] valueCoveringAll:
			{51 to: 56. 75 to: 79}) start ] valueCoveringAll:
			{99 to: 103}) ] valueCoveringAll:
		{42 to: 42}.! !
!Behavior method!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook with: aTransactionID
	(cart _ aCart
		cover: (138 to: 142)
		declaredAt: (23 to: 27))
		cover: (130 to: 133)
		declaredAt: (130 to: 133).
	(creditCard _ aCreditCard
		cover: (160 to: 170)
		declaredAt: (39 to: 49))
		cover: (146 to: 155)
		declaredAt: (146 to: 155).
	(merchantProcessor _ aMerchantProcessor
		cover: (195 to: 212)
		declaredAt: (61 to: 78))
		cover: (174 to: 190)
		declaredAt: (174 to: 190).
	(salesBook _ aSalesBook
		cover: (229 to: 238)
		declaredAt: (95 to: 104))
		cover: (216 to: 224)
		declaredAt: (216 to: 224).
	(transactionsIDs _ aTransactionID
		cover: (261 to: 274)
		declaredAt: (112 to: 125))
		cover: (242 to: 256)
		declaredAt: (242 to: 256).! !
!Behavior method!
checkOut
	| sale |
	[
	(self coverAll:
		{22 to: 25}) calculateTotal ] valueCoveringAll:
		{27 to: 40}.
	[
	(self coverAll:
		{44 to: 47}) debitTotal ] valueCoveringAll:
		{49 to: 58}.
	(sale _ [
	(self coverAll:
		{70 to: 73}) registerSale ] valueCoveringAll:
		{75 to: 86})
		cover: (62 to: 65)
		declaredAt: (14 to: 17).
	^ sale
		cover: (93 to: 96)
		declaredAt: (14 to: 17).! !
!Behavior method!
calculateTotal
	(total _ [
	(cart
		cover: (27 to: 30)
		declaredAt: (27 to: 30)) total ] valueCoveringAll:
		{32 to: 36})
		cover: (18 to: 22)
		declaredAt: (18 to: 22).! !
!Behavior method!
total
	^ [
	(items
		cover: (11 to: 15)
		declaredAt: (11 to: 15)) sum: [ :anItem |
		[
		(catalog
			cover: (34 to: 40)
			declaredAt: (34 to: 40)) at:
			(anItem
				cover: (46 to: 51)
				declaredAt: (25 to: 30)) ] valueCoveringAll:
			{42 to: 44} ]] valueCoveringAll:
		{17 to: 20}.! !
!Behavior method!
debitTotal
	[
	(merchantProcessor
		cover: (14 to: 30)
		declaredAt: (14 to: 30))
		debit:
			(total
				cover: (39 to: 43)
				declaredAt: (39 to: 43))
		from:
			(creditCard
				cover: (51 to: 60)
				declaredAt: (51 to: 60)) ] valueCoveringAll:
		{32 to: 37. 45 to: 49}.! !
!Behavior method!
registerSale
	| sale transactionID |
	(sale _ [
	(self coverAll:
		{48 to: 51}) createSale ] valueCoveringAll:
		{53 to: 62})
		cover: (40 to: 43)
		declaredAt: (18 to: 21).
	(transactionID _ [
	(transactionsIDs
		cover: (83 to: 97)
		declaredAt: (83 to: 97)) nextTransactionId ] valueCoveringAll:
		{99 to: 115})
		cover: (66 to: 78)
		declaredAt: (23 to: 35).
	[
	(salesBook
		cover: (122 to: 130)
		declaredAt: (122 to: 130))
		at:
			(transactionID
				cover: (136 to: 148)
				declaredAt: (23 to: 35))
		put:
			(sale
				cover: (155 to: 158)
				declaredAt: (18 to: 21)) ] valueCoveringAll:
		{132 to: 134. 150 to: 153}.
	^ transactionID
		cover: (165 to: 177)
		declaredAt: (23 to: 35).! !
!Behavior method!
createSale
	^ [
	(Sale
		cover: (16 to: 19)
		declaredAt: (16 to: 19))
		for:
			([
			(cart
				cover: (25 to: 28)
				declaredAt: (25 to: 28)) detail ] valueCoveringAll:
				{30 to: 35})
		with:
			(total
				cover: (43 to: 47)
				declaredAt: (43 to: 47)) ] valueCoveringAll:
		{21 to: 24. 37 to: 41}.! !
!Behavior method!
detail
	| detail |
	(detail _ [
	(OrderedDictionary
		cover: (33 to: 49)
		declaredAt: (33 to: 49)) new ] valueCoveringAll:
		{51 to: 53})
		cover: (23 to: 28)
		declaredAt: (11 to: 16).
	[
	(items
		cover: (58 to: 62)
		declaredAt: (58 to: 62)) do: [ :item |
		[
		(detail
			cover: (77 to: 82)
			declaredAt: (11 to: 16))
			at:
				(item
					cover: (88 to: 91)
					declaredAt: (71 to: 74))
			put:
				([
				(items
					cover: (99 to: 103)
					declaredAt: (58 to: 62)) occurrencesOf:
					(item
						cover: (120 to: 123)
						declaredAt: (71 to: 74)) ] valueCoveringAll:
					{105 to: 118}) ] valueCoveringAll:
			{84 to: 86. 93 to: 96} ]] valueCoveringAll:
		{64 to: 66}.
	^ detail
		cover: (135 to: 140)
		declaredAt: (11 to: 16).! !
!Behavior method!
for: someItems with: aTotal
	^ [
	([
	(self coverAll:
		{32 to: 35}) new ] valueCoveringAll:
		{37 to: 39})
		initializeWith:
			(someItems
				cover: (57 to: 65)
				declaredAt: (6 to: 14))
		andTotal:
			(aTotal
				cover: (77 to: 82)
				declaredAt: (22 to: 27)) ] valueCoveringAll:
		{41 to: 55. 67 to: 75}.! !
!Behavior method!
initializeWith: someItems andTotal: aTotal
	(total _ aTotal
		cover: (55 to: 60)
		declaredAt: (37 to: 42))
		cover: (46 to: 50)
		declaredAt: (46 to: 50).
	(items _ someItems
		cover: (73 to: 81)
		declaredAt: (17 to: 25))
		cover: (64 to: 68)
		declaredAt: (64 to: 68).! !
!Behavior method!
nextTransactionId
	(transactionID _ [
	(transactionID
		cover: (21 to: 33)
		declaredAt: (21 to: 33)) +
		(1 coverAll:
			{53 to: 53}) ] valueCoveringAll:
		{52 to: 52})
		cover: (38 to: 50)
		declaredAt: (21 to: 33).
	^ [
	(transactionID
		cover: (60 to: 72)
		declaredAt: (21 to: 33)) -
		(1 coverAll:
			{74 to: 74}) ] valueCoveringAll:
		{73 to: 73}.! !
!Behavior method!
total
	^ total
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/11/2021 16:26:42'!
PASSED!
!Behavior method!
expiredCreditCard
	^ [
	(CreditCard
		cover: (23 to: 32)
		declaredAt: (23 to: 32)) expiringOn:
		([
		(Month
			cover: (47 to: 51)
			declaredAt: (47 to: 51))
			month:
				([
				(today
					cover: (60 to: 64)
					declaredAt: (60 to: 64)) monthIndex ] valueCoveringAll:
					{66 to: 75})
			year:
				([
				([
				(today
					cover: (83 to: 87)
					declaredAt: (60 to: 64)) yearNumber ] valueCoveringAll:
					{89 to: 98}) -
					(1 coverAll:
						{102 to: 102}) ] valueCoveringAll:
					{100 to: 100}) ] valueCoveringAll:
			{53 to: 58. 77 to: 81}) ] valueCoveringAll:
		{34 to: 44}.! !
!Behavior method!
canNotChargeAnExpiredCreditCardErrorMessage
	^ 'Can not charge an expired credit card' coverAll:
		{49 to: 87}.! !

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/11/2021 16:26:42'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/11/2021 16:26:42'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/11/2021 16:26:42'!
PASSED!
!Behavior method!
creditCardHasNoCreditErrorMessage
	^ 'Credit card has no credit' coverAll:
		{39 to: 65}.! !

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/11/2021 16:26:42'!
PASSED!
!Behavior method!
for: aTime
	^ [
	([
	(self coverAll:
		{15 to: 18}) new ] valueCoveringAll:
		{20 to: 22}) initializeWith:
		(aTime
			cover: (40 to: 44)
			declaredAt: (6 to: 10)) ] valueCoveringAll:
		{24 to: 38}.! !
!Behavior method!
initializeWith: aTime
	(now _ aTime
		cover: (32 to: 36)
		declaredAt: (17 to: 21))
		cover: (25 to: 27)
		declaredAt: (25 to: 27).! !
!Behavior method!
withUsers: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock
	^ [
	([
	(self coverAll:
		{144 to: 147}) new ] valueCoveringAll:
		{149 to: 151})
		initializeWith:
			(usersWithPasswords
				cover: (169 to: 186)
				declaredAt: (12 to: 29))
		withCatalog:
			(aCatalog
				cover: (201 to: 208)
				declaredAt: (44 to: 51))
		withSalesBook:
			(aSalesBook
				cover: (225 to: 234)
				declaredAt: (68 to: 77))
		withMerchantProcessor:
			(aMerchantProcessor
				cover: (259 to: 276)
				declaredAt: (102 to: 119))
		withClock:
			(aClock
				cover: (289 to: 294)
				declaredAt: (132 to: 137)) ] valueCoveringAll:
		{153 to: 167. 188 to: 199. 210 to: 223. 236 to: 257. 278 to: 287}.! !
!Behavior method!
initializeWith: usersWithPasswords withCatalog: aCatalog withSalesBook: aSalesBook withMerchantProcessor: aMerchantProcessor withClock: aClock
	(users _ usersWithPasswords
		cover: (158 to: 175)
		declaredAt: (17 to: 34))
		cover: (149 to: 153)
		declaredAt: (149 to: 153).
	(catalog _ aCatalog
		cover: (190 to: 197)
		declaredAt: (49 to: 56))
		cover: (179 to: 185)
		declaredAt: (179 to: 185).
	(salesBook _ aSalesBook
		cover: (214 to: 223)
		declaredAt: (73 to: 82))
		cover: (201 to: 209)
		declaredAt: (201 to: 209).
	(merchantProcessor _ aMerchantProcessor
		cover: (248 to: 265)
		declaredAt: (107 to: 124))
		cover: (227 to: 243)
		declaredAt: (227 to: 243).
	(cartSessions _ [
	(Dictionary
		cover: (286 to: 295)
		declaredAt: (286 to: 295)) new ] valueCoveringAll:
		{297 to: 299})
		cover: (270 to: 281)
		declaredAt: (270 to: 281).
	(cartIdCounter _ 0 coverAll:
		{320 to: 320})
		cover: (303 to: 315)
		declaredAt: (303 to: 315).
	(transactionID _ 1 coverAll:
		{343 to: 343})
		cover: (326 to: 338)
		declaredAt: (326 to: 338).
	(cartToClient _ [
	(Dictionary
		cover: (365 to: 374)
		declaredAt: (286 to: 295)) new ] valueCoveringAll:
		{376 to: 378})
		cover: (349 to: 360)
		declaredAt: (349 to: 360).
	(clientsTransactions _ [
	(Dictionary
		cover: (407 to: 416)
		declaredAt: (286 to: 295)) new ] valueCoveringAll:
		{418 to: 420})
		cover: (384 to: 402)
		declaredAt: (384 to: 402).
	(clock _ aClock
		cover: (433 to: 438)
		declaredAt: (137 to: 142))
		cover: (424 to: 428)
		declaredAt: (424 to: 428).! !
!Behavior method!
createCartFor: aUser with: aUserPassword
	| cart |
	[
	(self coverAll:
		{57 to: 60})
		assert:
			(aUser
				cover: (70 to: 74)
				declaredAt: (16 to: 20))
		with:
			(aUserPassword
				cover: (82 to: 94)
				declaredAt: (28 to: 40)) ] valueCoveringAll:
		{62 to: 68. 76 to: 80}.
	(cartIdCounter _ [
	(cartIdCounter
		cover: (100 to: 112)
		declaredAt: (100 to: 112)) +
		(1 coverAll:
			{133 to: 133}) ] valueCoveringAll:
		{131 to: 131})
		cover: (117 to: 129)
		declaredAt: (100 to: 112).
	(cart _ [
	(CartSession
		cover: (147 to: 157)
		declaredAt: (147 to: 157))
		for:
			([
			(Cart
				cover: (165 to: 168)
				declaredAt: (165 to: 168)) acceptingItemsOf:
				(catalog
					cover: (188 to: 194)
					declaredAt: (188 to: 194)) ] valueCoveringAll:
				{170 to: 186})
		ownedBy:
			(aUser
				cover: (206 to: 210)
				declaredAt: (16 to: 20))
		with:
			(self coverAll:
				{218 to: 221}) ] valueCoveringAll:
		{159 to: 162. 197 to: 204. 212 to: 216})
		cover: (139 to: 142)
		declaredAt: (48 to: 51).
	[
	(cartSessions
		cover: (227 to: 238)
		declaredAt: (227 to: 238))
		at:
			(cartIdCounter
				cover: (244 to: 256)
				declaredAt: (100 to: 112))
		put:
			(cart
				cover: (262 to: 265)
				declaredAt: (48 to: 51)) ] valueCoveringAll:
		{240 to: 242. 258 to: 261}.
	[
	(cartToClient
		cover: (271 to: 282)
		declaredAt: (271 to: 282))
		at:
			(cartIdCounter
				cover: (288 to: 300)
				declaredAt: (100 to: 112))
		put:
			(aUser
				cover: (307 to: 311)
				declaredAt: (16 to: 20)) ] valueCoveringAll:
		{284 to: 286. 302 to: 305}.
	^ cartIdCounter
		cover: (318 to: 330)
		declaredAt: (100 to: 112).! !
!Behavior method!
assert: validUser with: validPassword
	| password |
	[
	(users
		cover: (56 to: 60)
		declaredAt: (56 to: 60))
		at:
			(validUser
				cover: (66 to: 74)
				declaredAt: (9 to: 17))
		ifAbsent: [
			[
			(self coverAll:
				{86 to: 89}) error:
				([
				(self coverAll:
					{98 to: 101}) invalidUserOrPasswordErrorDescription ] valueCoveringAll:
					{103 to: 139}) ] valueCoveringAll:
				{91 to: 96} ]] valueCoveringAll:
		{62 to: 64. 76 to: 84}.
	(password _ [
	(users
		cover: (158 to: 162)
		declaredAt: (56 to: 60)) at:
		(validUser
			cover: (168 to: 176)
			declaredAt: (9 to: 17)) ] valueCoveringAll:
		{164 to: 166})
		cover: (146 to: 153)
		declaredAt: (43 to: 50).
	[
	([
	(password
		cover: (184 to: 191)
		declaredAt: (43 to: 50)) =
		(validPassword
			cover: (195 to: 207)
			declaredAt: (25 to: 37)) ] valueCoveringAll:
		{193 to: 193}) ifFalse: [
		[
		(self coverAll:
			{220 to: 223}) error:
			([
			(self coverAll:
				{232 to: 235}) invalidUserOrPasswordErrorDescription ] valueCoveringAll:
				{237 to: 273}) ] valueCoveringAll:
			{225 to: 230} ]] valueCoveringAll:
		{211 to: 218}.! !
!Behavior method!
invalidUserOrPasswordErrorDescription
	^ 'Invalid user or password' coverAll:
		{42 to: 67}.! !

!testRun: #TusLibrosFacadeTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 16:26:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 16:26:42'!
PASSED!
!Behavior method!
for: aCart ownedBy: aCustomer with: aSystemFacade
	^ [
	([
	(self coverAll:
		{54 to: 57}) new ] valueCoveringAll:
		{59 to: 61})
		initializedWith:
			(aCart
				cover: (80 to: 84)
				declaredAt: (6 to: 10))
		ownedBy:
			(aCustomer
				cover: (95 to: 103)
				declaredAt: (21 to: 29))
		with:
			(aSystemFacade
				cover: (111 to: 123)
				declaredAt: (37 to: 49)) ] valueCoveringAll:
		{63 to: 78. 86 to: 93. 105 to: 109}.! !
!Behavior method!
initializedWith: aCart ownedBy: aCustomer with: aFacade
	(cart _ aCart
		cover: (67 to: 71)
		declaredAt: (18 to: 22))
		cover: (59 to: 62)
		declaredAt: (59 to: 62).
	(owner _ aCustomer
		cover: (84 to: 92)
		declaredAt: (33 to: 41))
		cover: (75 to: 79)
		declaredAt: (75 to: 79).
	(facade _ aFacade
		cover: (107 to: 113)
		declaredAt: (49 to: 55))
		cover: (97 to: 102)
		declaredAt: (97 to: 102).
	(lastTime _ [
	(aFacade
		cover: (129 to: 135)
		declaredAt: (49 to: 55)) now ] valueCoveringAll:
		{137 to: 139})
		cover: (117 to: 124)
		declaredAt: (117 to: 124).! !
!Behavior method!
now
	^ [
	(clock
		cover: (8 to: 12)
		declaredAt: (8 to: 12)) now ] valueCoveringAll:
		{14 to: 16}.! !
!Behavior method!
now
	^ now
		cover: (8 to: 10)
		declaredAt: (8 to: 10).! !
!Behavior method!
listCart: aCartId
	^ [
	([
	(cartSessions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) at:
		(aCartId
			cover: (43 to: 49)
			declaredAt: (11 to: 17)) ] valueCoveringAll:
		{39 to: 41}) getItems ] valueCoveringAll:
		{52 to: 59}.! !
!Behavior method!
getItems
	[
	(self coverAll:
		{13 to: 16}) assertCartHasNotExpired ] valueCoveringAll:
		{18 to: 40}.
	^ [
	(cart
		cover: (45 to: 48)
		declaredAt: (45 to: 48)) getItems ] valueCoveringAll:
		{50 to: 57}.! !
!Behavior method!
assertCartHasNotExpired
	[
	([
	([
	(lastTime
		cover: (28 to: 35)
		declaredAt: (28 to: 35)) +
		([
		(facade
			cover: (39 to: 44)
			declaredAt: (39 to: 44)) sessionDuration ] valueCoveringAll:
			{46 to: 60}) ] valueCoveringAll:
		{37 to: 37}) <
		([
		(facade
			cover: (65 to: 70)
			declaredAt: (39 to: 44)) now ] valueCoveringAll:
			{72 to: 74}) ] valueCoveringAll:
		{63 to: 63}) ifTrue: [
		[
		(self coverAll:
			{86 to: 89}) signalCartSessionExpired ] valueCoveringAll:
			{91 to: 114} ]] valueCoveringAll:
		{76 to: 82}.! !
!Behavior method!
sessionDuration
	^ [
	(30 coverAll:
		{21 to: 22}) minutes ] valueCoveringAll:
		{24 to: 30}.! !
!Behavior method!
getItems
	^ [
	(items
		cover: (14 to: 18)
		declaredAt: (14 to: 18)) copy ] valueCoveringAll:
		{20 to: 23}.! !

!testRun: #TusLibrosFacadeTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 16:26:43'!
PASSED!
!Behavior method!
addToCart: cartId book: aBook bookQuantity: aQuantity
	| cart |
	(cart _ [
	(cartSessions
		cover: (76 to: 87)
		declaredAt: (76 to: 87))
		at:
			(cartId
				cover: (93 to: 98)
				declaredAt: (12 to: 17))
		ifAbsent: [ ^ [
			(self coverAll:
				{112 to: 115}) error:
				([
				(self coverAll:
					{124 to: 127}) invalidCartIdErrorMessage ] valueCoveringAll:
					{129 to: 153}) ] valueCoveringAll:
				{117 to: 122} ]] valueCoveringAll:
		{89 to: 91. 100 to: 108})
		cover: (68 to: 71)
		declaredAt: (61 to: 64).
	[
	(catalog
		cover: (160 to: 166)
		declaredAt: (160 to: 166))
		at:
			(aBook
				cover: (172 to: 176)
				declaredAt: (25 to: 29))
		ifAbsent: [ ^ [
			(self coverAll:
				{190 to: 193}) error:
				([
				(self coverAll:
					{202 to: 205}) invalidItemErrorMessage ] valueCoveringAll:
					{207 to: 229}) ] valueCoveringAll:
				{195 to: 200} ]] valueCoveringAll:
		{168 to: 170. 178 to: 186}.
	[
	(cart
		cover: (236 to: 239)
		declaredAt: (61 to: 64))
		add:
			(aQuantity
				cover: (246 to: 254)
				declaredAt: (45 to: 53))
		of:
			(aBook
				cover: (260 to: 264)
				declaredAt: (25 to: 29)) ] valueCoveringAll:
		{241 to: 244. 256 to: 258}.! !
!Behavior method!
invalidItemErrorMessage
	^ 'Invalid item' coverAll:
		{28 to: 41}.! !

!testRun: #TusLibrosFacadeTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 16:26:43'!
PASSED!
!Behavior method!
invalidCartIdErrorMessage
	^ 'Invalid CartId' coverAll:
		{30 to: 45}.! !

!testRun: #TusLibrosFacadeTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 16:26:43'!
PASSED!
!Behavior method!
add: anAmount of: aBook
	[
	(self coverAll:
		{29 to: 32}) assertCartHasNotExpired ] valueCoveringAll:
		{34 to: 56}.
	^ [
	(cart
		cover: (63 to: 66)
		declaredAt: (63 to: 66))
		add:
			(anAmount
				cover: (73 to: 80)
				declaredAt: (6 to: 13))
		of:
			(aBook
				cover: (86 to: 90)
				declaredAt: (19 to: 23)) ] valueCoveringAll:
		{68 to: 71. 82 to: 84}.! !

!testRun: #TusLibrosFacadeTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 16:26:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 16:26:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 16:26:43'!
PASSED!
!Behavior method!
checkOut: cartId withCreditCard: aCreditCard on: aDate
	| cart cashier transactionId client |
	(cart _ [
	(cartSessions
		cover: (107 to: 118)
		declaredAt: (107 to: 118))
		at:
			(cartId
				cover: (124 to: 129)
				declaredAt: (11 to: 16))
		ifAbsent: [
			[
			(self coverAll:
				{141 to: 144}) error:
				([
				(self coverAll:
					{153 to: 156}) invalidCartIdErrorMessage ] valueCoveringAll:
					{158 to: 182}) ] valueCoveringAll:
				{146 to: 151} ]] valueCoveringAll:
		{120 to: 122. 131 to: 139})
		cover: (99 to: 102)
		declaredAt: (60 to: 63).
	[
	([
	(cart
		cover: (190 to: 193)
		declaredAt: (60 to: 63)) isEmpty ] valueCoveringAll:
		{195 to: 201}) ifTrue: [
		[
		(self coverAll:
			{212 to: 215}) error:
			([
			(self coverAll:
				{224 to: 227}) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
				{229 to: 257}) ] valueCoveringAll:
			{217 to: 222} ]] valueCoveringAll:
		{204 to: 210}.
	[
	(cart
		cover: (264 to: 267)
		declaredAt: (60 to: 63)) assertCartHasNotExpired ] valueCoveringAll:
		{269 to: 291}.
	(cashier _ [
	(Cashier
		cover: (308 to: 314)
		declaredAt: (308 to: 314))
		toCheckout:
			(cart
				cover: (331 to: 334)
				declaredAt: (60 to: 63))
		charging:
			(aCreditCard
				cover: (349 to: 359)
				declaredAt: (34 to: 44))
		throught:
			(merchantProcessor
				cover: (375 to: 391)
				declaredAt: (375 to: 391))
		on:
			(aDate
				cover: (400 to: 404)
				declaredAt: (50 to: 54))
		registeringOn:
			(salesBook
				cover: (424 to: 432)
				declaredAt: (424 to: 432))
		with:
			(self coverAll:
				{442 to: 445}) ] valueCoveringAll:
		{319 to: 329. 339 to: 347. 365 to: 373. 396 to: 398. 409 to: 422. 436 to: 440})
		cover: (297 to: 303)
		declaredAt: (65 to: 71).
	(transactionId _ [
	(cashier
		cover: (469 to: 475)
		declaredAt: (65 to: 71)) checkOut ] valueCoveringAll:
		{477 to: 484})
		cover: (452 to: 464)
		declaredAt: (73 to: 85).
	(client _ [
	(cartToClient
		cover: (501 to: 512)
		declaredAt: (501 to: 512)) removeKey:
		(cartId
			cover: (525 to: 530)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{514 to: 523})
		cover: (491 to: 496)
		declaredAt: (87 to: 92).
	[
	(self coverAll:
		{536 to: 539})
		updateClienTransactions:
			(client
				cover: (566 to: 571)
				declaredAt: (87 to: 92))
		with:
			(transactionId
				cover: (579 to: 591)
				declaredAt: (73 to: 85)) ] valueCoveringAll:
		{541 to: 564. 573 to: 577}.
	^ transactionId
		cover: (598 to: 610)
		declaredAt: (73 to: 85).! !

!testRun: #TusLibrosFacadeTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 16:26:43'!
PASSED!
!Behavior method!
isEmpty
	^ [
	(cart
		cover: (13 to: 16)
		declaredAt: (13 to: 16)) isEmpty ] valueCoveringAll:
		{18 to: 24}.! !
!Behavior method!
cartCanNotBeEmptyErrorMessage
	^ [
	(Cashier
		cover: (36 to: 42)
		declaredAt: (36 to: 42)) cartCanNotBeEmptyErrorMessage ] valueCoveringAll:
		{44 to: 72}.! !

!testRun: #TusLibrosFacadeTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 16:26:43'!
PASSED!
!Behavior method!
canNotChargeAnExpiredCreditCardErrorMessage
	^ [
	(Cashier
		cover: (50 to: 56)
		declaredAt: (50 to: 56)) canNotChargeAnExpiredCreditCardErrorMessage ] valueCoveringAll:
		{58 to: 100}.! !

!testRun: #TusLibrosFacadeTest #test11canNotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 16:26:43'!
PASSED!
!Behavior method!
total
	^ [
	(cart
		cover: (11 to: 14)
		declaredAt: (11 to: 14)) total ] valueCoveringAll:
		{16 to: 20}.! !
!Behavior method!
detail
	^ [
	(cart
		cover: (12 to: 15)
		declaredAt: (12 to: 15)) detail ] valueCoveringAll:
		{17 to: 22}.! !
!Behavior method!
nextTransactionId
	(transactionID _ [
	(transactionID
		cover: (22 to: 34)
		declaredAt: (22 to: 34)) +
		(1 coverAll:
			{54 to: 54}) ] valueCoveringAll:
		{53 to: 53})
		cover: (39 to: 51)
		declaredAt: (22 to: 34).
	^ [
	(transactionID
		cover: (61 to: 73)
		declaredAt: (22 to: 34)) -
		(1 coverAll:
			{76 to: 76}) ] valueCoveringAll:
		{75 to: 75}.! !
!Behavior method!
updateClienTransactions: aClient with: aTransactionID
	| clientTransactions |
	(clientTransactions _ [
	(clientsTransactions
		cover: (103 to: 121)
		declaredAt: (103 to: 121))
		at:
			(aClient
				cover: (127 to: 133)
				declaredAt: (26 to: 32))
		ifAbsent: [
			[
			(OrderedCollection
				cover: (147 to: 163)
				declaredAt: (147 to: 163)) new ] valueCoveringAll:
				{165 to: 167} ]] valueCoveringAll:
		{123 to: 125. 135 to: 143})
		cover: (81 to: 98)
		declaredAt: (58 to: 75).
	[
	(clientTransactions
		cover: (173 to: 190)
		declaredAt: (58 to: 75)) add:
		(aTransactionID
			cover: (197 to: 210)
			declaredAt: (40 to: 53)) ] valueCoveringAll:
		{192 to: 195}.
	[
	(clientsTransactions
		cover: (215 to: 233)
		declaredAt: (103 to: 121))
		at:
			(aClient
				cover: (239 to: 245)
				declaredAt: (26 to: 32))
		put:
			(clientTransactions
				cover: (252 to: 269)
				declaredAt: (58 to: 75)) ] valueCoveringAll:
		{235 to: 237. 247 to: 250}.! !
!Behavior method!
listPurchases: aUser withPassword: aPassword
	| clientTransactions items total sales |
	[
	(self coverAll:
		{93 to: 96})
		assert:
			(aUser
				cover: (106 to: 110)
				declaredAt: (16 to: 20))
		with:
			(aPassword
				cover: (118 to: 126)
				declaredAt: (36 to: 44)) ] valueCoveringAll:
		{98 to: 104. 112 to: 116}.
	(clientTransactions _ [
	(clientsTransactions
		cover: (154 to: 172)
		declaredAt: (154 to: 172))
		at:
			(aUser
				cover: (178 to: 182)
				declaredAt: (16 to: 20))
		ifAbsent: [
			[
			(OrderedCollection
				cover: (195 to: 211)
				declaredAt: (195 to: 211)) new ] valueCoveringAll:
				{213 to: 215} ]] valueCoveringAll:
		{174 to: 176. 184 to: 192})
		cover: (132 to: 149)
		declaredAt: (51 to: 68).
	(sales _ [
	(clientTransactions
		cover: (230 to: 247)
		declaredAt: (51 to: 68)) collect: [ :aTransactionID |
		[
		(salesBook
			cover: (277 to: 285)
			declaredAt: (277 to: 285)) at:
			(aTransactionID
				cover: (291 to: 304)
				declaredAt: (260 to: 273)) ] valueCoveringAll:
			{287 to: 289} ]] valueCoveringAll:
		{249 to: 256})
		cover: (221 to: 225)
		declaredAt: (82 to: 86).
	(total _ 0 coverAll:
		{321 to: 321})
		cover: (312 to: 316)
		declaredAt: (76 to: 80).
	(items _ [
	(Dictionary
		cover: (333 to: 342)
		declaredAt: (333 to: 342)) new ] valueCoveringAll:
		{344 to: 346})
		cover: (325 to: 329)
		declaredAt: (70 to: 74).
	[
	(sales
		cover: (352 to: 356)
		declaredAt: (82 to: 86)) do: [ :aSale |
		[
		([
		(aSale
			cover: (373 to: 377)
			declaredAt: (363 to: 367)) items ] valueCoveringAll:
			{379 to: 383}) associationsDo: [ :aSaleItem | | aQuantity |
			(aQuantity _ [
			(items
				cover: (445 to: 449)
				declaredAt: (70 to: 74))
				at:
					([
					(aSaleItem
						cover: (455 to: 463)
						declaredAt: (403 to: 411)) key ] valueCoveringAll:
						{465 to: 467})
				ifAbsent: [
					0 coverAll:
						{480 to: 480} ]] valueCoveringAll:
				{451 to: 453. 469 to: 477})
				cover: (432 to: 440)
				declaredAt: (417 to: 425).
			[
			(items
				cover: (487 to: 491)
				declaredAt: (70 to: 74))
				at:
					([
					(aSaleItem
						cover: (497 to: 505)
						declaredAt: (403 to: 411)) key ] valueCoveringAll:
						{507 to: 509})
				put:
					([
					(aQuantity
						cover: (516 to: 524)
						declaredAt: (417 to: 425)) +
						([
						(aSaleItem
							cover: (528 to: 536)
							declaredAt: (403 to: 411)) value ] valueCoveringAll:
							{538 to: 542}) ] valueCoveringAll:
						{526 to: 526}) ] valueCoveringAll:
				{493 to: 495. 511 to: 514} ]] valueCoveringAll:
			{385 to: 399}.
		(total _ [
		(total
			cover: (552 to: 556)
			declaredAt: (76 to: 80)) +
			([
			(aSale
				cover: (569 to: 573)
				declaredAt: (363 to: 367)) total ] valueCoveringAll:
				{575 to: 579}) ] valueCoveringAll:
			{567 to: 567})
			cover: (561 to: 565)
			declaredAt: (76 to: 80) ]] valueCoveringAll:
		{358 to: 360}.
	[
	(items
		cover: (587 to: 591)
		declaredAt: (70 to: 74))
		at:
			('Total' coverAll:
				{597 to: 603})
		put:
			(total
				cover: (610 to: 614)
				declaredAt: (76 to: 80)) ] valueCoveringAll:
		{593 to: 595. 605 to: 608}.
	^ items
		cover: (623 to: 627)
		declaredAt: (70 to: 74).! !
!Behavior method!
items
	^ items
		cover: (12 to: 16)
		declaredAt: (12 to: 16).! !

!testRun: #TusLibrosFacadeTest #test12listPurchasesReturnsEveryBookAndTotalPrice stamp: 'MS 11/11/2021 16:26:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13canNotListPurchaseOfAnInvalidCustomer stamp: 'MS 11/11/2021 16:26:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14canNotListPurchaseOfAValidUserWithInvalidPassword stamp: 'MS 11/11/2021 16:26:43'!
PASSED!
!Behavior method!
advanceTime: aDuration
	(now _ [
	(now
		cover: (28 to: 30)
		declaredAt: (28 to: 30)) +
		(aDuration
			cover: (41 to: 49)
			declaredAt: (14 to: 22)) ] valueCoveringAll:
		{39 to: 39})
		cover: (35 to: 37)
		declaredAt: (28 to: 30).! !
!Behavior method!
signalCartSessionExpired
	[
	(self coverAll:
		{28 to: 31}) error:
		([
		(facade
			cover: (40 to: 45)
			declaredAt: (40 to: 45)) sessionHasExpiredErrorDescription ] valueCoveringAll:
			{47 to: 79}) ] valueCoveringAll:
		{33 to: 38}.! !
!Behavior method!
sessionHasExpiredErrorDescription
	^ 'The cart session is expired' coverAll:
		{38 to: 66}.! !
!Behavior method!
revertTime: aDuration
	(now _ [
	(now
		cover: (25 to: 27)
		declaredAt: (25 to: 27)) -
		(aDuration
			cover: (38 to: 46)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{36 to: 36})
		cover: (32 to: 34)
		declaredAt: (25 to: 27).! !

!testRun: #TusLibrosFacadeTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:26:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:26:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:26:43'!
PASSED!
!Cart methodsFor: 'adding' stamp: 'MS 11/11/2021 16:26:56' prior: 50990438!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.
	
	items add: anItem withOccurrences: aQuantity .! !

!classRenamed: #TusLibrosFacadeTest as: #RestInterfaceTest stamp: 'MS 11/11/2021 16:29:38'!
Smalltalk renameClassNamed: #TusLibrosFacadeTest as: #RestInterfaceTest!

!classRenamed: #TusLibrosFacade as: #RestInterface stamp: 'MS 11/11/2021 16:29:47'!
Smalltalk renameClassNamed: #TusLibrosFacade as: #RestInterface!
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 16:29:47' prior: 50974740 overrides: 16927572!
setUp
	|catalog validUsersAndPasswords|
	
	validUsersAndPasswords := Dictionary new 
		at:'ValidUser1' put:'ValidPassword1' ; 
		at:'ValidUser2' put:'ValidPassword2' ; 
		yourself.
	
	catalog:= StoreTestObjectsFactory new defaultCatalog.
	
	testObjectsFactory := StoreTestObjectsFactory new.
	clock := Clock for: testObjectsFactory today.	
	
	interface := RestInterface withUsers: validUsersAndPasswords	 withCatalog: catalog withSalesBook: Dictionary new withMerchantProcessor: self withClock: clock.
	
	
	
	debitBehavior := [ :anAmount :aCreditCard | ].
	
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/11/2021 16:29:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/11/2021 16:29:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/11/2021 16:29:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/11/2021 16:29:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/11/2021 16:29:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/11/2021 16:29:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/11/2021 16:29:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/11/2021 16:29:54'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/11/2021 16:29:54'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/11/2021 16:29:54'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/11/2021 16:29:54'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/11/2021 16:29:54'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/11/2021 16:29:54'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/11/2021 16:29:54'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 16:29:54'!
PASSED!

!testRun: #RestInterfaceTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 16:29:54'!
PASSED!

!testRun: #RestInterfaceTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 16:29:54'!
PASSED!

!testRun: #RestInterfaceTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 16:29:54'!
PASSED!

!testRun: #RestInterfaceTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 16:29:54'!
PASSED!

!testRun: #RestInterfaceTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 16:29:54'!
PASSED!

!testRun: #RestInterfaceTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 16:29:54'!
PASSED!

!testRun: #RestInterfaceTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 16:29:54'!
PASSED!

!testRun: #RestInterfaceTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 16:29:54'!
PASSED!

!testRun: #RestInterfaceTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 16:29:54'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 16:29:54'!
PASSED!

!testRun: #RestInterfaceTest #test12listPurchasesReturnsEveryBookAndTotalPrice stamp: 'MS 11/11/2021 16:29:54'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchaseOfAnInvalidCustomer stamp: 'MS 11/11/2021 16:29:54'!
PASSED!

!testRun: #RestInterfaceTest #test14canNotListPurchaseOfAValidUserWithInvalidPassword stamp: 'MS 11/11/2021 16:29:54'!
PASSED!

!testRun: #RestInterfaceTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:29:54'!
PASSED!

!testRun: #RestInterfaceTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:29:54'!
PASSED!

!testRun: #RestInterfaceTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:29:54'!
PASSED!

!classDefinition: #CartSession category: 'TusLibros' stamp: 'MS 11/11/2021 16:30:15'!
Object subclass: #CartSession
	instanceVariableNames: 'cart owner interface lastTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 16:30:15' prior: 50974412!
signalCartSessionExpired

	self error: interface sessionHasExpiredErrorDescription ! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 16:30:15' prior: 50974619!
initializedWith: aCart ownedBy: aCustomer with: aFacade

	cart := aCart.
	owner := aCustomer .
	interface := aFacade.
	lastTime := aFacade now.
! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 16:30:15' prior: 50983778!
assertCartHasNotExpired

	(lastTime + interface sessionDuration) < interface now ifTrue: [ self signalCartSessionExpired ].	
! !
!CartSession methodsFor: 'initialization' stamp: 'MS 11/11/2021 16:30:28' prior: 50991885!
initializedWith: aCart ownedBy: aCustomer with: anInterface

	cart := aCart.
	owner := aCustomer .
	interface := anInterface.
	lastTime := anInterface now.
! !
!Clock methodsFor: 'moving time' stamp: 'MS 11/11/2021 16:32:07'!
resetTime: aDuration

	now := now - aDuration  ! !
!RestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MS 11/11/2021 16:32:07' prior: 50985109!
test15canNotAddToCartWhenSessionIsExpired

	| cartId |

	cartId := interface createCartFor: self aValidUser with: self aValidPassword.
	clock advanceTime: (interface sessionDuration + 1 minutes) .
	self
		should: [interface addToCart: cartId book: self aValidBook  bookQuantity: 1.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: interface sessionHasExpiredErrorDescription.
			clock resetTime: interface sessionDuration.
			self assert: (interface listCart: cartId) isEmpty ]! !

!methodRemoval: Clock #revertTime: stamp: 'MS 11/11/2021 16:32:07'!
revertTime: aDuration

	now := now - aDuration  !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/11/2021 16:32:21'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/11/2021 16:32:21'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/11/2021 16:32:21'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/11/2021 16:32:21'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/11/2021 16:32:21'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/11/2021 16:32:22'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/11/2021 16:32:22'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/11/2021 16:32:22'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'MS 11/11/2021 16:32:22'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'MS 11/11/2021 16:32:22'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'MS 11/11/2021 16:32:22'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'MS 11/11/2021 16:32:22'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'MS 11/11/2021 16:32:22'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'MS 11/11/2021 16:32:22'!
PASSED!

!testRun: #RestInterfaceTest #test01cannotCreateCartWithInvalidUser stamp: 'MS 11/11/2021 16:32:22'!
PASSED!

!testRun: #RestInterfaceTest #test02cannotCreateCartWithInvalidPassword stamp: 'MS 11/11/2021 16:32:22'!
PASSED!

!testRun: #RestInterfaceTest #test03anEmptyCartHasZeroItems stamp: 'MS 11/11/2021 16:32:22'!
PASSED!

!testRun: #RestInterfaceTest #test04addingAnInvalidBookToCartShouldThrowError stamp: 'MS 11/11/2021 16:32:22'!
PASSED!

!testRun: #RestInterfaceTest #test05addingAValidBookToInvalidCartIdShouldThrowError stamp: 'MS 11/11/2021 16:32:22'!
PASSED!

!testRun: #RestInterfaceTest #test06listingACartWithValidCartIdReturnsItsItems stamp: 'MS 11/11/2021 16:32:22'!
PASSED!

!testRun: #RestInterfaceTest #test07listingACartWithValidCartIdReturnsItsThreeItems stamp: 'MS 11/11/2021 16:32:22'!
PASSED!

!testRun: #RestInterfaceTest #test08listingACartWithValidCartIdReturnsItsFiveItems stamp: 'MS 11/11/2021 16:32:22'!
PASSED!

!testRun: #RestInterfaceTest #test09cannotCheckoutWithInvalidCartId stamp: 'MS 11/11/2021 16:32:22'!
PASSED!

!testRun: #RestInterfaceTest #test10cannotCheckoutEmptyCart stamp: 'MS 11/11/2021 16:32:22'!
PASSED!

!testRun: #RestInterfaceTest #test11canNotCheckoutWithAnExpiredCreditCard stamp: 'MS 11/11/2021 16:32:22'!
PASSED!

!testRun: #RestInterfaceTest #test12listPurchasesReturnsEveryBookAndTotalPrice stamp: 'MS 11/11/2021 16:32:22'!
PASSED!

!testRun: #RestInterfaceTest #test13canNotListPurchaseOfAnInvalidCustomer stamp: 'MS 11/11/2021 16:32:22'!
PASSED!

!testRun: #RestInterfaceTest #test14canNotListPurchaseOfAValidUserWithInvalidPassword stamp: 'MS 11/11/2021 16:32:22'!
PASSED!

!testRun: #RestInterfaceTest #test15canNotAddToCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:32:22'!
PASSED!

!testRun: #RestInterfaceTest #test16canNotListCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:32:22'!
PASSED!

!testRun: #RestInterfaceTest #test17canNotCheckOutCartWhenSessionIsExpired stamp: 'MS 11/11/2021 16:32:22'!
PASSED!