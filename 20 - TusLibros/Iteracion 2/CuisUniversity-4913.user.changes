

----QUIT----(13 October 2021 15:20:10) CuisUniversity-4913.image priorSource: 14638157!

----STARTUP---- (13 October 2021 15:20:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4913.image!


----QUIT----(13 October 2021 15:20:10) CuisUniversity-4913.image priorSource: 18661767!

----STARTUP---- (13 October 2021 15:21:02) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4913.image!


----QUIT----(13 October 2021 15:21:02) CuisUniversity-4913.image priorSource: 18661997!

----QUIT----(13 October 2021 15:26:07) CuisUniversity-4913.image priorSource: 14638157!

----STARTUP---- (13 October 2021 15:26:08) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4913.image!


----QUIT----(13 October 2021 15:26:08) CuisUniversity-4913.image priorSource: 18661767!

----STARTUP---- (25 October 2021 20:49:39) as /home/goon/Desktop/inge1/new cuis/CuisUniversity-4913.image!


----End fileIn of /home/goon/Desktop/inge1/ejsCatedra/2021-2c/19-MarsRover-ElRegreso/MarsRover-WithHeading.st----!

Object subclass: #xx
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverRegreso'!

Object subclass: #Xx
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverRegreso'!

!classDefinition: #Xx category: 'MarsRoverRegreso' stamp: 'goc 10/25/2021 20:51:36'!
Object subclass: #Xx
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverRegreso'!

TestCase subclass: #TestsXx
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverRegreso'!

!classDefinition: #TestsXx category: 'MarsRoverRegreso' stamp: 'goc 10/25/2021 20:52:19'!
TestCase subclass: #TestsXx
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverRegreso'!
!TestsXx methodsFor: 'nil' stamp: 'goc 10/25/2021 20:52:43'!
test0

! !
!TestsXx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 20:56:52' prior: 50915357!
test0
	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: self north.
	
	
	
	self deny: (marsRover isAt: 1@2 heading: self north)
! !

TestCase subclass: #MarsRoverRegresoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverRegresoTest category: 'MarsRover-WithHeading' stamp: 'goc 10/25/2021 20:57:53'!
TestCase subclass: #MarsRoverRegresoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverRegresoTest methodsFor: 'nil' stamp: 'goc 10/25/2021 20:58:14'!
east

	^ MarsRoverHeadingEast! !
!MarsRoverRegresoTest methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 20:58:24'!
west

	^ MarsRoverHeadingWest! !
!MarsRoverRegresoTest methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 20:58:35'!
north

	^ MarsRoverHeadingNorth! !
!MarsRoverRegresoTest methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 20:59:32'!
test0
	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: self north.
	
	
	
	self deny: (marsRover isAt: 1@2 heading: self north)! !
!MarsRoverRegresoTest methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 20:59:53'!
south

	^ MarsRoverHeadingSouth! !

!methodRemoval: MarsRoverRegresoTest #test0 stamp: 'goc 10/25/2021 21:00:16'!
test0
	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: self north.
	
	
	
	self deny: (marsRover isAt: 1@2 heading: self north)!
!MarsRoverRegresoTest methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 21:00:20'!
test0
	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: self north.
	
	
	
	self deny: (marsRover isAt: 1@2 heading: self north)! !
!MarsRoverRegresoTest methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 21:03:34' prior: 50915412!
test0
	| marsRover resLog |
	
	marsRover := MarsRover at: 1@1 heading: self north.
	
	resLog := marsRover returnLogs.
	
	
	self assert:( resLog isEmpty).! !

!testRun: #MarsRoverRegresoTest #test0 stamp: 'goc 10/25/2021 21:03:39'!
ERROR!
!MarsRover methodsFor: 'heading' stamp: 'goc 10/25/2021 21:04:53'!
returnLog

	^ OrderedCollection new.! !

!classRemoval: #Xx stamp: 'goc 10/25/2021 21:06:10'!
Object subclass: #Xx
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverRegreso'!

!classRemoval: #TestsXx stamp: 'goc 10/25/2021 21:06:10'!
TestCase subclass: #TestsXx
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverRegreso'!

!testRun: #MarsRoverRegresoTest #test0 stamp: 'goc 10/25/2021 21:06:26'!
ERROR!

!testRun: #MarsRoverRegresoTest #test0 stamp: 'goc 10/25/2021 21:06:26'!
ERROR!
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/25/2021 21:06:46'!
returnLogs

	^ OrderedCollection new.! !

!methodRemoval: MarsRover #returnLog stamp: 'goc 10/25/2021 21:06:48'!
returnLog

	^ OrderedCollection new.!

!testRun: #MarsRoverRegresoTest #test0 stamp: 'goc 10/25/2021 21:06:53'!
PASSED!
!MarsRoverRegresoTest methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 21:08:27' prior: 50915420!
test0
	| marsRover resLog |
	
	marsRover := MarsRover at: 1@1 heading: self north.
	
	resLog := marsRover returnLogsBoth.
	
	
	self assert:( resLog isEmpty).! !
!MarsRoverRegresoTest methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 21:11:07' prior: 50915462!
test0
	| marsRover resLogBoth resLogPos resLogDir |
	
	marsRover := MarsRover at: 1@1 heading: self north.
	
	resLogBoth := marsRover returnLogsBoth.
	
	resLogPos := marsRover returnLogsPos.
	
	resLogDir := marsRover returnLogsDir.
	
	self assert:( resLogBoth isEmpty).
	self assert:( resLogPos isEmpty).
	self assert:( resLogDir isEmpty).! !
!MarsRoverRegresoTest methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 21:11:13'!
test00
	| marsRover resLogBoth resLogPos resLogDir |
	
	marsRover := MarsRover at: 1@1 heading: self north.
	
	resLogBoth := marsRover returnLogsBoth.
	
	resLogPos := marsRover returnLogsPos.
	
	resLogDir := marsRover returnLogsDir.
	
	self assert:( resLogBoth isEmpty).
	self assert:( resLogPos isEmpty).
	self assert:( resLogDir isEmpty).! !

!methodRemoval: MarsRoverRegresoTest #test0 stamp: 'goc 10/25/2021 21:11:15'!
test0
	| marsRover resLogBoth resLogPos resLogDir |
	
	marsRover := MarsRover at: 1@1 heading: self north.
	
	resLogBoth := marsRover returnLogsBoth.
	
	resLogPos := marsRover returnLogsPos.
	
	resLogDir := marsRover returnLogsDir.
	
	self assert:( resLogBoth isEmpty).
	self assert:( resLogPos isEmpty).
	self assert:( resLogDir isEmpty).!

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:11:18'!
ERROR!

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:11:22'!
ERROR!

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:11:23'!
ERROR!

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:11:24'!
ERROR!

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:11:24'!
ERROR!

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:11:25'!
ERROR!

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:11:26'!
ERROR!

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:11:26'!
ERROR!
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/25/2021 21:11:42'!
returnLogsBoth
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/25/2021 21:12:02' prior: 50915532!
returnLogsBoth
	^ OrderedCollection new.! !

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:12:03'!
ERROR!
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/25/2021 21:12:08'!
returnLogsPos
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/25/2021 21:12:10' prior: 50915544!
returnLogsPos
	^ OrderedCollection new.! !

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:12:11'!
ERROR!
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/25/2021 21:12:16'!
returnLogsDir
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/25/2021 21:12:19' prior: 50915556!
returnLogsDir
	^ OrderedCollection new.! !

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:12:19'!
PASSED!

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:12:20'!
PASSED!
!MarsRoverRegresoTest methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 21:26:12'!
test01
	| marsRover resLogBoth resLogPos resLogDir |
	
	marsRover := MarsRover at: 1@1 heading: self north.
	marsRover  process: 'f'.
	
	resLogBoth := marsRover returnLogsBoth.
	
	resLogPos := marsRover returnLogsPos.
	
	resLogDir := marsRover returnLogsDir.
	
	self assert:( resLogBoth isEmpty).
	
	self assert:( resLogPos at:1) equals:(1@2).
	self assert: resLogPos size equals:1.
	
	self assert:( resLogDir isEmpty).! !

!classDefinition: #LogsMarsRover category: 'MarsRover-WithHeading' stamp: 'goc 10/25/2021 21:28:58'!
Object subclass: #LogsMarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverRegresoTest methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 21:28:41' prior: 50915485!
test00
	| marsRover resLogBoth resLogPos resLogDir logs |
	
	marsRover := MarsRover at: 1@1 heading: self north.
	
	logs := LogsMarsRover with: marsRover.
	
	
	resLogBoth := logs returnLogsBoth.
	
	resLogPos := logs returnLogsPos.
	
	resLogDir := logs returnLogsDir.
	
	self assert:( resLogBoth isEmpty).
	self assert:( resLogPos isEmpty).
	self assert:( resLogDir isEmpty).! !

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:29:07'!
ERROR!
!LogsMarsRover class methodsFor: 'instance creation' stamp: 'goc 10/25/2021 21:29:18'!
with: aMarsRover 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aMarsRover ! !
!LogsMarsRover class methodsFor: 'instance creation' stamp: 'goc 10/25/2021 21:29:37' prior: 50915614!
with: aMarsRover 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	
	^self new initializeWith: aMarsRover ! !

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:29:52'!
ERROR!

!classDefinition: #LogsMarsRover category: 'MarsRover-WithHeading' stamp: 'goc 10/25/2021 21:30:11'!
Object subclass: #LogsMarsRover
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!LogsMarsRover methodsFor: 'unclasiffied' stamp: 'goc 10/25/2021 21:30:11'!
initializeWith: aMarsRover 
	self shouldBeImplemented.
	marsRover := aMarsRover.! !
!LogsMarsRover methodsFor: 'unclasiffied' stamp: 'goc 10/25/2021 21:30:23' prior: 50915640!
initializeWith: aMarsRover 
	
	marsRover := aMarsRover.! !

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:30:24'!
ERROR!
!LogsMarsRover methodsFor: 'unclasiffied' stamp: 'goc 10/25/2021 21:30:33'!
returnLogsBoth
	self shouldBeImplemented.! !
!LogsMarsRover methodsFor: 'unclasiffied' stamp: 'goc 10/25/2021 21:31:05' prior: 50915653!
returnLogsBoth
	
	^ OrderedCollection new.! !

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:31:06'!
ERROR!
!LogsMarsRover methodsFor: 'unclasiffied' stamp: 'goc 10/25/2021 21:31:12'!
returnLogsPos
	self shouldBeImplemented.! !
!LogsMarsRover methodsFor: 'unclasiffied' stamp: 'goc 10/25/2021 21:31:14' prior: 50915665!
returnLogsPos
	^ OrderedCollection new.! !

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:31:15'!
ERROR!
!LogsMarsRover methodsFor: 'unclasiffied' stamp: 'goc 10/25/2021 21:31:20'!
returnLogsDir
	self shouldBeImplemented.! !
!LogsMarsRover methodsFor: 'unclasiffied' stamp: 'goc 10/25/2021 21:31:22' prior: 50915677!
returnLogsDir
	^ OrderedCollection new.! !

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:31:23'!
PASSED!

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:31:23'!
PASSED!

!testRun: #MarsRoverRegresoTest #test01 stamp: 'goc 10/25/2021 21:31:23'!
ERROR!

!testRun: #MarsRoverRegresoTest #test01 stamp: 'goc 10/25/2021 21:31:23'!
ERROR!

!testRun: #MarsRoverRegresoTest #test00 stamp: 'goc 10/25/2021 21:31:42'!
PASSED!

----STARTUP---- (25 October 2021 22:13:49) as /home/goon/Desktop/inge1/new cuis/CuisUniversity-4913.image!


----End fileIn of /home/goon/Desktop/inge1/ejsCatedra/2021-2c/19-MarsRover-ElRegreso/MarsRover-WithHeading.st----!

TestCase subclass: #TestXxx
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #TestXxx category: 'MarsRover-WithHeading' stamp: 'goc 10/25/2021 22:15:07'!
TestCase subclass: #TestXxx
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!TestXxx methodsFor: 'nil' stamp: 'goc 10/25/2021 22:18:06'!
test01
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'f'.
	
	logReadStream _ ReadStream on: x contents.
	
	self assert:'1@2' equals: logReadStream nextLine.
	self assert: logReadStream atEnd.! !

!testRun: #TestXxx #test01 stamp: 'goc 10/25/2021 22:18:42'!
ERROR!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:18:57'!
trackPositionChangesOf: aMarsRover 
	self shouldBeImplemented.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:19:53' prior: 50915358!
trackPositionChangesOf: aMarsRover 
	| logger |
	
	logger _ WriteStream on: ''.
	aMarsRover trackPositionChangesTo: logger.
	
	^ logger.! !

!testRun: #TestXxx #test01 stamp: 'goc 10/25/2021 22:19:58'!
ERROR!
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/25/2021 22:21:25'!
trackPositionChangesTo: aWriteStream 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'goc 10/25/2021 22:22:13'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionChangesLogger'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/25/2021 22:21:56' prior: 50915372!
trackPositionChangesTo: aLogger
	
	positionChangesLogger _ aLogger.! !

!testRun: #TestXxx #test01 stamp: 'goc 10/25/2021 22:22:16'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'goc 10/25/2021 22:25:49' prior: 50915097!
moveNorth
	
	position := position + (0@1).
	
	positionChangesLogger  ifNotNil:[positionChangesLogger nextPutAll: position printString; newLine].
	! !

!testRun: #TestXxx #test01 stamp: 'goc 10/25/2021 22:25:56'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'goc 10/25/2021 22:25:56'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:27:59'!
test02
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'ff'.
	
	logReadStream _ ReadStream on: x contents.
	
	self assert:'1@2' equals: logReadStream nextLine.
	self assert: logReadStream atEnd.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:28:31' prior: 50915405!
test02
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'b'.
	
	logReadStream _ ReadStream on: x contents.
	
	self assert:'1@0' equals: logReadStream nextLine.
	self assert: logReadStream atEnd.! !

!testRun: #TestXxx #test02 stamp: 'goc 10/25/2021 22:28:33'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'goc 10/25/2021 22:30:31' prior: 50915101!
moveSouth
	
	position := position + (0@-1).
	
	positionChangesLogger ifNotNil:[positionChangesLogger nextPutAll: position printString; newLine].! !

!testRun: #TestXxx #test02 stamp: 'goc 10/25/2021 22:30:38'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'goc 10/25/2021 22:30:38'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'goc 10/25/2021 22:30:38'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:31:46'!
test03
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'ff'.
	
	logReadStream _ ReadStream on: x contents.
	
	self assert: logReadStream atEnd.! !

!testRun: #TestXxx #test03 stamp: 'goc 10/25/2021 22:31:49'!
FAILURE!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:32:09' prior: 50915447!
test03
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'ff'.
	
	logReadStream _ ReadStream on: x contents.
	
	self assert: logReadStream atEnd.! !

!testRun: #TestXxx #test03 stamp: 'goc 10/25/2021 22:32:15'!
ERROR!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:32:25'!
trackHeadingChangesOf: aMarsRover 
	self shouldBeImplemented.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:33:22' prior: 50915474!
trackHeadingChangesOf: aMarsRover 
	| logger |
	
	logger _ WriteStream on: ''.
	aMarsRover trackHeadingChangesTo: logger.
	
	^logger.! !

!testRun: #TestXxx #test03 stamp: 'goc 10/25/2021 22:33:28'!
ERROR!
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/25/2021 22:33:35'!
trackHeadingChangesTo: aWriteStream 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'goc 10/25/2021 22:34:15'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionChangesLogger headingChangesLogger'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/25/2021 22:34:31' prior: 50915488!
trackHeadingChangesTo: aLogger 
	
	headingChangesLogger _ aLogger.! !

!testRun: #TestXxx #test03 stamp: 'goc 10/25/2021 22:34:32'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'goc 10/25/2021 22:34:32'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'goc 10/25/2021 22:34:32'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'goc 10/25/2021 22:34:32'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:35:51' prior: 50915461!
test03
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	logReadStream _ ReadStream on: x contents.
	
	self assert: 'East' equals: logReadStream nextLine .
	self assert: logReadStream atEnd.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:35:51' prior: 50915516!
test03
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	logReadStream _ ReadStream on: x contents.
	
	self assert: 'East' equals: logReadStream nextLine .
	self assert: logReadStream atEnd.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:31:46' prior: 50915529!
test03
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'ff'.
	
	logReadStream _ ReadStream on: x contents.
	
	self assert: logReadStream atEnd.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:37:04'!
test04
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	logReadStream _ ReadStream on: x contents.
	
	self assert: 'East' equals: logReadStream nextLine .
	self assert: logReadStream atEnd.! !

!testRun: #TestXxx #test03 stamp: 'goc 10/25/2021 22:37:07'!
FAILURE!

!testRun: #TestXxx #test03 stamp: 'goc 10/25/2021 22:37:07'!
FAILURE!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:37:55' prior: 50915542!
test03
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'ff'.
	
	logReadStream _ ReadStream on: x contents.
	
	self assert: logReadStream atEnd.! !

!testRun: #TestXxx #test03 stamp: 'goc 10/25/2021 22:37:56'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'goc 10/25/2021 22:37:56'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'goc 10/25/2021 22:37:56'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'goc 10/25/2021 22:37:56'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'goc 10/25/2021 22:37:56'!
FAILURE!

!testRun: #TestXxx #test04 stamp: 'goc 10/25/2021 22:37:56'!
FAILURE!

!testRun: #TestXxx #test03 stamp: 'goc 10/25/2021 22:38:41'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'goc 10/25/2021 22:38:41'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'goc 10/25/2021 22:38:41'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'goc 10/25/2021 22:38:41'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'goc 10/25/2021 22:38:41'!
FAILURE!

!testRun: #TestXxx #test04 stamp: 'goc 10/25/2021 22:38:41'!
FAILURE!

!testRun: #TestXxx #test03 stamp: 'goc 10/25/2021 22:38:56'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'goc 10/25/2021 22:39:13'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'goc 10/25/2021 22:40:30' prior: 50915039!
headEast
	
	head := MarsRoverHeadingEast for: self.
	
	headingChangesLogger nextPutAll: head printString; newLine.! !

!testRun: #TestXxx #test04 stamp: 'goc 10/25/2021 22:40:36'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'goc 10/25/2021 22:41:56' prior: 50915613!
headEast
	
	head := MarsRoverHeadingEast for: self.
	
	headingChangesLogger ifNotNil:[headingChangesLogger nextPutAll: head printString; newLine].! !

!testRun: #TestXxx #test04 stamp: 'goc 10/25/2021 22:42:02'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'goc 10/25/2021 22:42:36' prior: 50915622!
headEast
	
	head := MarsRoverHeadingEast for: self.
	
	headingChangesLogger ifNotNil:[ headingChangesLogger nextPutAll: head printString; newLine ].! !
!MarsRover methodsFor: 'heading' stamp: 'goc 10/25/2021 22:43:46' prior: 50915632!
headEast
	
	head := MarsRoverHeadingEast for: self.
	
	headingChangesLogger ifNotNil:[ headingChangesLogger nextPutAll: head printString; newLine ]! !

head _ MarsRoverHeadingEast for: MarsRover new.!

head printString !
!MarsRoverHeading methodsFor: 'heading' stamp: 'goc 10/25/2021 22:47:28' overrides: 50773773!
printString

	self subclassResponsibility ! !
!MarsRoverHeadingEast methodsFor: 'nil' stamp: 'goc 10/25/2021 22:47:59' overrides: 50915650!
printString

	^'East'.! !
!MarsRoverHeadingNorth methodsFor: 'nil' stamp: 'goc 10/25/2021 22:48:13' overrides: 50915650!
printString

	^'North'.! !
!MarsRoverHeadingSouth methodsFor: 'nil' stamp: 'goc 10/25/2021 22:48:22' overrides: 50915650!
printString

	^'South'.! !
!MarsRoverHeadingWest methodsFor: 'nil' stamp: 'goc 10/25/2021 22:48:31' overrides: 50915650!
printString

	^'West'.! !

!testRun: #TestXxx #test04 stamp: 'goc 10/25/2021 22:48:36'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'goc 10/25/2021 22:48:36'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'goc 10/25/2021 22:48:36'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'goc 10/25/2021 22:48:36'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'goc 10/25/2021 22:48:36'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:49:52'!
test05
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionAndHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	logReadStream _ ReadStream on: x contents.
	
	
	self assert: '1@2' equals: logReadStream nextLine.
	self assert: '1@3' equals: logReadStream nextLine.
	self assert: 'East' equals: logReadStream nextLine .
	self assert: logReadStream atEnd.! !

!testRun: #TestXxx #test05 stamp: 'goc 10/25/2021 22:50:30'!
ERROR!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:50:36'!
trackPositionAndHeadingChangesOf: aMarsRover 
	self shouldBeImplemented.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:51:22' prior: 50915701!
trackPositionAndHeadingChangesOf: aMarsRover 
	
	| logger|
	
	logger _ WriteStream on: ''.
	aMarsRover  trackHeadingChangesTo: logger.
	aMarsRover  trackPositionChangesTo: logger.
	
	^logger.! !

!testRun: #TestXxx #test05 stamp: 'goc 10/25/2021 22:51:23'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'goc 10/25/2021 22:51:23'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'goc 10/25/2021 22:51:23'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'goc 10/25/2021 22:51:23'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'goc 10/25/2021 22:51:23'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'goc 10/25/2021 22:51:23'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 22:54:01'!
test06
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionAndHeadingChangesOf: marsRover.
	
	marsRover process: 'frfrfr'.
	
	logReadStream _ ReadStream on: x contents.
	
	
	self assert: '2@1' equals: logReadStream nextLine.
	self assert: 'South' equals: logReadStream nextLine .
	self assert: '2@0' equals: logReadStream nextLine.
	self assert: 'West' equals: logReadStream nextLine .
	self assert: '1@0' equals: logReadStream nextLine .
	self assert: 'North' equals: logReadStream nextLine .
	self assert: logReadStream atEnd.! !

!testRun: #TestXxx #test06 stamp: 'goc 10/25/2021 22:54:15'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'goc 10/25/2021 22:55:53'!
movePositionWith: anOffset
	
	position := position + anOffset .
	
	positionChangesLogger  ifNotNil:[positionChangesLogger nextPutAll: position printString; newLine].
	! !
!MarsRover methodsFor: 'moving' stamp: 'goc 10/25/2021 22:56:45' prior: 50915089!
moveEast
	
	self movePositionWith: (1@0).! !
!MarsRover methodsFor: 'moving' stamp: 'goc 10/25/2021 22:57:05' prior: 50915393!
moveNorth
	
	self movePositionWith: (0@1).
	
	! !
!MarsRover methodsFor: 'moving' stamp: 'goc 10/25/2021 22:57:17' prior: 50915433!
moveSouth
	
	self movePositionWith: (0@-1).
	
	! !
!MarsRover methodsFor: 'moving' stamp: 'goc 10/25/2021 22:57:28' prior: 50915105!
moveWest
	
	self movePositionWith: (-1@0).! !
!MarsRover methodsFor: 'heading' stamp: 'goc 10/25/2021 22:59:08'!
changeHeadTo: aMarsRoverHeadingaDirection
	
	head := aMarsRoverHeadingaDirection.
	
	headingChangesLogger ifNotNil:[ headingChangesLogger nextPutAll: head printString; newLine ]! !
!MarsRover methodsFor: 'heading' stamp: 'goc 10/25/2021 22:59:44' prior: 50915640!
headEast
	
	self changeHeadTo: (MarsRoverHeadingEast for: self).! !
!MarsRover methodsFor: 'heading' stamp: 'goc 10/25/2021 22:59:54' prior: 50915043!
headNorth
	
	self changeHeadTo: (MarsRoverHeadingNorth for: self).! !
!MarsRover methodsFor: 'heading' stamp: 'goc 10/25/2021 23:00:01' prior: 50915047!
headSouth
	
	self changeHeadTo: (MarsRoverHeadingSouth for: self).! !
!MarsRover methodsFor: 'heading' stamp: 'goc 10/25/2021 23:00:10' prior: 50915051!
headWest
	
	self changeHeadTo: (MarsRoverHeadingWest for: self).! !

!testRun: #TestXxx #test06 stamp: 'goc 10/25/2021 23:00:19'!
FAILURE!

!testRun: #TestXxx #test01 stamp: 'goc 10/25/2021 23:01:59'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'goc 10/25/2021 23:02:01'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'goc 10/25/2021 23:02:05'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'goc 10/25/2021 23:02:08'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'goc 10/25/2021 23:02:12'!
PASSED!

!testRun: #TestXxx #test06 stamp: 'goc 10/25/2021 23:02:15'!
FAILURE!

!testRun: #TestXxx #test06 stamp: 'goc 10/25/2021 23:02:15'!
FAILURE!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/25/2021 23:02:48' prior: 50915729!
test06
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingEast.
	
	x _ self trackPositionAndHeadingChangesOf: marsRover.
	
	marsRover process: 'frfrfr'.
	
	logReadStream _ ReadStream on: x contents.
	
	
	self assert: '2@1' equals: logReadStream nextLine.
	self assert: 'South' equals: logReadStream nextLine .
	self assert: '2@0' equals: logReadStream nextLine.
	self assert: 'West' equals: logReadStream nextLine .
	self assert: '1@0' equals: logReadStream nextLine .
	self assert: 'North' equals: logReadStream nextLine .
	self assert: logReadStream atEnd.! !

!testRun: #TestXxx #test06 stamp: 'goc 10/25/2021 23:02:53'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'goc 10/25/2021 23:02:53'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'goc 10/25/2021 23:02:53'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'goc 10/25/2021 23:02:53'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'goc 10/25/2021 23:02:53'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'goc 10/25/2021 23:02:53'!
PASSED!

!testRun: #TestXxx #test06 stamp: 'goc 10/25/2021 23:02:53'!
PASSED!

----SNAPSHOT----(25 October 2021 23:05:01) CuisUniversity-4913.image priorSource: 18661997!

----STARTUP---- (26 October 2021 12:10:08) as /home/goon/Desktop/inge1/new cuis/CuisUniversity-4913.image!


!testRun: #TestXxx #test06 stamp: 'goc 10/26/2021 12:10:13'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'goc 10/26/2021 12:10:25'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'goc 10/26/2021 12:10:28'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'goc 10/26/2021 12:10:28'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'goc 10/26/2021 12:10:28'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'goc 10/26/2021 12:10:28'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'goc 10/26/2021 12:10:28'!
PASSED!

!testRun: #TestXxx #test06 stamp: 'goc 10/26/2021 12:10:28'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:21:20'!
test07
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInWindowPositionAndHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	
	
	
	self assert: '1@3' equals: x positionTextFieldModel.
	self assert: MarsRoverHeadingEast equals: x headingTextFieldModel.
	! !

!testRun: #TestXxx #test07 stamp: 'goc 10/26/2021 12:21:37'!
ERROR!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:21:46'!
trackInWindowPositionAndHeadingChangesOf: aMarsRover 
	self shouldBeImplemented.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:24:08' prior: 50915887!
test07
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInWindowPositionChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: '1@3' equals: x positionTextFieldModel.
	"self assert: MarsRoverHeadingEast equals: x headingTextFieldModel."
	! !

!testRun: #TestXxx #test07 stamp: 'goc 10/26/2021 12:24:13'!
ERROR!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:24:26'!
trackInWindowPositionChangesOf: aMarsRover 
	self shouldBeImplemented.! !

!classDefinition: #MarsRoverStatusView category: 'MarsRover-WithHeading' stamp: 'goc 10/26/2021 12:24:42'!
Object subclass: #MarsRoverStatusView
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:24:33' prior: 50915923!
trackInWindowPositionChangesOf: aMarsRover 
	|x|
	
	x _ MarsRoverStatusView new.
	aMarsRover  trackPositionChangesToStatusView: x.
	
	^ x.! !

!testRun: #TestXxx #test07 stamp: 'goc 10/26/2021 12:24:50'!
ERROR!
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/26/2021 12:24:58'!
trackPositionChangesToStatusView: aMarsRoverStatusView 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'goc 10/26/2021 12:25:38'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionChangesLogger headingChangesLogger positionChangesStatusView'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/26/2021 12:25:35' prior: 50915946!
trackPositionChangesToStatusView: aMarsRoverStatusView 
	
	positionChangesStatusView _ aMarsRoverStatusView.! !

!testRun: #TestXxx #test07 stamp: 'goc 10/26/2021 12:25:41'!
ERROR!
!MarsRoverStatusView methodsFor: 'unclassified' stamp: 'goc 10/26/2021 12:26:12'!
positionTextFieldModel
	self shouldBeImplemented.! !

!testRun: #TestXxx #test07 stamp: 'goc 10/26/2021 12:26:41'!
ERROR!

!classDefinition: #MarsRoverStatusView category: 'MarsRover-WithHeading' stamp: 'goc 10/26/2021 12:28:09'!
Object subclass: #MarsRoverStatusView
	instanceVariableNames: 'positionTextFieldModel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverStatusView methodsFor: 'unclassified' stamp: 'goc 10/26/2021 12:28:08'!
positionTextFieldModel: aPosition
	
	positionTextFieldModel _ aPosition.! !

!methodRemoval: MarsRoverStatusView #positionTextFieldModel stamp: 'goc 10/26/2021 12:28:13'!
positionTextFieldModel
	self shouldBeImplemented.!
!MarsRover methodsFor: 'moving' stamp: 'goc 10/26/2021 12:31:14' prior: 50915753!
movePositionWith: anOffset
	
	position := position + anOffset .
	
	positionChangesLogger  ifNotNil:[positionChangesLogger nextPutAll: position printString; newLine].
	positionChangesStatusView ifNotNil:[positionChangesStatusView positionTextFieldModel: position].
	! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:31:57' prior: 50915908!
test07
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInWindowPositionChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: '1@3' equals: x positionTextFieldModel.
	"self assert: MarsRoverHeadingEast equals: x headingTextFieldModel."
	! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:32:26'!
trackInStatusViewPositionChangesOf: aMarsRover 
	|x|
	
	x _ MarsRoverStatusView new.
	aMarsRover  trackPositionChangesToStatusView: x.
	
	^ x.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:32:26' prior: 50916009!
test07
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: '1@3' equals: x positionTextFieldModel.
	"self assert: MarsRoverHeadingEast equals: x headingTextFieldModel."
	! !

!methodRemoval: TestXxx #trackInWindowPositionChangesOf: stamp: 'goc 10/26/2021 12:32:26'!
trackInWindowPositionChangesOf: aMarsRover 
	|x|
	
	x _ MarsRoverStatusView new.
	aMarsRover  trackPositionChangesToStatusView: x.
	
	^ x.!

!testRun: #TestXxx #test07 stamp: 'goc 10/26/2021 12:32:35'!
ERROR!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:33:13' prior: 50916029!
test07
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: '1@3' equals: x getPositionTextFieldModel.
	"self assert: MarsRoverHeadingEast equals: x headingTextFieldModel."
	! !

!testRun: #TestXxx #test07 stamp: 'goc 10/26/2021 12:33:17'!
ERROR!
!MarsRoverStatusView methodsFor: 'unclassified' stamp: 'goc 10/26/2021 12:33:23'!
getPositionTextFieldModel
	self shouldBeImplemented.! !
!MarsRoverStatusView methodsFor: 'unclassified' stamp: 'goc 10/26/2021 12:33:34' prior: 50916066!
getPositionTextFieldModel
	^ positionTextFieldModel .! !

!testRun: #TestXxx #test07 stamp: 'goc 10/26/2021 12:33:37'!
FAILURE!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:34:00' prior: 50916051!
test07
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: 1@3 equals: x getPositionTextFieldModel.
	"self assert: MarsRoverHeadingEast equals: x headingTextFieldModel."
	! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:33:13' prior: 50916078!
test07
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: '1@3' equals: x getPositionTextFieldModel.
	"self assert: MarsRoverHeadingEast equals: x headingTextFieldModel."
	! !
!MarsRoverStatusView methodsFor: 'unclassified' stamp: 'goc 10/26/2021 12:35:45' prior: 50916071!
getPositionTextFieldModel
	^ positionTextFieldModel printString.! !

!testRun: #TestXxx #test07 stamp: 'goc 10/26/2021 12:35:51'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'goc 10/26/2021 12:35:51'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'goc 10/26/2021 12:35:51'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'goc 10/26/2021 12:35:51'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'goc 10/26/2021 12:35:51'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'goc 10/26/2021 12:35:51'!
PASSED!

!testRun: #TestXxx #test06 stamp: 'goc 10/26/2021 12:35:51'!
PASSED!

!testRun: #TestXxx #test07 stamp: 'goc 10/26/2021 12:35:51'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:36:46'!
test08
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: MarsRoverHeadingEast equals: x headingTextFieldModel.
	! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:37:03' prior: 50916127!
test08
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: MarsRoverHeadingEast equals: x getHeadingTextFieldModel.
	! !

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 12:37:07'!
ERROR!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:37:14'!
trackInStatusViewHeadingChangesOf: aMarsRover 
	self shouldBeImplemented.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:38:09' prior: 50916151!
trackInStatusViewHeadingChangesOf: aMarsRover 
	|x|
	
	x _ MarsRoverStatusView new.
	aMarsRover trackHeadingChangesToStatusView: x.
	
	^x.! !

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 12:38:14'!
ERROR!
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/26/2021 12:38:23'!
trackHeadingChangesToStatusView: aMarsRoverStatusView 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'goc 10/26/2021 12:38:56'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionChangesLogger headingChangesLogger positionChangesStatusView headingChangesStatusView'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/26/2021 12:38:54' prior: 50916166!
trackHeadingChangesToStatusView: aMarsRoverStatusView 
	
	headingChangesStatusView _ aMarsRoverStatusView .! !

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 12:38:58'!
ERROR!
!MarsRoverStatusView methodsFor: 'unclassified' stamp: 'goc 10/26/2021 12:39:06'!
getHeadingTextFieldModel
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'heading' stamp: 'goc 10/26/2021 12:41:03' prior: 50915779!
changeHeadTo: aMarsRoverHeadingaDirection
	
	head := aMarsRoverHeadingaDirection.
	
	headingChangesLogger ifNotNil:[ headingChangesLogger nextPutAll: head printString; newLine ].
	headingChangesStatusView ifNotNil:[headingChangesStatusView headingTextFieldModel: head].! !

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 12:41:18'!
ERROR!
!MarsRoverStatusView methodsFor: 'unclassified' stamp: 'goc 10/26/2021 12:41:23'!
headingTextFieldModel: aMarsRoverHeadingEast 
	self shouldBeImplemented.! !

!classDefinition: #MarsRoverStatusView category: 'MarsRover-WithHeading' stamp: 'goc 10/26/2021 12:41:56'!
Object subclass: #MarsRoverStatusView
	instanceVariableNames: 'positionTextFieldModel headingTextFieldModel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverStatusView methodsFor: 'unclassified' stamp: 'goc 10/26/2021 12:41:54' prior: 50916211!
headingTextFieldModel: aMarsRoverHeading
	
	headingTextFieldModel _ aMarsRoverHeading.! !

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 12:41:59'!
ERROR!
!MarsRoverStatusView methodsFor: 'unclassified' stamp: 'goc 10/26/2021 12:42:17' prior: 50916192!
getHeadingTextFieldModel
	^ headingTextFieldModel.! !

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 12:42:19'!
FAILURE!

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 12:42:31'!
FAILURE!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:42:59' prior: 50916138!
test08
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: (MarsRoverHeadingEast = x getHeadingTextFieldModel).
	! !

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 12:42:59'!
FAILURE!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:43:04' prior: 50916245!
test08
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: (MarsRoverHeadingEast == x getHeadingTextFieldModel).
	! !

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 12:43:04'!
FAILURE!

a _ MarsRoverHeadingEast for: MarsRover new.!

b _ MarsRoverHeadingEast for: MarsRover new.!

b _ MarsRoverHeadingEast for: MarsRover new.!

a==b!

a=b!

a is: b!

a == b!

a isKindOf: b!

a == b!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:37:03' prior: 50916258!
test08
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: MarsRoverHeadingEast equals: x getHeadingTextFieldModel.
	! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:48:55' prior: 50916278!
test08
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: MarsRoverHeadingEast printString equals: x getHeadingTextFieldModel printString.
	! !

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 12:48:55'!
FAILURE!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:50:06' prior: 50916289!
test08
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: 'East' printString equals: x getHeadingTextFieldModel.
	! !

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 12:50:08'!
FAILURE!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:50:20' prior: 50916303!
test08
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: 'East' printString equals: x getHeadingTextFieldModel printString.
	! !

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 12:50:21'!
FAILURE!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:50:42' prior: 50916316!
test08
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: 'East' equals: x getHeadingTextFieldModel printString.
	! !

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 12:50:42'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'goc 10/26/2021 12:50:42'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'goc 10/26/2021 12:50:42'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'goc 10/26/2021 12:50:42'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'goc 10/26/2021 12:50:42'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'goc 10/26/2021 12:50:42'!
PASSED!

!testRun: #TestXxx #test06 stamp: 'goc 10/26/2021 12:50:42'!
PASSED!

!testRun: #TestXxx #test07 stamp: 'goc 10/26/2021 12:50:42'!
PASSED!

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 12:50:42'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:52:29'!
test09
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionAndHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: 1@3 equals: x getPositionTextFieldModel .
	self assert: 'East' equals: x getHeadingTextFieldModel printString.
	! !

!testRun: #TestXxx #test09 stamp: 'goc 10/26/2021 12:52:30'!
ERROR!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:52:42'!
trackInStatusViewPositionAndHeadingChangesOf: aMarsRover 
	self shouldBeImplemented.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:53:47' prior: 50916375!
trackInStatusViewPositionAndHeadingChangesOf: aMarsRover 
	| x |
	
	x _ MarsRoverStatusView new.
	
	aMarsRover  trackPositionAndHeadingChangesToStatusView: x.
	
	^ x.! !

!testRun: #TestXxx #test09 stamp: 'goc 10/26/2021 12:53:51'!
ERROR!
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/26/2021 12:53:57'!
trackPositionAndHeadingChangesToStatusView: aMarsRoverStatusView 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'unclassified' stamp: 'goc 10/26/2021 12:54:41' prior: 50916391!
trackPositionAndHeadingChangesToStatusView: aMarsRoverStatusView 
	
	positionChangesStatusView _ aMarsRoverStatusView .
	headingChangesStatusView _ aMarsRoverStatusView .! !

!testRun: #TestXxx #test09 stamp: 'goc 10/26/2021 12:54:43'!
FAILURE!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 12:55:14' prior: 50916360!
test09
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionAndHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: '1@3' equals: x getPositionTextFieldModel .
	self assert: 'East' equals: x getHeadingTextFieldModel printString.
	! !

!testRun: #TestXxx #test09 stamp: 'goc 10/26/2021 12:55:15'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'goc 10/26/2021 12:55:15'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'goc 10/26/2021 12:55:15'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'goc 10/26/2021 12:55:15'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'goc 10/26/2021 12:55:15'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'goc 10/26/2021 12:55:15'!
PASSED!

!testRun: #TestXxx #test06 stamp: 'goc 10/26/2021 12:55:15'!
PASSED!

!testRun: #TestXxx #test07 stamp: 'goc 10/26/2021 12:55:15'!
PASSED!

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 12:55:15'!
PASSED!

!testRun: #TestXxx #test09 stamp: 'goc 10/26/2021 12:55:15'!
PASSED!

----SNAPSHOT----(26 October 2021 12:55:48) CuisUniversity-4913.image priorSource: 18694785!

----SNAPSHOT----(26 October 2021 12:58:23) CuisUniversity-4913.image priorSource: 18713340!

----QUIT----(26 October 2021 12:58:35) CuisUniversity-4913.image priorSource: 18713433!

----STARTUP---- (26 October 2021 13:07:26) as /home/goon/Desktop/inge1/new cuis/CuisUniversity-4913.image!

!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 13:11:13'!
test10
	| marsRover x y |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	y _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'fffr'.
	
	self assert: '1@4' equals: x getPositionTextFieldModel.
	self assert: 'East' equals: x getHeadingTextFieldModel printString.
	! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 13:13:20' prior: 50916455!
test10
	| marsRover x y logReadStream|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	y _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'fffr'.
	
	logReadStream _ ReadStream on: x contents.
	
	
	self assert: '1@4' equals: x getPositionTextFieldModel.
	
	self assert: '1@2' equals: logReadStream nextLine.
	self assert: '1@3' equals: logReadStream nextLine.
	self assert: '1@4' equals: logReadStream nextLine.
	! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 13:13:29' prior: 50916470!
test10
	| marsRover x y logReadStream|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	y _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'fffr'.
	
	logReadStream _ ReadStream on: y contents.
	
	
	self assert: '1@4' equals: x getPositionTextFieldModel.
	
	self assert: '1@2' equals: logReadStream nextLine.
	self assert: '1@3' equals: logReadStream nextLine.
	self assert: '1@4' equals: logReadStream nextLine.
	! !

!testRun: #TestXxx #test10 stamp: 'goc 10/26/2021 13:13:30'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'goc 10/26/2021 13:13:30'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'goc 10/26/2021 13:13:30'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'goc 10/26/2021 13:13:30'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'goc 10/26/2021 13:13:30'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'goc 10/26/2021 13:13:30'!
PASSED!

!testRun: #TestXxx #test06 stamp: 'goc 10/26/2021 13:13:30'!
PASSED!

!testRun: #TestXxx #test07 stamp: 'goc 10/26/2021 13:13:30'!
PASSED!

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 13:13:30'!
PASSED!

!testRun: #TestXxx #test09 stamp: 'goc 10/26/2021 13:13:30'!
PASSED!

!testRun: #TestXxx #test10 stamp: 'goc 10/26/2021 13:13:30'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'goc 10/26/2021 13:14:30' prior: 50916489!
test10
	| marsRover x y logReadStream|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	y _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'fffr'.
	
	logReadStream _ ReadStream on: y contents.
	
	
	self assert: '1@4' equals: x getPositionTextFieldModel.
	
	self assert: '1@2' equals: logReadStream nextLine.
	self assert: '1@3' equals: logReadStream nextLine.
	self assert: '1@4' equals: logReadStream nextLine.
	self assert: logReadStream atEnd.
	! !

!testRun: #TestXxx #test10 stamp: 'goc 10/26/2021 13:14:32'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'goc 10/26/2021 13:14:32'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'goc 10/26/2021 13:14:32'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'goc 10/26/2021 13:14:32'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'goc 10/26/2021 13:14:32'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'goc 10/26/2021 13:14:32'!
PASSED!

!testRun: #TestXxx #test06 stamp: 'goc 10/26/2021 13:14:32'!
PASSED!

!testRun: #TestXxx #test07 stamp: 'goc 10/26/2021 13:14:32'!
PASSED!

!testRun: #TestXxx #test08 stamp: 'goc 10/26/2021 13:14:32'!
PASSED!

!testRun: #TestXxx #test09 stamp: 'goc 10/26/2021 13:14:32'!
PASSED!

!testRun: #TestXxx #test10 stamp: 'goc 10/26/2021 13:14:32'!
PASSED!

----SNAPSHOT----(26 October 2021 13:21:45) CuisUniversity-4913.image priorSource: 18713526!

----STARTUP---- (27 October 2021 11:27:49) as /home/matias/Downloads/newcuis/linux64/CuisUniversity-4913.image!


!classRemoval: #MarsRover stamp: 'MS 10/27/2021 11:28:15'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #WestDirection stamp: 'MS 10/27/2021 11:28:15'!
CardinalDirection subclass: #WestDirection
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #SouthDirection stamp: 'MS 10/27/2021 11:28:16'!
CardinalDirection subclass: #SouthDirection
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #NorthDirection stamp: 'MS 10/27/2021 11:28:16'!
CardinalDirection subclass: #NorthDirection
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #EastDirection stamp: 'MS 10/27/2021 11:28:17'!
CardinalDirection subclass: #EastDirection
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #CardinalDirection stamp: 'MS 10/27/2021 11:28:18'!
Object subclass: #CardinalDirection
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #MarsRoverTest stamp: 'MS 10/27/2021 11:28:18'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'North East South West'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

----End fileIn of /home/matias/Downloads/Inge-TPs/Ingenieria-de-Software-I/19-MarsRover-ElRegreso/MarsRover-WithHeading.st----!

!testRun: #TestXxx #test01 stamp: 'MS 10/27/2021 13:15:08'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 13:18:23' prior: 50954328!
test01
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	"x := Log new"
	
	x _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'f'.
	
	logReadStream _ ReadStream on: x contents.
	
	self assert:'1@2' equals: logReadStream nextLine.
	self assert: logReadStream atEnd.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 13:27:29' prior: 50954969!
test01
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	
	x _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'f'.
	
	logReadStream _ ReadStream on: x contents.
	
	self assert:'1@2' equals: logReadStream nextLine.
	self assert: logReadStream atEnd.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 13:27:37' prior: 50954983!
test01
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'f'.
	
	logReadStream _ ReadStream on: x contents.
	
	self assert:'1@2' equals: logReadStream nextLine.
	self assert: logReadStream atEnd.! !

Object subclass: #MarsRoverPosition
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverPosition category: 'MarsRover-WithHeading' stamp: 'MS 10/27/2021 13:29:21'!
Object subclass: #MarsRoverPosition
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 13:35:41'!
test00
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	logReadStream _ ReadStream on: x contents.
	
	self assert:'1@2' equals: logReadStream nextLine.
	self assert: logReadStream atEnd.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 13:35:45' prior: 50955021!
test00
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	logReadStream _ ReadStream on: x contents.
	
	self assert:'1@1' equals: logReadStream nextLine.
	self assert: logReadStream atEnd.! !

!testRun: #TestXxx #test00 stamp: 'MS 10/27/2021 13:35:46'!
FAILURE!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 13:36:32' prior: 50954517!
trackPositionChangesOf: aMarsRover 
	| logger |
	
	logger _ WriteStream on: ''.
	aMarsRover trackPositionChangesTo: logger.
	
	^ logger.
	
	"MarsRoverPosition for: aMarsRover"! !
!MarsRoverPosition class methodsFor: 'nil' stamp: 'MS 10/27/2021 13:37:22'!
for: aMarsRover 

	^self new initializeWith: aMarsRover.! !

!classDefinition: #MarsRoverPosition category: 'MarsRover-WithHeading' stamp: 'MS 10/27/2021 13:38:02'!
Object subclass: #MarsRoverPosition
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverPosition methodsFor: 'no messages' stamp: 'MS 10/27/2021 13:38:01'!
initializeWith: aMarsRover

	log := OrderedCollection new.! !
!MarsRoverPosition methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 13:38:41' prior: 50955069!
initializeWith: aMarsRover

	log := OrderedCollection new.
	aMarsRover trackPositionChangesTo: self.! !

!testRun: #TestXxx #test00 stamp: 'MS 10/27/2021 13:38:47'!
FAILURE!

!testRun: #TestXxx #test00 stamp: 'MS 10/27/2021 13:38:47'!
FAILURE!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 13:39:55' prior: 50955033!
test00
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	expected := OrderedCollection new.
	
	self assert: expected equals: x log.! !
!MarsRoverPosition methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 13:40:45'!
log

	^log.! !

!testRun: #TestXxx #test00 stamp: 'MS 10/27/2021 14:20:57'!
ERROR!

!testRun: #TestXxx #test01 stamp: 'MS 10/27/2021 14:20:57'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'MS 10/27/2021 14:20:57'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'MS 10/27/2021 14:20:57'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'MS 10/27/2021 14:20:57'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'MS 10/27/2021 14:20:57'!
PASSED!

!testRun: #TestXxx #test06 stamp: 'MS 10/27/2021 14:20:57'!
PASSED!

!testRun: #TestXxx #test07 stamp: 'MS 10/27/2021 14:20:57'!
PASSED!

!testRun: #TestXxx #test08 stamp: 'MS 10/27/2021 14:20:57'!
PASSED!

!testRun: #TestXxx #test09 stamp: 'MS 10/27/2021 14:20:57'!
PASSED!

!testRun: #TestXxx #test10 stamp: 'MS 10/27/2021 14:20:57'!
PASSED!

!testRun: #TestXxx #test00 stamp: 'MS 10/27/2021 14:20:57'!
ERROR!

!testRun: #TestXxx #test02 stamp: 'MS 10/27/2021 14:21:01'!
PASSED!

!classRenamed: #MarsRoverPosition as: #MarsRoverPositionLog stamp: 'MS 10/27/2021 14:21:54'!
Smalltalk renameClassNamed: #MarsRoverPosition as: #MarsRoverPositionLog!

Object subclass: #MarsRoverHeadingLog
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingLog category: 'MarsRover-WithHeading' stamp: 'MS 10/27/2021 14:22:00'!
Object subclass: #MarsRoverHeadingLog
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Object subclass: #MarsRoverPositionHeadingLog
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverPositionHeadingLog category: 'MarsRover-WithHeading' stamp: 'MS 10/27/2021 14:22:15'!
Object subclass: #MarsRoverPositionHeadingLog
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverPositionHeadingLog class methodsFor: 'no messages' stamp: 'MS 10/27/2021 14:28:46'!
for: aMarsRover 

	^self new initializeWith: aMarsRover.! !
!MarsRoverHeadingLog class methodsFor: 'no messages' stamp: 'MS 10/27/2021 14:28:50'!
for: aMarsRover 

	^self new initializeWith: aMarsRover.! !
!MarsRoverPositionHeadingLog methodsFor: 'no messages' stamp: 'MS 10/27/2021 14:29:41'!
initializeWith: aMarsRover

	log := OrderedCollection new.
	aMarsRover trackPositionChangesTo: self.
	aMarsRover trackHeadingChangesTo: self.! !
!MarsRoverHeadingLog methodsFor: 'no messages' stamp: 'MS 10/27/2021 14:30:02'!
initializeWith: aMarsRover

	log := OrderedCollection new.
	aMarsRover trackHeadingChangesTo: self.! !
!MarsRoverHeadingLog methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 14:30:11'!
log
	^log.! !
!MarsRoverPositionHeadingLog methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 14:30:22'!
log
	^log.! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'MS 10/27/2021 14:31:57'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'MS 10/27/2021 14:31:57'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'MS 10/27/2021 14:31:57'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'MS 10/27/2021 14:31:57'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'MS 10/27/2021 14:31:57'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'MS 10/27/2021 14:31:57'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'MS 10/27/2021 14:31:57'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'MS 10/27/2021 14:31:57'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'MS 10/27/2021 14:31:57'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'MS 10/27/2021 14:31:57'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'MS 10/27/2021 14:31:57'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'MS 10/27/2021 14:31:57'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'MS 10/27/2021 14:31:57'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'MS 10/27/2021 14:31:57'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'MS 10/27/2021 14:31:57'!
PASSED!

!testRun: #TestXxx #test00 stamp: 'MS 10/27/2021 14:32:01'!
ERROR!

!testRun: #TestXxx #test01 stamp: 'MS 10/27/2021 14:32:01'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'MS 10/27/2021 14:32:01'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'MS 10/27/2021 14:32:01'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'MS 10/27/2021 14:32:01'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'MS 10/27/2021 14:32:01'!
PASSED!

!testRun: #TestXxx #test06 stamp: 'MS 10/27/2021 14:32:01'!
PASSED!

!testRun: #TestXxx #test07 stamp: 'MS 10/27/2021 14:32:01'!
PASSED!

!testRun: #TestXxx #test08 stamp: 'MS 10/27/2021 14:32:01'!
PASSED!

!testRun: #TestXxx #test09 stamp: 'MS 10/27/2021 14:32:01'!
PASSED!

!testRun: #TestXxx #test10 stamp: 'MS 10/27/2021 14:32:01'!
PASSED!

!testRun: #TestXxx #test00 stamp: 'MS 10/27/2021 14:32:01'!
ERROR!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 14:32:34' prior: 50955048!
trackPositionChangesOf: aMarsRover 
	"| logger |
	
	logger _ WriteStream on: ''.
	aMarsRover trackPositionChangesTo: logger.
	
	^ logger.
	"
	MarsRoverPositionLog for: aMarsRover.! !

!testRun: #TestXxx #test00 stamp: 'MS 10/27/2021 14:32:37'!
ERROR!

!testRun: #TestXxx #test00 stamp: 'MS 10/27/2021 14:32:37'!
ERROR!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 14:34:05' prior: 50955271!
trackPositionChangesOf: aMarsRover 
	"| logger |
	
	logger _ WriteStream on: ''.
	aMarsRover trackPositionChangesTo: logger.
	
	^ logger.
	"
	^MarsRoverPositionLog for: aMarsRover.! !

!testRun: #TestXxx #test00 stamp: 'MS 10/27/2021 14:34:08'!
PASSED!

!testRun: #TestXxx #test00 stamp: 'MS 10/27/2021 14:36:37'!
PASSED!
!MarsRoverStatusView methodsFor: 'unclassified' stamp: 'MS 10/27/2021 14:39:22' prior: 50954941!
getHeadingTextFieldModel

	^ headingTextFieldModel.! !
!MarsRoverStatusView methodsFor: 'unclassified' stamp: 'MS 10/27/2021 14:39:27' prior: 50954946!
getPositionTextFieldModel

	^ positionTextFieldModel printString.! !

!testRun: #TestXxx #test01 stamp: 'MS 10/27/2021 14:40:32'!
ERROR!

!testRun: #TestXxx #test01 stamp: 'MS 10/27/2021 14:40:32'!
ERROR!
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 14:46:41'!
add: aPosition

! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 14:53:38' prior: 50954996!
test01
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'f'.
	
	expected _ ReadStream on: x contents.
	
	self assert:'1@2' equals: expected nextLine.
	self assert: expected atEnd.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 14:54:28' prior: 50955317!
test01
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'f'.
	
	expected _ OrderedCollection with: '1@2'.
	
	self assert: expected equals: x log.
! !

!testRun: #TestXxx #test01 stamp: 'MS 10/27/2021 14:54:29'!
ERROR!
!MarsRover methodsFor: 'moving' stamp: 'MS 10/27/2021 14:59:13' prior: 50954634!
movePositionWith: anOffset
	
	position := position + anOffset .
	
	positionChangesLogger  ifNotNil:[positionChangesLogger add: position].
	positionChangesStatusView ifNotNil:[positionChangesStatusView positionTextFieldModel: position].
	! !

!testRun: #TestXxx #test01 stamp: 'MS 10/27/2021 15:00:12'!
FAILURE!

!testRun: #TestXxx #test01 stamp: 'MS 10/27/2021 15:00:12'!
FAILURE!
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:01:21' prior: 50955313!
add: aPosition

	log add: aPosition .

! !

!testRun: #TestXxx #test01 stamp: 'MS 10/27/2021 15:01:25'!
FAILURE!

!testRun: #TestXxx #test01 stamp: 'MS 10/27/2021 15:01:25'!
FAILURE!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:01:33' prior: 50955330!
test01
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'f'.
	
	expected _ OrderedCollection with: 1@2.
	
	self assert: expected equals: x log.
! !

!testRun: #TestXxx #test01 stamp: 'MS 10/27/2021 15:01:34'!
PASSED!

!testRun: #TestXxx #test00 stamp: 'MS 10/27/2021 15:01:34'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'MS 10/27/2021 15:01:34'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'MS 10/27/2021 15:01:34'!
ERROR!

!testRun: #TestXxx #test03 stamp: 'MS 10/27/2021 15:01:34'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'MS 10/27/2021 15:01:34'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'MS 10/27/2021 15:01:34'!
ERROR!

!testRun: #TestXxx #test06 stamp: 'MS 10/27/2021 15:01:34'!
ERROR!

!testRun: #TestXxx #test07 stamp: 'MS 10/27/2021 15:01:34'!
PASSED!

!testRun: #TestXxx #test08 stamp: 'MS 10/27/2021 15:01:34'!
PASSED!

!testRun: #TestXxx #test09 stamp: 'MS 10/27/2021 15:01:34'!
PASSED!

!testRun: #TestXxx #test10 stamp: 'MS 10/27/2021 15:01:34'!
ERROR!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:02:05' prior: 50954341!
test02
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'b'.
	
	expected _ OrderedCollection with: 1@0.
	
	self assert: expected equals: x log.
! !

!testRun: #TestXxx #test02 stamp: 'MS 10/27/2021 15:02:06'!
PASSED!

!testRun: #TestXxx #test00 stamp: 'MS 10/27/2021 15:02:06'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'MS 10/27/2021 15:02:06'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'MS 10/27/2021 15:02:06'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'MS 10/27/2021 15:02:06'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'MS 10/27/2021 15:02:06'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'MS 10/27/2021 15:02:06'!
ERROR!

!testRun: #TestXxx #test06 stamp: 'MS 10/27/2021 15:02:06'!
ERROR!

!testRun: #TestXxx #test07 stamp: 'MS 10/27/2021 15:02:06'!
PASSED!

!testRun: #TestXxx #test08 stamp: 'MS 10/27/2021 15:02:06'!
PASSED!

!testRun: #TestXxx #test09 stamp: 'MS 10/27/2021 15:02:06'!
PASSED!

!testRun: #TestXxx #test10 stamp: 'MS 10/27/2021 15:02:06'!
ERROR!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:02:50' prior: 50954354!
test03
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'ff'.
	
	expected _ OrderedCollection with: 1@3.
	
	self assert: expected equals: x log.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:04:51'!
test04bis
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	logReadStream _ ReadStream on: x contents.
	
	self assert: 'East' equals: logReadStream nextLine .
	self assert: logReadStream atEnd.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:05:11' prior: 50955453!
test04bis
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'ffbfb'.
	
	expected _ OrderedCollection with: 1@3.
	
	self assert: expected equals: x log.! !

!testRun: #TestXxx #test03 stamp: 'MS 10/27/2021 15:05:17'!
ERROR!

!testRun: #TestXxx #test03 stamp: 'MS 10/27/2021 15:05:17'!
ERROR!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:05:26' prior: 50955442!
test03
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'ff'.
	
	expected _ OrderedCollection with: 1@2 with:1@3.
	
	self assert: expected equals: x log.! !

!testRun: #TestXxx #test03 stamp: 'MS 10/27/2021 15:05:28'!
ERROR!

!testRun: #TestXxx #test03 stamp: 'MS 10/27/2021 15:05:28'!
ERROR!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:06:32' prior: 50955482!
test03
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'ff'.
	
	expected _ OrderedCollection with: 1@2 with:1@3.
	
	self assert: expected equals: x log.! !

!testRun: #TestXxx #test03 stamp: 'MS 10/27/2021 15:06:33'!
PASSED!

!testRun: #TestXxx #test00 stamp: 'MS 10/27/2021 15:06:33'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'MS 10/27/2021 15:06:33'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'MS 10/27/2021 15:06:33'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'MS 10/27/2021 15:06:33'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'MS 10/27/2021 15:06:33'!
PASSED!

!testRun: #TestXxx #test04bis stamp: 'MS 10/27/2021 15:06:33'!
ERROR!

!testRun: #TestXxx #test05 stamp: 'MS 10/27/2021 15:06:33'!
ERROR!

!testRun: #TestXxx #test06 stamp: 'MS 10/27/2021 15:06:33'!
ERROR!

!testRun: #TestXxx #test07 stamp: 'MS 10/27/2021 15:06:33'!
PASSED!

!testRun: #TestXxx #test08 stamp: 'MS 10/27/2021 15:06:33'!
PASSED!

!testRun: #TestXxx #test09 stamp: 'MS 10/27/2021 15:06:33'!
PASSED!

!testRun: #TestXxx #test10 stamp: 'MS 10/27/2021 15:06:33'!
ERROR!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:08:42'!
test05bisLogPositionDoesNotTakeHeadingChanges
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'ffrrb'.
	
	expected _ OrderedCollection with: 1@2 with:1@3 with:1@4.
	
	self assert: expected equals: x log.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:09:37' prior: 50954473!
trackHeadingChangesOf: aMarsRover 
	"| logger |
	
	logger _ WriteStream on: ''.
	aMarsRover trackHeadingChangesTo: logger.
	
	^logger."
	
	^MarsRoverHeadingLog for: aMarsRover.! !
!MarsRoverHeadingLog methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:09:58'!
add: aHeading

	log add: aHeading .
! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:11:00'!
test04aux
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionAndHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	logReadStream _ ReadStream on: x contents.
	
	
	self assert: '1@2' equals: logReadStream nextLine.
	self assert: '1@3' equals: logReadStream nextLine.
	self assert: 'East' equals: logReadStream nextLine .
	self assert: logReadStream atEnd.! !

!methodRemoval: TestXxx #test05 stamp: 'MS 10/27/2021 15:11:00'!
test05
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionAndHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	logReadStream _ ReadStream on: x contents.
	
	
	self assert: '1@2' equals: logReadStream nextLine.
	self assert: '1@3' equals: logReadStream nextLine.
	self assert: 'East' equals: logReadStream nextLine .
	self assert: logReadStream atEnd.!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:11:13'!
test06aux
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	logReadStream _ ReadStream on: x contents.
	
	self assert: 'East' equals: logReadStream nextLine .
	self assert: logReadStream atEnd.! !

!methodRemoval: TestXxx #test04 stamp: 'MS 10/27/2021 15:11:13'!
test04
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	logReadStream _ ReadStream on: x contents.
	
	self assert: 'East' equals: logReadStream nextLine .
	self assert: logReadStream atEnd.!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:11:28'!
test07aux
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	logReadStream _ ReadStream on: x contents.
	
	self assert: 'East' equals: logReadStream nextLine .
	self assert: logReadStream atEnd.! !

!methodRemoval: TestXxx #test06aux stamp: 'MS 10/27/2021 15:11:28'!
test06aux
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	logReadStream _ ReadStream on: x contents.
	
	self assert: 'East' equals: logReadStream nextLine .
	self assert: logReadStream atEnd.!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:11:43'!
test07EMPTY
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: '1@3' equals: x getPositionTextFieldModel.
	"self assert: MarsRoverHeadingEast equals: x headingTextFieldModel."
	! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:12:14' prior: 50955645!
test07EMPTY
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover	.
	marsRover process: 'ffr'.
	
	self assert: '1@3' equals: x getPositionTextFieldModel.
	"self assert: MarsRoverHeadingEast equals: x headingTextFieldModel."
	! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:12:35'!
test08bis
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'ffbfb'.
	
	expected _ OrderedCollection with: 1@3.
	
	self assert: expected equals: x log.! !

!methodRemoval: TestXxx #test04bis stamp: 'MS 10/27/2021 15:12:35'!
test04bis
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'ffbfb'.
	
	expected _ OrderedCollection with: 1@3.
	
	self assert: expected equals: x log.!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:13:14' prior: 50955658!
test07EMPTY
	| marsRover expected  x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover	.

	expected := OrderedCollection new.
		
	self assert: expected equals: x log.
	! !

!testRun: #TestXxx #test07EMPTY stamp: 'MS 10/27/2021 15:13:17'!
PASSED!

!testRun: #TestXxx #test00 stamp: 'MS 10/27/2021 15:13:17'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'MS 10/27/2021 15:13:17'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'MS 10/27/2021 15:13:17'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'MS 10/27/2021 15:13:17'!
PASSED!

!testRun: #TestXxx #test04aux stamp: 'MS 10/27/2021 15:13:17'!
ERROR!

!testRun: #TestXxx #test05bisLogPositionDoesNotTakeHeadingChanges stamp: 'MS 10/27/2021 15:13:17'!
PASSED!

!testRun: #TestXxx #test06 stamp: 'MS 10/27/2021 15:13:17'!
ERROR!

!testRun: #TestXxx #test07 stamp: 'MS 10/27/2021 15:13:17'!
PASSED!

!testRun: #TestXxx #test07EMPTY stamp: 'MS 10/27/2021 15:13:17'!
PASSED!

!testRun: #TestXxx #test07aux stamp: 'MS 10/27/2021 15:13:17'!
ERROR!

!testRun: #TestXxx #test08 stamp: 'MS 10/27/2021 15:13:17'!
PASSED!

!testRun: #TestXxx #test08bis stamp: 'MS 10/27/2021 15:13:17'!
FAILURE!

!testRun: #TestXxx #test09 stamp: 'MS 10/27/2021 15:13:17'!
PASSED!

!testRun: #TestXxx #test10 stamp: 'MS 10/27/2021 15:13:17'!
ERROR!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:13:42'!
test20aux
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionAndHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	logReadStream _ ReadStream on: x contents.
	
	
	self assert: '1@2' equals: logReadStream nextLine.
	self assert: '1@3' equals: logReadStream nextLine.
	self assert: 'East' equals: logReadStream nextLine .
	self assert: logReadStream atEnd.! !

!methodRemoval: TestXxx #test04aux stamp: 'MS 10/27/2021 15:13:42'!
test04aux
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionAndHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	logReadStream _ ReadStream on: x contents.
	
	
	self assert: '1@2' equals: logReadStream nextLine.
	self assert: '1@3' equals: logReadStream nextLine.
	self assert: 'East' equals: logReadStream nextLine .
	self assert: logReadStream atEnd.!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:14:33'!
test10aux
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingEast.
	
	x _ self trackPositionAndHeadingChangesOf: marsRover.
	
	marsRover process: 'frfrfr'.
	
	logReadStream _ ReadStream on: x contents.
	
	
	self assert: '2@1' equals: logReadStream nextLine.
	self assert: 'South' equals: logReadStream nextLine .
	self assert: '2@0' equals: logReadStream nextLine.
	self assert: 'West' equals: logReadStream nextLine .
	self assert: '1@0' equals: logReadStream nextLine .
	self assert: 'North' equals: logReadStream nextLine .
	self assert: logReadStream atEnd.! !

!methodRemoval: TestXxx #test06 stamp: 'MS 10/27/2021 15:14:33'!
test06
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingEast.
	
	x _ self trackPositionAndHeadingChangesOf: marsRover.
	
	marsRover process: 'frfrfr'.
	
	logReadStream _ ReadStream on: x contents.
	
	
	self assert: '2@1' equals: logReadStream nextLine.
	self assert: 'South' equals: logReadStream nextLine .
	self assert: '2@0' equals: logReadStream nextLine.
	self assert: 'West' equals: logReadStream nextLine .
	self assert: '1@0' equals: logReadStream nextLine .
	self assert: 'North' equals: logReadStream nextLine .
	self assert: logReadStream atEnd.!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:15:06'!
test40
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: '1@3' equals: x getPositionTextFieldModel.
	"self assert: MarsRoverHeadingEast equals: x headingTextFieldModel."
	! !

!methodRemoval: TestXxx #test07 stamp: 'MS 10/27/2021 15:15:06'!
test07
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: '1@3' equals: x getPositionTextFieldModel.
	"self assert: MarsRoverHeadingEast equals: x headingTextFieldModel."
	!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:15:45' prior: 50955498!
test03
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'ffbf'.
	
	expected _ OrderedCollection with: 1@2 with:1@3 with:1@2 with:1@3.
	
	self assert: expected equals: x log.! !

!testRun: #TestXxx #test03 stamp: 'MS 10/27/2021 15:15:47'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:15:58'!
test04
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'ffrrb'.
	
	expected _ OrderedCollection with: 1@2 with:1@3 with:1@4.
	
	self assert: expected equals: x log.! !

!methodRemoval: TestXxx #test05bisLogPositionDoesNotTakeHeadingChanges stamp: 'MS 10/27/2021 15:15:58'!
test05bisLogPositionDoesNotTakeHeadingChanges
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'ffrrb'.
	
	expected _ OrderedCollection with: 1@2 with:1@3 with:1@4.
	
	self assert: expected equals: x log.!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:16:10'!
test05
	| marsRover expected  x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover	.

	expected := OrderedCollection new.
		
	self assert: expected equals: x log.
	! !

!methodRemoval: TestXxx #test07EMPTY stamp: 'MS 10/27/2021 15:16:10'!
test07EMPTY
	| marsRover expected  x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover	.

	expected := OrderedCollection new.
		
	self assert: expected equals: x log.
	!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:17:45'!
test06
	 | marsRover logReadStream x |

	marsRover :=  MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	x := self trackHeadingChangesOf: marsRover.

	marsRover process: 'r'.

	logReadStream _ OrderedCollection with: 'East'.
	
	
! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:17:53' prior: 50955893!
test06
	 | marsRover logReadStream x |

	marsRover :=  MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	x := self trackHeadingChangesOf: marsRover.

	marsRover process: 'r'.

	logReadStream _ OrderedCollection with: 'East'.
	
	
	
! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:18:28' prior: 50955904!
test06
	 | marsRover expected x |

	marsRover :=  MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	x := self trackHeadingChangesOf: marsRover.

	marsRover process: 'r'.

	expected _ OrderedCollection with: 'East'.
	
	self assert: expected equals: x log.	
	
! !

!testRun: #TestXxx #test06 stamp: 'MS 10/27/2021 15:18:29'!
ERROR!
!MarsRover methodsFor: 'heading' stamp: 'MS 10/27/2021 15:18:57' prior: 50954557!
changeHeadTo: aMarsRoverHeadingaDirection
	
	head := aMarsRoverHeadingaDirection.
	
	headingChangesLogger ifNotNil:[ headingChangesLogger add: aMarsRoverHeadingaDirection ].
	headingChangesStatusView ifNotNil:[headingChangesStatusView headingTextFieldModel: head].! !

!testRun: #TestXxx #test06 stamp: 'MS 10/27/2021 15:19:08'!
FAILURE!

!testRun: #TestXxx #test06 stamp: 'MS 10/27/2021 15:19:08'!
FAILURE!

!testRun: #TestXxx #test06 stamp: 'MS 10/27/2021 15:19:36'!
FAILURE!

!testRun: #TestXxx #test06 stamp: 'MS 10/27/2021 15:19:36'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'MS 10/27/2021 15:20:30' prior: 50955928!
changeHeadTo: aMarsRoverHeadingaDirection
	
	head := aMarsRoverHeadingaDirection.
	
	headingChangesLogger ifNotNil:[ headingChangesLogger add: aMarsRoverHeadingaDirection printString ].
	headingChangesStatusView ifNotNil:[headingChangesStatusView headingTextFieldModel: head].! !

!testRun: #TestXxx #test06 stamp: 'MS 10/27/2021 15:20:34'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:21:20'!
test07
	 | marsRover expected x |

	marsRover :=  MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	x := self trackHeadingChangesOf: marsRover.

	marsRover process: 'l'.

	expected _ OrderedCollection with: 'West'.
	
	self assert: expected equals: x log.	
	
! !

!testRun: #TestXxx #test07 stamp: 'MS 10/27/2021 15:21:21'!
PASSED!

!testRun: #TestXxx #test00 stamp: 'MS 10/27/2021 15:21:21'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'MS 10/27/2021 15:21:21'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'MS 10/27/2021 15:21:21'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'MS 10/27/2021 15:21:21'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'MS 10/27/2021 15:21:21'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'MS 10/27/2021 15:21:21'!
PASSED!

!testRun: #TestXxx #test06 stamp: 'MS 10/27/2021 15:21:21'!
PASSED!

!testRun: #TestXxx #test07 stamp: 'MS 10/27/2021 15:21:21'!
PASSED!

!testRun: #TestXxx #test07aux stamp: 'MS 10/27/2021 15:21:21'!
ERROR!

!testRun: #TestXxx #test08 stamp: 'MS 10/27/2021 15:21:21'!
PASSED!

!testRun: #TestXxx #test08bis stamp: 'MS 10/27/2021 15:21:21'!
FAILURE!

!testRun: #TestXxx #test09 stamp: 'MS 10/27/2021 15:21:21'!
PASSED!

!testRun: #TestXxx #test10 stamp: 'MS 10/27/2021 15:21:21'!
ERROR!

!testRun: #TestXxx #test10aux stamp: 'MS 10/27/2021 15:21:21'!
ERROR!

!testRun: #TestXxx #test20aux stamp: 'MS 10/27/2021 15:21:21'!
ERROR!

!testRun: #TestXxx #test40 stamp: 'MS 10/27/2021 15:21:21'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:21:35'!
test12
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: 'East' equals: x getHeadingTextFieldModel printString.
	! !

!methodRemoval: TestXxx #test08 stamp: 'MS 10/27/2021 15:21:35'!
test08
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: 'East' equals: x getHeadingTextFieldModel printString.
	!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:23:08' prior: 50955670!
test08bis
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'rlrrr'.
	
	expected _ OrderedCollection with: 'East' with: 'North' with: 'East' with: 'South' with: 'West'.
	
	self assert: expected equals: x log.! !

!testRun: #TestXxx #test08bis stamp: 'MS 10/27/2021 15:23:11'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:23:42' prior: 50956031!
test08bis
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'rffrffr'.
	
	expected _ OrderedCollection with: 'East'with: 'South' with: 'West'.
	
	self assert: expected equals: x log.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:23:44' prior: 50956047!
test08bis
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'rffrfbfr'.
	
	expected _ OrderedCollection with: 'East'with: 'South' with: 'West'.
	
	self assert: expected equals: x log.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:23:08' prior: 50956060!
test08bis
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'rlrrr'.
	
	expected _ OrderedCollection with: 'East' with: 'North' with: 'East' with: 'South' with: 'West'.
	
	self assert: expected equals: x log.! !

!testRun: #TestXxx #test08bis stamp: 'MS 10/27/2021 15:24:17'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:24:32'!
test09bis

	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'rffrfbfr'.
	
	expected _ OrderedCollection with: 'East'with: 'South' with: 'West'.
	
	self assert: expected equals: x log.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:24:34' prior: 50956088!
test09bis
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'rffrfbfr'.
	
	expected _ OrderedCollection with: 'East'with: 'South' with: 'West'.
	
	self assert: expected equals: x log.! !

!testRun: #TestXxx #test09bis stamp: 'MS 10/27/2021 15:24:35'!
PASSED!

!testRun: #TestXxx #test00 stamp: 'MS 10/27/2021 15:24:35'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'MS 10/27/2021 15:24:35'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'MS 10/27/2021 15:24:35'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'MS 10/27/2021 15:24:35'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'MS 10/27/2021 15:24:35'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'MS 10/27/2021 15:24:35'!
PASSED!

!testRun: #TestXxx #test06 stamp: 'MS 10/27/2021 15:24:35'!
PASSED!

!testRun: #TestXxx #test07 stamp: 'MS 10/27/2021 15:24:35'!
PASSED!

!testRun: #TestXxx #test07aux stamp: 'MS 10/27/2021 15:24:35'!
ERROR!

!testRun: #TestXxx #test08bis stamp: 'MS 10/27/2021 15:24:35'!
PASSED!

!testRun: #TestXxx #test09 stamp: 'MS 10/27/2021 15:24:35'!
PASSED!

!testRun: #TestXxx #test09bis stamp: 'MS 10/27/2021 15:24:35'!
PASSED!

!testRun: #TestXxx #test10 stamp: 'MS 10/27/2021 15:24:35'!
ERROR!

!testRun: #TestXxx #test10aux stamp: 'MS 10/27/2021 15:24:35'!
ERROR!

!testRun: #TestXxx #test12 stamp: 'MS 10/27/2021 15:24:35'!
PASSED!

!testRun: #TestXxx #test20aux stamp: 'MS 10/27/2021 15:24:35'!
ERROR!

!testRun: #TestXxx #test40 stamp: 'MS 10/27/2021 15:24:35'!
PASSED!

!methodRemoval: TestXxx #test07aux stamp: 'MS 10/27/2021 15:25:18'!
test07aux
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	logReadStream _ ReadStream on: x contents.
	
	self assert: 'East' equals: logReadStream nextLine .
	self assert: logReadStream atEnd.!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:25:40'!
test35
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionAndHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: '1@3' equals: x getPositionTextFieldModel .
	self assert: 'East' equals: x getHeadingTextFieldModel printString.
	! !

!methodRemoval: TestXxx #test09 stamp: 'MS 10/27/2021 15:25:40'!
test09
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionAndHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: '1@3' equals: x getPositionTextFieldModel .
	self assert: 'East' equals: x getHeadingTextFieldModel printString.
	!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:25:46'!
test09
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'rffrfbfr'.
	
	expected _ OrderedCollection with: 'East'with: 'South' with: 'West'.
	
	self assert: expected equals: x log.! !

!methodRemoval: TestXxx #test09bis stamp: 'MS 10/27/2021 15:25:46'!
test09bis
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'rffrfbfr'.
	
	expected _ OrderedCollection with: 'East'with: 'South' with: 'West'.
	
	self assert: expected equals: x log.!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:25:50'!
test08
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'rlrrr'.
	
	expected _ OrderedCollection with: 'East' with: 'North' with: 'East' with: 'South' with: 'West'.
	
	self assert: expected equals: x log.! !

!methodRemoval: TestXxx #test08bis stamp: 'MS 10/27/2021 15:25:50'!
test08bis
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'rlrrr'.
	
	expected _ OrderedCollection with: 'East' with: 'North' with: 'East' with: 'South' with: 'West'.
	
	self assert: expected equals: x log.!

!testRun: #TestXxx #test00 stamp: 'MS 10/27/2021 15:26:02'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'MS 10/27/2021 15:26:02'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'MS 10/27/2021 15:26:02'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'MS 10/27/2021 15:26:02'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'MS 10/27/2021 15:26:02'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'MS 10/27/2021 15:26:02'!
PASSED!

!testRun: #TestXxx #test06 stamp: 'MS 10/27/2021 15:26:02'!
PASSED!

!testRun: #TestXxx #test07 stamp: 'MS 10/27/2021 15:26:02'!
PASSED!

!testRun: #TestXxx #test08 stamp: 'MS 10/27/2021 15:26:02'!
PASSED!

!testRun: #TestXxx #test09 stamp: 'MS 10/27/2021 15:26:02'!
PASSED!

!testRun: #TestXxx #test10 stamp: 'MS 10/27/2021 15:26:02'!
ERROR!

!testRun: #TestXxx #test10aux stamp: 'MS 10/27/2021 15:26:02'!
ERROR!

!testRun: #TestXxx #test12 stamp: 'MS 10/27/2021 15:26:02'!
PASSED!

!testRun: #TestXxx #test20aux stamp: 'MS 10/27/2021 15:26:02'!
ERROR!

!testRun: #TestXxx #test35 stamp: 'MS 10/27/2021 15:26:02'!
PASSED!

!testRun: #TestXxx #test40 stamp: 'MS 10/27/2021 15:26:02'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:26:27'!
test11
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingEast.
	
	x _ self trackPositionAndHeadingChangesOf: marsRover.
	
	marsRover process: 'frfrfr'.
	
	logReadStream _ ReadStream on: x contents.
	
	
	self assert: '2@1' equals: logReadStream nextLine.
	self assert: 'South' equals: logReadStream nextLine .
	self assert: '2@0' equals: logReadStream nextLine.
	self assert: 'West' equals: logReadStream nextLine .
	self assert: '1@0' equals: logReadStream nextLine .
	self assert: 'North' equals: logReadStream nextLine .
	self assert: logReadStream atEnd.! !

!methodRemoval: TestXxx #test10aux stamp: 'MS 10/27/2021 15:26:27'!
test10aux
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingEast.
	
	x _ self trackPositionAndHeadingChangesOf: marsRover.
	
	marsRover process: 'frfrfr'.
	
	logReadStream _ ReadStream on: x contents.
	
	
	self assert: '2@1' equals: logReadStream nextLine.
	self assert: 'South' equals: logReadStream nextLine .
	self assert: '2@0' equals: logReadStream nextLine.
	self assert: 'West' equals: logReadStream nextLine .
	self assert: '1@0' equals: logReadStream nextLine .
	self assert: 'North' equals: logReadStream nextLine .
	self assert: logReadStream atEnd.!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:26:37'!
test37
	| marsRover x y logReadStream|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	y _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'fffr'.
	
	logReadStream _ ReadStream on: y contents.
	
	
	self assert: '1@4' equals: x getPositionTextFieldModel.
	
	self assert: '1@2' equals: logReadStream nextLine.
	self assert: '1@3' equals: logReadStream nextLine.
	self assert: '1@4' equals: logReadStream nextLine.
	self assert: logReadStream atEnd.
	! !

!methodRemoval: TestXxx #test10 stamp: 'MS 10/27/2021 15:26:37'!
test10
	| marsRover x y logReadStream|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	y _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'fffr'.
	
	logReadStream _ ReadStream on: y contents.
	
	
	self assert: '1@4' equals: x getPositionTextFieldModel.
	
	self assert: '1@2' equals: logReadStream nextLine.
	self assert: '1@3' equals: logReadStream nextLine.
	self assert: '1@4' equals: logReadStream nextLine.
	self assert: logReadStream atEnd.
	!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:27:33'!
test10
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingEast.
	
	x _ self trackPositionAndHeadingChangesOf: marsRover.
		
	expected _ OrderedCollection new.
	
	self assert: expected equals: x log.! !

!testRun: #TestXxx #test10 stamp: 'MS 10/27/2021 15:27:34'!
ERROR!
!MarsRoverPositionHeadingLog methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:28:41'!
add: aPositionOrHeading
	^log add: aPositionOrHeading.! !
!MarsRoverPositionHeadingLog methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:28:44' prior: 50956367!
add: aPositionOrHeading

	^log add: aPositionOrHeading.! !

!testRun: #TestXxx #test10 stamp: 'MS 10/27/2021 15:28:53'!
ERROR!

!testRun: #TestXxx #test10 stamp: 'MS 10/27/2021 15:28:53'!
ERROR!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:29:40' prior: 50954508!
trackPositionAndHeadingChangesOf: aMarsRover 
	
	"| logger|
	
	logger _ WriteStream on: ''.
	aMarsRover  trackHeadingChangesTo: logger.
	aMarsRover  trackPositionChangesTo: logger.
	
	^logger."
	
	^MarsRoverPositionHeadingLog for: aMarsRover.! !

!testRun: #TestXxx #test10 stamp: 'MS 10/27/2021 15:29:45'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:31:23'!
test15
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionAndHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	logReadStream _ ReadStream on: x contents.
	
	
	self assert: '1@2' equals: logReadStream nextLine.
	self assert: '1@3' equals: logReadStream nextLine.
	self assert: 'East' equals: logReadStream nextLine .
	self assert: logReadStream atEnd.! !

!methodRemoval: TestXxx #test20aux stamp: 'MS 10/27/2021 15:31:23'!
test20aux
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionAndHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	logReadStream _ ReadStream on: x contents.
	
	
	self assert: '1@2' equals: logReadStream nextLine.
	self assert: '1@3' equals: logReadStream nextLine.
	self assert: 'East' equals: logReadStream nextLine .
	self assert: logReadStream atEnd.!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:32:19' prior: 50956395!
test15
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionAndHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	expected _ OrderedCollection with: 1@2 with: 1@3 with: 'East'.
	
	self assert: expected equals: x log.! !

!testRun: #TestXxx #test15 stamp: 'MS 10/27/2021 15:32:20'!
PASSED!

!testRun: #TestXxx #test00 stamp: 'MS 10/27/2021 15:32:20'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'MS 10/27/2021 15:32:20'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'MS 10/27/2021 15:32:20'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'MS 10/27/2021 15:32:20'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'MS 10/27/2021 15:32:20'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'MS 10/27/2021 15:32:20'!
PASSED!

!testRun: #TestXxx #test06 stamp: 'MS 10/27/2021 15:32:20'!
PASSED!

!testRun: #TestXxx #test07 stamp: 'MS 10/27/2021 15:32:20'!
PASSED!

!testRun: #TestXxx #test08 stamp: 'MS 10/27/2021 15:32:20'!
PASSED!

!testRun: #TestXxx #test09 stamp: 'MS 10/27/2021 15:32:20'!
PASSED!

!testRun: #TestXxx #test10 stamp: 'MS 10/27/2021 15:32:20'!
PASSED!

!testRun: #TestXxx #test11 stamp: 'MS 10/27/2021 15:32:20'!
ERROR!

!testRun: #TestXxx #test12 stamp: 'MS 10/27/2021 15:32:20'!
PASSED!

!testRun: #TestXxx #test15 stamp: 'MS 10/27/2021 15:32:20'!
PASSED!

!testRun: #TestXxx #test35 stamp: 'MS 10/27/2021 15:32:20'!
PASSED!

!testRun: #TestXxx #test37 stamp: 'MS 10/27/2021 15:32:20'!
ERROR!

!testRun: #TestXxx #test40 stamp: 'MS 10/27/2021 15:32:20'!
PASSED!

!methodRemoval: TestXxx #test11 stamp: 'MS 10/27/2021 15:32:40'!
test11
	| marsRover logReadStream x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingEast.
	
	x _ self trackPositionAndHeadingChangesOf: marsRover.
	
	marsRover process: 'frfrfr'.
	
	logReadStream _ ReadStream on: x contents.
	
	
	self assert: '2@1' equals: logReadStream nextLine.
	self assert: 'South' equals: logReadStream nextLine .
	self assert: '2@0' equals: logReadStream nextLine.
	self assert: 'West' equals: logReadStream nextLine .
	self assert: '1@0' equals: logReadStream nextLine .
	self assert: 'North' equals: logReadStream nextLine .
	self assert: logReadStream atEnd.!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:32:53'!
test17
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: 'East' equals: x getHeadingTextFieldModel printString.
	! !

!methodRemoval: TestXxx #test12 stamp: 'MS 10/27/2021 15:32:53'!
test12
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: 'East' equals: x getHeadingTextFieldModel printString.
	!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:33:08'!
test25
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: 'East' equals: x getHeadingTextFieldModel printString.
	! !

!methodRemoval: TestXxx #test17 stamp: 'MS 10/27/2021 15:33:08'!
test17
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: 'East' equals: x getHeadingTextFieldModel printString.
	!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:33:29'!
test20
	| marsRover x y logReadStream|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	y _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'fffr'.
	
	logReadStream _ ReadStream on: y contents.
	
	
	self assert: '1@4' equals: x getPositionTextFieldModel.
	
	self assert: '1@2' equals: logReadStream nextLine.
	self assert: '1@3' equals: logReadStream nextLine.
	self assert: '1@4' equals: logReadStream nextLine.
	self assert: logReadStream atEnd.
	! !

!methodRemoval: TestXxx #test37 stamp: 'MS 10/27/2021 15:33:29'!
test37
	| marsRover x y logReadStream|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	y _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'fffr'.
	
	logReadStream _ ReadStream on: y contents.
	
	
	self assert: '1@4' equals: x getPositionTextFieldModel.
	
	self assert: '1@2' equals: logReadStream nextLine.
	self assert: '1@3' equals: logReadStream nextLine.
	self assert: '1@4' equals: logReadStream nextLine.
	self assert: logReadStream atEnd.
	!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:34:07' prior: 50955810!
test40
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: '1@3' equals: x getPositionTextFieldModel.
	! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:34:12'!
test19
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: '1@3' equals: x getPositionTextFieldModel.
	! !

!methodRemoval: TestXxx #test40 stamp: 'MS 10/27/2021 15:34:12'!
test40
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: '1@3' equals: x getPositionTextFieldModel.
	!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:34:42' prior: 50956591!
test19
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: 1@3 equals: x getPositionTextFieldModel.
	! !

!testRun: #TestXxx #test19 stamp: 'MS 10/27/2021 15:35:51'!
FAILURE!

!testRun: #TestXxx #test19 stamp: 'MS 10/27/2021 15:35:51'!
FAILURE!
!MarsRoverStatusView methodsFor: 'unclassified' stamp: 'MS 10/27/2021 15:36:28' prior: 50955303!
getPositionTextFieldModel

	^ positionTextFieldModel.! !

!testRun: #TestXxx #test19 stamp: 'MS 10/27/2021 15:36:38'!
PASSED!

!testRun: #TestXxx #test20 stamp: 'MS 10/27/2021 15:36:40'!
ERROR!

!testRun: #TestXxx #test20 stamp: 'MS 10/27/2021 15:36:40'!
ERROR!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:37:04'!
test40
	| marsRover x y logReadStream|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	y _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'fffr'.
	
	logReadStream _ ReadStream on: y contents.
	
	
	self assert: '1@4' equals: x getPositionTextFieldModel.
	
	self assert: '1@2' equals: logReadStream nextLine.
	self assert: '1@3' equals: logReadStream nextLine.
	self assert: '1@4' equals: logReadStream nextLine.
	self assert: logReadStream atEnd.
	! !

!methodRemoval: TestXxx #test20 stamp: 'MS 10/27/2021 15:37:04'!
test20
	| marsRover x y logReadStream|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	y _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'fffr'.
	
	logReadStream _ ReadStream on: y contents.
	
	
	self assert: '1@4' equals: x getPositionTextFieldModel.
	
	self assert: '1@2' equals: logReadStream nextLine.
	self assert: '1@3' equals: logReadStream nextLine.
	self assert: '1@4' equals: logReadStream nextLine.
	self assert: logReadStream atEnd.
	!

!testRun: #TestXxx #test25 stamp: 'MS 10/27/2021 15:37:21'!
PASSED!

!testRun: #TestXxx #test35 stamp: 'MS 10/27/2021 15:37:33'!
FAILURE!

!testRun: #TestXxx #test35 stamp: 'MS 10/27/2021 15:37:33'!
FAILURE!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:37:47' prior: 50956164!
test35
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionAndHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: 1@3 equals: x getPositionTextFieldModel .
	self assert: 'East' equals: x getHeadingTextFieldModel printString.
	! !

!testRun: #TestXxx #test35 stamp: 'MS 10/27/2021 15:37:48'!
PASSED!

!testRun: #TestXxx #test00 stamp: 'MS 10/27/2021 15:37:48'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'MS 10/27/2021 15:37:48'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'MS 10/27/2021 15:37:48'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'MS 10/27/2021 15:37:48'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'MS 10/27/2021 15:37:48'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'MS 10/27/2021 15:37:48'!
PASSED!

!testRun: #TestXxx #test06 stamp: 'MS 10/27/2021 15:37:48'!
PASSED!

!testRun: #TestXxx #test07 stamp: 'MS 10/27/2021 15:37:48'!
PASSED!

!testRun: #TestXxx #test08 stamp: 'MS 10/27/2021 15:37:48'!
PASSED!

!testRun: #TestXxx #test09 stamp: 'MS 10/27/2021 15:37:48'!
PASSED!

!testRun: #TestXxx #test10 stamp: 'MS 10/27/2021 15:37:48'!
PASSED!

!testRun: #TestXxx #test15 stamp: 'MS 10/27/2021 15:37:48'!
PASSED!

!testRun: #TestXxx #test19 stamp: 'MS 10/27/2021 15:37:48'!
PASSED!

!testRun: #TestXxx #test25 stamp: 'MS 10/27/2021 15:37:48'!
PASSED!

!testRun: #TestXxx #test35 stamp: 'MS 10/27/2021 15:37:48'!
PASSED!

!testRun: #TestXxx #test40 stamp: 'MS 10/27/2021 15:37:48'!
ERROR!

!testRun: #TestXxx #test40 stamp: 'MS 10/27/2021 15:37:48'!
ERROR!

!testRun: #TestXxx #test35 stamp: 'MS 10/27/2021 15:37:54'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:39:15' prior: 50956637!
test40
	| marsRover x y logReadStream|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	y _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'fffr'.
	
	logReadStream _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	
	
	self assert: '1@4' equals: x getPositionTextFieldModel.
	
	self assert: '1@2' equals: logReadStream nextLine.
	self assert: '1@3' equals: logReadStream nextLine.
	self assert: '1@4' equals: logReadStream nextLine.
	self assert: logReadStream atEnd.
	! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:39:43' prior: 50956737!
test40
	| marsRover x y logReadStream|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	y _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'fffr'.
	
	logReadStream _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	
	
	self assert: 1@4 equals: x getPositionTextFieldModel.
	
	self assert: logReadStream equals: y log.
	! !

!testRun: #TestXxx #test40 stamp: 'MS 10/27/2021 15:39:46'!
PASSED!

!testRun: #TestXxx #test00 stamp: 'MS 10/27/2021 15:39:46'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'MS 10/27/2021 15:39:46'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'MS 10/27/2021 15:39:46'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'MS 10/27/2021 15:39:46'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'MS 10/27/2021 15:39:46'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'MS 10/27/2021 15:39:46'!
PASSED!

!testRun: #TestXxx #test06 stamp: 'MS 10/27/2021 15:39:46'!
PASSED!

!testRun: #TestXxx #test07 stamp: 'MS 10/27/2021 15:39:46'!
PASSED!

!testRun: #TestXxx #test08 stamp: 'MS 10/27/2021 15:39:46'!
PASSED!

!testRun: #TestXxx #test09 stamp: 'MS 10/27/2021 15:39:46'!
PASSED!

!testRun: #TestXxx #test10 stamp: 'MS 10/27/2021 15:39:46'!
PASSED!

!testRun: #TestXxx #test15 stamp: 'MS 10/27/2021 15:39:46'!
PASSED!

!testRun: #TestXxx #test19 stamp: 'MS 10/27/2021 15:39:46'!
PASSED!

!testRun: #TestXxx #test25 stamp: 'MS 10/27/2021 15:39:46'!
PASSED!

!testRun: #TestXxx #test35 stamp: 'MS 10/27/2021 15:39:46'!
PASSED!

!testRun: #TestXxx #test40 stamp: 'MS 10/27/2021 15:39:46'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:39:58' prior: 50956758!
test40
	| marsRover x y expected|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	y _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'fffr'.
	
	expected _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	
	
	self assert: 1@4 equals: x getPositionTextFieldModel.
	
	self assert: expected equals: y log.
	! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:40:04' prior: 50956811!
test40
	| marsRover x y expected|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	y _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'fffr'.
	
	expected _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	
	self assert: 1@4 equals: x getPositionTextFieldModel.
	
	self assert: expected equals: y log.
	! !

!testRun: #TestXxx #test40 stamp: 'MS 10/27/2021 15:40:04'!
PASSED!

!testRun: #TestXxx #test00 stamp: 'MS 10/27/2021 15:40:04'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'MS 10/27/2021 15:40:04'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'MS 10/27/2021 15:40:04'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'MS 10/27/2021 15:40:04'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'MS 10/27/2021 15:40:04'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'MS 10/27/2021 15:40:04'!
PASSED!

!testRun: #TestXxx #test06 stamp: 'MS 10/27/2021 15:40:04'!
PASSED!

!testRun: #TestXxx #test07 stamp: 'MS 10/27/2021 15:40:04'!
PASSED!

!testRun: #TestXxx #test08 stamp: 'MS 10/27/2021 15:40:04'!
PASSED!

!testRun: #TestXxx #test09 stamp: 'MS 10/27/2021 15:40:04'!
PASSED!

!testRun: #TestXxx #test10 stamp: 'MS 10/27/2021 15:40:04'!
PASSED!

!testRun: #TestXxx #test15 stamp: 'MS 10/27/2021 15:40:04'!
PASSED!

!testRun: #TestXxx #test19 stamp: 'MS 10/27/2021 15:40:04'!
PASSED!

!testRun: #TestXxx #test25 stamp: 'MS 10/27/2021 15:40:04'!
PASSED!

!testRun: #TestXxx #test35 stamp: 'MS 10/27/2021 15:40:04'!
PASSED!

!testRun: #TestXxx #test40 stamp: 'MS 10/27/2021 15:40:04'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:40:12' prior: 50956827!
test40
	| marsRover x y expected|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackInStatusViewPositionChangesOf: marsRover.
	y _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'fffr'.
	
	expected _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	
	self assert: 1@4 equals: x getPositionTextFieldModel.
	self assert: expected equals: y log.
	! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:40:46' prior: 50955550!
trackHeadingChangesOf: aMarsRover 
		
	^MarsRoverHeadingLog for: aMarsRover.! !

!methodRemoval: TestXxx #trackInWindowPositionAndHeadingChangesOf: stamp: 'MS 10/27/2021 15:40:50'!
trackInWindowPositionAndHeadingChangesOf: aMarsRover 
	self shouldBeImplemented.!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:40:55' prior: 50956382!
trackPositionAndHeadingChangesOf: aMarsRover 

	^MarsRoverPositionHeadingLog for: aMarsRover.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:41:00' prior: 50955284!
trackPositionChangesOf: aMarsRover 

	^MarsRoverPositionLog for: aMarsRover.! !

Object subclass: #MarsRoverLogs
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverLogs category: 'MarsRover-WithHeading' stamp: 'MS 10/27/2021 15:44:27'!
Object subclass: #MarsRoverLogs
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverLogs subclass: #MarsRoverPositionHeadingLog
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverPositionHeadingLog category: 'MarsRover-WithHeading' stamp: 'MS 10/27/2021 15:44:43'!
MarsRoverLogs subclass: #MarsRoverPositionHeadingLog
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverLogs subclass: #MarsRoverPositionLog
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverPositionLog category: 'MarsRover-WithHeading' stamp: 'MS 10/27/2021 15:44:48'!
MarsRoverLogs subclass: #MarsRoverPositionLog
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverLogs subclass: #MarsRoverHeadingLog
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingLog category: 'MarsRover-WithHeading' stamp: 'MS 10/27/2021 15:44:58'!
MarsRoverLogs subclass: #MarsRoverHeadingLog
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverLogs class methodsFor: 'no messages' stamp: 'MS 10/27/2021 15:45:14'!
for: aMarsRover 

	^self new initializeWith: aMarsRover.! !

!methodRemoval: MarsRoverHeadingLog class #for: stamp: 'MS 10/27/2021 15:45:18'!
for: aMarsRover 

	^self new initializeWith: aMarsRover.!

!methodRemoval: MarsRoverPositionHeadingLog class #for: stamp: 'MS 10/27/2021 15:45:22'!
for: aMarsRover 

	^self new initializeWith: aMarsRover.!

!methodRemoval: MarsRoverPositionLog class #for: stamp: 'MS 10/27/2021 15:45:25'!
for: aMarsRover 

	^self new initializeWith: aMarsRover.!
!MarsRoverLogs methodsFor: 'no messages' stamp: 'MS 10/27/2021 15:45:45'!
log
	! !

!testRun: #TestXxx #test00 stamp: 'MS 10/27/2021 15:46:05'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'MS 10/27/2021 15:46:05'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'MS 10/27/2021 15:46:05'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'MS 10/27/2021 15:46:05'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'MS 10/27/2021 15:46:05'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'MS 10/27/2021 15:46:05'!
PASSED!

!testRun: #TestXxx #test06 stamp: 'MS 10/27/2021 15:46:05'!
PASSED!

!testRun: #TestXxx #test07 stamp: 'MS 10/27/2021 15:46:05'!
PASSED!

!testRun: #TestXxx #test08 stamp: 'MS 10/27/2021 15:46:05'!
PASSED!

!testRun: #TestXxx #test09 stamp: 'MS 10/27/2021 15:46:05'!
PASSED!

!testRun: #TestXxx #test10 stamp: 'MS 10/27/2021 15:46:05'!
PASSED!

!testRun: #TestXxx #test15 stamp: 'MS 10/27/2021 15:46:05'!
PASSED!

!testRun: #TestXxx #test19 stamp: 'MS 10/27/2021 15:46:05'!
PASSED!

!testRun: #TestXxx #test25 stamp: 'MS 10/27/2021 15:46:05'!
PASSED!

!testRun: #TestXxx #test35 stamp: 'MS 10/27/2021 15:46:05'!
PASSED!

!testRun: #TestXxx #test40 stamp: 'MS 10/27/2021 15:46:05'!
PASSED!

MarsRoverLogs subclass: #MarsRoverPositionLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverPositionLog category: 'MarsRover-WithHeading' stamp: 'MS 10/27/2021 15:46:31'!
MarsRoverLogs subclass: #MarsRoverPositionLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverLogs subclass: #MarsRoverPositionHeadingLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverPositionHeadingLog category: 'MarsRover-WithHeading' stamp: 'MS 10/27/2021 15:46:35'!
MarsRoverLogs subclass: #MarsRoverPositionHeadingLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverLogs subclass: #MarsRoverHeadingLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingLog category: 'MarsRover-WithHeading' stamp: 'MS 10/27/2021 15:46:39'!
MarsRoverLogs subclass: #MarsRoverHeadingLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Object subclass: #MarsRoverLogs
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverLogs category: 'MarsRover-WithHeading' stamp: 'MS 10/27/2021 15:46:44'!
Object subclass: #MarsRoverLogs
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverLogs methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:46:53' prior: 50956989!
log
	^log.! !

!methodRemoval: MarsRoverHeadingLog #log stamp: 'MS 10/27/2021 15:46:57'!
log
	^log.!

!methodRemoval: MarsRoverPositionHeadingLog #log stamp: 'MS 10/27/2021 15:47:00'!
log
	^log.!

!methodRemoval: MarsRoverPositionLog #log stamp: 'MS 10/27/2021 15:47:03'!
log

	^log.!

!testRun: #TestXxx #test00 stamp: 'MS 10/27/2021 15:47:07'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'MS 10/27/2021 15:47:07'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'MS 10/27/2021 15:47:07'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'MS 10/27/2021 15:47:07'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'MS 10/27/2021 15:47:07'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'MS 10/27/2021 15:47:07'!
PASSED!

!testRun: #TestXxx #test06 stamp: 'MS 10/27/2021 15:47:07'!
PASSED!

!testRun: #TestXxx #test07 stamp: 'MS 10/27/2021 15:47:07'!
PASSED!

!testRun: #TestXxx #test08 stamp: 'MS 10/27/2021 15:47:07'!
PASSED!

!testRun: #TestXxx #test09 stamp: 'MS 10/27/2021 15:47:07'!
PASSED!

!testRun: #TestXxx #test10 stamp: 'MS 10/27/2021 15:47:07'!
PASSED!

!testRun: #TestXxx #test15 stamp: 'MS 10/27/2021 15:47:07'!
PASSED!

!testRun: #TestXxx #test19 stamp: 'MS 10/27/2021 15:47:07'!
PASSED!

!testRun: #TestXxx #test25 stamp: 'MS 10/27/2021 15:47:07'!
PASSED!

!testRun: #TestXxx #test35 stamp: 'MS 10/27/2021 15:47:07'!
PASSED!

!testRun: #TestXxx #test40 stamp: 'MS 10/27/2021 15:47:07'!
PASSED!
!MarsRoverLogs methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:47:37'!
add: aHeading

	log add: aHeading .! !

!methodRemoval: MarsRoverHeadingLog #add: stamp: 'MS 10/27/2021 15:47:42'!
add: aHeading

	log add: aHeading .
!

!methodRemoval: MarsRoverPositionHeadingLog #add: stamp: 'MS 10/27/2021 15:47:45'!
add: aPositionOrHeading

	^log add: aPositionOrHeading.!

!methodRemoval: MarsRoverPositionLog #add: stamp: 'MS 10/27/2021 15:47:49'!
add: aPosition

	log add: aPosition .

!

!testRun: #TestXxx #test00 stamp: 'MS 10/27/2021 15:48:43'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'MS 10/27/2021 15:48:43'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'MS 10/27/2021 15:48:43'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'MS 10/27/2021 15:48:43'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'MS 10/27/2021 15:48:43'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'MS 10/27/2021 15:48:43'!
PASSED!

!testRun: #TestXxx #test06 stamp: 'MS 10/27/2021 15:48:43'!
PASSED!

!testRun: #TestXxx #test07 stamp: 'MS 10/27/2021 15:48:43'!
PASSED!

!testRun: #TestXxx #test08 stamp: 'MS 10/27/2021 15:48:43'!
PASSED!

!testRun: #TestXxx #test09 stamp: 'MS 10/27/2021 15:48:43'!
PASSED!

!testRun: #TestXxx #test10 stamp: 'MS 10/27/2021 15:48:43'!
PASSED!

!testRun: #TestXxx #test15 stamp: 'MS 10/27/2021 15:48:43'!
PASSED!

!testRun: #TestXxx #test19 stamp: 'MS 10/27/2021 15:48:43'!
PASSED!

!testRun: #TestXxx #test25 stamp: 'MS 10/27/2021 15:48:43'!
PASSED!

!testRun: #TestXxx #test35 stamp: 'MS 10/27/2021 15:48:43'!
PASSED!

!testRun: #TestXxx #test40 stamp: 'MS 10/27/2021 15:48:43'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:52:29'!
test50
	| marsRover x y expected|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	y _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'fffr'.
	
	expected _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	
	self assert: 1@4 equals: x getPositionTextFieldModel.
	self assert: expected equals: y log.
	! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/27/2021 15:53:57' prior: 50956879!
test40
	| marsRover x y expected|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	y _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'fffr'.
	
	expected _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	
	self assert: expected equals: x log.
	self assert: expected equals: y log.
	! !

!testRun: #TestXxx #test40 stamp: 'MS 10/27/2021 15:54:05'!
FAILURE!

!testRun: #TestXxx #test40 stamp: 'MS 10/27/2021 15:54:05'!
FAILURE!

!testRun: #TestXxx #test40 stamp: 'MS 10/27/2021 15:54:27'!
FAILURE!

!testRun: #TestXxx #test40 stamp: 'MS 10/27/2021 15:54:27'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'MS 10/27/2021 16:02:23' prior: 50955343!
movePositionWith: anOffset
	
	position := position + anOffset .
	
	positionChangesLogger  ifNotNil: [positionChangesLogger add: position].
	positionChangesStatusView ifNotNil:[positionChangesStatusView positionTextFieldModel: position].
	! !

----QUIT----(27 October 2021 16:03:34) CuisUniversity-4913.image priorSource: 19918258!

----STARTUP---- (28 October 2021 10:52:37) as /home/matias/Downloads/newcuis/linux64/CuisUniversity-4913.image!


Object subclass: #MarsRover
	instanceVariableNames: 'position head positionChangesLogger headingChangesLogger positionChangesStatusView headingChangesStatusView tracker'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'MS 10/28/2021 11:10:10'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionChangesLogger headingChangesLogger positionChangesStatusView headingChangesStatusView tracker'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Object subclass: #MarsRover
	instanceVariableNames: 'position head positionChangesLogger headingChangesLogger positionChangesStatusView headingChangesStatusView trackers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'MS 10/28/2021 11:10:15'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionChangesLogger headingChangesLogger positionChangesStatusView headingChangesStatusView trackers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'initialization' stamp: 'MS 10/28/2021 11:10:40' prior: 50954551!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self. 
	trackers := OrderedCollection new.! !
!MarsRover methodsFor: 'heading' stamp: 'MS 10/28/2021 11:11:37' prior: 50955948!
changeHeadTo: aHeading
	
	head := aHeading.
	
	headingChangesLogger ifNotNil:[ headingChangesLogger add: aHeading printString ].
	headingChangesStatusView ifNotNil:[headingChangesStatusView headingTextFieldModel: head].! !

TestCase subclass: #MarsRoverTracker
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverTracker category: 'MarsRover-WithHeading' stamp: 'MS 10/28/2021 11:12:01'!
TestCase subclass: #MarsRoverTracker
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!testRun: #TestXxx #test00 stamp: 'MS 10/28/2021 12:30:04'!
PASSED!

!testRun: #TestXxx #test01 stamp: 'MS 10/28/2021 12:30:04'!
PASSED!

!testRun: #TestXxx #test02 stamp: 'MS 10/28/2021 12:30:04'!
PASSED!

!testRun: #TestXxx #test03 stamp: 'MS 10/28/2021 12:30:04'!
PASSED!

!testRun: #TestXxx #test04 stamp: 'MS 10/28/2021 12:30:04'!
PASSED!

!testRun: #TestXxx #test05 stamp: 'MS 10/28/2021 12:30:04'!
PASSED!

!testRun: #TestXxx #test06 stamp: 'MS 10/28/2021 12:30:04'!
PASSED!

!testRun: #TestXxx #test07 stamp: 'MS 10/28/2021 12:30:04'!
PASSED!

!testRun: #TestXxx #test08 stamp: 'MS 10/28/2021 12:30:04'!
PASSED!

!testRun: #TestXxx #test09 stamp: 'MS 10/28/2021 12:30:04'!
PASSED!

!testRun: #TestXxx #test10 stamp: 'MS 10/28/2021 12:30:04'!
PASSED!

!testRun: #TestXxx #test15 stamp: 'MS 10/28/2021 12:30:04'!
PASSED!

!testRun: #TestXxx #test19 stamp: 'MS 10/28/2021 12:30:04'!
PASSED!

!testRun: #TestXxx #test25 stamp: 'MS 10/28/2021 12:30:04'!
PASSED!

!testRun: #TestXxx #test35 stamp: 'MS 10/28/2021 12:30:04'!
PASSED!

!testRun: #TestXxx #test40 stamp: 'MS 10/28/2021 12:30:04'!
FAILURE!

!testRun: #TestXxx #test50 stamp: 'MS 10/28/2021 12:30:04'!
ERROR!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 12:32:03'!
test00logForPositionWithoutMovingReturnsEmptyCollection
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	expected := OrderedCollection new.
	
	self assert: expected equals: x log.! !

!methodRemoval: TestXxx #test00 stamp: 'MS 10/28/2021 12:32:03'!
test00
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	expected := OrderedCollection new.
	
	self assert: expected equals: x log.!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 12:32:53'!
test01logForPositionWithOnePositionCommandsReturnsCorrectCollection
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'f'.
	
	expected _ OrderedCollection with: 1@2.
	
	self assert: expected equals: x log.
! !

!methodRemoval: TestXxx #test01 stamp: 'MS 10/28/2021 12:32:53'!
test01
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'f'.
	
	expected _ OrderedCollection with: 1@2.
	
	self assert: expected equals: x log.
!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 12:33:14'!
test01logForPositionWithForwardCommandReturnsCorrectCollection
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'f'.
	
	expected _ OrderedCollection with: 1@2.
	
	self assert: expected equals: x log.
! !

!methodRemoval: TestXxx #test01logForPositionWithOnePositionCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 12:33:14'!
test01logForPositionWithOnePositionCommandsReturnsCorrectCollection
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'f'.
	
	expected _ OrderedCollection with: 1@2.
	
	self assert: expected equals: x log.
!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 12:33:32'!
test02logForPositionWithBackwardCommandReturnsCorrectCollection
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'b'.
	
	expected _ OrderedCollection with: 1@0.
	
	self assert: expected equals: x log.
! !

!methodRemoval: TestXxx #test02 stamp: 'MS 10/28/2021 12:33:32'!
test02
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'b'.
	
	expected _ OrderedCollection with: 1@0.
	
	self assert: expected equals: x log.
!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 12:34:00'!
test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'ffbf'.
	
	expected _ OrderedCollection with: 1@2 with:1@3 with:1@2 with:1@3.
	
	self assert: expected equals: x log.! !

!methodRemoval: TestXxx #test03 stamp: 'MS 10/28/2021 12:34:00'!
test03
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'ffbf'.
	
	expected _ OrderedCollection with: 1@2 with:1@3 with:1@2 with:1@3.
	
	self assert: expected equals: x log.!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 12:34:39'!
test04logForPositionDoesNotIncludeHeadingChanges
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'ffrrb'.
	
	expected _ OrderedCollection with: 1@2 with:1@3 with:1@4.
	
	self assert: expected equals: x log.! !

!methodRemoval: TestXxx #test04 stamp: 'MS 10/28/2021 12:34:39'!
test04
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionChangesOf: marsRover.
	
	marsRover process: 'ffrrb'.
	
	expected _ OrderedCollection with: 1@2 with:1@3 with:1@4.
	
	self assert: expected equals: x log.!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 12:35:12'!
test05logForHeadingWithoutMovingReturnsEmptyCollection
	| marsRover expected  x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover	.

	expected := OrderedCollection new.
		
	self assert: expected equals: x log.
	! !

!methodRemoval: TestXxx #test05 stamp: 'MS 10/28/2021 12:35:12'!
test05
	| marsRover expected  x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover	.

	expected := OrderedCollection new.
		
	self assert: expected equals: x log.
	!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 12:35:48'!
test06logForHeadingWithRightCommandReturnsCorrectCollection
	 | marsRover expected x |

	marsRover :=  MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	x := self trackHeadingChangesOf: marsRover.

	marsRover process: 'r'.

	expected _ OrderedCollection with: 'East'.
	
	self assert: expected equals: x log.	
	
! !

!methodRemoval: TestXxx #test06 stamp: 'MS 10/28/2021 12:35:48'!
test06
	 | marsRover expected x |

	marsRover :=  MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	x := self trackHeadingChangesOf: marsRover.

	marsRover process: 'r'.

	expected _ OrderedCollection with: 'East'.
	
	self assert: expected equals: x log.	
	
!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 12:36:03'!
test07logForHeadingWithLeftCommandReturnsCorrectCollection
	 | marsRover expected x |

	marsRover :=  MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	x := self trackHeadingChangesOf: marsRover.

	marsRover process: 'l'.

	expected _ OrderedCollection with: 'West'.
	
	self assert: expected equals: x log.	
	
! !

!methodRemoval: TestXxx #test07 stamp: 'MS 10/28/2021 12:36:03'!
test07
	 | marsRover expected x |

	marsRover :=  MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	x := self trackHeadingChangesOf: marsRover.

	marsRover process: 'l'.

	expected _ OrderedCollection with: 'West'.
	
	self assert: expected equals: x log.	
	
!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 12:36:49'!
test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'rlrrr'.
	
	expected _ OrderedCollection with: 'East' with: 'North' with: 'East' with: 'South' with: 'West'.
	
	self assert: expected equals: x log.! !

!methodRemoval: TestXxx #test08 stamp: 'MS 10/28/2021 12:36:49'!
test08
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'rlrrr'.
	
	expected _ OrderedCollection with: 'East' with: 'North' with: 'East' with: 'South' with: 'West'.
	
	self assert: expected equals: x log.!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 12:37:09' prior: 50956189!
test09
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'rffrfbfr'.
	
	expected _ OrderedCollection with: 'East'with: 'South' with: 'West'.
	
	self assert: expected equals: x log.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 12:37:28'!
test09logForHeadingDoesNotIncludePositionChanges
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'rffrfbfr'.
	
	expected _ OrderedCollection with: 'East'with: 'South' with: 'West'.
	
	self assert: expected equals: x log.! !

!methodRemoval: TestXxx #test09 stamp: 'MS 10/28/2021 12:37:28'!
test09
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackHeadingChangesOf: marsRover.
	
	marsRover process: 'rffrfbfr'.
	
	expected _ OrderedCollection with: 'East'with: 'South' with: 'West'.
	
	self assert: expected equals: x log.!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 12:38:44'!
test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingEast.
	
	x _ self trackPositionAndHeadingChangesOf: marsRover.
		
	expected _ OrderedCollection new.
	
	self assert: expected equals: x log.! !

!methodRemoval: TestXxx #test10 stamp: 'MS 10/28/2021 12:38:44'!
test10
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingEast.
	
	x _ self trackPositionAndHeadingChangesOf: marsRover.
		
	expected _ OrderedCollection new.
	
	self assert: expected equals: x log.!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 12:39:12'!
test15logForPositionAndHeadingIncludeBothPositionAndHeadingChanges
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionAndHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	expected _ OrderedCollection with: 1@2 with: 1@3 with: 'East'.
	
	self assert: expected equals: x log.! !

!methodRemoval: TestXxx #test15 stamp: 'MS 10/28/2021 12:39:12'!
test15
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ self trackPositionAndHeadingChangesOf: marsRover.
	
	marsRover process: 'ffr'.
	
	expected _ OrderedCollection with: 1@2 with: 1@3 with: 'East'.
	
	self assert: expected equals: x log.!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 12:39:51' prior: 50957335!
test00logForPositionWithoutMovingReturnsEmptyCollection
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionLog for: marsRover .
	
	expected := OrderedCollection new.
	
	self assert: expected equals: x log.! !

!testRun: #TestXxx #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 12:39:53'!
PASSED!

!testRun: #TestXxx #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 12:39:55'!
PASSED!

!testRun: #TestXxx #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 12:40:10'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 12:40:20' prior: 50957379!
test01logForPositionWithForwardCommandReturnsCorrectCollection
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionLog for: marsRover .
	
	marsRover process: 'f'.
	
	expected _ OrderedCollection with: 1@2.
	
	self assert: expected equals: x log.
! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 12:40:24' prior: 50957406!
test02logForPositionWithBackwardCommandReturnsCorrectCollection
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionLog for: marsRover .
	
	marsRover process: 'b'.
	
	expected _ OrderedCollection with: 1@0.
	
	self assert: expected equals: x log.
! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 12:40:31' prior: 50957429!
test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionLog for: marsRover .
	
	marsRover process: 'ffbf'.
	
	expected _ OrderedCollection with: 1@2 with:1@3 with:1@2 with:1@3.
	
	self assert: expected equals: x log.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 12:40:36' prior: 50957454!
test04logForPositionDoesNotIncludeHeadingChanges
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionLog for: marsRover .
	
	marsRover process: 'ffrrb'.
	
	expected _ OrderedCollection with: 1@2 with:1@3 with:1@4.
	
	self assert: expected equals: x log.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 12:40:48' prior: 50957478!
test05logForHeadingWithoutMovingReturnsEmptyCollection
	| marsRover expected  x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverHeadingLog for: marsRover .

	expected := OrderedCollection new.
		
	self assert: expected equals: x log.
	! !

!testRun: #TestXxx #test05logForHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 12:40:50'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 12:40:59' prior: 50957499!
test06logForHeadingWithRightCommandReturnsCorrectCollection
	 | marsRover expected x |

	marsRover :=  MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	x := MarsRoverHeadingLog for: marsRover .

	marsRover process: 'r'.

	expected _ OrderedCollection with: 'East'.
	
	self assert: expected equals: x log.	
	
! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 12:41:06' prior: 50957522!
test07logForHeadingWithLeftCommandReturnsCorrectCollection
	 | marsRover expected x |

	marsRover :=  MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	x := MarsRoverHeadingLog for: marsRover .

	marsRover process: 'l'.

	expected _ OrderedCollection with: 'West'.
	
	self assert: expected equals: x log.	
	
! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 12:41:10' prior: 50957545!
test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverHeadingLog for: marsRover .
	
	marsRover process: 'rlrrr'.
	
	expected _ OrderedCollection with: 'East' with: 'North' with: 'East' with: 'South' with: 'West'.
	
	self assert: expected equals: x log.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 12:41:15' prior: 50957584!
test09logForHeadingDoesNotIncludePositionChanges
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverHeadingLog for: marsRover .
	
	marsRover process: 'rffrfbfr'.
	
	expected _ OrderedCollection with: 'East'with: 'South' with: 'West'.
	
	self assert: expected equals: x log.! !

!methodRemoval: TestXxx #trackHeadingChangesOf: stamp: 'MS 10/28/2021 12:41:33'!
trackHeadingChangesOf: aMarsRover 
		
	^MarsRoverHeadingLog for: aMarsRover.!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 12:41:58' prior: 50957608!
test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingEast.
	
	x _ MarsRoverPositionHeadingLog for: marsRover .
		
	expected _ OrderedCollection new.
	
	self assert: expected equals: x log.! !

!testRun: #TestXxx #test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 12:41:59'!
PASSED!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 12:42:18' prior: 50957629!
test15logForPositionAndHeadingIncludeBothPositionAndHeadingChanges
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionHeadingLog for: marsRover .
	
	marsRover process: 'ffr'.
	
	expected _ OrderedCollection with: 1@2 with: 1@3 with: 'East'.
	
	self assert: expected equals: x log.! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 12:43:04' prior: 50957190!
test40
	| marsRover x y expected|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionLog for: marsRover.
	y _ MarsRoverPositionLog for: marsRover.
	
	marsRover process: 'fffr'.
	
	expected _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	
	self assert: expected equals: x log.
	self assert: expected equals: y log.
	! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 12:43:14' prior: 50957175!
test50
	| marsRover x y expected|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionLog for: marsRover.
	y _ MarsRoverPositionLog for: marsRover.
	
	marsRover process: 'fffr'.
	
	expected _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	
	self assert: 1@4 equals: x getPositionTextFieldModel.
	self assert: expected equals: y log.
	! !
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 12:43:21' prior: 50957837!
test40
	| marsRover x y expected|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionLog for: marsRover.
	y _ MarsRoverHeadingLog for: marsRover.
	
	marsRover process: 'fffr'.
	
	expected _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	
	self assert: expected equals: x log.
	self assert: expected equals: y log.
	! !

!testRun: #TestXxx #test40 stamp: 'MS 10/28/2021 12:43:22'!
FAILURE!
!TestXxx methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 12:44:06' prior: 50957867!
test40
	| marsRover x y expectedx expectedy|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionLog for: marsRover.
	y _ MarsRoverHeadingLog for: marsRover.
	
	marsRover process: 'fffr'.
	
	expectedx _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	expectedy := OrderedCollection with: 'East'.
	
	self assert: expectedx equals: x log.
	self assert: expectedy equals: y log.
	! !

!testRun: #TestXxx #test40 stamp: 'MS 10/28/2021 12:44:06'!
PASSED!

!testRun: #TestXxx #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 12:44:06'!
PASSED!

!testRun: #TestXxx #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 12:44:06'!
PASSED!

!testRun: #TestXxx #test02logForPositionWithBackwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 12:44:06'!
PASSED!

!testRun: #TestXxx #test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 12:44:06'!
PASSED!

!testRun: #TestXxx #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 12:44:06'!
PASSED!

!testRun: #TestXxx #test05logForHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 12:44:06'!
PASSED!

!testRun: #TestXxx #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 12:44:06'!
PASSED!

!testRun: #TestXxx #test07logForHeadingWithLeftCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 12:44:06'!
PASSED!

!testRun: #TestXxx #test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 12:44:06'!
PASSED!

!testRun: #TestXxx #test09logForHeadingDoesNotIncludePositionChanges stamp: 'MS 10/28/2021 12:44:06'!
PASSED!

!testRun: #TestXxx #test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 12:44:06'!
PASSED!

!testRun: #TestXxx #test15logForPositionAndHeadingIncludeBothPositionAndHeadingChanges stamp: 'MS 10/28/2021 12:44:06'!
PASSED!

!testRun: #TestXxx #test19 stamp: 'MS 10/28/2021 12:44:06'!
PASSED!

!testRun: #TestXxx #test25 stamp: 'MS 10/28/2021 12:44:06'!
PASSED!

!testRun: #TestXxx #test35 stamp: 'MS 10/28/2021 12:44:06'!
PASSED!

!testRun: #TestXxx #test40 stamp: 'MS 10/28/2021 12:44:06'!
PASSED!

!testRun: #TestXxx #test50 stamp: 'MS 10/28/2021 12:44:06'!
ERROR!

!testRun: #TestXxx #test50 stamp: 'MS 10/28/2021 12:44:06'!
ERROR!

!testRun: #TestXxx #test40 stamp: 'MS 10/28/2021 12:44:11'!
PASSED!

!methodRemoval: TestXxx #trackPositionChangesOf: stamp: 'MS 10/28/2021 12:44:15'!
trackPositionChangesOf: aMarsRover 

	^MarsRoverPositionLog for: aMarsRover.!

!methodRemoval: TestXxx #trackPositionAndHeadingChangesOf: stamp: 'MS 10/28/2021 12:44:20'!
trackPositionAndHeadingChangesOf: aMarsRover 

	^MarsRoverPositionHeadingLog for: aMarsRover.!

TestCase subclass: #MarsRoverTracker
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverTracker category: 'MarsRover-WithHeading' stamp: 'MS 10/28/2021 12:47:02'!
TestCase subclass: #MarsRoverTracker
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverTracker class
	instanceVariableNames: 'marsRover'!

!classDefinition: 'MarsRoverTracker class' category: 'MarsRover-WithHeading' stamp: 'MS 10/28/2021 12:47:58'!
MarsRoverTracker class
	instanceVariableNames: 'marsRover'!

MarsRoverTracker class
	instanceVariableNames: ''!

!classDefinition: 'MarsRoverTracker class' category: 'MarsRover-WithHeading' stamp: 'MS 10/28/2021 12:48:10'!
MarsRoverTracker class
	instanceVariableNames: ''!
!MarsRoverTracker class methodsFor: 'no messages' stamp: 'MS 10/28/2021 12:48:32'!
for: aMarsRover

	self initializeWith: aMarsRover.! !
!MarsRoverTracker methodsFor: 'no messages' stamp: 'MS 10/28/2021 12:48:59'!
initializeWith: aMarsRover

	marsRover := aMarsRover.
	aMarsRover add: self.! !

MarsRoverTracker subclass: #MarsRoverStatusView
	instanceVariableNames: 'positionTextFieldModel headingTextFieldModel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverStatusView category: 'MarsRover-WithHeading' stamp: 'MS 10/28/2021 12:49:33'!
MarsRoverTracker subclass: #MarsRoverStatusView
	instanceVariableNames: 'positionTextFieldModel headingTextFieldModel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverTracker subclass: #MarsRoverLogs
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverLogs category: 'MarsRover-WithHeading' stamp: 'MS 10/28/2021 12:49:40'!
MarsRoverTracker subclass: #MarsRoverLogs
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'MS 10/28/2021 12:49:44'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'MS 10/28/2021 12:49:44'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'MS 10/28/2021 12:49:44'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'MS 10/28/2021 12:49:44'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'MS 10/28/2021 12:49:44'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'MS 10/28/2021 12:49:44'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'MS 10/28/2021 12:49:44'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'MS 10/28/2021 12:49:44'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'MS 10/28/2021 12:49:44'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'MS 10/28/2021 12:49:44'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'MS 10/28/2021 12:49:44'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'MS 10/28/2021 12:49:44'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'MS 10/28/2021 12:49:44'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'MS 10/28/2021 12:49:44'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'MS 10/28/2021 12:49:44'!
PASSED!

!testRun: #TestXxx #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 12:49:47'!
PASSED!

!testRun: #TestXxx #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 12:49:47'!
PASSED!

!testRun: #TestXxx #test02logForPositionWithBackwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 12:49:47'!
PASSED!

!testRun: #TestXxx #test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 12:49:47'!
PASSED!

!testRun: #TestXxx #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 12:49:47'!
PASSED!

!testRun: #TestXxx #test05logForHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 12:49:47'!
PASSED!

!testRun: #TestXxx #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 12:49:47'!
PASSED!

!testRun: #TestXxx #test07logForHeadingWithLeftCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 12:49:47'!
PASSED!

!testRun: #TestXxx #test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 12:49:47'!
PASSED!

!testRun: #TestXxx #test09logForHeadingDoesNotIncludePositionChanges stamp: 'MS 10/28/2021 12:49:47'!
PASSED!

!testRun: #TestXxx #test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 12:49:47'!
PASSED!

!testRun: #TestXxx #test15logForPositionAndHeadingIncludeBothPositionAndHeadingChanges stamp: 'MS 10/28/2021 12:49:47'!
PASSED!

!testRun: #TestXxx #test19 stamp: 'MS 10/28/2021 12:49:47'!
PASSED!

!testRun: #TestXxx #test25 stamp: 'MS 10/28/2021 12:49:47'!
PASSED!

!testRun: #TestXxx #test35 stamp: 'MS 10/28/2021 12:49:47'!
PASSED!

!testRun: #TestXxx #test40 stamp: 'MS 10/28/2021 12:49:47'!
PASSED!

!testRun: #TestXxx #test50 stamp: 'MS 10/28/2021 12:49:47'!
ERROR!

!testRun: #TestXxx #test50 stamp: 'MS 10/28/2021 12:49:47'!
ERROR!
!MarsRover methodsFor: 'heading' stamp: 'MS 10/28/2021 12:51:00'!
add: aTracker

	trackers add: aTracker .! !
!MarsRover methodsFor: 'heading' stamp: 'MS 10/28/2021 13:07:03' prior: 50957276!
changeHeadTo: aHeading
	
	head := aHeading.
	
	headingChangesLogger ifNotNil:[ headingChangesLogger add: aHeading printString ].
	headingChangesStatusView ifNotNil:[headingChangesStatusView headingTextFieldModel: head].
	
	"trackers do: [:aTracker | aTracker changeHeading: head printString]."! !
!MarsRover methodsFor: 'moving' stamp: 'MS 10/28/2021 13:07:40' prior: 50957213!
movePositionWith: anOffset
	
	position := position + anOffset .
	
	positionChangesLogger  ifNotNil: [positionChangesLogger add: position].
	positionChangesStatusView ifNotNil:[positionChangesStatusView positionTextFieldModel: position].
	
	
	"trackers do: [:aTracker | aTracker changePosition: position]."! !
!MarsRoverHeadingLog methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 13:22:52'!
changePosition: aPosition

	log add: aPosition .! !
!MarsRoverHeadingLog methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 13:22:53' prior: 50958182!
changePosition: aPosition

	log add: aPosition.! !
!MarsRoverPositionHeadingLog methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 13:23:03'!
changePosition: aPosition

	log add: aPosition.! !
!MarsRoverPositionHeadingLog methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 13:23:19'!
changeHeading: aHeading

	log add: aHeading.! !
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 13:23:37'!
changeHeading: aHeading

	log add: aHeading.! !

MarsRoverStatusView subclass: #MarsRoverPositionStatusView
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverPositionStatusView category: 'MarsRover-WithHeading' stamp: 'MS 10/28/2021 13:24:36'!
MarsRoverStatusView subclass: #MarsRoverPositionStatusView
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverStatusView subclass: #MarsRoverPositionAndHeadingStatusView
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverPositionAndHeadingStatusView category: 'MarsRover-WithHeading' stamp: 'MS 10/28/2021 13:24:42'!
MarsRoverStatusView subclass: #MarsRoverPositionAndHeadingStatusView
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverStatusView subclass: #MarsRoverHeadingStatusView
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingStatusView category: 'MarsRover-WithHeading' stamp: 'MS 10/28/2021 13:24:48'!
MarsRoverStatusView subclass: #MarsRoverHeadingStatusView
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!testRun: #TestXxx #test35 stamp: 'MS 10/28/2021 13:25:38'!
PASSED!

!testRun: #TestXxx #test50 stamp: 'MS 10/28/2021 13:25:40'!
ERROR!

!testRun: #TestXxx #test50 stamp: 'MS 10/28/2021 13:25:40'!
ERROR!

!classRenamed: #TestXxx as: #TestMarsRoverTracker stamp: 'MS 10/28/2021 14:13:51'!
Smalltalk renameClassNamed: #TestXxx as: #TestMarsRoverTracker!
!MarsRoverHeadingStatusView class methodsFor: 'nil' stamp: 'MS 10/28/2021 14:19:49' overrides: 16883149!
initialize

	! !

!methodRemoval: MarsRoverHeadingStatusView class #initialize stamp: 'MS 10/28/2021 14:19:56'!
initialize

	!
!MarsRoverHeadingStatusView methodsFor: 'no messages' stamp: 'MS 10/28/2021 14:20:34'!
changePosition: aPosition

	! !

!classDefinition: #MarsRoverHeadingStatusView category: 'MarsRover-WithHeading' stamp: 'MS 10/28/2021 14:21:02'!
MarsRoverStatusView subclass: #MarsRoverHeadingStatusView
	instanceVariableNames: 'window'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingStatusView methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:21:01'!
changeHeading: aHeading

	window := aHeading.

	! !
!MarsRoverHeadingStatusView methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:21:17'!
window
	
	^window.

	! !

!classDefinition: #MarsRoverPositionStatusView category: 'MarsRover-WithHeading' stamp: 'MS 10/28/2021 14:21:46'!
MarsRoverStatusView subclass: #MarsRoverPositionStatusView
	instanceVariableNames: 'window'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverPositionStatusView methodsFor: 'no messages' stamp: 'MS 10/28/2021 14:21:43'!
changeHeading: aHeading

	window := aHeading.! !

MarsRoverStatusView subclass: #MarsRoverHeadingStatusView
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingStatusView category: 'MarsRover-WithHeading' stamp: 'MS 10/28/2021 14:21:52'!
MarsRoverStatusView subclass: #MarsRoverHeadingStatusView
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverStatusView subclass: #MarsRoverPositionStatusView
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverPositionStatusView category: 'MarsRover-WithHeading' stamp: 'MS 10/28/2021 14:21:55'!
MarsRoverStatusView subclass: #MarsRoverPositionStatusView
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverTracker subclass: #MarsRoverStatusView
	instanceVariableNames: 'positionTextFieldModel headingTextFieldModel window'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverStatusView category: 'MarsRover-WithHeading' stamp: 'MS 10/28/2021 14:22:00'!
MarsRoverTracker subclass: #MarsRoverStatusView
	instanceVariableNames: 'positionTextFieldModel headingTextFieldModel window'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverPositionStatusView methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:22:17'!
changePosition: aPosition

	window := aPosition.! !
!MarsRoverPositionStatusView methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:22:21' prior: 50958300!
changeHeading: aHeading

! !
!MarsRoverPositionAndHeadingStatusView methodsFor: 'no messages' stamp: 'MS 10/28/2021 14:22:28'!
changePosition: aPosition

	window := aPosition.! !
!MarsRoverPositionAndHeadingStatusView methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:22:37'!
changeHeading: aHeading

	window := aHeading.! !
!MarsRoverPositionAndHeadingStatusView methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:22:46' overrides: 16896425!
initialize

	! !
!MarsRoverPositionAndHeadingStatusView methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:23:43' prior: 50958371 overrides: 16896425!
initialize

	! !
!MarsRoverPositionAndHeadingStatusView methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:24:58' prior: 50958376 overrides: 16896425!
initialize

	window ! !
!MarsRoverPositionAndHeadingStatusView methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:25:27' prior: 50958381 overrides: 16896425!
initialize

	window := Array new: 2.! !
!MarsRoverPositionAndHeadingStatusView methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:26:03' prior: 50958360!
changePosition: aPosition

	window at:0  put: aPosition .! !
!MarsRoverPositionAndHeadingStatusView methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:26:16' prior: 50958365!
changeHeading: aHeading

	window at: 1 put: aHeading.! !

!classRenamed: #TestMarsRoverTracker as: #MarsRoverTrackerTest stamp: 'MS 10/28/2021 14:28:11'!
Smalltalk renameClassNamed: #TestMarsRoverTracker as: #MarsRoverTrackerTest!

!testRun: #MarsRoverTrackerTest #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:28:16'!
PASSED!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:28:16'!
PASSED!

!testRun: #MarsRoverTrackerTest #test02logForPositionWithBackwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:28:16'!
PASSED!

!testRun: #MarsRoverTrackerTest #test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 14:28:16'!
PASSED!

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 14:28:16'!
PASSED!

!testRun: #MarsRoverTrackerTest #test05logForHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:28:16'!
PASSED!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:28:16'!
PASSED!

!testRun: #MarsRoverTrackerTest #test07logForHeadingWithLeftCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:28:16'!
PASSED!

!testRun: #MarsRoverTrackerTest #test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 14:28:16'!
PASSED!

!testRun: #MarsRoverTrackerTest #test09logForHeadingDoesNotIncludePositionChanges stamp: 'MS 10/28/2021 14:28:16'!
PASSED!

!testRun: #MarsRoverTrackerTest #test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:28:16'!
PASSED!

!testRun: #MarsRoverTrackerTest #test15logForPositionAndHeadingIncludeBothPositionAndHeadingChanges stamp: 'MS 10/28/2021 14:28:16'!
PASSED!

!testRun: #MarsRoverTrackerTest #test19 stamp: 'MS 10/28/2021 14:28:16'!
PASSED!

!testRun: #MarsRoverTrackerTest #test25 stamp: 'MS 10/28/2021 14:28:16'!
PASSED!

!testRun: #MarsRoverTrackerTest #test35 stamp: 'MS 10/28/2021 14:28:16'!
PASSED!

!testRun: #MarsRoverTrackerTest #test40 stamp: 'MS 10/28/2021 14:28:16'!
PASSED!

!testRun: #MarsRoverTrackerTest #test50 stamp: 'MS 10/28/2021 14:28:16'!
ERROR!

!testRun: #MarsRoverTrackerTest #test50 stamp: 'MS 10/28/2021 14:28:16'!
ERROR!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:28:51' prior: 50956611!
test19
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionStatusView with: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: 1@3 equals: x getPositionTextFieldModel.
	! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:28:57' prior: 50958476!
test19
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionStatusView for: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: 1@3 equals: x getPositionTextFieldModel.
	! !

!testRun: #MarsRoverTrackerTest #test19 stamp: 'MS 10/28/2021 14:29:02'!
ERROR!

!testRun: #MarsRoverTrackerTest #test19 stamp: 'MS 10/28/2021 14:29:02'!
ERROR!
!MarsRoverHeadingLog methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:31:00' prior: 50955177 overrides: 50958006!
initializeWith: aMarsRover

	log := OrderedCollection new.
	"aMarsRover trackHeadingChangesTo: self."! !
!MarsRoverPositionHeadingLog methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:31:10' prior: 50955169 overrides: 50958006!
initializeWith: aMarsRover

	log := OrderedCollection new.
	"aMarsRover trackPositionChangesTo: self.
	aMarsRover trackHeadingChangesTo: self."! !
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:31:21' prior: 50955075 overrides: 50958006!
initializeWith: aMarsRover

	log := OrderedCollection new.
	"aMarsRover trackPositionChangesTo: self."! !

!testRun: #MarsRoverTrackerTest #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:31:29'!
PASSED!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:31:29'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test02logForPositionWithBackwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:31:30'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 14:31:30'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 14:31:30'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test05logForHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:31:30'!
PASSED!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:31:30'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test07logForHeadingWithLeftCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:31:30'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 14:31:30'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test09logForHeadingDoesNotIncludePositionChanges stamp: 'MS 10/28/2021 14:31:30'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:31:30'!
PASSED!

!testRun: #MarsRoverTrackerTest #test15logForPositionAndHeadingIncludeBothPositionAndHeadingChanges stamp: 'MS 10/28/2021 14:31:30'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test19 stamp: 'MS 10/28/2021 14:31:30'!
ERROR!

!testRun: #MarsRoverTrackerTest #test25 stamp: 'MS 10/28/2021 14:31:30'!
PASSED!

!testRun: #MarsRoverTrackerTest #test35 stamp: 'MS 10/28/2021 14:31:30'!
PASSED!

!testRun: #MarsRoverTrackerTest #test40 stamp: 'MS 10/28/2021 14:31:30'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test50 stamp: 'MS 10/28/2021 14:31:30'!
ERROR!

!testRun: #MarsRoverTrackerTest #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:31:35'!
PASSED!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:31:37'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:31:37'!
FAILURE!
!MarsRoverTracker methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:34:02' prior: 50958006!
initializeWith: aMarsRover

	marsRover := aMarsRover.
	aMarsRover add: self.
	self subclassResponsibility.! !

!testRun: #MarsRoverTrackerTest #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:34:17'!
PASSED!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:34:19'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:34:19'!
FAILURE!
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:35:53' prior: 50958521 overrides: 50958605!
initializeWith: aMarsRover

	log := OrderedCollection new.
	aMarsRover add: self.
	"aMarsRover trackPositionChangesTo: self."! !

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:35:59'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:35:59'!
FAILURE!

!methodRemoval: MarsRoverLogs class #for: stamp: 'MS 10/28/2021 14:38:34'!
for: aMarsRover 

	^self new initializeWith: aMarsRover.!
!MarsRoverTracker class methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:38:53' prior: 50958001!
for: aMarsRover

	self initializeWith: aMarsRover.! !
!MarsRoverTracker class methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:38:58' prior: 50958647!
for: aMarsRover

	self new initializeWith: aMarsRover.! !
!MarsRoverTracker methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:39:43' prior: 50958605!
initializeWith: aMarsRover

	marsRover := aMarsRover.
	aMarsRover add: self.
	self subclassResponsibility.! !

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:39:47'!
ERROR!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:39:47'!
ERROR!
!MarsRoverHeadingLog methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:40:28' prior: 50958504 overrides: 50958658!
initializeWith: aMarsRover

	log := OrderedCollection new.
! !
!MarsRoverPositionHeadingLog methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:40:34' prior: 50958512 overrides: 50958658!
initializeWith: aMarsRover

	log := OrderedCollection new.

! !
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:40:38' prior: 50958626 overrides: 50958658!
initializeWith: aMarsRover

	log := OrderedCollection new.
	aMarsRover add: self.
! !
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:40:41' prior: 50958687 overrides: 50958658!
initializeWith: aMarsRover

	log := OrderedCollection new.

! !
!MarsRoverTracker methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:43:16' prior: 50958658!
initializeWith: aMarsRover

	marsRover := aMarsRover.
	aMarsRover add: self.
	self initializeInstances.! !
!MarsRoverTracker methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:43:30'!
initializeInstances

	self subclassResponsibility .! !
!MarsRoverLogs methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:43:54' overrides: 50958706!
initializeInstances

	log := OrderedCollection new.! !

!methodRemoval: MarsRoverHeadingLog #initializeWith: stamp: 'MS 10/28/2021 14:43:59'!
initializeWith: aMarsRover

	log := OrderedCollection new.
!

!methodRemoval: MarsRoverPositionHeadingLog #initializeWith: stamp: 'MS 10/28/2021 14:44:02'!
initializeWith: aMarsRover

	log := OrderedCollection new.

!

!methodRemoval: MarsRoverPositionLog #initializeWith: stamp: 'MS 10/28/2021 14:44:06'!
initializeWith: aMarsRover

	log := OrderedCollection new.

!

!methodRemoval: MarsRoverStatusView #positionTextFieldModel: stamp: 'MS 10/28/2021 14:44:23'!
positionTextFieldModel: aPosition
	
	positionTextFieldModel _ aPosition.!

!methodRemoval: MarsRoverStatusView #headingTextFieldModel: stamp: 'MS 10/28/2021 14:44:25'!
headingTextFieldModel: aMarsRoverHeading
	
	headingTextFieldModel _ aMarsRoverHeading.!

!methodRemoval: MarsRoverStatusView #getPositionTextFieldModel stamp: 'MS 10/28/2021 14:44:26'!
getPositionTextFieldModel

	^ positionTextFieldModel.!

!methodRemoval: MarsRoverStatusView #getHeadingTextFieldModel stamp: 'MS 10/28/2021 14:44:27'!
getHeadingTextFieldModel

	^ headingTextFieldModel.!
!MarsRoverStatusView methodsFor: 'unclassified' stamp: 'MS 10/28/2021 14:44:42' overrides: 50958706!
initializeInstances
	
	self subclassResponsibility .
	! !
!MarsRoverStatusView methodsFor: 'unclassified' stamp: 'MS 10/28/2021 14:44:43' prior: 50958751 overrides: 50958706!
initializeInstances
	
	self subclassResponsibility.
	! !
!MarsRoverPositionAndHeadingStatusView methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:47:03' overrides: 50958757!
initializeInstances

	window := Array new: 2.! !

!methodRemoval: MarsRoverPositionAndHeadingStatusView #initialize stamp: 'MS 10/28/2021 14:49:12'!
initialize

	window := Array new: 2.!

!testRun: #MarsRoverTrackerTest #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:49:18'!
ERROR!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:49:18'!
ERROR!

!testRun: #MarsRoverTrackerTest #test02logForPositionWithBackwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:49:18'!
ERROR!

!testRun: #MarsRoverTrackerTest #test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 14:49:18'!
ERROR!

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 14:49:18'!
ERROR!

!testRun: #MarsRoverTrackerTest #test05logForHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:49:18'!
ERROR!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:49:18'!
ERROR!

!testRun: #MarsRoverTrackerTest #test07logForHeadingWithLeftCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:49:18'!
ERROR!

!testRun: #MarsRoverTrackerTest #test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 14:49:18'!
ERROR!

!testRun: #MarsRoverTrackerTest #test09logForHeadingDoesNotIncludePositionChanges stamp: 'MS 10/28/2021 14:49:18'!
ERROR!

!testRun: #MarsRoverTrackerTest #test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:49:18'!
ERROR!

!testRun: #MarsRoverTrackerTest #test15logForPositionAndHeadingIncludeBothPositionAndHeadingChanges stamp: 'MS 10/28/2021 14:49:18'!
ERROR!

!testRun: #MarsRoverTrackerTest #test19 stamp: 'MS 10/28/2021 14:49:18'!
ERROR!

!testRun: #MarsRoverTrackerTest #test25 stamp: 'MS 10/28/2021 14:49:18'!
ERROR!

!testRun: #MarsRoverTrackerTest #test35 stamp: 'MS 10/28/2021 14:49:18'!
ERROR!

!testRun: #MarsRoverTrackerTest #test40 stamp: 'MS 10/28/2021 14:49:18'!
ERROR!

!testRun: #MarsRoverTrackerTest #test50 stamp: 'MS 10/28/2021 14:49:18'!
ERROR!

!testRun: #MarsRoverTrackerTest #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:49:23'!
ERROR!

!testRun: #MarsRoverTrackerTest #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:49:23'!
ERROR!
!MarsRoverTracker class methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:51:15' prior: 50958653!
for: aMarsRover

	^self new initializeWith: aMarsRover.! !

!testRun: #MarsRoverTrackerTest #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:51:18'!
PASSED!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:51:18'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test02logForPositionWithBackwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:51:18'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 14:51:18'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 14:51:18'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test05logForHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:51:18'!
PASSED!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:51:18'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test07logForHeadingWithLeftCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:51:18'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 14:51:18'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test09logForHeadingDoesNotIncludePositionChanges stamp: 'MS 10/28/2021 14:51:18'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:51:18'!
PASSED!

!testRun: #MarsRoverTrackerTest #test15logForPositionAndHeadingIncludeBothPositionAndHeadingChanges stamp: 'MS 10/28/2021 14:51:18'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test19 stamp: 'MS 10/28/2021 14:51:18'!
ERROR!

!testRun: #MarsRoverTrackerTest #test25 stamp: 'MS 10/28/2021 14:51:18'!
ERROR!

!testRun: #MarsRoverTrackerTest #test35 stamp: 'MS 10/28/2021 14:51:18'!
ERROR!

!testRun: #MarsRoverTrackerTest #test40 stamp: 'MS 10/28/2021 14:51:18'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test50 stamp: 'MS 10/28/2021 14:51:18'!
ERROR!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:51:26'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:51:26'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'MS 10/28/2021 14:52:28' prior: 50958169!
movePositionWith: anOffset
	
	position := position + anOffset .
	"
	positionChangesLogger  ifNotNil: [positionChangesLogger add: position].
	positionChangesStatusView ifNotNil:[positionChangesStatusView positionTextFieldModel: position].
	"
	
	trackers do: [:aTracker | aTracker changePosition: position].! !
!MarsRover methodsFor: 'heading' stamp: 'MS 10/28/2021 14:52:40' prior: 50958157!
changeHeadTo: aHeading
"	
	head := aHeading.
	
	headingChangesLogger ifNotNil:[ headingChangesLogger add: aHeading printString ].
	headingChangesStatusView ifNotNil:[headingChangesStatusView headingTextFieldModel: head].
	"
	trackers do: [:aTracker | aTracker changeHeading: head printString].! !

!testRun: #MarsRoverTrackerTest #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:52:43'!
PASSED!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:52:43'!
ERROR!

!testRun: #MarsRoverTrackerTest #test02logForPositionWithBackwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:52:43'!
ERROR!

!testRun: #MarsRoverTrackerTest #test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 14:52:43'!
ERROR!

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 14:52:43'!
ERROR!

!testRun: #MarsRoverTrackerTest #test05logForHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:52:43'!
PASSED!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:52:43'!
ERROR!

!testRun: #MarsRoverTrackerTest #test07logForHeadingWithLeftCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:52:43'!
ERROR!

!testRun: #MarsRoverTrackerTest #test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 14:52:43'!
ERROR!

!testRun: #MarsRoverTrackerTest #test09logForHeadingDoesNotIncludePositionChanges stamp: 'MS 10/28/2021 14:52:43'!
ERROR!

!testRun: #MarsRoverTrackerTest #test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:52:43'!
PASSED!

!testRun: #MarsRoverTrackerTest #test15logForPositionAndHeadingIncludeBothPositionAndHeadingChanges stamp: 'MS 10/28/2021 14:52:43'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test19 stamp: 'MS 10/28/2021 14:52:43'!
ERROR!

!testRun: #MarsRoverTrackerTest #test25 stamp: 'MS 10/28/2021 14:52:43'!
ERROR!

!testRun: #MarsRoverTrackerTest #test35 stamp: 'MS 10/28/2021 14:52:43'!
ERROR!

!testRun: #MarsRoverTrackerTest #test40 stamp: 'MS 10/28/2021 14:52:43'!
ERROR!

!testRun: #MarsRoverTrackerTest #test50 stamp: 'MS 10/28/2021 14:52:43'!
ERROR!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:52:47'!
ERROR!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:52:47'!
ERROR!
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:53:17' prior: 50958202!
changeHeading: aHeading

	! !
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:53:18'!
changePosition: aPosition

	log add: aPosition.! !

!testRun: #MarsRoverTrackerTest #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:53:21'!
PASSED!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:53:21'!
PASSED!

!testRun: #MarsRoverTrackerTest #test02logForPositionWithBackwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:53:21'!
PASSED!

!testRun: #MarsRoverTrackerTest #test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 14:53:21'!
PASSED!

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 14:53:21'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test05logForHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:53:21'!
PASSED!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:53:21'!
ERROR!

!testRun: #MarsRoverTrackerTest #test07logForHeadingWithLeftCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:53:21'!
ERROR!

!testRun: #MarsRoverTrackerTest #test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 14:53:21'!
ERROR!

!testRun: #MarsRoverTrackerTest #test09logForHeadingDoesNotIncludePositionChanges stamp: 'MS 10/28/2021 14:53:21'!
ERROR!

!testRun: #MarsRoverTrackerTest #test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:53:21'!
PASSED!

!testRun: #MarsRoverTrackerTest #test15logForPositionAndHeadingIncludeBothPositionAndHeadingChanges stamp: 'MS 10/28/2021 14:53:21'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test19 stamp: 'MS 10/28/2021 14:53:21'!
ERROR!

!testRun: #MarsRoverTrackerTest #test25 stamp: 'MS 10/28/2021 14:53:21'!
ERROR!

!testRun: #MarsRoverTrackerTest #test35 stamp: 'MS 10/28/2021 14:53:21'!
ERROR!

!testRun: #MarsRoverTrackerTest #test40 stamp: 'MS 10/28/2021 14:53:21'!
ERROR!

!testRun: #MarsRoverTrackerTest #test50 stamp: 'MS 10/28/2021 14:53:21'!
ERROR!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:53:25'!
ERROR!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:53:25'!
ERROR!
!MarsRoverHeadingLog methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:53:41'!
changeHeading: aHeading

	log add: aHeading.! !

!testRun: #MarsRoverTrackerTest #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:53:43'!
PASSED!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:53:43'!
PASSED!

!testRun: #MarsRoverTrackerTest #test02logForPositionWithBackwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:53:43'!
PASSED!

!testRun: #MarsRoverTrackerTest #test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 14:53:43'!
PASSED!

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 14:53:43'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test05logForHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:53:43'!
PASSED!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:53:43'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test07logForHeadingWithLeftCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:53:43'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 14:53:43'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test09logForHeadingDoesNotIncludePositionChanges stamp: 'MS 10/28/2021 14:53:43'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:53:43'!
PASSED!

!testRun: #MarsRoverTrackerTest #test15logForPositionAndHeadingIncludeBothPositionAndHeadingChanges stamp: 'MS 10/28/2021 14:53:43'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test19 stamp: 'MS 10/28/2021 14:53:43'!
ERROR!

!testRun: #MarsRoverTrackerTest #test25 stamp: 'MS 10/28/2021 14:53:43'!
ERROR!

!testRun: #MarsRoverTrackerTest #test35 stamp: 'MS 10/28/2021 14:53:43'!
ERROR!

!testRun: #MarsRoverTrackerTest #test40 stamp: 'MS 10/28/2021 14:53:43'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test50 stamp: 'MS 10/28/2021 14:53:43'!
ERROR!

!testRun: #MarsRoverTrackerTest #test09logForHeadingDoesNotIncludePositionChanges stamp: 'MS 10/28/2021 14:53:47'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test09logForHeadingDoesNotIncludePositionChanges stamp: 'MS 10/28/2021 14:53:47'!
FAILURE!
!MarsRoverHeadingLog methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:54:21' prior: 50958187!
changePosition: aPosition
! !

!testRun: #MarsRoverTrackerTest #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:54:24'!
PASSED!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:54:24'!
PASSED!

!testRun: #MarsRoverTrackerTest #test02logForPositionWithBackwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:54:24'!
PASSED!

!testRun: #MarsRoverTrackerTest #test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 14:54:24'!
PASSED!

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 14:54:24'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test05logForHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:54:24'!
PASSED!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:54:24'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test07logForHeadingWithLeftCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:54:24'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 14:54:24'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test09logForHeadingDoesNotIncludePositionChanges stamp: 'MS 10/28/2021 14:54:24'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:54:24'!
PASSED!

!testRun: #MarsRoverTrackerTest #test15logForPositionAndHeadingIncludeBothPositionAndHeadingChanges stamp: 'MS 10/28/2021 14:54:24'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test19 stamp: 'MS 10/28/2021 14:54:24'!
ERROR!

!testRun: #MarsRoverTrackerTest #test25 stamp: 'MS 10/28/2021 14:54:24'!
ERROR!

!testRun: #MarsRoverTrackerTest #test35 stamp: 'MS 10/28/2021 14:54:24'!
ERROR!

!testRun: #MarsRoverTrackerTest #test40 stamp: 'MS 10/28/2021 14:54:24'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test50 stamp: 'MS 10/28/2021 14:54:24'!
ERROR!

!testRun: #MarsRoverTrackerTest #test19 stamp: 'MS 10/28/2021 14:54:29'!
ERROR!

!testRun: #MarsRoverTrackerTest #test19 stamp: 'MS 10/28/2021 14:54:29'!
ERROR!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:54:38' prior: 50958487!
test19
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionStatusView for: marsRover.
	
	marsRover process: 'ffr'.
	
	self assert: 1@3 equals: x window.
	! !

!testRun: #MarsRoverTrackerTest #test19 stamp: 'MS 10/28/2021 14:54:39'!
ERROR!
!MarsRoverHeadingStatusView methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:55:27' overrides: 50958757!
initializeInstances
	! !
!MarsRoverPositionStatusView methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:55:33' overrides: 50958757!
initializeInstances
! !

!testRun: #MarsRoverTrackerTest #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:55:35'!
PASSED!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:55:35'!
PASSED!

!testRun: #MarsRoverTrackerTest #test02logForPositionWithBackwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:55:35'!
PASSED!

!testRun: #MarsRoverTrackerTest #test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 14:55:35'!
PASSED!

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 14:55:35'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test05logForHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:55:35'!
PASSED!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:55:35'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test07logForHeadingWithLeftCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:55:35'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 14:55:35'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test09logForHeadingDoesNotIncludePositionChanges stamp: 'MS 10/28/2021 14:55:35'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:55:35'!
PASSED!

!testRun: #MarsRoverTrackerTest #test15logForPositionAndHeadingIncludeBothPositionAndHeadingChanges stamp: 'MS 10/28/2021 14:55:35'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test19 stamp: 'MS 10/28/2021 14:55:35'!
ERROR!

!testRun: #MarsRoverTrackerTest #test25 stamp: 'MS 10/28/2021 14:55:35'!
ERROR!

!testRun: #MarsRoverTrackerTest #test35 stamp: 'MS 10/28/2021 14:55:35'!
ERROR!

!testRun: #MarsRoverTrackerTest #test40 stamp: 'MS 10/28/2021 14:55:35'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test50 stamp: 'MS 10/28/2021 14:55:35'!
ERROR!

!testRun: #MarsRoverTrackerTest #test19 stamp: 'MS 10/28/2021 14:55:45'!
ERROR!

!testRun: #MarsRoverTrackerTest #test19 stamp: 'MS 10/28/2021 14:55:45'!
ERROR!

!methodRemoval: MarsRoverHeadingStatusView #window stamp: 'MS 10/28/2021 14:56:00'!
window
	
	^window.

	!
!MarsRoverStatusView methodsFor: 'unclassified' stamp: 'MS 10/28/2021 14:56:09'!
window

	^window.! !

!testRun: #MarsRoverTrackerTest #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:56:13'!
PASSED!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:56:13'!
PASSED!

!testRun: #MarsRoverTrackerTest #test02logForPositionWithBackwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:56:13'!
PASSED!

!testRun: #MarsRoverTrackerTest #test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 14:56:13'!
PASSED!

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 14:56:13'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test05logForHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:56:13'!
PASSED!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:56:13'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test07logForHeadingWithLeftCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:56:13'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 14:56:13'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test09logForHeadingDoesNotIncludePositionChanges stamp: 'MS 10/28/2021 14:56:13'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:56:13'!
PASSED!

!testRun: #MarsRoverTrackerTest #test15logForPositionAndHeadingIncludeBothPositionAndHeadingChanges stamp: 'MS 10/28/2021 14:56:13'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test19 stamp: 'MS 10/28/2021 14:56:13'!
PASSED!

!testRun: #MarsRoverTrackerTest #test25 stamp: 'MS 10/28/2021 14:56:13'!
ERROR!

!testRun: #MarsRoverTrackerTest #test35 stamp: 'MS 10/28/2021 14:56:13'!
ERROR!

!testRun: #MarsRoverTrackerTest #test40 stamp: 'MS 10/28/2021 14:56:13'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test50 stamp: 'MS 10/28/2021 14:56:13'!
ERROR!

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 14:56:21'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 14:56:21'!
FAILURE!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:56:48' prior: 50957718!
test04logForPositionDoesNotIncludeHeadingChanges
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionLog for: marsRover .
	
	marsRover process: 'ffrrb'.
	
	expected _ OrderedCollection with: 1@2 with:1@3 with:1@2.
	
	self assert: expected equals: x log.! !

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 14:56:55'!
PASSED!

!testRun: #MarsRoverTrackerTest #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:56:55'!
PASSED!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:56:55'!
PASSED!

!testRun: #MarsRoverTrackerTest #test02logForPositionWithBackwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:56:55'!
PASSED!

!testRun: #MarsRoverTrackerTest #test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 14:56:55'!
PASSED!

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 14:56:55'!
PASSED!

!testRun: #MarsRoverTrackerTest #test05logForHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:56:55'!
PASSED!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:56:55'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test07logForHeadingWithLeftCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:56:55'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 14:56:55'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test09logForHeadingDoesNotIncludePositionChanges stamp: 'MS 10/28/2021 14:56:55'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:56:55'!
PASSED!

!testRun: #MarsRoverTrackerTest #test15logForPositionAndHeadingIncludeBothPositionAndHeadingChanges stamp: 'MS 10/28/2021 14:56:55'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test19 stamp: 'MS 10/28/2021 14:56:55'!
PASSED!

!testRun: #MarsRoverTrackerTest #test25 stamp: 'MS 10/28/2021 14:56:55'!
ERROR!

!testRun: #MarsRoverTrackerTest #test35 stamp: 'MS 10/28/2021 14:56:55'!
ERROR!

!testRun: #MarsRoverTrackerTest #test40 stamp: 'MS 10/28/2021 14:56:55'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test50 stamp: 'MS 10/28/2021 14:56:55'!
ERROR!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:57:01'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:57:01'!
FAILURE!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 14:57:13' prior: 50959422!
test04logForPositionDoesNotIncludeHeadingChanges
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionLog for: marsRover .
	
	marsRover process: 'ffrrb'.
	
	expected _ OrderedCollection with: 1@2 with:1@3 with:1@4.
	
	self assert: expected equals: x log.! !

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 14:57:18'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:57:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:57:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test02logForPositionWithBackwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:57:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 14:57:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 14:57:50'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test05logForHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:57:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:57:50'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test07logForHeadingWithLeftCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:57:50'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 14:57:50'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test09logForHeadingDoesNotIncludePositionChanges stamp: 'MS 10/28/2021 14:57:50'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 14:57:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test15logForPositionAndHeadingIncludeBothPositionAndHeadingChanges stamp: 'MS 10/28/2021 14:57:50'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test19 stamp: 'MS 10/28/2021 14:57:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test25 stamp: 'MS 10/28/2021 14:57:50'!
ERROR!

!testRun: #MarsRoverTrackerTest #test35 stamp: 'MS 10/28/2021 14:57:50'!
ERROR!

!testRun: #MarsRoverTrackerTest #test40 stamp: 'MS 10/28/2021 14:57:50'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test50 stamp: 'MS 10/28/2021 14:57:50'!
ERROR!

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 14:57:59'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 14:57:59'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:58:48'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 14:58:48'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'MS 10/28/2021 15:01:50' prior: 50958935!
changeHeadTo: aHeading

	head := aHeading.
	"
	headingChangesLogger ifNotNil:[ headingChangesLogger add: aHeading printString ].
	headingChangesStatusView ifNotNil:[headingChangesStatusView headingTextFieldModel: head].
	"
	trackers do: [:aTracker | aTracker changeHeading: head printString].! !

!testRun: #MarsRoverTrackerTest #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 15:01:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:01:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test02logForPositionWithBackwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:01:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 15:01:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 15:01:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test05logForHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 15:01:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:01:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test07logForHeadingWithLeftCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:01:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 15:01:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test09logForHeadingDoesNotIncludePositionChanges stamp: 'MS 10/28/2021 15:01:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 15:01:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test15logForPositionAndHeadingIncludeBothPositionAndHeadingChanges stamp: 'MS 10/28/2021 15:01:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test19 stamp: 'MS 10/28/2021 15:01:53'!
PASSED!

!testRun: #MarsRoverTrackerTest #test25 stamp: 'MS 10/28/2021 15:01:53'!
ERROR!

!testRun: #MarsRoverTrackerTest #test35 stamp: 'MS 10/28/2021 15:01:53'!
ERROR!

!testRun: #MarsRoverTrackerTest #test40 stamp: 'MS 10/28/2021 15:01:53'!
PASSED!

!testRun: #MarsRoverTrackerTest #test50 stamp: 'MS 10/28/2021 15:01:53'!
ERROR!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 15:02:26' prior: 50956521!
test25
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverHeadingStatusView for: marsRover .
	
	marsRover process: 'ffr'.
	
	self assert: 'East' equals: x getHeadingTextFieldModel printString.
	! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 15:02:38' prior: 50959686!
test25
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverHeadingStatusView for: marsRover .
	
	marsRover process: 'ffr'.
	
	self assert: 'East' equals: x window.
	! !

!testRun: #MarsRoverTrackerTest #test25 stamp: 'MS 10/28/2021 15:02:39'!
PASSED!

!testRun: #MarsRoverTrackerTest #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 15:02:39'!
PASSED!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:02:39'!
PASSED!

!testRun: #MarsRoverTrackerTest #test02logForPositionWithBackwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:02:39'!
PASSED!

!testRun: #MarsRoverTrackerTest #test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 15:02:39'!
PASSED!

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 15:02:39'!
PASSED!

!testRun: #MarsRoverTrackerTest #test05logForHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 15:02:39'!
PASSED!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:02:39'!
PASSED!

!testRun: #MarsRoverTrackerTest #test07logForHeadingWithLeftCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:02:39'!
PASSED!

!testRun: #MarsRoverTrackerTest #test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 15:02:39'!
PASSED!

!testRun: #MarsRoverTrackerTest #test09logForHeadingDoesNotIncludePositionChanges stamp: 'MS 10/28/2021 15:02:39'!
PASSED!

!testRun: #MarsRoverTrackerTest #test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 15:02:39'!
PASSED!

!testRun: #MarsRoverTrackerTest #test15logForPositionAndHeadingIncludeBothPositionAndHeadingChanges stamp: 'MS 10/28/2021 15:02:39'!
PASSED!

!testRun: #MarsRoverTrackerTest #test19 stamp: 'MS 10/28/2021 15:02:39'!
PASSED!

!testRun: #MarsRoverTrackerTest #test25 stamp: 'MS 10/28/2021 15:02:39'!
PASSED!

!testRun: #MarsRoverTrackerTest #test35 stamp: 'MS 10/28/2021 15:02:39'!
ERROR!

!testRun: #MarsRoverTrackerTest #test40 stamp: 'MS 10/28/2021 15:02:39'!
PASSED!

!testRun: #MarsRoverTrackerTest #test50 stamp: 'MS 10/28/2021 15:02:39'!
ERROR!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 15:03:08' prior: 50959252!
test19
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionStatusView for: marsRover.
	
	marsRover process: 'ffbfbbfflrrr'.
	
	self assert: 1@3 equals: x window.
	! !

!testRun: #MarsRoverTrackerTest #test19 stamp: 'MS 10/28/2021 15:03:09'!
PASSED!

!testRun: #MarsRoverTrackerTest #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 15:03:09'!
PASSED!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:03:09'!
PASSED!

!testRun: #MarsRoverTrackerTest #test02logForPositionWithBackwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:03:09'!
PASSED!

!testRun: #MarsRoverTrackerTest #test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 15:03:09'!
PASSED!

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 15:03:09'!
PASSED!

!testRun: #MarsRoverTrackerTest #test05logForHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 15:03:09'!
PASSED!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:03:09'!
PASSED!

!testRun: #MarsRoverTrackerTest #test07logForHeadingWithLeftCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:03:09'!
PASSED!

!testRun: #MarsRoverTrackerTest #test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 15:03:09'!
PASSED!

!testRun: #MarsRoverTrackerTest #test09logForHeadingDoesNotIncludePositionChanges stamp: 'MS 10/28/2021 15:03:09'!
PASSED!

!testRun: #MarsRoverTrackerTest #test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 15:03:09'!
PASSED!

!testRun: #MarsRoverTrackerTest #test15logForPositionAndHeadingIncludeBothPositionAndHeadingChanges stamp: 'MS 10/28/2021 15:03:09'!
PASSED!

!testRun: #MarsRoverTrackerTest #test19 stamp: 'MS 10/28/2021 15:03:09'!
PASSED!

!testRun: #MarsRoverTrackerTest #test25 stamp: 'MS 10/28/2021 15:03:09'!
PASSED!

!testRun: #MarsRoverTrackerTest #test35 stamp: 'MS 10/28/2021 15:03:09'!
ERROR!

!testRun: #MarsRoverTrackerTest #test40 stamp: 'MS 10/28/2021 15:03:09'!
PASSED!

!testRun: #MarsRoverTrackerTest #test50 stamp: 'MS 10/28/2021 15:03:09'!
ERROR!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 15:03:24' prior: 50959697!
test25
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverHeadingStatusView for: marsRover .
	
	marsRover process: 'fflrlrbbflbr'.
	
	self assert: 'East' equals: x window.
	! !

!testRun: #MarsRoverTrackerTest #test25 stamp: 'MS 10/28/2021 15:03:29'!
FAILURE!

!testRun: #MarsRoverTrackerTest #test25 stamp: 'MS 10/28/2021 15:03:29'!
FAILURE!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 15:03:44' prior: 50959851!
test25
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverHeadingStatusView for: marsRover .
	
	marsRover process: 'fflrlrbbflbrr'.
	
	self assert: 'East' equals: x window.
	! !

!testRun: #MarsRoverTrackerTest #test25 stamp: 'MS 10/28/2021 15:03:44'!
PASSED!

!testRun: #MarsRoverTrackerTest #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 15:03:44'!
PASSED!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:03:44'!
PASSED!

!testRun: #MarsRoverTrackerTest #test02logForPositionWithBackwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:03:44'!
PASSED!

!testRun: #MarsRoverTrackerTest #test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 15:03:44'!
PASSED!

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 15:03:44'!
PASSED!

!testRun: #MarsRoverTrackerTest #test05logForHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 15:03:44'!
PASSED!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:03:44'!
PASSED!

!testRun: #MarsRoverTrackerTest #test07logForHeadingWithLeftCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:03:44'!
PASSED!

!testRun: #MarsRoverTrackerTest #test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 15:03:44'!
PASSED!

!testRun: #MarsRoverTrackerTest #test09logForHeadingDoesNotIncludePositionChanges stamp: 'MS 10/28/2021 15:03:44'!
PASSED!

!testRun: #MarsRoverTrackerTest #test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 15:03:44'!
PASSED!

!testRun: #MarsRoverTrackerTest #test15logForPositionAndHeadingIncludeBothPositionAndHeadingChanges stamp: 'MS 10/28/2021 15:03:44'!
PASSED!

!testRun: #MarsRoverTrackerTest #test19 stamp: 'MS 10/28/2021 15:03:44'!
PASSED!

!testRun: #MarsRoverTrackerTest #test25 stamp: 'MS 10/28/2021 15:03:44'!
PASSED!

!testRun: #MarsRoverTrackerTest #test35 stamp: 'MS 10/28/2021 15:03:44'!
ERROR!

!testRun: #MarsRoverTrackerTest #test40 stamp: 'MS 10/28/2021 15:03:44'!
PASSED!

!testRun: #MarsRoverTrackerTest #test50 stamp: 'MS 10/28/2021 15:03:44'!
ERROR!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 15:04:28' prior: 50956683!
test35
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionAndHeadingStatusView for: marsRover.
	
	marsRover process: 'ffbfbflrllrrr'.
	
	self assert: 1@3 equals: x getPositionTextFieldModel .
	self assert: 'East' equals: x getHeadingTextFieldModel printString.
	! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 15:05:12' prior: 50959944!
test35
	| marsRover x expected |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionAndHeadingStatusView for: marsRover.
	
	marsRover process: 'ffbfbflrllrrr'.
	
	expected := Array with: 1@3 with: 'East'.
	
	self assert: 1@3 equals: x getPositionTextFieldModel .
	self assert: 'East' equals: x getHeadingTextFieldModel printString.
	! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 15:05:29' prior: 50959958!
test35
	| marsRover x expected |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionAndHeadingStatusView for: marsRover.
	
	marsRover process: 'ffbfbflrllrrr'.
	
	expected := Array with: 1@3 with: 'East'.
	
	self assert: expected equals: x window.! !

!testRun: #MarsRoverTrackerTest #test35 stamp: 'MS 10/28/2021 15:05:30'!
ERROR!

!testRun: #MarsRoverTrackerTest #test35 stamp: 'MS 10/28/2021 15:05:35'!
ERROR!

!testRun: #MarsRoverTrackerTest #test35 stamp: 'MS 10/28/2021 15:05:35'!
ERROR!
!MarsRoverPositionAndHeadingStatusView methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 15:05:54' prior: 50958399!
changeHeading: aHeading

	window at: 2 put: aHeading.! !
!MarsRoverPositionAndHeadingStatusView methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 15:05:57' prior: 50958393!
changePosition: aPosition

	window at: 1  put: aPosition .! !

!testRun: #MarsRoverTrackerTest #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 15:05:59'!
PASSED!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:05:59'!
PASSED!

!testRun: #MarsRoverTrackerTest #test02logForPositionWithBackwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:05:59'!
PASSED!

!testRun: #MarsRoverTrackerTest #test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 15:05:59'!
PASSED!

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 15:05:59'!
PASSED!

!testRun: #MarsRoverTrackerTest #test05logForHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 15:05:59'!
PASSED!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:05:59'!
PASSED!

!testRun: #MarsRoverTrackerTest #test07logForHeadingWithLeftCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:05:59'!
PASSED!

!testRun: #MarsRoverTrackerTest #test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 15:05:59'!
PASSED!

!testRun: #MarsRoverTrackerTest #test09logForHeadingDoesNotIncludePositionChanges stamp: 'MS 10/28/2021 15:05:59'!
PASSED!

!testRun: #MarsRoverTrackerTest #test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 15:05:59'!
PASSED!

!testRun: #MarsRoverTrackerTest #test15logForPositionAndHeadingIncludeBothPositionAndHeadingChanges stamp: 'MS 10/28/2021 15:05:59'!
PASSED!

!testRun: #MarsRoverTrackerTest #test19 stamp: 'MS 10/28/2021 15:05:59'!
PASSED!

!testRun: #MarsRoverTrackerTest #test25 stamp: 'MS 10/28/2021 15:05:59'!
PASSED!

!testRun: #MarsRoverTrackerTest #test35 stamp: 'MS 10/28/2021 15:05:59'!
PASSED!

!testRun: #MarsRoverTrackerTest #test40 stamp: 'MS 10/28/2021 15:05:59'!
PASSED!

!testRun: #MarsRoverTrackerTest #test50 stamp: 'MS 10/28/2021 15:05:59'!
ERROR!

!testRun: #MarsRoverTrackerTest #test50 stamp: 'MS 10/28/2021 15:06:00'!
ERROR!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 15:06:45' prior: 50957852!
test50
	| marsRover x y expected|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionLog for: marsRover.
	y _ MarsRoverPositionLog for: marsRover.
	
	marsRover process: 'fffr'.
	
	expected _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	
	self assert: expected equals: x log.
	self assert: expected equals: y log.
	! !

!testRun: #MarsRoverTrackerTest #test50 stamp: 'MS 10/28/2021 15:06:46'!
PASSED!

!testRun: #MarsRoverTrackerTest #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 15:06:46'!
PASSED!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:06:46'!
PASSED!

!testRun: #MarsRoverTrackerTest #test02logForPositionWithBackwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:06:46'!
PASSED!

!testRun: #MarsRoverTrackerTest #test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 15:06:46'!
PASSED!

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 15:06:46'!
PASSED!

!testRun: #MarsRoverTrackerTest #test05logForHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 15:06:46'!
PASSED!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:06:46'!
PASSED!

!testRun: #MarsRoverTrackerTest #test07logForHeadingWithLeftCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:06:46'!
PASSED!

!testRun: #MarsRoverTrackerTest #test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 15:06:46'!
PASSED!

!testRun: #MarsRoverTrackerTest #test09logForHeadingDoesNotIncludePositionChanges stamp: 'MS 10/28/2021 15:06:46'!
PASSED!

!testRun: #MarsRoverTrackerTest #test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 15:06:46'!
PASSED!

!testRun: #MarsRoverTrackerTest #test15logForPositionAndHeadingIncludeBothPositionAndHeadingChanges stamp: 'MS 10/28/2021 15:06:46'!
PASSED!

!testRun: #MarsRoverTrackerTest #test19 stamp: 'MS 10/28/2021 15:06:46'!
PASSED!

!testRun: #MarsRoverTrackerTest #test25 stamp: 'MS 10/28/2021 15:06:46'!
PASSED!

!testRun: #MarsRoverTrackerTest #test35 stamp: 'MS 10/28/2021 15:06:46'!
PASSED!

!testRun: #MarsRoverTrackerTest #test40 stamp: 'MS 10/28/2021 15:06:46'!
PASSED!

!testRun: #MarsRoverTrackerTest #test50 stamp: 'MS 10/28/2021 15:06:46'!
PASSED!

!methodRemoval: MarsRoverTrackerTest #trackInStatusViewHeadingChangesOf: stamp: 'MS 10/28/2021 15:06:56'!
trackInStatusViewHeadingChangesOf: aMarsRover 
	|x|
	
	x _ MarsRoverStatusView new.
	aMarsRover trackHeadingChangesToStatusView: x.
	
	^x.!

!methodRemoval: MarsRoverTrackerTest #trackInStatusViewPositionAndHeadingChangesOf: stamp: 'MS 10/28/2021 15:06:57'!
trackInStatusViewPositionAndHeadingChangesOf: aMarsRover 
	| x |
	
	x _ MarsRoverStatusView new.
	
	aMarsRover  trackPositionAndHeadingChangesToStatusView: x.
	
	^ x.!

!methodRemoval: MarsRoverTrackerTest #trackInStatusViewPositionChangesOf: stamp: 'MS 10/28/2021 15:06:58'!
trackInStatusViewPositionChangesOf: aMarsRover 
	|x|
	
	x _ MarsRoverStatusView new.
	aMarsRover  trackPositionChangesToStatusView: x.
	
	^ x.!

MarsRoverTracker subclass: #MarsRoverStatusView
	instanceVariableNames: 'window'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverStatusView category: 'MarsRover-WithHeading' stamp: 'MS 10/28/2021 15:07:08'!
MarsRoverTracker subclass: #MarsRoverStatusView
	instanceVariableNames: 'window'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!testRun: #MarsRoverTrackerTest #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 15:07:09'!
PASSED!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:07:09'!
PASSED!

!testRun: #MarsRoverTrackerTest #test02logForPositionWithBackwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:07:09'!
PASSED!

!testRun: #MarsRoverTrackerTest #test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 15:07:09'!
PASSED!

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 15:07:09'!
PASSED!

!testRun: #MarsRoverTrackerTest #test05logForHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 15:07:09'!
PASSED!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:07:09'!
PASSED!

!testRun: #MarsRoverTrackerTest #test07logForHeadingWithLeftCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:07:09'!
PASSED!

!testRun: #MarsRoverTrackerTest #test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 15:07:09'!
PASSED!

!testRun: #MarsRoverTrackerTest #test09logForHeadingDoesNotIncludePositionChanges stamp: 'MS 10/28/2021 15:07:09'!
PASSED!

!testRun: #MarsRoverTrackerTest #test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 15:07:09'!
PASSED!

!testRun: #MarsRoverTrackerTest #test15logForPositionAndHeadingIncludeBothPositionAndHeadingChanges stamp: 'MS 10/28/2021 15:07:09'!
PASSED!

!testRun: #MarsRoverTrackerTest #test19 stamp: 'MS 10/28/2021 15:07:09'!
PASSED!

!testRun: #MarsRoverTrackerTest #test25 stamp: 'MS 10/28/2021 15:07:09'!
PASSED!

!testRun: #MarsRoverTrackerTest #test35 stamp: 'MS 10/28/2021 15:07:09'!
PASSED!

!testRun: #MarsRoverTrackerTest #test40 stamp: 'MS 10/28/2021 15:07:09'!
PASSED!

!testRun: #MarsRoverTrackerTest #test50 stamp: 'MS 10/28/2021 15:07:09'!
PASSED!

!methodRemoval: MarsRover #trackHeadingChangesTo: stamp: 'MS 10/28/2021 15:07:26'!
trackHeadingChangesTo: aLogger 
	
	headingChangesLogger _ aLogger.!

!methodRemoval: MarsRover #trackHeadingChangesToStatusView: stamp: 'MS 10/28/2021 15:07:28'!
trackHeadingChangesToStatusView: aMarsRoverStatusView 
	
	headingChangesStatusView _ aMarsRoverStatusView .!

!methodRemoval: MarsRover #trackPositionAndHeadingChangesToStatusView: stamp: 'MS 10/28/2021 15:07:31'!
trackPositionAndHeadingChangesToStatusView: aMarsRoverStatusView 
	
	positionChangesStatusView _ aMarsRoverStatusView .
	headingChangesStatusView _ aMarsRoverStatusView .!

!methodRemoval: MarsRover #trackPositionChangesTo: stamp: 'MS 10/28/2021 15:07:32'!
trackPositionChangesTo: aLogger
	
	positionChangesLogger _ aLogger.!

!methodRemoval: MarsRover #trackPositionChangesToStatusView: stamp: 'MS 10/28/2021 15:07:32'!
trackPositionChangesToStatusView: aMarsRoverStatusView 
	
	positionChangesStatusView _ aMarsRoverStatusView.!

Object subclass: #MarsRover
	instanceVariableNames: 'position head trackers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'MS 10/28/2021 15:07:44'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head trackers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'MS 10/28/2021 15:07:49'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'MS 10/28/2021 15:07:49'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'MS 10/28/2021 15:07:49'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'MS 10/28/2021 15:07:49'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'MS 10/28/2021 15:07:49'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'MS 10/28/2021 15:07:49'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'MS 10/28/2021 15:07:49'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'MS 10/28/2021 15:07:49'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'MS 10/28/2021 15:07:49'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'MS 10/28/2021 15:07:49'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'MS 10/28/2021 15:07:49'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'MS 10/28/2021 15:07:49'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'MS 10/28/2021 15:07:49'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'MS 10/28/2021 15:07:49'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'MS 10/28/2021 15:07:49'!
PASSED!

!testRun: #MarsRoverTrackerTest #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 15:07:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:07:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test02logForPositionWithBackwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:07:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 15:07:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 15:07:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test05logForHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 15:07:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:07:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test07logForHeadingWithLeftCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:07:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 15:07:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test09logForHeadingDoesNotIncludePositionChanges stamp: 'MS 10/28/2021 15:07:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 15:07:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test15logForPositionAndHeadingIncludeBothPositionAndHeadingChanges stamp: 'MS 10/28/2021 15:07:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test19 stamp: 'MS 10/28/2021 15:07:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test25 stamp: 'MS 10/28/2021 15:07:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test35 stamp: 'MS 10/28/2021 15:07:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test40 stamp: 'MS 10/28/2021 15:07:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test50 stamp: 'MS 10/28/2021 15:07:52'!
PASSED!
!MarsRover methodsFor: 'heading' stamp: 'MS 10/28/2021 15:08:01' prior: 50959609!
changeHeadTo: aHeading

	head := aHeading.

	trackers do: [:aTracker | aTracker changeHeading: head printString].! !
!MarsRover methodsFor: 'moving' stamp: 'MS 10/28/2021 15:08:12' prior: 50958922!
movePositionWith: anOffset
	
	position := position + anOffset .
	
	trackers do: [:aTracker | aTracker changePosition: position].! !

----SNAPSHOT----(28 October 2021 15:09:19) CuisUniversity-4913.image priorSource: 20018321!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 15:52:40'!
test18
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionStatusView for: marsRover.
	
	marsRover process: 'ffbfbbfflrrr'.
	
	self assert: 1@3 equals: x window.
	! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 15:52:51' prior: 50960434!
test18
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionStatusView for: marsRover.
	
	self assert: 1@3 equals: x window.
	! !

!testRun: #MarsRoverTrackerTest #test18 stamp: 'MS 10/28/2021 15:52:51'!
FAILURE!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 15:53:01' prior: 50960445!
test18
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionStatusView for: marsRover.
	
	self assert: nil equals: x window.
	! !

!testRun: #MarsRoverTrackerTest #test18 stamp: 'MS 10/28/2021 15:53:02'!
PASSED!

!testRun: #MarsRoverTrackerTest #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 15:53:02'!
PASSED!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:53:02'!
PASSED!

!testRun: #MarsRoverTrackerTest #test02logForPositionWithBackwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:53:02'!
PASSED!

!testRun: #MarsRoverTrackerTest #test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 15:53:02'!
PASSED!

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 15:53:02'!
PASSED!

!testRun: #MarsRoverTrackerTest #test05logForHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 15:53:02'!
PASSED!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:53:02'!
PASSED!

!testRun: #MarsRoverTrackerTest #test07logForHeadingWithLeftCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 15:53:02'!
PASSED!

!testRun: #MarsRoverTrackerTest #test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 15:53:02'!
PASSED!

!testRun: #MarsRoverTrackerTest #test09logForHeadingDoesNotIncludePositionChanges stamp: 'MS 10/28/2021 15:53:02'!
PASSED!

!testRun: #MarsRoverTrackerTest #test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 15:53:02'!
PASSED!

!testRun: #MarsRoverTrackerTest #test15logForPositionAndHeadingIncludeBothPositionAndHeadingChanges stamp: 'MS 10/28/2021 15:53:02'!
PASSED!

!testRun: #MarsRoverTrackerTest #test18 stamp: 'MS 10/28/2021 15:53:02'!
PASSED!

!testRun: #MarsRoverTrackerTest #test19 stamp: 'MS 10/28/2021 15:53:02'!
PASSED!

!testRun: #MarsRoverTrackerTest #test25 stamp: 'MS 10/28/2021 15:53:02'!
PASSED!

!testRun: #MarsRoverTrackerTest #test35 stamp: 'MS 10/28/2021 15:53:02'!
PASSED!

!testRun: #MarsRoverTrackerTest #test40 stamp: 'MS 10/28/2021 15:53:02'!
PASSED!

!testRun: #MarsRoverTrackerTest #test50 stamp: 'MS 10/28/2021 15:53:02'!
PASSED!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 15:54:22'!
test19windowForPositionReturnsCurrentPosition
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionStatusView for: marsRover.
	
	marsRover process: 'ffbfbbfflrrr'.
	
	self assert: 1@3 equals: x window.
	! !

!methodRemoval: MarsRoverTrackerTest #test19 stamp: 'MS 10/28/2021 15:54:22'!
test19
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionStatusView for: marsRover.
	
	marsRover process: 'ffbfbbfflrrr'.
	
	self assert: 1@3 equals: x window.
	!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 15:54:46'!
test25windowForHeadingReturnsCurrentHeading
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverHeadingStatusView for: marsRover .
	
	marsRover process: 'fflrlrbbflbrr'.
	
	self assert: 'East' equals: x window.
	! !

!methodRemoval: MarsRoverTrackerTest #test25 stamp: 'MS 10/28/2021 15:54:47'!
test25
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverHeadingStatusView for: marsRover .
	
	marsRover process: 'fflrlrbbflbrr'.
	
	self assert: 'East' equals: x window.
	!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 15:55:09'!
test35windowsForPositionAndHeadingReturnsPositionAndHeading
	| marsRover x expected |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionAndHeadingStatusView for: marsRover.
	
	marsRover process: 'ffbfbflrllrrr'.
	
	expected := Array with: 1@3 with: 'East'.
	
	self assert: expected equals: x window.! !

!methodRemoval: MarsRoverTrackerTest #test35 stamp: 'MS 10/28/2021 15:55:09'!
test35
	| marsRover x expected |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionAndHeadingStatusView for: marsRover.
	
	marsRover process: 'ffbfbflrllrrr'.
	
	expected := Array with: 1@3 with: 'East'.
	
	self assert: expected equals: x window.!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 15:56:20'!
test50marsRoverSupportsManyEqualLogs
	| marsRover x y expected|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionLog for: marsRover.
	y _ MarsRoverPositionLog for: marsRover.
	
	marsRover process: 'fffr'.
	
	expected _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	
	self assert: expected equals: x log.
	self assert: expected equals: y log.
	! !

!methodRemoval: MarsRoverTrackerTest #test50 stamp: 'MS 10/28/2021 15:56:20'!
test50
	| marsRover x y expected|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionLog for: marsRover.
	y _ MarsRoverPositionLog for: marsRover.
	
	marsRover process: 'fffr'.
	
	expected _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	
	self assert: expected equals: x log.
	self assert: expected equals: y log.
	!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 15:56:34'!
test40marsRoverSupportsManyDifferentLogs
	| marsRover x y expectedx expectedy|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionLog for: marsRover.
	y _ MarsRoverHeadingLog for: marsRover.
	
	marsRover process: 'fffr'.
	
	expectedx _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	expectedy := OrderedCollection with: 'East'.
	
	self assert: expectedx equals: x log.
	self assert: expectedy equals: y log.
	! !

!methodRemoval: MarsRoverTrackerTest #test40 stamp: 'MS 10/28/2021 15:56:34'!
test40
	| marsRover x y expectedx expectedy|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionLog for: marsRover.
	y _ MarsRoverHeadingLog for: marsRover.
	
	marsRover process: 'fffr'.
	
	expectedx _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	expectedy := OrderedCollection with: 'East'.
	
	self assert: expectedx equals: x log.
	self assert: expectedy equals: y log.
	!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 15:58:23' prior: 50959512!
test04logForPositionDoesNotIncludeHeadingChanges
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionLog for: marsRover.
	
	marsRover process: 'ffrrb'.
	
	expected _ OrderedCollection with: 1@2 with:1@3 with:1@4.
	
	self assert: expected equals: x log.! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 15:59:18'!
test16
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionStatusView for: marsRover.
	
	self assert: nil equals: x window.
	! !

!methodRemoval: MarsRoverTrackerTest #test18 stamp: 'MS 10/28/2021 15:59:18'!
test18
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionStatusView for: marsRover.
	
	self assert: nil equals: x window.
	!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:00:04'!
test16windowForMarsRoverReturnsNillIfMarsRoverDidNotMove
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionStatusView for: marsRover.
	
	self assert: nil equals: x window.
	! !

!methodRemoval: MarsRoverTrackerTest #test16 stamp: 'MS 10/28/2021 16:00:04'!
test16
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionStatusView for: marsRover.
	
	self assert: nil equals: x window.
	!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:00:32'!
test16windowForPositionReturnsNillIfMarsRoverDidNotMove
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionStatusView for: marsRover.
	
	self assert: nil equals: x window.
	! !

!methodRemoval: MarsRoverTrackerTest #test16windowForMarsRoverReturnsNillIfMarsRoverDidNotMove stamp: 'MS 10/28/2021 16:00:32'!
test16windowForMarsRoverReturnsNillIfMarsRoverDidNotMove
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionStatusView for: marsRover.
	
	self assert: nil equals: x window.
	!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:00:53'!
test17windowForHeadingReturnsNillIfMarsRoverDidNotMove
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverHeadingStatusView for: marsRover.
	
	self assert: nil equals: x window.
	! !

!testRun: #MarsRoverTrackerTest #test17windowForHeadingReturnsNillIfMarsRoverDidNotMove stamp: 'MS 10/28/2021 16:00:54'!
PASSED!

!testRun: #MarsRoverTrackerTest #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 16:00:54'!
PASSED!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 16:00:54'!
PASSED!

!testRun: #MarsRoverTrackerTest #test02logForPositionWithBackwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 16:00:54'!
PASSED!

!testRun: #MarsRoverTrackerTest #test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 16:00:54'!
PASSED!

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 16:00:54'!
PASSED!

!testRun: #MarsRoverTrackerTest #test05logForHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 16:00:54'!
PASSED!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 16:00:54'!
PASSED!

!testRun: #MarsRoverTrackerTest #test07logForHeadingWithLeftCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 16:00:54'!
PASSED!

!testRun: #MarsRoverTrackerTest #test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 16:00:54'!
PASSED!

!testRun: #MarsRoverTrackerTest #test09logForHeadingDoesNotIncludePositionChanges stamp: 'MS 10/28/2021 16:00:54'!
PASSED!

!testRun: #MarsRoverTrackerTest #test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 16:00:54'!
PASSED!

!testRun: #MarsRoverTrackerTest #test15logForPositionAndHeadingIncludeBothPositionAndHeadingChanges stamp: 'MS 10/28/2021 16:00:54'!
PASSED!

!testRun: #MarsRoverTrackerTest #test16windowForPositionReturnsNillIfMarsRoverDidNotMove stamp: 'MS 10/28/2021 16:00:54'!
PASSED!

!testRun: #MarsRoverTrackerTest #test17windowForHeadingReturnsNillIfMarsRoverDidNotMove stamp: 'MS 10/28/2021 16:00:54'!
PASSED!

!testRun: #MarsRoverTrackerTest #test19windowForPositionReturnsCurrentPosition stamp: 'MS 10/28/2021 16:00:54'!
PASSED!

!testRun: #MarsRoverTrackerTest #test25windowForHeadingReturnsCurrentHeading stamp: 'MS 10/28/2021 16:00:54'!
PASSED!

!testRun: #MarsRoverTrackerTest #test35windowsForPositionAndHeadingReturnsPositionAndHeading stamp: 'MS 10/28/2021 16:00:54'!
PASSED!

!testRun: #MarsRoverTrackerTest #test40marsRoverSupportsManyDifferentLogs stamp: 'MS 10/28/2021 16:00:54'!
PASSED!

!testRun: #MarsRoverTrackerTest #test50marsRoverSupportsManyEqualLogs stamp: 'MS 10/28/2021 16:00:54'!
PASSED!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:01:06'!
test17windowForPositionAndHeadingReturnsNillIfMarsRoverDidNotMove
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionAndHeadingStatusView for: marsRover.
	
	self assert: nil equals: x window.
	! !

!testRun: #MarsRoverTrackerTest #test17windowForPositionAndHeadingReturnsNillIfMarsRoverDidNotMove stamp: 'MS 10/28/2021 16:01:06'!
FAILURE!

!methodRemoval: MarsRoverTrackerTest #test17windowForPositionAndHeadingReturnsNillIfMarsRoverDidNotMove stamp: 'MS 10/28/2021 16:01:24'!
test17windowForPositionAndHeadingReturnsNillIfMarsRoverDidNotMove
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionAndHeadingStatusView for: marsRover.
	
	self assert: nil equals: x window.
	!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:01:30'!
test18windowForPositionReturnsCurrentPosition
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionStatusView for: marsRover.
	
	marsRover process: 'ffbfbbfflrrr'.
	
	self assert: 1@3 equals: x window.
	! !

!methodRemoval: MarsRoverTrackerTest #test19windowForPositionReturnsCurrentPosition stamp: 'MS 10/28/2021 16:01:30'!
test19windowForPositionReturnsCurrentPosition
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionStatusView for: marsRover.
	
	marsRover process: 'ffbfbbfflrrr'.
	
	self assert: 1@3 equals: x window.
	!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:01:38'!
test19windowForHeadingReturnsCurrentHeading
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverHeadingStatusView for: marsRover .
	
	marsRover process: 'fflrlrbbflbrr'.
	
	self assert: 'East' equals: x window.
	! !

!methodRemoval: MarsRoverTrackerTest #test25windowForHeadingReturnsCurrentHeading stamp: 'MS 10/28/2021 16:01:38'!
test25windowForHeadingReturnsCurrentHeading
	| marsRover x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverHeadingStatusView for: marsRover .
	
	marsRover process: 'fflrlrbbflbrr'.
	
	self assert: 'East' equals: x window.
	!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:01:45'!
test20windowsForPositionAndHeadingReturnsPositionAndHeading
	| marsRover x expected |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionAndHeadingStatusView for: marsRover.
	
	marsRover process: 'ffbfbflrllrrr'.
	
	expected := Array with: 1@3 with: 'East'.
	
	self assert: expected equals: x window.! !

!methodRemoval: MarsRoverTrackerTest #test35windowsForPositionAndHeadingReturnsPositionAndHeading stamp: 'MS 10/28/2021 16:01:45'!
test35windowsForPositionAndHeadingReturnsPositionAndHeading
	| marsRover x expected |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionAndHeadingStatusView for: marsRover.
	
	marsRover process: 'ffbfbflrllrrr'.
	
	expected := Array with: 1@3 with: 'East'.
	
	self assert: expected equals: x window.!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:01:59'!
test21marsRoverSupportsManyEqualLogs
	| marsRover x y expected|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionLog for: marsRover.
	y _ MarsRoverPositionLog for: marsRover.
	
	marsRover process: 'fffr'.
	
	expected _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	
	self assert: expected equals: x log.
	self assert: expected equals: y log.
	! !

!methodRemoval: MarsRoverTrackerTest #test50marsRoverSupportsManyEqualLogs stamp: 'MS 10/28/2021 16:01:59'!
test50marsRoverSupportsManyEqualLogs
	| marsRover x y expected|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionLog for: marsRover.
	y _ MarsRoverPositionLog for: marsRover.
	
	marsRover process: 'fffr'.
	
	expected _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	
	self assert: expected equals: x log.
	self assert: expected equals: y log.
	!

!testRun: #MarsRoverTrackerTest #test21marsRoverSupportsManyEqualLogs stamp: 'MS 10/28/2021 16:02:01'!
PASSED!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:02:07'!
test22marsRoverSupportsManyDifferentLogs
	| marsRover x y expectedx expectedy|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionLog for: marsRover.
	y _ MarsRoverHeadingLog for: marsRover.
	
	marsRover process: 'fffr'.
	
	expectedx _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	expectedy := OrderedCollection with: 'East'.
	
	self assert: expectedx equals: x log.
	self assert: expectedy equals: y log.
	! !

!methodRemoval: MarsRoverTrackerTest #test40marsRoverSupportsManyDifferentLogs stamp: 'MS 10/28/2021 16:02:07'!
test40marsRoverSupportsManyDifferentLogs
	| marsRover x y expectedx expectedy|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionLog for: marsRover.
	y _ MarsRoverHeadingLog for: marsRover.
	
	marsRover process: 'fffr'.
	
	expectedx _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	expectedy := OrderedCollection with: 'East'.
	
	self assert: expectedx equals: x log.
	self assert: expectedy equals: y log.
	!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:02:21'!
test23marsRoverSupportsManyDifferentLogsAndWindonws
	| marsRover x y expectedx expectedy|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionLog for: marsRover.
	y _ MarsRoverHeadingLog for: marsRover.
	
	marsRover process: 'fffr'.
	
	expectedx _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	expectedy := OrderedCollection with: 'East'.
	
	self assert: expectedx equals: x log.
	self assert: expectedy equals: y log.
	! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:02:46' prior: 50961001!
test23marsRoverSupportsManyDifferentLogsAndWindonws
	| marsRover x y expectedx expectedy|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionLog for: marsRover.
	y _ MarsRoverPositionStatusView for: marsRover.
	
	marsRover process: 'fffr'.
	
	expectedx _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	expectedy := 1@4.
	
	self assert: expectedx equals: x log.
	self assert: expectedy equals: y log.
	! !

!testRun: #MarsRoverTrackerTest #test23marsRoverSupportsManyDifferentLogsAndWindonws stamp: 'MS 10/28/2021 16:02:47'!
ERROR!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:02:58' prior: 50961019!
test23marsRoverSupportsManyDifferentLogsAndWindonws
	| marsRover x y expectedx expectedy|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverPositionLog for: marsRover.
	y _ MarsRoverPositionStatusView for: marsRover.
	
	marsRover process: 'fffr'.
	
	expectedx _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	expectedy := 1@4.
	
	self assert: expectedx equals: x log.
	self assert: expectedy equals: y window.
	! !

!testRun: #MarsRoverTrackerTest #test23marsRoverSupportsManyDifferentLogsAndWindonws stamp: 'MS 10/28/2021 16:02:58'!
PASSED!

!testRun: #MarsRoverTrackerTest #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 16:02:58'!
PASSED!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 16:02:58'!
PASSED!

!testRun: #MarsRoverTrackerTest #test02logForPositionWithBackwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 16:02:58'!
PASSED!

!testRun: #MarsRoverTrackerTest #test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 16:02:58'!
PASSED!

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 16:02:58'!
PASSED!

!testRun: #MarsRoverTrackerTest #test05logForHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 16:02:58'!
PASSED!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 16:02:58'!
PASSED!

!testRun: #MarsRoverTrackerTest #test07logForHeadingWithLeftCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 16:02:58'!
PASSED!

!testRun: #MarsRoverTrackerTest #test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 16:02:58'!
PASSED!

!testRun: #MarsRoverTrackerTest #test09logForHeadingDoesNotIncludePositionChanges stamp: 'MS 10/28/2021 16:02:58'!
PASSED!

!testRun: #MarsRoverTrackerTest #test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 16:02:58'!
PASSED!

!testRun: #MarsRoverTrackerTest #test15logForPositionAndHeadingIncludeBothPositionAndHeadingChanges stamp: 'MS 10/28/2021 16:02:58'!
PASSED!

!testRun: #MarsRoverTrackerTest #test16windowForPositionReturnsNillIfMarsRoverDidNotMove stamp: 'MS 10/28/2021 16:02:58'!
PASSED!

!testRun: #MarsRoverTrackerTest #test17windowForHeadingReturnsNillIfMarsRoverDidNotMove stamp: 'MS 10/28/2021 16:02:58'!
PASSED!

!testRun: #MarsRoverTrackerTest #test18windowForPositionReturnsCurrentPosition stamp: 'MS 10/28/2021 16:02:58'!
PASSED!

!testRun: #MarsRoverTrackerTest #test19windowForHeadingReturnsCurrentHeading stamp: 'MS 10/28/2021 16:02:58'!
PASSED!

!testRun: #MarsRoverTrackerTest #test20windowsForPositionAndHeadingReturnsPositionAndHeading stamp: 'MS 10/28/2021 16:02:58'!
PASSED!

!testRun: #MarsRoverTrackerTest #test21marsRoverSupportsManyEqualLogs stamp: 'MS 10/28/2021 16:02:58'!
PASSED!

!testRun: #MarsRoverTrackerTest #test22marsRoverSupportsManyDifferentLogs stamp: 'MS 10/28/2021 16:02:58'!
PASSED!

!testRun: #MarsRoverTrackerTest #test23marsRoverSupportsManyDifferentLogsAndWindonws stamp: 'MS 10/28/2021 16:02:58'!
PASSED!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:03:25' prior: 50957655!
test00logForPositionWithoutMovingReturnsEmptyCollection
	| marsRover expected positionLog |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionLog _ MarsRoverPositionLog for: marsRover .
	
	expected := OrderedCollection new.
	
	self assert: expected equals: positionLog log.! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:03:35' prior: 50957678!
test01logForPositionWithForwardCommandReturnsCorrectCollection
	| marsRover expected positionLog |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionLog _ MarsRoverPositionLog for: marsRover .
	
	marsRover process: 'f'.
	
	expected _ OrderedCollection with: 1@2.
	
	self assert: expected equals: positionLog log.
! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:03:42' prior: 50957691!
test02logForPositionWithBackwardCommandReturnsCorrectCollection
	| marsRover expected positionLog |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionLog _ MarsRoverPositionLog for: marsRover .
	
	marsRover process: 'b'.
	
	expected _ OrderedCollection with: 1@0.
	
	self assert: expected equals: positionLog log.
! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:03:53' prior: 50957704!
test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection
	| marsRover expected positionLog |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionLog _ MarsRoverPositionLog for: marsRover .
	
	marsRover process: 'ffbf'.
	
	expected _ OrderedCollection with: 1@2 with:1@3 with:1@2 with:1@3.
	
	self assert: expected equals: positionLog log.! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:04:03' prior: 50960664!
test04logForPositionDoesNotIncludeHeadingChanges
	| marsRover expected positionLog |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionLog _ MarsRoverPositionLog for: marsRover.
	
	marsRover process: 'ffrrb'.
	
	expected _ OrderedCollection with: 1@2 with:1@3 with:1@4.
	
	self assert: expected equals: positionLog log.! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:04:08' prior: 50957731!
test05logForHeadingWithoutMovingReturnsEmptyCollection
	| marsRover expected x |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x _ MarsRoverHeadingLog for: marsRover .

	expected := OrderedCollection new.
		
	self assert: expected equals: x log.
	! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:04:18' prior: 50961218!
test05logForHeadingWithoutMovingReturnsEmptyCollection
	| marsRover expected headingLog |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	headingLog _ MarsRoverHeadingLog for: marsRover .

	expected := OrderedCollection new.
		
	self assert: expected equals: headingLog log.
	! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:04:49' prior: 50957747!
test06logForHeadingWithRightCommandReturnsCorrectCollection
	 | marsRover expected headingLog |

	marsRover :=  MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	headingLog := MarsRoverHeadingLog for: marsRover .

	marsRover process: 'r'.

	expected _ OrderedCollection with: 'East'.
	
	self assert: expected equals: headingLog log.	
	
! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:05:08' prior: 50957760!
test07logForHeadingWithLeftCommandReturnsCorrectCollection
	 | marsRover expected headingLog |

	marsRover :=  MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	headingLog := MarsRoverHeadingLog for: marsRover .

	marsRover process: 'l'.

	expected _ OrderedCollection with: 'West'.
	
	self assert: expected equals: headingLog log.	
	
! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:05:17' prior: 50957773!
test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection
	| marsRover expected headingLog |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	headingLog _ MarsRoverHeadingLog for: marsRover .
	
	marsRover process: 'rlrrr'.
	
	expected _ OrderedCollection with: 'East' with: 'North' with: 'East' with: 'South' with: 'West'.
	
	self assert: expected equals: headingLog log.! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:05:38' prior: 50957788!
test09logForHeadingDoesNotIncludePositionChanges
	| marsRover expected headingLog |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	headingLog _ MarsRoverHeadingLog for: marsRover .
	
	marsRover process: 'rffrfbfr'.
	
	expected _ OrderedCollection with: 'East'with: 'South' with: 'West'.
	
	self assert: expected equals: headingLog log.! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:05:58' prior: 50957807!
test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection
	| marsRover expected positionHeadingLog |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingEast.
	
	positionHeadingLog _ MarsRoverPositionHeadingLog for: marsRover .
		
	expected _ OrderedCollection new.
	
	self assert: expected equals: positionHeadingLog log.! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:06:37' prior: 50957823!
test15logForPositionAndHeadingIncludeBothPositionAndHeadingChanges
	| marsRover expected positionHeadingLog |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionHeadingLog _ MarsRoverPositionHeadingLog for: marsRover .
	
	marsRover process: 'ffr'.
	
	expected _ OrderedCollection with: 1@2 with: 1@3 with: 'East'.
	
	self assert: expected equals: positionHeadingLog log.! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:06:47' prior: 50960713!
test16windowForPositionReturnsNillIfMarsRoverDidNotMove
	| marsRover positionStatusView |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionStatusView _ MarsRoverPositionStatusView for: marsRover.
	
	self assert: nil equals: positionStatusView window.
	! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:07:26' prior: 50960735!
test17windowForHeadingReturnsNillIfMarsRoverDidNotMove
	| marsRover headingStatusView |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	headingStatusView _ MarsRoverHeadingStatusView for: marsRover.
	
	self assert: nil equals: headingStatusView window.
	! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:07:43' prior: 50960856!
test18windowForPositionReturnsCurrentPosition
	| marsRover positionStatusView |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionStatusView _ MarsRoverPositionStatusView for: marsRover.
	
	marsRover process: 'ffbfbbfflrrr'.
	
	self assert: 1@3 equals: positionStatusView window.
	! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:07:55' prior: 50960879!
test19windowForHeadingReturnsCurrentHeading
	| marsRover headingStatusView |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	headingStatusView _ MarsRoverHeadingStatusView for: marsRover .
	
	marsRover process: 'fflrlrbbflbrr'.
	
	self assert: 'East' equals: headingStatusView window.
	! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:08:09' prior: 50960902!
test20windowsForPositionAndHeadingReturnsPositionAndHeading
	| marsRover positionAndHeadingStatusView expected |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionAndHeadingStatusView _ MarsRoverPositionAndHeadingStatusView for: marsRover.
	
	marsRover process: 'ffbfbflrllrrr'.
	
	expected := Array with: 1@3 with: 'East'.
	
	self assert: expected equals: positionAndHeadingStatusView window.! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:08:28' prior: 50960931!
test21marsRoverSupportsManyEqualLogs
	| marsRover positionLog y expected|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionLog _ MarsRoverPositionLog for: marsRover.
	y _ MarsRoverPositionLog for: marsRover.
	
	marsRover process: 'fffr'.
	
	expected _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	
	self assert: expected equals: positionLog log.
	self assert: expected equals: y log.
	! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:08:33' prior: 50961400!
test21marsRoverSupportsManyEqualLogs
	| marsRover positionLog1 y expected|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionLog1 _ MarsRoverPositionLog for: marsRover.
	y _ MarsRoverPositionLog for: marsRover.
	
	marsRover process: 'fffr'.
	
	expected _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	
	self assert: expected equals: positionLog1 log.
	self assert: expected equals: y log.
	! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:08:43' prior: 50961417!
test21marsRoverSupportsManyEqualLogs
	| marsRover positionLog1 positionLog2 expected|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionLog1 _ MarsRoverPositionLog for: marsRover.
	positionLog2 _ MarsRoverPositionLog for: marsRover.
	
	marsRover process: 'fffr'.
	
	expected _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	
	self assert: expected equals: positionLog1 log.
	self assert: expected equals: positionLog2 log.
	! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:08:54' prior: 50960966!
test22marsRoverSupportsManyDifferentLogs
	| marsRover positionLog y expectedx expectedy|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionLog _ MarsRoverPositionLog for: marsRover.
	y _ MarsRoverHeadingLog for: marsRover.
	
	marsRover process: 'fffr'.
	
	expectedx _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	expectedy := OrderedCollection with: 'East'.
	
	self assert: expectedx equals: positionLog log.
	self assert: expectedy equals: y log.
	! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:09:04' prior: 50961452!
test22marsRoverSupportsManyDifferentLogs
	| marsRover positionLog headingLog expectedx expectedy|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionLog _ MarsRoverPositionLog for: marsRover.
	headingLog _ MarsRoverHeadingLog for: marsRover.
	
	marsRover process: 'fffr'.
	
	expectedx _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	expectedy := OrderedCollection with: 'East'.
	
	self assert: expectedx equals: positionLog log.
	self assert: expectedy equals: headingLog log.
	! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:09:13' prior: 50961471!
test22marsRoverSupportsManyDifferentLogs
	| marsRover positionLog headingLog expectedPositionLog expectedy|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionLog _ MarsRoverPositionLog for: marsRover.
	headingLog _ MarsRoverHeadingLog for: marsRover.
	
	marsRover process: 'fffr'.
	
	expectedPositionLog _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	expectedy := OrderedCollection with: 'East'.
	
	self assert: expectedPositionLog equals: positionLog log.
	self assert: expectedy equals: headingLog log.
	! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:09:22' prior: 50961491!
test22marsRoverSupportsManyDifferentLogs
	| marsRover positionLog headingLog expectedPositionLog expectedHeadingLog|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionLog _ MarsRoverPositionLog for: marsRover.
	headingLog _ MarsRoverHeadingLog for: marsRover.
	
	marsRover process: 'fffr'.
	
	expectedPositionLog _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	expectedHeadingLog := OrderedCollection with: 'East'.
	
	self assert: expectedPositionLog equals: positionLog log.
	self assert: expectedHeadingLog equals: headingLog log.
	! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:09:38' prior: 50961041!
test23marsRoverSupportsManyDifferentLogsAndWindonws
	| marsRover positionLog y expectedx expectedy|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionLog _ MarsRoverPositionLog for: marsRover.
	y _ MarsRoverPositionStatusView for: marsRover.
	
	marsRover process: 'fffr'.
	
	expectedx _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	expectedy := 1@4.
	
	self assert: expectedx equals: positionLog log.
	self assert: expectedy equals: y window.
	! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:09:51' prior: 50961534!
test23marsRoverSupportsManyDifferentLogsAndWindonws
	| marsRover positionLog PositionStatusView expectedx expectedy|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionLog _ MarsRoverPositionLog for: marsRover.
	PositionStatusView _ MarsRoverPositionStatusView for: marsRover.
	
	marsRover process: 'fffr'.
	
	expectedx _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	expectedy := 1@4.
	
	self assert: expectedx equals: positionLog log.
	self assert: expectedy equals: PositionStatusView window.
	! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:10:04' prior: 50961553!
test23marsRoverSupportsManyDifferentLogsAndWindonws
	| marsRover positionLog positionStatusView expectedx expectedy|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionLog _ MarsRoverPositionLog for: marsRover.
	positionStatusView _ MarsRoverPositionStatusView for: marsRover.
	
	marsRover process: 'fffr'.
	
	expectedx _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	expectedy := 1@4.
	
	self assert: expectedx equals: positionLog log.
	self assert: expectedy equals: positionStatusView window.
	! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:10:18' prior: 50961573!
test23marsRoverSupportsManyDifferentLogsAndWindonws
	| marsRover positionLog positionStatusView expectedPositionLog expectedy|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionLog _ MarsRoverPositionLog for: marsRover.
	positionStatusView _ MarsRoverPositionStatusView for: marsRover.
	
	marsRover process: 'fffr'.
	
	expectedPositionLog _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	expectedy := 1@4.
	
	self assert: expectedPositionLog equals: positionLog log.
	self assert: expectedy equals: positionStatusView window.
	! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:10:43' prior: 50961593!
test23marsRoverSupportsManyDifferentLogsAndWindonws
	| marsRover positionLog positionStatusView expectedPositionLog expectedPositionStatusView|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionLog _ MarsRoverPositionLog for: marsRover.
	positionStatusView _ MarsRoverPositionStatusView for: marsRover.
	
	marsRover process: 'fffr'.
	
	expectedPositionLog _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	expectedPositionStatusView := 1@4.
	
	self assert: expectedPositionLog equals: positionLog log.
	self assert: expectedPositionStatusView equals: positionStatusView window.
	! !
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:11:47'!
test11logForPositionAndHeadingWithoutMovingReturnsEmptyCollection
	| marsRover expected positionHeadingLog |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingEast.
	
	positionHeadingLog _ MarsRoverPositionHeadingLog for: marsRover .
		
	expected _ OrderedCollection new.
	
	self assert: expected equals: positionHeadingLog log.! !

!methodRemoval: MarsRoverTrackerTest #test11logForPositionAndHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 16:11:50'!
test11logForPositionAndHeadingWithoutMovingReturnsEmptyCollection
	| marsRover expected positionHeadingLog |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingEast.
	
	positionHeadingLog _ MarsRoverPositionHeadingLog for: marsRover .
		
	expected _ OrderedCollection new.
	
	self assert: expected equals: positionHeadingLog log.!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:11:55'!
test11logForPositionAndHeadingIncludeBothPositionAndHeadingChanges
	| marsRover expected positionHeadingLog |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionHeadingLog _ MarsRoverPositionHeadingLog for: marsRover .
	
	marsRover process: 'ffr'.
	
	expected _ OrderedCollection with: 1@2 with: 1@3 with: 'East'.
	
	self assert: expected equals: positionHeadingLog log.! !

!methodRemoval: MarsRoverTrackerTest #test15logForPositionAndHeadingIncludeBothPositionAndHeadingChanges stamp: 'MS 10/28/2021 16:11:55'!
test15logForPositionAndHeadingIncludeBothPositionAndHeadingChanges
	| marsRover expected positionHeadingLog |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionHeadingLog _ MarsRoverPositionHeadingLog for: marsRover .
	
	marsRover process: 'ffr'.
	
	expected _ OrderedCollection with: 1@2 with: 1@3 with: 'East'.
	
	self assert: expected equals: positionHeadingLog log.!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:12:00'!
test12windowForPositionReturnsNillIfMarsRoverDidNotMove
	| marsRover positionStatusView |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionStatusView _ MarsRoverPositionStatusView for: marsRover.
	
	self assert: nil equals: positionStatusView window.
	! !

!methodRemoval: MarsRoverTrackerTest #test16windowForPositionReturnsNillIfMarsRoverDidNotMove stamp: 'MS 10/28/2021 16:12:00'!
test16windowForPositionReturnsNillIfMarsRoverDidNotMove
	| marsRover positionStatusView |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionStatusView _ MarsRoverPositionStatusView for: marsRover.
	
	self assert: nil equals: positionStatusView window.
	!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:12:06'!
test13windowForHeadingReturnsNillIfMarsRoverDidNotMove
	| marsRover headingStatusView |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	headingStatusView _ MarsRoverHeadingStatusView for: marsRover.
	
	self assert: nil equals: headingStatusView window.
	! !

!methodRemoval: MarsRoverTrackerTest #test17windowForHeadingReturnsNillIfMarsRoverDidNotMove stamp: 'MS 10/28/2021 16:12:06'!
test17windowForHeadingReturnsNillIfMarsRoverDidNotMove
	| marsRover headingStatusView |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	headingStatusView _ MarsRoverHeadingStatusView for: marsRover.
	
	self assert: nil equals: headingStatusView window.
	!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:12:11'!
test14windowForPositionReturnsCurrentPosition
	| marsRover positionStatusView |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionStatusView _ MarsRoverPositionStatusView for: marsRover.
	
	marsRover process: 'ffbfbbfflrrr'.
	
	self assert: 1@3 equals: positionStatusView window.
	! !

!methodRemoval: MarsRoverTrackerTest #test18windowForPositionReturnsCurrentPosition stamp: 'MS 10/28/2021 16:12:11'!
test18windowForPositionReturnsCurrentPosition
	| marsRover positionStatusView |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionStatusView _ MarsRoverPositionStatusView for: marsRover.
	
	marsRover process: 'ffbfbbfflrrr'.
	
	self assert: 1@3 equals: positionStatusView window.
	!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:12:21'!
test15windowForHeadingReturnsCurrentHeading
	| marsRover headingStatusView |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	headingStatusView _ MarsRoverHeadingStatusView for: marsRover .
	
	marsRover process: 'fflrlrbbflbrr'.
	
	self assert: 'East' equals: headingStatusView window.
	! !

!methodRemoval: MarsRoverTrackerTest #test19windowForHeadingReturnsCurrentHeading stamp: 'MS 10/28/2021 16:12:22'!
test19windowForHeadingReturnsCurrentHeading
	| marsRover headingStatusView |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	headingStatusView _ MarsRoverHeadingStatusView for: marsRover .
	
	marsRover process: 'fflrlrbbflbrr'.
	
	self assert: 'East' equals: headingStatusView window.
	!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:12:28'!
test16windowsForPositionAndHeadingReturnsPositionAndHeading
	| marsRover positionAndHeadingStatusView expected |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionAndHeadingStatusView _ MarsRoverPositionAndHeadingStatusView for: marsRover.
	
	marsRover process: 'ffbfbflrllrrr'.
	
	expected := Array with: 1@3 with: 'East'.
	
	self assert: expected equals: positionAndHeadingStatusView window.! !

!methodRemoval: MarsRoverTrackerTest #test20windowsForPositionAndHeadingReturnsPositionAndHeading stamp: 'MS 10/28/2021 16:12:28'!
test20windowsForPositionAndHeadingReturnsPositionAndHeading
	| marsRover positionAndHeadingStatusView expected |
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionAndHeadingStatusView _ MarsRoverPositionAndHeadingStatusView for: marsRover.
	
	marsRover process: 'ffbfbflrllrrr'.
	
	expected := Array with: 1@3 with: 'East'.
	
	self assert: expected equals: positionAndHeadingStatusView window.!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:12:33'!
test17marsRoverSupportsManyEqualLogs
	| marsRover positionLog1 positionLog2 expected|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionLog1 _ MarsRoverPositionLog for: marsRover.
	positionLog2 _ MarsRoverPositionLog for: marsRover.
	
	marsRover process: 'fffr'.
	
	expected _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	
	self assert: expected equals: positionLog1 log.
	self assert: expected equals: positionLog2 log.
	! !

!methodRemoval: MarsRoverTrackerTest #test21marsRoverSupportsManyEqualLogs stamp: 'MS 10/28/2021 16:12:33'!
test21marsRoverSupportsManyEqualLogs
	| marsRover positionLog1 positionLog2 expected|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionLog1 _ MarsRoverPositionLog for: marsRover.
	positionLog2 _ MarsRoverPositionLog for: marsRover.
	
	marsRover process: 'fffr'.
	
	expected _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	
	self assert: expected equals: positionLog1 log.
	self assert: expected equals: positionLog2 log.
	!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:12:37'!
test18marsRoverSupportsManyDifferentLogs
	| marsRover positionLog headingLog expectedPositionLog expectedHeadingLog|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionLog _ MarsRoverPositionLog for: marsRover.
	headingLog _ MarsRoverHeadingLog for: marsRover.
	
	marsRover process: 'fffr'.
	
	expectedPositionLog _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	expectedHeadingLog := OrderedCollection with: 'East'.
	
	self assert: expectedPositionLog equals: positionLog log.
	self assert: expectedHeadingLog equals: headingLog log.
	! !

!methodRemoval: MarsRoverTrackerTest #test22marsRoverSupportsManyDifferentLogs stamp: 'MS 10/28/2021 16:12:37'!
test22marsRoverSupportsManyDifferentLogs
	| marsRover positionLog headingLog expectedPositionLog expectedHeadingLog|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionLog _ MarsRoverPositionLog for: marsRover.
	headingLog _ MarsRoverHeadingLog for: marsRover.
	
	marsRover process: 'fffr'.
	
	expectedPositionLog _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	expectedHeadingLog := OrderedCollection with: 'East'.
	
	self assert: expectedPositionLog equals: positionLog log.
	self assert: expectedHeadingLog equals: headingLog log.
	!
!MarsRoverTrackerTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:12:45'!
test19marsRoverSupportsManyDifferentLogsAndWindonws
	| marsRover positionLog positionStatusView expectedPositionLog expectedPositionStatusView|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionLog _ MarsRoverPositionLog for: marsRover.
	positionStatusView _ MarsRoverPositionStatusView for: marsRover.
	
	marsRover process: 'fffr'.
	
	expectedPositionLog _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	expectedPositionStatusView := 1@4.
	
	self assert: expectedPositionLog equals: positionLog log.
	self assert: expectedPositionStatusView equals: positionStatusView window.
	! !

!methodRemoval: MarsRoverTrackerTest #test23marsRoverSupportsManyDifferentLogsAndWindonws stamp: 'MS 10/28/2021 16:12:45'!
test23marsRoverSupportsManyDifferentLogsAndWindonws
	| marsRover positionLog positionStatusView expectedPositionLog expectedPositionStatusView|
	
	marsRover _ MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionLog _ MarsRoverPositionLog for: marsRover.
	positionStatusView _ MarsRoverPositionStatusView for: marsRover.
	
	marsRover process: 'fffr'.
	
	expectedPositionLog _ OrderedCollection with: 1@2 with: 1@3 with: 1@4.
	expectedPositionStatusView := 1@4.
	
	self assert: expectedPositionLog equals: positionLog log.
	self assert: expectedPositionStatusView equals: positionStatusView window.
	!

!testRun: #MarsRoverTrackerTest #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 16:12:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 16:12:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test02logForPositionWithBackwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 16:12:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 16:12:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 16:12:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test05logForHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 16:12:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 16:12:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test07logForHeadingWithLeftCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 16:12:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 16:12:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test09logForHeadingDoesNotIncludePositionChanges stamp: 'MS 10/28/2021 16:12:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 16:12:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test11logForPositionAndHeadingIncludeBothPositionAndHeadingChanges stamp: 'MS 10/28/2021 16:12:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test12windowForPositionReturnsNillIfMarsRoverDidNotMove stamp: 'MS 10/28/2021 16:12:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test13windowForHeadingReturnsNillIfMarsRoverDidNotMove stamp: 'MS 10/28/2021 16:12:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test14windowForPositionReturnsCurrentPosition stamp: 'MS 10/28/2021 16:12:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test15windowForHeadingReturnsCurrentHeading stamp: 'MS 10/28/2021 16:12:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test16windowsForPositionAndHeadingReturnsPositionAndHeading stamp: 'MS 10/28/2021 16:12:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test17marsRoverSupportsManyEqualLogs stamp: 'MS 10/28/2021 16:12:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test18marsRoverSupportsManyDifferentLogs stamp: 'MS 10/28/2021 16:12:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test19marsRoverSupportsManyDifferentLogsAndWindonws stamp: 'MS 10/28/2021 16:12:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 16:12:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 16:12:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test02logForPositionWithBackwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 16:12:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 16:12:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 16:12:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test05logForHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 16:12:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 16:12:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test07logForHeadingWithLeftCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 16:12:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 16:12:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test09logForHeadingDoesNotIncludePositionChanges stamp: 'MS 10/28/2021 16:12:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 16:12:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test11logForPositionAndHeadingIncludeBothPositionAndHeadingChanges stamp: 'MS 10/28/2021 16:12:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test12windowForPositionReturnsNillIfMarsRoverDidNotMove stamp: 'MS 10/28/2021 16:12:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test13windowForHeadingReturnsNillIfMarsRoverDidNotMove stamp: 'MS 10/28/2021 16:12:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test14windowForPositionReturnsCurrentPosition stamp: 'MS 10/28/2021 16:12:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test15windowForHeadingReturnsCurrentHeading stamp: 'MS 10/28/2021 16:12:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test16windowsForPositionAndHeadingReturnsPositionAndHeading stamp: 'MS 10/28/2021 16:12:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test17marsRoverSupportsManyEqualLogs stamp: 'MS 10/28/2021 16:12:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test18marsRoverSupportsManyDifferentLogs stamp: 'MS 10/28/2021 16:12:52'!
PASSED!

!testRun: #MarsRoverTrackerTest #test19marsRoverSupportsManyDifferentLogsAndWindonws stamp: 'MS 10/28/2021 16:12:52'!
PASSED!
!MarsRoverStatusView methodsFor: 'window' stamp: 'MS 10/28/2021 16:17:21'!
changeHeading: aHeading

	self subclassResponsibility .! !
!MarsRoverStatusView methodsFor: 'window' stamp: 'MS 10/28/2021 16:17:22' prior: 50962119!
changeHeading: aHeading

	self subclassResponsibility.! !
!MarsRoverStatusView methodsFor: 'window' stamp: 'MS 10/28/2021 16:17:40'!
changePosition: aPosition

	self subclassResponsibility.! !
!MarsRoverLogs methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:17:58'!
changePosition: aPosition

	self subclassResponsibility .! !
!MarsRoverLogs methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 16:18:07'!
changeHeading: aHeading

	self subclassResponsibility .! !
!MarsRoverTracker methodsFor: 'initialization' stamp: 'MS 10/28/2021 16:22:04'!
changeHeading: aHeading

	self subclassResponsibility .! !
!MarsRoverTracker methodsFor: 'initialization' stamp: 'MS 10/28/2021 16:22:16'!
changePosition: aPosition

	self subclassResponsibility .! !

!testRun: #MarsRoverTrackerTest #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 16:22:47'!
PASSED!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 16:22:47'!
PASSED!

!testRun: #MarsRoverTrackerTest #test02logForPositionWithBackwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 16:22:47'!
PASSED!

!testRun: #MarsRoverTrackerTest #test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 16:22:47'!
PASSED!

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 16:22:47'!
PASSED!

!testRun: #MarsRoverTrackerTest #test05logForHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 16:22:47'!
PASSED!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 16:22:47'!
PASSED!

!testRun: #MarsRoverTrackerTest #test07logForHeadingWithLeftCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 16:22:47'!
PASSED!

!testRun: #MarsRoverTrackerTest #test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 16:22:47'!
PASSED!

!testRun: #MarsRoverTrackerTest #test09logForHeadingDoesNotIncludePositionChanges stamp: 'MS 10/28/2021 16:22:47'!
PASSED!

!testRun: #MarsRoverTrackerTest #test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 16:22:47'!
PASSED!

!testRun: #MarsRoverTrackerTest #test11logForPositionAndHeadingIncludeBothPositionAndHeadingChanges stamp: 'MS 10/28/2021 16:22:47'!
PASSED!

!testRun: #MarsRoverTrackerTest #test12windowForPositionReturnsNillIfMarsRoverDidNotMove stamp: 'MS 10/28/2021 16:22:47'!
PASSED!

!testRun: #MarsRoverTrackerTest #test13windowForHeadingReturnsNillIfMarsRoverDidNotMove stamp: 'MS 10/28/2021 16:22:47'!
PASSED!

!testRun: #MarsRoverTrackerTest #test14windowForPositionReturnsCurrentPosition stamp: 'MS 10/28/2021 16:22:47'!
PASSED!

!testRun: #MarsRoverTrackerTest #test15windowForHeadingReturnsCurrentHeading stamp: 'MS 10/28/2021 16:22:47'!
PASSED!

!testRun: #MarsRoverTrackerTest #test16windowsForPositionAndHeadingReturnsPositionAndHeading stamp: 'MS 10/28/2021 16:22:47'!
PASSED!

!testRun: #MarsRoverTrackerTest #test17marsRoverSupportsManyEqualLogs stamp: 'MS 10/28/2021 16:22:47'!
PASSED!

!testRun: #MarsRoverTrackerTest #test18marsRoverSupportsManyDifferentLogs stamp: 'MS 10/28/2021 16:22:47'!
PASSED!

!testRun: #MarsRoverTrackerTest #test19marsRoverSupportsManyDifferentLogsAndWindonws stamp: 'MS 10/28/2021 16:22:47'!
PASSED!

!testRun: #MarsRoverTrackerTest #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 16:22:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 16:22:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test02logForPositionWithBackwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 16:22:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 16:22:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 16:22:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test05logForHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 16:22:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 16:22:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test07logForHeadingWithLeftCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 16:22:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 16:22:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test09logForHeadingDoesNotIncludePositionChanges stamp: 'MS 10/28/2021 16:22:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 16:22:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test11logForPositionAndHeadingIncludeBothPositionAndHeadingChanges stamp: 'MS 10/28/2021 16:22:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test12windowForPositionReturnsNillIfMarsRoverDidNotMove stamp: 'MS 10/28/2021 16:22:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test13windowForHeadingReturnsNillIfMarsRoverDidNotMove stamp: 'MS 10/28/2021 16:22:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test14windowForPositionReturnsCurrentPosition stamp: 'MS 10/28/2021 16:22:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test15windowForHeadingReturnsCurrentHeading stamp: 'MS 10/28/2021 16:22:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test16windowsForPositionAndHeadingReturnsPositionAndHeading stamp: 'MS 10/28/2021 16:22:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test17marsRoverSupportsManyEqualLogs stamp: 'MS 10/28/2021 16:22:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test18marsRoverSupportsManyDifferentLogs stamp: 'MS 10/28/2021 16:22:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test19marsRoverSupportsManyDifferentLogsAndWindonws stamp: 'MS 10/28/2021 16:22:50'!
PASSED!

!testRun: #MarsRoverTrackerTest #test00logForPositionWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 16:23:24'!
PASSED!

!testRun: #MarsRoverTrackerTest #test01logForPositionWithForwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 16:23:24'!
PASSED!

!testRun: #MarsRoverTrackerTest #test02logForPositionWithBackwardCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 16:23:24'!
PASSED!

!testRun: #MarsRoverTrackerTest #test03logForPositionWithMultiplePositionCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 16:23:24'!
PASSED!

!testRun: #MarsRoverTrackerTest #test04logForPositionDoesNotIncludeHeadingChanges stamp: 'MS 10/28/2021 16:23:24'!
PASSED!

!testRun: #MarsRoverTrackerTest #test05logForHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 16:23:24'!
PASSED!

!testRun: #MarsRoverTrackerTest #test06logForHeadingWithRightCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 16:23:24'!
PASSED!

!testRun: #MarsRoverTrackerTest #test07logForHeadingWithLeftCommandReturnsCorrectCollection stamp: 'MS 10/28/2021 16:23:24'!
PASSED!

!testRun: #MarsRoverTrackerTest #test08logForHeadingWithMultipleHeadingCommandsReturnsCorrectCollection stamp: 'MS 10/28/2021 16:23:24'!
PASSED!

!testRun: #MarsRoverTrackerTest #test09logForHeadingDoesNotIncludePositionChanges stamp: 'MS 10/28/2021 16:23:24'!
PASSED!

!testRun: #MarsRoverTrackerTest #test10logForPositionAndHeadingWithoutMovingReturnsEmptyCollection stamp: 'MS 10/28/2021 16:23:24'!
PASSED!

!testRun: #MarsRoverTrackerTest #test11logForPositionAndHeadingIncludeBothPositionAndHeadingChanges stamp: 'MS 10/28/2021 16:23:24'!
PASSED!

!testRun: #MarsRoverTrackerTest #test12windowForPositionReturnsNillIfMarsRoverDidNotMove stamp: 'MS 10/28/2021 16:23:24'!
PASSED!

!testRun: #MarsRoverTrackerTest #test13windowForHeadingReturnsNillIfMarsRoverDidNotMove stamp: 'MS 10/28/2021 16:23:24'!
PASSED!

!testRun: #MarsRoverTrackerTest #test14windowForPositionReturnsCurrentPosition stamp: 'MS 10/28/2021 16:23:24'!
PASSED!

!testRun: #MarsRoverTrackerTest #test15windowForHeadingReturnsCurrentHeading stamp: 'MS 10/28/2021 16:23:24'!
PASSED!

!testRun: #MarsRoverTrackerTest #test16windowsForPositionAndHeadingReturnsPositionAndHeading stamp: 'MS 10/28/2021 16:23:24'!
PASSED!

!testRun: #MarsRoverTrackerTest #test17marsRoverSupportsManyEqualLogs stamp: 'MS 10/28/2021 16:23:24'!
PASSED!

!testRun: #MarsRoverTrackerTest #test18marsRoverSupportsManyDifferentLogs stamp: 'MS 10/28/2021 16:23:24'!
PASSED!

!testRun: #MarsRoverTrackerTest #test19marsRoverSupportsManyDifferentLogsAndWindonws stamp: 'MS 10/28/2021 16:23:24'!
PASSED!

----QUIT----(28 October 2021 16:24:26) CuisUniversity-4913.image priorSource: 20120963!

----STARTUP---- (28 October 2021 20:54:26) as /home/matias/Downloads/newcuis/linux64/CuisUniversity-4913.image!


TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'MS 10/28/2021 20:55:14'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'no messages' stamp: 'MS 10/28/2021 21:02:37'!
test01

	|cart|
	
	cart .
	
	cart assert: OrderedCollection new equals: cart list.
	
	! !

Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'MS 10/28/2021 21:03:49'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 21:04:08' prior: 50962416!
test01

	|cart bookCollection |
	
	cart := Cart for: bookCollection.
	
	cart assert: OrderedCollection new equals: cart list.
	
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 21:04:32' prior: 50962432!
test01

	|cart bookCollection |
	
	bookCollection := OrderedCollection new.
	
	cart := Cart for: bookCollection.
	
	cart assert: OrderedCollection new equals: cart list.
	
	! !

!testRun: #CartTest #test01 stamp: 'MS 10/28/2021 21:04:48'!
ERROR!

Object subclass: #Cart
	instanceVariableNames: 'list'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'MS 10/28/2021 21:05:00'!
Object subclass: #Cart
	instanceVariableNames: 'list'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 21:05:34' prior: 50962440!
test01

	|cart bookCollection |
	
	bookCollection := OrderedCollection new.
	
	cart := Cart for: bookCollection.
	
	cart assert: OrderedCollection new equals: cart list.
	
	! !
!Cart class methodsFor: 'no messages' stamp: 'MS 10/28/2021 21:05:59'!
for: aBookCollection

	^self new initializeWith: aBookCollection.! !

Object subclass: #Cart
	instanceVariableNames: 'list bookCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'MS 10/28/2021 21:06:21'!
Object subclass: #Cart
	instanceVariableNames: 'list bookCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'no messages' stamp: 'MS 10/28/2021 21:06:35'!
initializeWith: aBookCollection

	! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 21:07:24' prior: 50962485!
initializeWith: aBookCollection

	list := OrderedCollection new.
	bookCollection := aBookCollection.! !

!testRun: #CartTest #test01 stamp: 'MS 10/28/2021 21:07:37'!
ERROR!

!testRun: #CartTest #test01 stamp: 'MS 10/28/2021 21:07:37'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 21:07:51'!
list
	self shouldBeImplemented.
	^list! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 21:07:54' prior: 50962499!
list
	
	^list! !

!testRun: #CartTest #test01 stamp: 'MS 10/28/2021 21:07:56'!
ERROR!
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 21:08:19' prior: 50962461!
test01

	|cart bookCollection |
	
	bookCollection := OrderedCollection new.
	
	cart := Cart for: bookCollection.
	
	self assert: (OrderedCollection new) equals: cart list.
	
	! !

!testRun: #CartTest #test01 stamp: 'MS 10/28/2021 21:08:20'!
PASSED!

!testRun: #CartTest #test01 stamp: 'MS 10/28/2021 21:08:20'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 21:09:15'!
test02

	|cart bookCollection |
	
	bookCollection := OrderedCollection new.
	
	cart := Cart for: bookCollection.
	cart add: 'Smalltalk80'.
	
	self assert: (OrderedCollection new) equals: cart list.
	
	! !

!testRun: #CartTest #test02 stamp: 'MS 10/28/2021 21:09:20'!
ERROR!
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 21:09:48' prior: 50962523!
test02

	|cart bookCollection |
	
	bookCollection := OrderedCollection new.
	
	cart := Cart for: bookCollection.
	
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 21:10:59' prior: 50962535!
test02

	|cart bookCollection |
	
	bookCollection := OrderedCollection new.
	
	cart := Cart for: bookCollection.
	
	self
		should: [cart add: 'Smalltalk80']
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Cant add a book that is not in the collection'].
	
	! !

!testRun: #CartTest #test02 stamp: 'MS 10/28/2021 21:11:01'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 21:11:14'!
add: aString 
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 21:15:32' prior: 50962557!
add: aString 
	
	(bookCollection includes: aString ) ifFalse: [self signalBookNotInCollection].! !

!testRun: #CartTest #test02 stamp: 'MS 10/28/2021 21:15:37'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 21:15:55'!
signalBookNotInCollection
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 21:16:26' prior: 50962570!
signalBookNotInCollection
	
	self error: self class errorBookNotInCollection.! !

!testRun: #CartTest #test02 stamp: 'MS 10/28/2021 21:16:31'!
ERROR!
!Cart class methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 21:16:45'!
errorBookNotInCollection
	self shouldBeImplemented.! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 21:16:53' prior: 50962583!
errorBookNotInCollection
	
	^''! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 21:17:15' prior: 50962588!
errorBookNotInCollection
	
	^'Cant add a book that is not in the collection'! !

!testRun: #CartTest #test02 stamp: 'MS 10/28/2021 21:17:17'!
PASSED!

!testRun: #CartTest #test01 stamp: 'MS 10/28/2021 21:17:17'!
PASSED!

!testRun: #CartTest #test02 stamp: 'MS 10/28/2021 21:17:17'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 21:19:52'!
test03

	|cart bookCollection expected|
	
	bookCollection := OrderedCollection with: 'Smalltalk80'.
	
	cart := Cart for: bookCollection.
	
	cart add: 'Smalltalk80'.
	
	expected := OrderedCollection with: 'Smalltalk80'.
	self assert: expected equals: cart list.! !

!testRun: #CartTest #test03 stamp: 'MS 10/28/2021 21:19:53'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 21:21:44' prior: 50962562!
add: aString 
	
	(bookCollection includes: aString ) ifFalse: [self signalBookNotInCollection].
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 21:22:27' prior: 50962542!
test02

	|cart bookCollection |
	
	bookCollection := OrderedCollection new.
	
	cart := Cart for: bookCollection.
	
	self
		should: [cart add: 'Smalltalk80' withQuantity: 1]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Cant add a book that is not in the collection'].
	
	! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 21:22:43'!
add: aString withQuantity: anAmount
	
	(bookCollection includes: aString ) ifFalse: [self signalBookNotInCollection].
	! !

!methodRemoval: Cart #add: stamp: 'MS 10/28/2021 21:22:48'!
add: aString 
	
	(bookCollection includes: aString ) ifFalse: [self signalBookNotInCollection].
	!

!testRun: #CartTest #test02 stamp: 'MS 10/28/2021 21:22:56'!
PASSED!
!Cart methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 21:23:14' prior: 50962639!
add: aString withQuantity: anAmount
	
	(bookCollection includes: aString ) ifFalse: [self signalBookNotInCollection].
	
	
	! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 21:24:47' prior: 50962489!
initializeWith: aBookCollection

	list := Dictionary new.
	bookCollection := aBookCollection.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 21:25:07' prior: 50962653!
add: aString withQuantity: anAmount
	
	(bookCollection includes: aString ) ifFalse: [self signalBookNotInCollection].
	
	list add: aString -> anAmount .
	
	
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 21:25:38' prior: 50962605!
test03

	|cart bookCollection expected|
	
	bookCollection := OrderedCollection with: 'Smalltalk80'.
	
	cart := Cart for: bookCollection.
	
	cart add: 'Smalltalk80' withQuantity: 1.
	
	expected := Dictionary with: 'Smalltalk80'.
	self assert: expected equals: cart list.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 21:25:46' prior: 50962674!
test03

	|cart bookCollection expected|
	
	bookCollection := OrderedCollection with: 'Smalltalk80'.
	
	cart := Cart for: bookCollection.
	
	cart add: 'Smalltalk80' withQuantity: 1.
	
	expected := Dictionary with: 'Smalltalk80' -> 1.
	self assert: expected equals: cart list.! !

!testRun: #CartTest #test03 stamp: 'MS 10/28/2021 21:25:47'!
PASSED!

!testRun: #CartTest #test01 stamp: 'MS 10/28/2021 21:25:47'!
FAILURE!

!testRun: #CartTest #test02 stamp: 'MS 10/28/2021 21:25:47'!
PASSED!

!testRun: #CartTest #test03 stamp: 'MS 10/28/2021 21:25:47'!
PASSED!

!testRun: #CartTest #test01 stamp: 'MS 10/28/2021 21:25:47'!
FAILURE!
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 21:26:09' prior: 50962510!
test01

	|cart bookCollection |
	
	bookCollection := OrderedCollection new.
	
	cart := Cart for: bookCollection.
	
	self assert: (Dictionary new) equals: cart list.
	
	! !

!testRun: #CartTest #test01 stamp: 'MS 10/28/2021 21:26:10'!
PASSED!

!testRun: #CartTest #test01 stamp: 'MS 10/28/2021 21:26:10'!
PASSED!

!testRun: #CartTest #test02 stamp: 'MS 10/28/2021 21:26:10'!
PASSED!

!testRun: #CartTest #test03 stamp: 'MS 10/28/2021 21:26:10'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 21:26:23'!
test04

	|cart bookCollection expected|
	
	bookCollection := OrderedCollection with: 'Smalltalk80'.
	
	cart := Cart for: bookCollection.
	
	cart add: 'Smalltalk80' withQuantity: 1.
	
	expected := Dictionary with: 'Smalltalk80' -> 1.
	self assert: expected equals: cart list.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 21:26:31' prior: 50962726!
test04

	|cart bookCollection expected|
	
	bookCollection := OrderedCollection with: 'Smalltalk80'.
	
	cart := Cart for: bookCollection.
	
	cart add: 'Smalltalk80' withQuantity: 1.
	cart add: 'Smalltalk80' withQuantity: 1.
	expected := Dictionary with: 'Smalltalk80' -> 1.
	self assert: expected equals: cart list.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 10/28/2021 21:26:34' prior: 50962738!
test04

	|cart bookCollection expected|
	
	bookCollection := OrderedCollection with: 'Smalltalk80'.
	
	cart := Cart for: bookCollection.
	
	cart add: 'Smalltalk80' withQuantity: 1.
	cart add: 'Smalltalk80' withQuantity: 1.
	expected := Dictionary with: 'Smalltalk80' -> 2.
	self assert: expected equals: cart list.! !

!testRun: #CartTest #test04 stamp: 'MS 10/28/2021 21:26:35'!
FAILURE!

----QUIT----(28 October 2021 22:03:29) CuisUniversity-4913.image priorSource: 20183961!

----STARTUP---- (1 November 2021 11:14:51) as /home/matias/Downloads/newcuis/linux64/CuisUniversity-4913.image!


!classDefinition: #Cart category: 'TusLibros' stamp: 'MS 11/1/2021 11:15:43'!
Object subclass: #Cart
	instanceVariableNames: 'list catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:15:43' prior: 50962660!
initializeWith: aBookCollection

	list := Dictionary new.
	catalog := aBookCollection.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:15:43' prior: 50962666!
add: aString withQuantity: anAmount
	
	(catalog includes: aString ) ifFalse: [self signalBookNotInCollection].
	
	list add: aString -> anAmount .
	
	
	! !

!testRun: #CartTest #test01 stamp: 'MS 11/1/2021 11:15:48'!
PASSED!

!testRun: #CartTest #test02 stamp: 'MS 11/1/2021 11:15:48'!
PASSED!

!testRun: #CartTest #test03 stamp: 'MS 11/1/2021 11:15:48'!
PASSED!

!testRun: #CartTest #test04 stamp: 'MS 11/1/2021 11:15:48'!
FAILURE!

!testRun: #CartTest #test04 stamp: 'MS 11/1/2021 11:15:48'!
FAILURE!

!testRun: #CartTest #test01 stamp: 'MS 11/1/2021 11:15:54'!
PASSED!
!Cart methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:21:14' prior: 50962779!
initializeWith: aBookCollection

	list := OrderedCollection new.
	catalog := aBookCollection.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:21:23' prior: 50962709!
test01

	|cart bookCollection |
	
	bookCollection := OrderedCollection new.
	
	cart := Cart for: bookCollection.
	
	self assert: (OrderedCollection new) equals: cart list.
	
	! !

!testRun: #CartTest #test01 stamp: 'MS 11/1/2021 11:21:25'!
PASSED!

!testRun: #CartTest #test02 stamp: 'MS 11/1/2021 11:21:30'!
PASSED!

!testRun: #CartTest #test03 stamp: 'MS 11/1/2021 11:21:31'!
FAILURE!

!testRun: #CartTest #test03 stamp: 'MS 11/1/2021 11:21:31'!
FAILURE!
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:21:42' prior: 50962686!
test03

	|cart bookCollection expected|
	
	bookCollection := OrderedCollection with: 'Smalltalk80'.
	
	cart := Cart for: bookCollection.
	
	cart add: 'Smalltalk80' withQuantity: 1.
	
	expected := OrderedCollection with: 'Smalltalk80' -> 1.
	self assert: expected equals: cart list.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:22:33' prior: 50962830!
test03

	|cart bookCollection expected|
	
	bookCollection := OrderedCollection with: 'Smalltalk80'.
	
	cart := Cart for: bookCollection.
	
	cart add: 'Smalltalk80' withQuantity: 1.
	
	expected := OrderedCollection with: 'Smalltalk80'.
	self assert: expected equals: cart list.! !

!testRun: #CartTest #test03 stamp: 'MS 11/1/2021 11:22:36'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:22:55' prior: 50962785!
add: aString withQuantity: anAmount
	
	(catalog includes: aString ) ifFalse: [self signalBookNotInCollection].
	
	list add: aString.
	
	
	! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:23:08' prior: 50962856!
add: aBook withQuantity: anAmount
	
	(catalog includes: aBook ) ifFalse: [self signalBookNotInCollection].
	
	list add: aBook.
	
	
	! !

!testRun: #CartTest #test03 stamp: 'MS 11/1/2021 11:23:11'!
PASSED!

!testRun: #CartTest #test04 stamp: 'MS 11/1/2021 11:23:13'!
FAILURE!

!testRun: #CartTest #test04 stamp: 'MS 11/1/2021 11:23:13'!
FAILURE!
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:24:22' prior: 50962751!
test04

	|cart bookCollection expected|
	
	bookCollection := OrderedCollection with: 'Smalltalk80'.
	
	cart := Cart for: bookCollection.
	
	cart add: 'Smalltalk80' withQuantity: 1.
	cart add: '1984' withQuantity: 1.
	expected := OrderedCollection with: 'Smalltalk80' with: '1984'.
	self assert: expected equals: cart list.! !

!testRun: #CartTest #test04 stamp: 'MS 11/1/2021 11:24:22'!
ERROR!
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:24:53' prior: 50962878!
test04

	|cart bookCollection expected|
	
	bookCollection := OrderedCollection with: 'Smalltalk80' with: '1984'.
	
	cart := Cart for: bookCollection.
	
	cart add: 'Smalltalk80' withQuantity: 1.
	cart add: '1984' withQuantity: 1.
	expected := OrderedCollection with: 'Smalltalk80' with: '1984'.
	self assert: expected equals: cart list.! !

!testRun: #CartTest #test04 stamp: 'MS 11/1/2021 11:24:54'!
PASSED!

!testRun: #CartTest #test01 stamp: 'MS 11/1/2021 11:24:54'!
PASSED!

!testRun: #CartTest #test02 stamp: 'MS 11/1/2021 11:24:54'!
PASSED!

!testRun: #CartTest #test03 stamp: 'MS 11/1/2021 11:24:54'!
PASSED!

!testRun: #CartTest #test04 stamp: 'MS 11/1/2021 11:24:54'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:25:10' prior: 50962894!
test04

	|cart bookCollection expected|
	
	bookCollection := OrderedCollection with: 'Smalltalk80'.
	
	cart := Cart for: bookCollection.
	
	cart add: 'Smalltalk80' withQuantity: 1.
	cart add: '1984' withQuantity: 1.
	expected := OrderedCollection with: 'Smalltalk80' with: '1984'.
	self assert: expected equals: cart list.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:25:25' prior: 50962919!
test04

	|cart bookCollection expected|
	
	bookCollection := OrderedCollection with: 'Smalltalk80'.
	
	cart := Cart for: bookCollection.
	
	cart add: 'Smalltalk80' withQuantity: 2.

	expected := OrderedCollection with: 'Smalltalk80' with: 'Smalltalk80'.
	self assert: expected equals: cart list.! !

!testRun: #CartTest #test04 stamp: 'MS 11/1/2021 11:25:26'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:26:17' prior: 50962864!
add: aBook withQuantity: anAmount
	
	(catalog includes: aBook ) ifFalse: [self signalBookNotInCollection].
	
	list add: aBook withOccurrences: anAmount .
	
	
	! !

!testRun: #CartTest #test01 stamp: 'MS 11/1/2021 11:26:19'!
PASSED!

!testRun: #CartTest #test02 stamp: 'MS 11/1/2021 11:26:19'!
PASSED!

!testRun: #CartTest #test03 stamp: 'MS 11/1/2021 11:26:19'!
PASSED!

!testRun: #CartTest #test04 stamp: 'MS 11/1/2021 11:26:19'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:27:19'!
test05

	|cart bookCollection |
	
	bookCollection := OrderedCollection new.
	
	cart := Cart for: bookCollection.
	
	self
		should: [cart add: 'Smalltalk80' withQuantity: 0]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Cant add a book that is not in the collection'].
	
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:29:10' prior: 50962965!
test05

	|cart bookCollection |
	
	bookCollection := OrderedCollection new.
	
	cart := Cart for: bookCollection.
	
	self
		should: [cart add: 'Smalltalk80' withQuantity: 0]
		raise: Error
		withMessageText: Cart bookCanNotBeAddedANonNaturalNumberOfTimesErrorDescription. 
		
	
	! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:30:17'!
bookCanNotBeAddedANonNaturalNumberOfTimesErrorDescription
	
	^'Books can not be added a non natural number of times'! !

!testRun: #CartTest #test01 stamp: 'MS 11/1/2021 11:30:18'!
PASSED!

!testRun: #CartTest #test02 stamp: 'MS 11/1/2021 11:30:18'!
PASSED!

!testRun: #CartTest #test03 stamp: 'MS 11/1/2021 11:30:18'!
PASSED!

!testRun: #CartTest #test04 stamp: 'MS 11/1/2021 11:30:18'!
PASSED!

!testRun: #CartTest #test05 stamp: 'MS 11/1/2021 11:30:18'!
FAILURE!

!testRun: #CartTest #test05 stamp: 'MS 11/1/2021 11:30:18'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:30:51' prior: 50962575!
signalBookNotInCollection
	
	^self error: self class errorBookNotInCollection.! !

!testRun: #CartTest #test01 stamp: 'MS 11/1/2021 11:30:53'!
PASSED!

!testRun: #CartTest #test02 stamp: 'MS 11/1/2021 11:30:53'!
PASSED!

!testRun: #CartTest #test03 stamp: 'MS 11/1/2021 11:30:53'!
PASSED!

!testRun: #CartTest #test04 stamp: 'MS 11/1/2021 11:30:53'!
PASSED!

!testRun: #CartTest #test05 stamp: 'MS 11/1/2021 11:30:53'!
FAILURE!

!testRun: #CartTest #test05 stamp: 'MS 11/1/2021 11:30:53'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:31:00'!
signalBookCanNotBeAddedANonNaturalNumberOfTimes

	^ self error: self class bookCanNotBeAddedANonNaturalNumberOfTimesErrorDescription.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:32:46' prior: 50962948!
add: aBook withQuantity: anAmount
	
	(catalog includes: aBook ) ifFalse: [self signalBookNotInCollection].
	anAmount isInteger ifFalse: [self signalBookCanNotBeAddedANonNaturalNumberOfTimes ].
	(anAmount > 0) ifFalse: [self signalBookCanNotBeAddedANonNaturalNumberOfTimes].
	
	list add: aBook withOccurrences: anAmount .
	
	
	! !

!testRun: #CartTest #test01 stamp: 'MS 11/1/2021 11:32:46'!
PASSED!

!testRun: #CartTest #test02 stamp: 'MS 11/1/2021 11:32:46'!
PASSED!

!testRun: #CartTest #test03 stamp: 'MS 11/1/2021 11:32:46'!
PASSED!

!testRun: #CartTest #test04 stamp: 'MS 11/1/2021 11:32:46'!
PASSED!

!testRun: #CartTest #test05 stamp: 'MS 11/1/2021 11:32:46'!
FAILURE!

!testRun: #CartTest #test05 stamp: 'MS 11/1/2021 11:32:46'!
FAILURE!

!testRun: #CartTest #test04 stamp: 'MS 11/1/2021 11:32:54'!
PASSED!

!testRun: #CartTest #test05 stamp: 'MS 11/1/2021 11:32:55'!
FAILURE!

!testRun: #CartTest #test05 stamp: 'MS 11/1/2021 11:32:55'!
FAILURE!

!testRun: #CartTest #test05 stamp: 'MS 11/1/2021 11:33:12'!
FAILURE!

!testRun: #CartTest #test05 stamp: 'MS 11/1/2021 11:33:12'!
FAILURE!
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:33:50' prior: 50962979!
test05

	|cart bookCollection |
	
	bookCollection := OrderedCollection new with: 'Smalltalk80'.
	
	cart := Cart for: bookCollection.
	
	self
		should: [cart add: 'Smalltalk80' withQuantity: 0]
		raise: Error
		withMessageText: Cart bookCanNotBeAddedANonNaturalNumberOfTimesErrorDescription. 
		
	
	! !

!testRun: #CartTest #test05 stamp: 'MS 11/1/2021 11:33:51'!
ERROR!
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:33:58' prior: 50963075!
test05

	|cart bookCollection |
	
	bookCollection := OrderedCollection with: 'Smalltalk80'.
	
	cart := Cart for: bookCollection.
	
	self
		should: [cart add: 'Smalltalk80' withQuantity: 0]
		raise: Error
		withMessageText: Cart bookCanNotBeAddedANonNaturalNumberOfTimesErrorDescription. 
		
	
	! !

!testRun: #CartTest #test05 stamp: 'MS 11/1/2021 11:33:58'!
PASSED!

!testRun: #CartTest #test01 stamp: 'MS 11/1/2021 11:33:58'!
PASSED!

!testRun: #CartTest #test02 stamp: 'MS 11/1/2021 11:33:58'!
PASSED!

!testRun: #CartTest #test03 stamp: 'MS 11/1/2021 11:33:58'!
PASSED!

!testRun: #CartTest #test04 stamp: 'MS 11/1/2021 11:33:58'!
PASSED!

!testRun: #CartTest #test05 stamp: 'MS 11/1/2021 11:33:58'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:34:08'!
test06

	|cart bookCollection |
	
	bookCollection := OrderedCollection with: 'Smalltalk80'.
	
	cart := Cart for: bookCollection.
	
	self
		should: [cart add: 'Smalltalk80' withQuantity: -2]
		raise: Error
		withMessageText: Cart bookCanNotBeAddedANonNaturalNumberOfTimesErrorDescription. 
		
	
	! !

!testRun: #CartTest #test06 stamp: 'MS 11/1/2021 11:34:09'!
PASSED!

!testRun: #CartTest #test01 stamp: 'MS 11/1/2021 11:34:09'!
PASSED!

!testRun: #CartTest #test02 stamp: 'MS 11/1/2021 11:34:09'!
PASSED!

!testRun: #CartTest #test03 stamp: 'MS 11/1/2021 11:34:09'!
PASSED!

!testRun: #CartTest #test04 stamp: 'MS 11/1/2021 11:34:09'!
PASSED!

!testRun: #CartTest #test05 stamp: 'MS 11/1/2021 11:34:09'!
PASSED!

!testRun: #CartTest #test06 stamp: 'MS 11/1/2021 11:34:09'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:34:17'!
test07

	|cart bookCollection |
	
	bookCollection := OrderedCollection with: 'Smalltalk80'.
	
	cart := Cart for: bookCollection.
	
	self
		should: [cart add: 'Smalltalk80' withQuantity: 1.9]
		raise: Error
		withMessageText: Cart bookCanNotBeAddedANonNaturalNumberOfTimesErrorDescription. 
		
	
	! !

!testRun: #CartTest #test07 stamp: 'MS 11/1/2021 11:34:18'!
PASSED!

!testRun: #CartTest #test01 stamp: 'MS 11/1/2021 11:34:18'!
PASSED!

!testRun: #CartTest #test02 stamp: 'MS 11/1/2021 11:34:18'!
PASSED!

!testRun: #CartTest #test03 stamp: 'MS 11/1/2021 11:34:18'!
PASSED!

!testRun: #CartTest #test04 stamp: 'MS 11/1/2021 11:34:18'!
PASSED!

!testRun: #CartTest #test05 stamp: 'MS 11/1/2021 11:34:18'!
PASSED!

!testRun: #CartTest #test06 stamp: 'MS 11/1/2021 11:34:18'!
PASSED!

!testRun: #CartTest #test07 stamp: 'MS 11/1/2021 11:34:18'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:36:05'!
test01aCartContainsEmptyCollectionOfBooksWhenCreated

	|cart bookCollection |
	
	bookCollection := OrderedCollection new.
	
	cart := Cart for: bookCollection.
	
	self assert: (OrderedCollection new) equals: cart list.
	
	! !

!methodRemoval: CartTest #test01 stamp: 'MS 11/1/2021 11:36:05'!
test01

	|cart bookCollection |
	
	bookCollection := OrderedCollection new.
	
	cart := Cart for: bookCollection.
	
	self assert: (OrderedCollection new) equals: cart list.
	
	!
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:36:31'!
test02canNotAddABookThatIsNotInTheCatalogue

	|cart bookCollection |
	
	bookCollection := OrderedCollection new.
	
	cart := Cart for: bookCollection.
	
	self
		should: [cart add: 'Smalltalk80' withQuantity: 1]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Cant add a book that is not in the collection'].
	
	! !

!methodRemoval: CartTest #test02 stamp: 'MS 11/1/2021 11:36:31'!
test02

	|cart bookCollection |
	
	bookCollection := OrderedCollection new.
	
	cart := Cart for: bookCollection.
	
	self
		should: [cart add: 'Smalltalk80' withQuantity: 1]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Cant add a book that is not in the collection'].
	
	!
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:36:51' prior: 50963188!
test02canNotAddABookThatIsNotInTheCatalogue

	|cart catalogue |
	
	catalogue := OrderedCollection new.
	
	cart := Cart for: catalogue.
	
	self
		should: [cart add: 'Smalltalk80' withQuantity: 1]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Cant add a book that is not in the collection'].
	
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:37:21'!
test03aBookInTheCatalogueIsSuccesfullyAdded

	|cart bookCollection expected|
	
	bookCollection := OrderedCollection with: 'Smalltalk80'.
	
	cart := Cart for: bookCollection.
	
	cart add: 'Smalltalk80' withQuantity: 1.
	
	expected := OrderedCollection with: 'Smalltalk80'.
	self assert: expected equals: cart list.! !

!methodRemoval: CartTest #test03 stamp: 'MS 11/1/2021 11:37:21'!
test03

	|cart bookCollection expected|
	
	bookCollection := OrderedCollection with: 'Smalltalk80'.
	
	cart := Cart for: bookCollection.
	
	cart add: 'Smalltalk80' withQuantity: 1.
	
	expected := OrderedCollection with: 'Smalltalk80'.
	self assert: expected equals: cart list.!
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:37:28' prior: 50963230!
test03aBookInTheCatalogueIsSuccesfullyAdded

	|cart catalogue expected|
	
	catalogue := OrderedCollection with: 'Smalltalk80'.
	
	cart := Cart for: catalogue.
	
	cart add: 'Smalltalk80' withQuantity: 1.
	
	expected := OrderedCollection with: 'Smalltalk80'.
	self assert: expected equals: cart list.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:37:48'!
test04canAddMultipleTimesABookThatIsInTheCatalogue

	|cart bookCollection expected|
	
	bookCollection := OrderedCollection with: 'Smalltalk80'.
	
	cart := Cart for: bookCollection.
	
	cart add: 'Smalltalk80' withQuantity: 2.

	expected := OrderedCollection with: 'Smalltalk80' with: 'Smalltalk80'.
	self assert: expected equals: cart list.! !

!methodRemoval: CartTest #test04 stamp: 'MS 11/1/2021 11:37:48'!
test04

	|cart bookCollection expected|
	
	bookCollection := OrderedCollection with: 'Smalltalk80'.
	
	cart := Cart for: bookCollection.
	
	cart add: 'Smalltalk80' withQuantity: 2.

	expected := OrderedCollection with: 'Smalltalk80' with: 'Smalltalk80'.
	self assert: expected equals: cart list.!
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:38:28'!
test05canNotAddZeroBooks

	|cart bookCollection |
	
	bookCollection := OrderedCollection with: 'Smalltalk80'.
	
	cart := Cart for: bookCollection.
	
	self
		should: [cart add: 'Smalltalk80' withQuantity: 0]
		raise: Error
		withMessageText: Cart bookCanNotBeAddedANonNaturalNumberOfTimesErrorDescription. 
		
	
	! !

!methodRemoval: CartTest #test05 stamp: 'MS 11/1/2021 11:38:28'!
test05

	|cart bookCollection |
	
	bookCollection := OrderedCollection with: 'Smalltalk80'.
	
	cart := Cart for: bookCollection.
	
	self
		should: [cart add: 'Smalltalk80' withQuantity: 0]
		raise: Error
		withMessageText: Cart bookCanNotBeAddedANonNaturalNumberOfTimesErrorDescription. 
		
	
	!
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:38:36'!
test06canNotAddNegativeBooks

	|cart bookCollection |
	
	bookCollection := OrderedCollection with: 'Smalltalk80'.
	
	cart := Cart for: bookCollection.
	
	self
		should: [cart add: 'Smalltalk80' withQuantity: -2]
		raise: Error
		withMessageText: Cart bookCanNotBeAddedANonNaturalNumberOfTimesErrorDescription. 
		
	
	! !

!methodRemoval: CartTest #test06 stamp: 'MS 11/1/2021 11:38:36'!
test06

	|cart bookCollection |
	
	bookCollection := OrderedCollection with: 'Smalltalk80'.
	
	cart := Cart for: bookCollection.
	
	self
		should: [cart add: 'Smalltalk80' withQuantity: -2]
		raise: Error
		withMessageText: Cart bookCanNotBeAddedANonNaturalNumberOfTimesErrorDescription. 
		
	
	!
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:38:54'!
test07canNotAddNonNaturalAmountOfBooks

	|cart bookCollection |
	
	bookCollection := OrderedCollection with: 'Smalltalk80'.
	
	cart := Cart for: bookCollection.
	
	self
		should: [cart add: 'Smalltalk80' withQuantity: 1.9]
		raise: Error
		withMessageText: Cart bookCanNotBeAddedANonNaturalNumberOfTimesErrorDescription. 
		
	
	! !

!methodRemoval: CartTest #test07 stamp: 'MS 11/1/2021 11:38:54'!
test07

	|cart bookCollection |
	
	bookCollection := OrderedCollection with: 'Smalltalk80'.
	
	cart := Cart for: bookCollection.
	
	self
		should: [cart add: 'Smalltalk80' withQuantity: 1.9]
		raise: Error
		withMessageText: Cart bookCanNotBeAddedANonNaturalNumberOfTimesErrorDescription. 
		
	
	!
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:39:02'!
test06canNotAddANegativeAmountOfBooks

	|cart bookCollection |
	
	bookCollection := OrderedCollection with: 'Smalltalk80'.
	
	cart := Cart for: bookCollection.
	
	self
		should: [cart add: 'Smalltalk80' withQuantity: -2]
		raise: Error
		withMessageText: Cart bookCanNotBeAddedANonNaturalNumberOfTimesErrorDescription. 
		
	
	! !

!methodRemoval: CartTest #test06canNotAddNegativeBooks stamp: 'MS 11/1/2021 11:39:02'!
test06canNotAddNegativeBooks

	|cart bookCollection |
	
	bookCollection := OrderedCollection with: 'Smalltalk80'.
	
	cart := Cart for: bookCollection.
	
	self
		should: [cart add: 'Smalltalk80' withQuantity: -2]
		raise: Error
		withMessageText: Cart bookCanNotBeAddedANonNaturalNumberOfTimesErrorDescription. 
		
	
	!
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:39:22'!
test08canAddMultipleBooksThatAreInTheCatalogue

	|cart bookCollection |
	
	bookCollection := OrderedCollection with: 'Smalltalk80'.
	
	cart := Cart for: bookCollection.
	
	self
		should: [cart add: 'Smalltalk80' withQuantity: 1.9]
		raise: Error
		withMessageText: Cart bookCanNotBeAddedANonNaturalNumberOfTimesErrorDescription. 
		
	
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:39:39' prior: 50963390!
test08canAddMultipleBooksThatAreInTheCatalogue

	|cart bookCollection expected|
	
	bookCollection := OrderedCollection with: 'Smalltalk80' with: '1984'.
	
	cart := Cart for: bookCollection.
	
	cart add: 'Smalltalk80' withQuantity: 2.

	expected := OrderedCollection with: 'Smalltalk80' with: 'Smalltalk80'.
	self assert: expected equals: cart list.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:39:54' prior: 50963404!
test08canAddMultipleBooksThatAreInTheCatalogue

	|cart bookCollection expected|
	
	bookCollection := OrderedCollection with: 'Smalltalk80' with: '1984'.
	
	cart := Cart for: bookCollection.
	
	cart add: 'Smalltalk80' withQuantity: 1.
	cart add: '1984' withQuantity: 1.

	expected := OrderedCollection with: 'Smalltalk80' with: 'Smalltalk80'.
	self assert: expected equals: cart list.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:39:58' prior: 50963418!
test08canAddMultipleBooksThatAreInTheCatalogue

	|cart bookCollection expected|
	
	bookCollection := OrderedCollection with: 'Smalltalk80' with: '1984'.
	
	cart := Cart for: bookCollection.
	
	cart add: 'Smalltalk80' withQuantity: 1.
	cart add: '1984' withQuantity: 1.

	expected := OrderedCollection with: 'Smalltalk80' with: '1984'.
	self assert: expected equals: cart list.! !

!testRun: #CartTest #test08canAddMultipleBooksThatAreInTheCatalogue stamp: 'MS 11/1/2021 11:39:59'!
PASSED!

!testRun: #CartTest #test01aCartContainsEmptyCollectionOfBooksWhenCreated stamp: 'MS 11/1/2021 11:39:59'!
PASSED!

!testRun: #CartTest #test02canNotAddABookThatIsNotInTheCatalogue stamp: 'MS 11/1/2021 11:39:59'!
PASSED!

!testRun: #CartTest #test03aBookInTheCatalogueIsSuccesfullyAdded stamp: 'MS 11/1/2021 11:39:59'!
PASSED!

!testRun: #CartTest #test04canAddMultipleTimesABookThatIsInTheCatalogue stamp: 'MS 11/1/2021 11:39:59'!
PASSED!

!testRun: #CartTest #test05canNotAddZeroBooks stamp: 'MS 11/1/2021 11:39:59'!
PASSED!

!testRun: #CartTest #test06canNotAddANegativeAmountOfBooks stamp: 'MS 11/1/2021 11:39:59'!
PASSED!

!testRun: #CartTest #test07canNotAddNonNaturalAmountOfBooks stamp: 'MS 11/1/2021 11:39:59'!
PASSED!

!testRun: #CartTest #test08canAddMultipleBooksThatAreInTheCatalogue stamp: 'MS 11/1/2021 11:39:59'!
PASSED!
!Cart methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:40:33' prior: 50963037!
add: aBook withQuantity: anAmount
	
	(catalog includes: aBook ) ifFalse: [self signalBookNotInCollection].
	self assertAmountIsNatural: anAmount.
	anAmount isInteger ifFalse: [self signalBookCanNotBeAddedANonNaturalNumberOfTimes ].
	(anAmount > 0) ifFalse: [self signalBookCanNotBeAddedANonNaturalNumberOfTimes].
	
	list add: aBook withOccurrences: anAmount .
	
	
	! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:42:27'!
assertAmountIsNatural: anAmount.
	
	(anAmount isInteger and: [anAmount>0]) ifFalse: [self signalBookCanNotBeAddedANonNaturalNumberOfTimes ].
	
	
	
	
	! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:42:31' prior: 50963492!
assertAmountIsNatural: anAmount.
	
	(anAmount isInteger and: [anAmount>0]) ifFalse: 
		[self signalBookCanNotBeAddedANonNaturalNumberOfTimes ].
	
	
	
	
	! !

!testRun: #CartTest #test01aCartContainsEmptyCollectionOfBooksWhenCreated stamp: 'MS 11/1/2021 11:42:32'!
PASSED!

!testRun: #CartTest #test02canNotAddABookThatIsNotInTheCatalogue stamp: 'MS 11/1/2021 11:42:32'!
PASSED!

!testRun: #CartTest #test03aBookInTheCatalogueIsSuccesfullyAdded stamp: 'MS 11/1/2021 11:42:32'!
PASSED!

!testRun: #CartTest #test04canAddMultipleTimesABookThatIsInTheCatalogue stamp: 'MS 11/1/2021 11:42:32'!
PASSED!

!testRun: #CartTest #test05canNotAddZeroBooks stamp: 'MS 11/1/2021 11:42:32'!
PASSED!

!testRun: #CartTest #test06canNotAddANegativeAmountOfBooks stamp: 'MS 11/1/2021 11:42:32'!
PASSED!

!testRun: #CartTest #test07canNotAddNonNaturalAmountOfBooks stamp: 'MS 11/1/2021 11:42:32'!
PASSED!

!testRun: #CartTest #test08canAddMultipleBooksThatAreInTheCatalogue stamp: 'MS 11/1/2021 11:42:32'!
PASSED!
!Cart methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:42:45' prior: 50963478!
add: aBook withQuantity: anAmount
	
	(catalog includes: aBook ) ifFalse: [self signalBookNotInCollection].
	self assertAmountIsNatural: anAmount.
	
	list add: aBook withOccurrences: anAmount .
	
	
	! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:43:12' prior: 50963534!
add: aBook withQuantity: anAmount
	
	(catalog includes: aBook ) ifFalse: [self signalBookNotInCollection].
	self assertBookInInCatalog: aBook.
	self assertAmountIsNatural: anAmount.
	
	list add: aBook withOccurrences: anAmount .
	
	
	! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:43:23'!
assertBookInInCatalog: aBook.
	
	(catalog includes: aBook ) ifFalse: [self signalBookNotInCollection].
	
	
	! !

!testRun: #CartTest #test07canNotAddNonNaturalAmountOfBooks stamp: 'MS 11/1/2021 11:43:30'!
PASSED!

!testRun: #CartTest #test02canNotAddABookThatIsNotInTheCatalogue stamp: 'MS 11/1/2021 11:43:30'!
PASSED!

!testRun: #CartTest #test04canAddMultipleTimesABookThatIsInTheCatalogue stamp: 'MS 11/1/2021 11:43:30'!
PASSED!

!testRun: #CartTest #test08canAddMultipleBooksThatAreInTheCatalogue stamp: 'MS 11/1/2021 11:43:30'!
PASSED!

!testRun: #CartTest #test03aBookInTheCatalogueIsSuccesfullyAdded stamp: 'MS 11/1/2021 11:43:30'!
PASSED!

!testRun: #CartTest #test06canNotAddANegativeAmountOfBooks stamp: 'MS 11/1/2021 11:43:30'!
PASSED!

!testRun: #CartTest #test05canNotAddZeroBooks stamp: 'MS 11/1/2021 11:43:30'!
PASSED!
!Cart methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 11:43:34' prior: 50963544!
add: aBook withQuantity: anAmount
	
	self assertBookInInCatalog: aBook.
	self assertAmountIsNatural: anAmount.
	
	list add: aBook withOccurrences: anAmount .
	
	
	! !

!testRun: #CartTest #test01aCartContainsEmptyCollectionOfBooksWhenCreated stamp: 'MS 11/1/2021 11:43:35'!
PASSED!

!testRun: #CartTest #test02canNotAddABookThatIsNotInTheCatalogue stamp: 'MS 11/1/2021 11:43:35'!
PASSED!

!testRun: #CartTest #test03aBookInTheCatalogueIsSuccesfullyAdded stamp: 'MS 11/1/2021 11:43:35'!
PASSED!

!testRun: #CartTest #test04canAddMultipleTimesABookThatIsInTheCatalogue stamp: 'MS 11/1/2021 11:43:35'!
PASSED!

!testRun: #CartTest #test05canNotAddZeroBooks stamp: 'MS 11/1/2021 11:43:35'!
PASSED!

!testRun: #CartTest #test06canNotAddANegativeAmountOfBooks stamp: 'MS 11/1/2021 11:43:35'!
PASSED!

!testRun: #CartTest #test07canNotAddNonNaturalAmountOfBooks stamp: 'MS 11/1/2021 11:43:35'!
PASSED!

!testRun: #CartTest #test08canAddMultipleBooksThatAreInTheCatalogue stamp: 'MS 11/1/2021 11:43:35'!
PASSED!

!testRun: #CartTest #test01aCartContainsEmptyCollectionOfBooksWhenCreated stamp: 'MS 11/1/2021 11:43:38'!
PASSED!

!testRun: #CartTest #test02canNotAddABookThatIsNotInTheCatalogue stamp: 'MS 11/1/2021 11:43:38'!
PASSED!

!testRun: #CartTest #test03aBookInTheCatalogueIsSuccesfullyAdded stamp: 'MS 11/1/2021 11:43:38'!
PASSED!

!testRun: #CartTest #test04canAddMultipleTimesABookThatIsInTheCatalogue stamp: 'MS 11/1/2021 11:43:38'!
PASSED!

!testRun: #CartTest #test05canNotAddZeroBooks stamp: 'MS 11/1/2021 11:43:38'!
PASSED!

!testRun: #CartTest #test06canNotAddANegativeAmountOfBooks stamp: 'MS 11/1/2021 11:43:38'!
PASSED!

!testRun: #CartTest #test07canNotAddNonNaturalAmountOfBooks stamp: 'MS 11/1/2021 11:43:38'!
PASSED!

!testRun: #CartTest #test08canAddMultipleBooksThatAreInTheCatalogue stamp: 'MS 11/1/2021 11:43:38'!
PASSED!

----QUIT----(1 November 2021 12:14:22) CuisUniversity-4913.image priorSource: 20195684!

----STARTUP---- (1 November 2021 17:44:41) as /home/matias/Downloads/newcuis/linux64/CuisUniversity-4913.image!


----QUIT----(1 November 2021 19:19:39) CuisUniversity-4913.image priorSource: 20223760!

----STARTUP---- (1 November 2021 19:21:59) as /home/matias/Downloads/newcuis/linux64/CuisUniversity-4913.image!


!classRemoval: #Cart stamp: 'MS 11/1/2021 19:22:19'!
Object subclass: #Cart
	instanceVariableNames: 'list catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'MS 11/1/2021 19:22:20'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/matias/Downloads/INGE-ENUNCIADOS/2021-2c/20-TusLibros/Iteracion1/TusLibros-18.st----!

Object subclass: #CashierTusLibros
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTusLibros category: 'TusLibros' stamp: 'MS 11/1/2021 19:25:43'!
Object subclass: #CashierTusLibros
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #CarshierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CarshierTest category: 'TusLibros' stamp: 'MS 11/1/2021 19:25:54'!
TestCase subclass: #CarshierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CarshierTest methodsFor: 'no messages' stamp: 'MS 11/1/2021 19:26:29'!
test01

	|cart |
	
	cart := Cart new.
	
	! !
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 19:27:28'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog.! !
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 19:27:52'!
defaultCatalog
	
	^ Array with: 'Valid book'.! !
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 19:28:17' prior: 50963874!
test01

	|cart |
	
	cart := self createCart.
	
	! !
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 19:28:27' prior: 50963888!
test01

	|cart |
	
	cart := self createCart.
	
	
	
	! !
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 19:29:15' prior: 50963893!
test01

	|cart cashier|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	
	cashier checkOut: cart
	
	! !
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 19:30:35' prior: 50963898!
test01

	|cart cashier|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	self 
		should: [cashier checkOut: cart ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartError.]
	
	
	! !

!testRun: #CarshierTest #test01 stamp: 'MS 11/1/2021 19:30:39'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 19:30:46'!
checkOut: aCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 19:30:54' prior: 50963918!
checkOut: aCart 
	
	! !
!CashierTusLibros methodsFor: 'no messages' stamp: 'MS 11/1/2021 19:31:30'!
checkout: aCart

	self assertIsValidQuantity: aCart.! !
!CashierTusLibros methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 19:31:55' prior: 50963927!
checkout: aCart

	 aCart! !
!CashierTusLibros methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 19:32:16' prior: 50963932!
checkout: aCart

	aCart isEmpty ifTrue: []! !
!CashierTusLibros methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 19:32:54' prior: 50963936!
checkout: aCart

	aCart isEmpty ifTrue: [self error: self invalidItemErrorMessage]! !
!CashierTusLibros methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 19:33:03' prior: 50963941!
checkout: aCart

	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage]! !
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 19:33:23' prior: 50963905!
test01

	|cart cashier|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	self 
		should: [cashier checkOut: cart ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage.]
	
	
	! !
!CashierTusLibros methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 19:33:43'!
emptyCartErrorMessagesage

	'The cart is empty'.! !
!CashierTusLibros methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 19:33:57'!
emptyCartErrorMessage

	'The cart is empty'.! !

!methodRemoval: CashierTusLibros #emptyCartErrorMessagesage stamp: 'MS 11/1/2021 19:33:57'!
emptyCartErrorMessagesage

	'The cart is empty'.!

!testRun: #CarshierTest #test01 stamp: 'MS 11/1/2021 19:34:00'!
FAILURE!

!testRun: #CarshierTest #test01 stamp: 'MS 11/1/2021 19:34:00'!
FAILURE!

!testRun: #CarshierTest #test01 stamp: 'MS 11/1/2021 19:34:07'!
FAILURE!
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 19:34:34' prior: 50963953!
test01

	|cart cashier|
	
	cart := self createCart.
	
	cashier := CashierTusLibros new.
	
	self 
		should: [cashier checkOut: cart ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage.]
	
	
	! !

!testRun: #CarshierTest #test01 stamp: 'MS 11/1/2021 19:34:35'!
ERROR!

!testRun: #CarshierTest #test01 stamp: 'MS 11/1/2021 19:34:48'!
ERROR!
!CashierTusLibros methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 19:35:02'!
checkOut: aCart

	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage]! !

!methodRemoval: CashierTusLibros #checkout: stamp: 'MS 11/1/2021 19:35:02'!
checkout: aCart

	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage]!

!testRun: #CarshierTest #test01 stamp: 'MS 11/1/2021 19:35:05'!
PASSED!
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 19:35:44'!
test02

	|cart cashier|
	
	cart := self createCart.
	
	cashier := CashierTusLibros new.
	
	self 
		should: [cashier checkOut: cart ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage.]
	
	
	! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'MS 11/1/2021 19:40:00'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 19:39:51'!
createValidCreditCard
	
	^CreditCard new.! !
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 19:40:30' prior: 50964015!
test02

	|cart creditCard cashier|
	
	cart := self createCart.
	creditCard := self createValidCreditCard.
	cashier := CashierTusLibros new.
	
	self 
		should: [cashier checkOut: cart ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage.]
	
	
	! !
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 19:41:02' prior: 50964038!
test02

	|cart creditCard cashier|
	
	cart := self createCart.
	creditCard := self createValidCreditCard.
	cashier := CashierTusLibros new.
	 
	cashier checkOut: cart with: creditCard.
		! !
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 19:41:31' prior: 50963986!
test01

	|cart cashier creditCard|
	
	cart := self createCart.
	
	cashier := CashierTusLibros new.
	creditCard := self createValidCreditCard.
	
	self 
		should: [cashier checkOut: cart ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage.]
	
	
	! !
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 19:41:54' prior: 50964061!
test01

	|cart cashier creditCard|
	
	cart := self createCart.
	
	cashier := CashierTusLibros new.
	creditCard := self createValidCreditCard.
	
	self 
		should: [cashier checkOut: cart with: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage.]
	
	
	! !
!CashierTusLibros methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 19:42:10'!
checkOut: aCart with: aCreditCard

	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage]! !

!testRun: #CarshierTest #test01 stamp: 'MS 11/1/2021 19:42:13'!
PASSED!

!testRun: #CarshierTest #test02 stamp: 'MS 11/1/2021 19:42:13'!
ERROR!

!testRun: #CarshierTest #test02 stamp: 'MS 11/1/2021 19:42:13'!
ERROR!

!testRun: #CarshierTest #test02 stamp: 'MS 11/1/2021 19:42:13'!
ERROR!

!testRun: #CarshierTest #test01 stamp: 'MS 11/1/2021 19:42:17'!
PASSED!
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 19:42:45' prior: 50964052!
test02

	|cart creditCard cashier|
	
	cart := self createCart.
	creditCard := self createValidCreditCard.
	cashier := CashierTusLibros new.
	 
	
	cashier checkOut: cart with: creditCard.
		! !
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 19:43:35' prior: 50964107!
test02

	|cart creditCard cashier|
	
	cart := self createCart.
	creditCard := self createValidCreditCard.
	cashier := CashierTusLibros new.
	
	cart add: 'validBook'.
	
	cashier checkOut: cart with: creditCard.
		! !
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 19:43:45' prior: 50964117!
test02

	|cart creditCard cashier|
	
	cart := self createCart.
	creditCard := self createValidCreditCard.
	cashier := CashierTusLibros new.
	
	cart add: 'Valid book'.
	
	cashier checkOut: cart with: creditCard.
		! !
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 19:45:27'!
test07

	|cart creditCard cashier|
	
	cart := self createCart.
	creditCard := self createValidCreditCard.
	cashier := CashierTusLibros new.
	
	cart add: 'Valid book'.
	
	cashier checkOut: cart with: creditCard.
	
	
		! !
!CreditCard class methodsFor: 'no messages' stamp: 'MS 11/1/2021 19:51:47'!
withNumber: aCreditCardNumber expirationOn: anExpirationDate

	^self new initializeWith: aCreditCardNumber expirationOn: anExpirationDate.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 19:57:25' prior: 50964147!
withNumber: aCreditCardNumber expirationOn: anExpirationDate

	(anExpirationDate isKindOf: GregorianMonthOfYear ) ifFalse: [self signalInvalidCreditCardNumber].
	
	^self new initializeWith: aCreditCardNumber expirationOn: anExpirationDate.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 20:01:35' prior: 50964155!
withNumber: aCreditCardNumber expirationOn: anExpirationDate


	
	^self new initializeWith: aCreditCardNumber expirationOn: anExpirationDate.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 20:01:41' prior: 50964166!
withNumber: aCreditCardNumber expirationOn: anExpirationDate 


	
	^self new initializeWith: aCreditCardNumber expirationOn: anExpirationDate.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 20:02:23'!
withNumber: aCreditCardNumber expirationOn: anExpirationDate ownedBy: aPerson




	
	^self new initializeWith: aCreditCardNumber expirationOn: anExpirationDate.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 20:03:09' prior: 50964182!
withNumber: aCreditCardNumber expirationOn: anExpirationDate ownedBy: aPerson

	

	
	^self new initializeWith: aCreditCardNumber expirationOn: anExpirationDate.! !
!LargePositiveInteger methodsFor: 'system primitives' stamp: 'MS 11/1/2021 20:10:17' prior: 16862786!
digitLength
	"Primitive. Answer the number of indexable fields in the receiver. This 
	value is the same as the largest legal subscript. Essential. See Object 
	documentation whatIsAPrimitive."

	<primitive: 62>
	self primitiveFailed
	! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 20:12:25' prior: 50964191!
withNumber: aCreditCardNumber expirationOn: anExpirationDate ownedBy: aPerson

	(aCreditCardNumber decimalDigitLength = 16) ifFalse: [self signalInvalidCreditCardNumber].

	
	^self new initializeWith: aCreditCardNumber expirationOn: anExpirationDate ownedBy: aPerson.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 20:13:15'!
signalInvalidCreditCardNumber

	self error: self InvalidCreditCardNumber! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 20:13:29'!
InvalidCreditCardNumber

	^'Invalid credit card numer'.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 20:13:42' prior: 50964174!
withNumber: aCreditCardNumber expirationOn: anExpirationDate 

	^self new initializeWith: aCreditCardNumber expirationOn: anExpirationDate.! !
!CreditCard methodsFor: 'no messages' stamp: 'MS 11/1/2021 20:13:53'!
initializeWith: aCreditCardNumber expirationOn: anExpirationDate! !

!methodRemoval: CarshierTest #createValidCreditCard stamp: 'MS 11/1/2021 20:14:31'!
createValidCreditCard
	
	^CreditCard new.!
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 20:18:07' prior: 50964127!
test02

	|cart creditCard cashier|
	
	cart := self createCart.
	creditCard := CreditCard withNumber: 1111222233334444  expirationOn: (July of: 2020) ownedBy: 'Carlos'. 
	cashier := CashierTusLibros new.
	
	cart add: 'Valid book'.
	
	cashier checkOut: cart with: creditCard.
		! !
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 20:19:00' prior: 50964075!
test01

	|cart cashier creditCard|
	
	cart := self createCart.
	
	cashier := CashierTusLibros new.
	creditCard := CreditCard withNumber: 1111222233334444  expirationOn: (July of: 2020) ownedBy: 'Carlos'. 
	
	self 
		should: [cashier checkOut: cart with: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage.]
	
	
	! !
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 20:19:04' prior: 50964262!
test01

	|cart cashier creditCard|
	
	cart := self createCart.
	
	cashier := CashierTusLibros new.
	creditCard := CreditCard withNumber: 1111222233334444  expirationOn: (July of: 2024) ownedBy: 'Carlos'. 
	
	self 
		should: [cashier checkOut: cart with: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage.]
	
	
	! !
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 20:19:26' prior: 50964250!
test02

	|cart creditCard cashier|
	
	cart := self createCart.
	creditCard := CreditCard withNumber: 1111222233334444  expirationOn: (July of: 2020) ownedBy: 'Carlos'. 
	cashier := CashierTusLibros new.
	
	cart add: 'Valid book'.
	
	self 
		should: [cashier checkOut: cart with: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage.]
	
	
	! !

!methodRemoval: CashierTusLibros #checkOut: stamp: 'MS 11/1/2021 20:25:22'!
checkOut: aCart

	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage]!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'MS 11/1/2021 20:26:02'!
Object subclass: #CreditCard
	instanceVariableNames: 'number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'MS 11/1/2021 20:26:03'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 20:26:00' prior: 50964240!
initializeWith: aCreditCardNumber expirationOn: anExpirationDate

	number := aCreditCardNumber.
	expirationDate := anExpirationDate.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 20:26:32'!
initializeWith: aCreditCardNumber expirationOn: anExpirationDate ownedBy: aPerson

	number := aCreditCardNumber.
	expirationDate := anExpirationDate.
	! !

!methodRemoval: CreditCard #initializeWith:expirationOn: stamp: 'MS 11/1/2021 20:26:36'!
initializeWith: aCreditCardNumber expirationOn: anExpirationDate

	number := aCreditCardNumber.
	expirationDate := anExpirationDate.!

!methodRemoval: CreditCard class #withNumber:expirationOn: stamp: 'MS 11/1/2021 20:26:44'!
withNumber: aCreditCardNumber expirationOn: anExpirationDate 

	^self new initializeWith: aCreditCardNumber expirationOn: anExpirationDate.!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 20:26:56'!
number

	^number copy.
	! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 20:27:16'!
expirationDate

	^expirationDate copy.
	! !

!methodRemoval: CreditCard #number stamp: 'MS 11/1/2021 20:27:19'!
number

	^number copy.
	!
!CashierTusLibros methodsFor: 'as yet unclassified' stamp: 'MS 11/1/2021 20:30:36' prior: 50964089!
checkOut: aCart with: aCreditCard

	(GregorianMonthOfYear current  < aCreditCard expirationDate) ifTrue: [self signalTarjetaVencida].
	
	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage]
	! !

----QUIT----(1 November 2021 22:53:36) CuisUniversity-4913.image priorSource: 20223963!

----STARTUP---- (3 November 2021 18:04:56) as /home/matias/Downloads/newcuis/linux64/CuisUniversity-4913.image!


!classRenamed: #Cashier as: #CashierParcial stamp: 'MS 11/3/2021 18:10:36'!
Smalltalk renameClassNamed: #Cashier as: #CashierParcial!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:10:36' prior: 50904874!
test01ShouldNotAcceptEmptyTrailerFromNormalWorkingRobot
	
	self 
		shouldRaise:  CashierParcial trailerIsEmptyErrorDescription
		when: [ :aRobot :aCashier | aCashier receiveOrderWhenRobotIsWorkingNormal: aRobot].
	! !
!RobotTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:10:36' prior: 50902654!
test08CanCloseOrderWhenWorkingWithMechanicalFailures

	| aTrailer aRobot |

	aTrailer := Trailer with: 20 and: 100.
	aRobot := Robot with: aTrailer.
	aRobot take: (ProductA with: 1  and: 1).

	aRobot withMechanicalFailure.	
		
	self assert: (aRobot closeOrderUsing: CashierParcial new).! !
!RobotTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:10:36' prior: 50902666!
test09CanNotCloseOrderWhenOutOfOrder

	| aTrailer aRobot |

	aTrailer := Trailer with: 20 and: 100.
	aRobot := Robot with: aTrailer.
	aRobot take: (ProductA with: 1  and: 1).
	
	aRobot outOfOrder.

	self
		should: [ aRobot closeOrderUsing: CashierParcial new ]
		raise: Error
		withMessageText: Robot outOfOrderErrorDescription.
 
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:10:36' prior: 50904903!
test02ShouldNotAcceptEmptyTrailerFromMechanicalFailureRobot

	self 
		shouldRaise:  CashierParcial trailerIsEmptyErrorDescription
		when: [ :aRobot :aCashier | 
			aRobot withMechanicalFailure.
			aCashier receiveOrder: aRobot ].
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:10:36' prior: 50904933!
test03ShouldNotAcceptSensorsFailureRobot

	self 
		shouldRaise:  CashierParcial robotSensorsFailureErrorDescription
		when: [ :aRobot :aCashier | 
			aRobot withSensorsFailure.
			aCashier receiveOrder: aRobot ].

! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:10:36' prior: 50904861!
shouldRaise: errorMessage when: aBlock

	| aRobot aTrailer aCashier |
	
	aTrailer := Trailer with: 20 and: 100.
	aRobot := Robot with: aTrailer.
	
	aCashier := CashierParcial new.

	self
		should: [ aBlock value: aRobot value: aCashier ]
		raise: Error
		withMessageText: errorMessage.! !
!RobotTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:10:36' prior: 50902640!
test07CanNotCloseOrderWhenWorkingWithSensorsFailures

	| aTrailer aRobot |

	aTrailer := Trailer with: 20 and: 100.
	aRobot := Robot with: aTrailer.
	aRobot take: (ProductA with: 1  and: 1).
	
	aRobot withSensorsFailure.

	self
		should: [ aRobot closeOrderUsing: CashierParcial new ]
		raise: Error
		withMessageText: CashierParcial robotSensorsFailureErrorDescription.
 
! !
!RobotTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:10:36' prior: 50902630!
test06CanCloseOrderWhenWorkingNormal

	| aTrailer aRobot |

	aTrailer := Trailer with: 20 and: 100.
	aRobot := Robot with: aTrailer.
	aRobot take: (ProductA with: 1  and: 1).
	
	self assert: (aRobot closeOrderUsing: CashierParcial new)! !

!classRenamed: #CashierTest as: #CashierParcialTest stamp: 'MS 11/3/2021 18:11:34'!
Smalltalk renameClassNamed: #CashierTest as: #CashierParcialTest!

TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'MS 11/3/2021 18:12:29'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'no messages' stamp: 'MS 11/3/2021 18:14:29'!
test01canNotCreateCardWhenHisNumberHasNot16Digits

	self
		should: [CreditCard]! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:19:42' prior: 50964501!
test01canNotCreateCardWhenHisNumberHasNot16Digits

	|expiration|
	
	
	expiration := GregorianMonthOfYear yearNumber: ((GregorianMonthOfYear current) year number) +1 monthNumber: (GregorianMonthOfYear current) monthNumber.

	self
		should: [CreditCard withNumber: 12 expirationOn: expiration ownedBy: 'Hernan']! !

!testRun: #CreditCardTest #test01canNotCreateCardWhenHisNumberHasNot16Digits stamp: 'MS 11/3/2021 18:19:43'!
ERROR!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:20:40' prior: 50964507!
test01canNotCreateCardWhenHisNumberHasNot16Digits

	|expiration|
	
	
	expiration := GregorianMonthOfYear yearNumber: ((GregorianMonthOfYear current) year number) +1 monthNumber: (GregorianMonthOfYear current) monthNumber.

	self
		should: [CreditCard withNumber: 12 expirationOn: expiration ownedBy: 'Hernan']! !
!CreditCardTest methodsFor: 'Set up' stamp: 'MS 11/3/2021 18:23:57' overrides: 16927572!
setUp

	|expirationDate|
	
	expirationDate := GregorianMonthOfYear yearNumber: (GregorianMonthOfYear current year number) +1 monthNumber: GregorianMonthOfYear current monthNumber.
	
! !
!CreditCardTest methodsFor: 'setup' stamp: 'MS 11/3/2021 18:26:29' prior: 50964537 overrides: 16927572!
setUp

	|expirationDat|
	
	expirationDat := GregorianMonthOfYear yearNumber: (GregorianMonthOfYear current year number) +1 monthNumber: GregorianMonthOfYear current monthNumber.
	
! !

TestCase subclass: #CreditCardTest
	instanceVariableNames: 'expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'MS 11/3/2021 18:26:37'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'setup' stamp: 'MS 11/3/2021 18:26:41' prior: 50964547 overrides: 16927572!
setUp
	
	expirationDate := GregorianMonthOfYear yearNumber: (GregorianMonthOfYear current year number) +1 monthNumber: GregorianMonthOfYear current monthNumber.
	
! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:27:56' prior: 50964524!
test01canNotCreateCardWhenHisNumberHasNot16Digits

	self
		should: [CreditCard withNumber: 12 expirationOn: expirationDate ownedBy: 'Hernan']
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard signalInvalidCreditCardNumber .! !

!testRun: #CreditCardTest #test01canNotCreateCardWhenHisNumberHasNot16Digits stamp: 'MS 11/3/2021 18:27:57'!
ERROR!

!testRun: #CreditCardTest #test01canNotCreateCardWhenHisNumberHasNot16Digits stamp: 'MS 11/3/2021 18:28:03'!
ERROR!

!testRun: #CreditCardTest #test01canNotCreateCardWhenHisNumberHasNot16Digits stamp: 'MS 11/3/2021 18:28:03'!
ERROR!

!testRun: #CreditCardTest #test01canNotCreateCardWhenHisNumberHasNot16Digits stamp: 'MS 11/3/2021 18:28:53'!
ERROR!

!testRun: #CreditCardTest #test01canNotCreateCardWhenHisNumberHasNot16Digits stamp: 'MS 11/3/2021 18:28:53'!
ERROR!

!testRun: #CreditCardTest #test01canNotCreateCardWhenHisNumberHasNot16Digits stamp: 'MS 11/3/2021 18:29:12'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:29:31' prior: 50964577!
test01canNotCreateCardWhenHisNumberHasNot16Digits

	self
		should: [CreditCard withNumber: 12 expirationOn: expirationDate ownedBy: 'Hernan']
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard InvalidCreditCardNumber .! !

!testRun: #CreditCardTest #test01canNotCreateCardWhenHisNumberHasNot16Digits stamp: 'MS 11/3/2021 18:29:32'!
PASSED!

!testRun: #CreditCardTest #test01canNotCreateCardWhenHisNumberHasNot16Digits stamp: 'MS 11/3/2021 18:29:32'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:30:09'!
test01canNotCreateCardWithEmptyOwner

	self
		should: [CreditCard withNumber: 1111222244445555 expirationOn: expirationDate ownedBy: '']
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard InvalidCreditCardNumber .! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:30:14' prior: 50964628!
test01canNotCreateCardWithEmptyOwner

	self
		should: [CreditCard withNumber: 1111222244445555 expirationOn: expirationDate ownedBy: '']
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard InvalidCreditCardName .! !

!testRun: #CreditCardTest #test01canNotCreateCardWithEmptyOwner stamp: 'MS 11/3/2021 18:30:17'!
ERROR!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:30:24'!
InvalidCreditCardName
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:30:40' prior: 50964653!
InvalidCreditCardName
	^'Can not create a card with empty name'.! !

!testRun: #CreditCardTest #test01canNotCreateCardWithEmptyOwner stamp: 'MS 11/3/2021 18:30:42'!
FAILURE!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:31:19' prior: 50964211!
withNumber: aCreditCardNumber expirationOn: anExpirationDate ownedBy: aPerson

	(aCreditCardNumber decimalDigitLength = 16) ifFalse: [self signalInvalidCreditCardNumber].
	(aPerson = '') ifTrue: [self signalInvalidCreditName].

	
	^self new initializeWith: aCreditCardNumber expirationOn: anExpirationDate ownedBy: aPerson.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:31:42'!
signalInvalidCreditCardName

	self error: self InvalidCreditCardName! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:31:47' prior: 50964667!
withNumber: aCreditCardNumber expirationOn: anExpirationDate ownedBy: aPerson

	(aCreditCardNumber decimalDigitLength = 16) ifFalse: [self signalInvalidCreditCardNumber].
	(aPerson = '') ifTrue: [self signalInvalidCreditCardName ].

	
	^self new initializeWith: aCreditCardNumber expirationOn: anExpirationDate ownedBy: aPerson.! !

!testRun: #CreditCardTest #test01canNotCreateCardWhenHisNumberHasNot16Digits stamp: 'MS 11/3/2021 18:31:54'!
PASSED!

!testRun: #CreditCardTest #test01canNotCreateCardWithEmptyOwner stamp: 'MS 11/3/2021 18:31:54'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:32:01'!
test02canNotCreateCardWithEmptyOwner

	self
		should: [CreditCard withNumber: 1111222244445555 expirationOn: expirationDate ownedBy: '']
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard InvalidCreditCardName .! !

!methodRemoval: CreditCardTest #test01canNotCreateCardWithEmptyOwner stamp: 'MS 11/3/2021 18:32:05'!
test01canNotCreateCardWithEmptyOwner

	self
		should: [CreditCard withNumber: 1111222244445555 expirationOn: expirationDate ownedBy: '']
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard InvalidCreditCardName .!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:32:35'!
test02canCreateCardWithValidNumberAndOwner

	self
		should: [CreditCard withNumber: 1111222244445555 expirationOn: expirationDate ownedBy: '']
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard InvalidCreditCardName .! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:34:36' prior: 50964727!
test02canCreateCardWithValidNumberAndOwner

	|creditCard|
	
	creditCard := CreditCard withNumber:1111222233334444  expirationOn: expirationDate ownedBy: 'Hernan'.
	
	self assert: 1111222233334444 equals: creditCard number.
	self assert: expirationDate equals: creditCard expirationDate.
	self assert: 'Hernan' equals: creditCard owner.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:35:18'!
test03canCreateCardWithValidNumberAndOwner

	|creditCard|
	
	creditCard := CreditCard withNumber:1111222233334444  expirationOn: expirationDate ownedBy: 'Hernan'.
	
	self assert: 1111222233334444 equals: creditCard number.
	self assert: expirationDate equals: creditCard expirationDate.
	self assert: 'Hernan' equals: creditCard owner.! !

!methodRemoval: CreditCardTest #test02canCreateCardWithValidNumberAndOwner stamp: 'MS 11/3/2021 18:35:18'!
test02canCreateCardWithValidNumberAndOwner

	|creditCard|
	
	creditCard := CreditCard withNumber:1111222233334444  expirationOn: expirationDate ownedBy: 'Hernan'.
	
	self assert: 1111222233334444 equals: creditCard number.
	self assert: expirationDate equals: creditCard expirationDate.
	self assert: 'Hernan' equals: creditCard owner.!

!testRun: #CreditCardTest #test03canCreateCardWithValidNumberAndOwner stamp: 'MS 11/3/2021 18:35:24'!
ERROR!

Object subclass: #CreditCard
	instanceVariableNames: 'number expirationDate owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'MS 11/3/2021 18:35:33'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationDate owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:36:04'!
number

	^number.
	! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:36:11' prior: 50964363!
expirationDate

	^expirationDate 
	! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:36:29'!
owner

	^owner.
	! !

!testRun: #CreditCardTest #test01canNotCreateCardWhenHisNumberHasNot16Digits stamp: 'MS 11/3/2021 18:36:31'!
PASSED!

!testRun: #CreditCardTest #test02canNotCreateCardWithEmptyOwner stamp: 'MS 11/3/2021 18:36:31'!
PASSED!

!testRun: #CreditCardTest #test03canCreateCardWithValidNumberAndOwner stamp: 'MS 11/3/2021 18:36:31'!
FAILURE!

!testRun: #CreditCardTest #test03canCreateCardWithValidNumberAndOwner stamp: 'MS 11/3/2021 18:36:31'!
FAILURE!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:36:51' prior: 50964337!
initializeWith: aCreditCardNumber expirationOn: anExpirationDate ownedBy: aPerson

	number := aCreditCardNumber.
	expirationDate := anExpirationDate.
	owner := aPerson.
	! !

!testRun: #CreditCardTest #test01canNotCreateCardWhenHisNumberHasNot16Digits stamp: 'MS 11/3/2021 18:36:53'!
PASSED!

!testRun: #CreditCardTest #test02canNotCreateCardWithEmptyOwner stamp: 'MS 11/3/2021 18:36:53'!
PASSED!

!testRun: #CreditCardTest #test03canCreateCardWithValidNumberAndOwner stamp: 'MS 11/3/2021 18:36:53'!
PASSED!
!CarshierTest methodsFor: 'setup' stamp: 'MS 11/3/2021 18:48:46' overrides: 16927572!
setUp

	! !

!classDefinition: #CarshierTest category: 'TusLibros' stamp: 'MS 11/3/2021 18:50:13'!
TestCase subclass: #CarshierTest
	instanceVariableNames: 'validCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CarshierTest methodsFor: 'setup' stamp: 'MS 11/3/2021 18:50:11' prior: 50964840 overrides: 16927572!
setUp
	
	|aValidDate|
	
	validCard := CreditCard withNumber: 1111222233334444  expirationOn: aValidDate  ownedBy: 'Hernan'.! !

!classDefinition: #CarshierTest category: 'TusLibros' stamp: 'MS 11/3/2021 18:51:49'!
TestCase subclass: #CarshierTest
	instanceVariableNames: 'validCard expiredCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CarshierTest methodsFor: 'setup' stamp: 'MS 11/3/2021 18:51:47' prior: 50964851 overrides: 16927572!
setUp
	
	|aValidDate anExpiredDate|
	
	aValidDate := GregorianMonthOfYear yearNumber: (GregorianMonthOfYear current year number) +1 monthNumber: GregorianMonthOfYear current monthNumber.
	
	anExpiredDate := GregorianMonthOfYear yearNumber: (GregorianMonthOfYear current year number) +1 monthNumber: GregorianMonthOfYear current monthNumber.
	
	validCard := CreditCard withNumber: 1111222233334444  expirationOn: aValidDate  ownedBy: 'Hernan'.
	expiredCard := CreditCard withNumber: 1111222233334444 expirationOn: anExpiredDate  ownedBy: 'Hernan'.
	
	 ! !
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:52:38' prior: 50964294!
test02

	|cart creditCard cashier|
	
	cart := self createCart.

	cashier := CashierTusLibros new.
	
	cart add: 'Valid book'.
	
	self 
		should: [cashier checkOut: cart with: expiredCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage.]
	
	
	! !
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:52:44' prior: 50964887!
test02

	|cart cashier|
	
	cart := self createCart.

	cashier := CashierTusLibros new.
	
	cart add: 'Valid book'.
	
	self 
		should: [cashier checkOut: cart with: expiredCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage.]
	
	
	! !
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:52:59' prior: 50964901!
test02

	|cart cashier|
	
	cart := self createCart.

	cashier := CashierTusLibros new.
	
	cart add: 'Valid book'.
	
	self 
		should: [cashier checkOut: cart with: expiredCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier expiredCardErrorMessage.]
	
	
	! !

!testRun: #CarshierTest #test02 stamp: 'MS 11/3/2021 18:55:09'!
ERROR!

!testRun: #CarshierTest #test02 stamp: 'MS 11/3/2021 18:55:09'!
ERROR!

!classRenamed: #CashierTusLibros as: #Cashi stamp: 'MS 11/3/2021 18:56:11'!
Smalltalk renameClassNamed: #CashierTusLibros as: #Cashi!
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:56:11' prior: 50964137!
test07

	|cart creditCard cashier|
	
	cart := self createCart.
	creditCard := self createValidCreditCard.
	cashier := Cashi new.
	
	cart add: 'Valid book'.
	
	cashier checkOut: cart with: creditCard.
	
	
		! !
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:56:11' prior: 50964278!
test01

	|cart cashier creditCard|
	
	cart := self createCart.
	
	cashier := Cashi new.
	creditCard := CreditCard withNumber: 1111222233334444  expirationOn: (July of: 2024) ownedBy: 'Carlos'. 
	
	self 
		should: [cashier checkOut: cart with: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage.]
	
	
	! !
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:56:12' prior: 50964915!
test02

	|cart cashier|
	
	cart := self createCart.

	cashier := Cashi new.
	
	cart add: 'Valid book'.
	
	self 
		should: [cashier checkOut: cart with: expiredCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier expiredCardErrorMessage.]
	
	
	! !

!classRenamed: #Cashi as: #Cashie stamp: 'MS 11/3/2021 18:56:25'!
Smalltalk renameClassNamed: #Cashi as: #Cashie!
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:56:26' prior: 50964937!
test07

	|cart creditCard cashier|
	
	cart := self createCart.
	creditCard := self createValidCreditCard.
	cashier := Cashie new.
	
	cart add: 'Valid book'.
	
	cashier checkOut: cart with: creditCard.
	
	
		! !
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:56:26' prior: 50964947!
test01

	|cart cashier creditCard|
	
	cart := self createCart.
	
	cashier := Cashie new.
	creditCard := CreditCard withNumber: 1111222233334444  expirationOn: (July of: 2024) ownedBy: 'Carlos'. 
	
	self 
		should: [cashier checkOut: cart with: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage.]
	
	
	! !
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:56:26' prior: 50964963!
test02

	|cart cashier|
	
	cart := self createCart.

	cashier := Cashie new.
	
	cart add: 'Valid book'.
	
	self 
		should: [cashier checkOut: cart with: expiredCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier expiredCardErrorMessage.]
	
	
	! !

!classRenamed: #Cashie as: #Cashierr stamp: 'MS 11/3/2021 18:58:16'!
Smalltalk renameClassNamed: #Cashie as: #Cashierr!
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:58:17' prior: 50964980!
test07

	|cart creditCard cashier|
	
	cart := self createCart.
	creditCard := self createValidCreditCard.
	cashier := Cashierr new.
	
	cart add: 'Valid book'.
	
	cashier checkOut: cart with: creditCard.
	
	
		! !
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:58:17' prior: 50964990!
test01

	|cart cashier creditCard|
	
	cart := self createCart.
	
	cashier := Cashierr new.
	creditCard := CreditCard withNumber: 1111222233334444  expirationOn: (July of: 2024) ownedBy: 'Carlos'. 
	
	self 
		should: [cashier checkOut: cart with: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage.]
	
	
	! !
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:58:17' prior: 50965006!
test02

	|cart cashier|
	
	cart := self createCart.

	cashier := Cashierr new.
	
	cart add: 'Valid book'.
	
	self 
		should: [cashier checkOut: cart with: expiredCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier expiredCardErrorMessage.]
	
	
	! !
!Cashierr methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:58:47'!
expiredCardErrorMessage

	'The card is expired'.! !

!testRun: #CarshierTest #test01 stamp: 'MS 11/3/2021 18:58:50'!
ERROR!

!testRun: #CarshierTest #test02 stamp: 'MS 11/3/2021 18:58:50'!
ERROR!

!testRun: #CarshierTest #test07 stamp: 'MS 11/3/2021 18:58:50'!
ERROR!

!testRun: #CarshierTest #test01 stamp: 'MS 11/3/2021 18:58:52'!
ERROR!

!testRun: #CarshierTest #test02 stamp: 'MS 11/3/2021 18:58:52'!
ERROR!

!testRun: #CarshierTest #test07 stamp: 'MS 11/3/2021 18:58:52'!
ERROR!

!testRun: #CarshierTest #test01 stamp: 'MS 11/3/2021 18:58:56'!
ERROR!

!testRun: #CarshierTest #test01 stamp: 'MS 11/3/2021 18:58:56'!
ERROR!

!testRun: #CarshierTest #test01 stamp: 'MS 11/3/2021 18:59:04'!
ERROR!

!testRun: #CarshierTest #test01 stamp: 'MS 11/3/2021 18:59:04'!
ERROR!
!Cashierr methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:59:17' prior: 50964371!
checkOut: aCart with: aCreditCard

	(GregorianMonthOfYear current  < aCreditCard expirationDate) ifTrue: [self expiredCardErrorMessage ].
	
	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage]
	! !

!testRun: #CarshierTest #test01 stamp: 'MS 11/3/2021 18:59:19'!
PASSED!

!testRun: #CarshierTest #test02 stamp: 'MS 11/3/2021 18:59:19'!
FAILURE!

!testRun: #CarshierTest #test07 stamp: 'MS 11/3/2021 18:59:19'!
ERROR!

!testRun: #CarshierTest #test01 stamp: 'MS 11/3/2021 18:59:22'!
PASSED!

!testRun: #CarshierTest #test02 stamp: 'MS 11/3/2021 18:59:23'!
FAILURE!

!testRun: #CarshierTest #test02 stamp: 'MS 11/3/2021 18:59:23'!
FAILURE!
!Cashierr methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:59:38' prior: 50965062!
expiredCardErrorMessage

	^'The card is expired'.! !
!Cashierr methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 18:59:56' prior: 50963970!
emptyCartErrorMessage

	^'The cart is empty'.! !

!testRun: #CarshierTest #test01 stamp: 'MS 11/3/2021 18:59:58'!
PASSED!

!testRun: #CarshierTest #test02 stamp: 'MS 11/3/2021 18:59:58'!
FAILURE!

!testRun: #CarshierTest #test07 stamp: 'MS 11/3/2021 18:59:58'!
ERROR!

!testRun: #CarshierTest #test02 stamp: 'MS 11/3/2021 19:00:01'!
FAILURE!

!testRun: #CarshierTest #test02 stamp: 'MS 11/3/2021 19:00:01'!
FAILURE!
!Cashierr methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 19:00:35' prior: 50965089!
checkOut: aCart with: aCreditCard

	(GregorianMonthOfYear current  < aCreditCard expirationDate) ifTrue: [^self expiredCardErrorMessage ].
	
	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage]
	! !

!testRun: #CarshierTest #test01 stamp: 'MS 11/3/2021 19:00:36'!
FAILURE!

!testRun: #CarshierTest #test02 stamp: 'MS 11/3/2021 19:00:36'!
FAILURE!

!testRun: #CarshierTest #test07 stamp: 'MS 11/3/2021 19:00:36'!
ERROR!

!testRun: #CarshierTest #test01 stamp: 'MS 11/3/2021 19:00:40'!
FAILURE!

!testRun: #CarshierTest #test01 stamp: 'MS 11/3/2021 19:00:40'!
FAILURE!

GregorianMonthOfYear current!
!Cashierr methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 19:02:47' prior: 50965134!
checkOut: aCart with: aCreditCard

	( aCreditCard expirationDate <GregorianMonthOfYear current) ifTrue: [^self expiredCardErrorMessage ].
	
	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage]
	! !

!testRun: #CarshierTest #test01 stamp: 'MS 11/3/2021 19:02:49'!
PASSED!

!testRun: #CarshierTest #test02 stamp: 'MS 11/3/2021 19:02:49'!
FAILURE!

!testRun: #CarshierTest #test07 stamp: 'MS 11/3/2021 19:02:49'!
ERROR!

!testRun: #CarshierTest #test02 stamp: 'MS 11/3/2021 19:02:53'!
FAILURE!

!testRun: #CarshierTest #test02 stamp: 'MS 11/3/2021 19:02:53'!
FAILURE!

!testRun: #CarshierTest #test02 stamp: 'MS 11/3/2021 19:03:26'!
FAILURE!

!testRun: #CarshierTest #test02 stamp: 'MS 11/3/2021 19:03:26'!
FAILURE!
!CarshierTest methodsFor: 'setup' stamp: 'MS 11/3/2021 19:03:45' prior: 50964866 overrides: 16927572!
setUp
	
	|aValidDate anExpiredDate|
	
	aValidDate := GregorianMonthOfYear yearNumber: (GregorianMonthOfYear current year number) +1 monthNumber: GregorianMonthOfYear current monthNumber.
	
	anExpiredDate := GregorianMonthOfYear yearNumber: (GregorianMonthOfYear current year number) -1 monthNumber: GregorianMonthOfYear current monthNumber.
	
	validCard := CreditCard withNumber: 1111222233334444  expirationOn: aValidDate  ownedBy: 'Hernan'.
	expiredCard := CreditCard withNumber: 1111222233334444 expirationOn: anExpiredDate  ownedBy: 'Hernan'.
	
	 ! !

!testRun: #CarshierTest #test02 stamp: 'MS 11/3/2021 19:03:47'!
FAILURE!

!testRun: #CarshierTest #test02 stamp: 'MS 11/3/2021 19:03:47'!
FAILURE!

!testRun: #CarshierTest #test02 stamp: 'MS 11/3/2021 19:04:39'!
FAILURE!

!testRun: #CarshierTest #test02 stamp: 'MS 11/3/2021 19:04:39'!
FAILURE!

!testRun: #CarshierTest #test02 stamp: 'MS 11/3/2021 19:05:09'!
FAILURE!

!testRun: #CarshierTest #test02 stamp: 'MS 11/3/2021 19:05:14'!
FAILURE!

!testRun: #CarshierTest #test02 stamp: 'MS 11/3/2021 19:05:14'!
FAILURE!
!Cashierr methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 19:06:31' prior: 50965156!
checkOut: aCart with: aCreditCard

	( aCreditCard expirationDate <GregorianMonthOfYear current) ifTrue: [self error: self expiredCardErrorMessage ].
	
	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage]
	! !

!testRun: #CarshierTest #test01 stamp: 'MS 11/3/2021 19:06:34'!
PASSED!

!testRun: #CarshierTest #test02 stamp: 'MS 11/3/2021 19:06:34'!
PASSED!

!testRun: #CarshierTest #test07 stamp: 'MS 11/3/2021 19:06:34'!
ERROR!

!testRun: #CarshierTest #test07 stamp: 'MS 11/3/2021 19:06:34'!
ERROR!
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 19:24:52' prior: 50965023!
test07

	|cart creditCard cashier|
	
	cart := self createCart.
	creditCard := validCard .
	cashier := Cashierr new.
	
	cart add: 'Valid book'.
	
	cashier checkOut: cart with: creditCard.
	
	
		! !
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/3/2021 19:24:54' prior: 50965238!
test07

	|cart creditCard cashier|
	
	cart := self createCart.
	creditCard := validCard .
	cashier := Cashierr new.
	
	cart add: 'Valid book'.
	
	cashier checkOut: cart with: creditCard.
	
	
	
	
		! !

----QUIT----(3 November 2021 23:06:09) CuisUniversity-4913.image priorSource: 20247340!

----STARTUP---- (4 November 2021 13:03:42) as /home/matias/Downloads/newcuis/linux64/CuisUniversity-4913.image!


!testRun: #CarshierTest #test01 stamp: 'MS 11/4/2021 13:04:06'!
PASSED!
!Cashierr methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 13:10:22' prior: 50965219!
checkOut: aCart with: aCreditCard

	( aCreditCard expirationDate < GregorianMonthOfYear current) ifTrue: [self error: self expiredCardErrorMessage ].
	
	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage]
	! !

!testRun: #CarshierTest #test01 stamp: 'MS 11/4/2021 14:09:51'!
PASSED!

!testRun: #CarshierTest #test02 stamp: 'MS 11/4/2021 14:09:51'!
PASSED!

!testRun: #CarshierTest #test07 stamp: 'MS 11/4/2021 14:09:51'!
PASSED!
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 14:41:33'!
test02canNotCheckOutWithExpiredCard

	|cart cashier|
	
	cart := self createCart.

	cashier := Cashierr new.
	
	cart add: 'Valid book'.
	
	self 
		should: [cashier checkOut: cart with: expiredCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier expiredCardErrorMessage.]
	
	
	! !

!methodRemoval: CarshierTest #test02 stamp: 'MS 11/4/2021 14:41:33'!
test02

	|cart cashier|
	
	cart := self createCart.

	cashier := Cashierr new.
	
	cart add: 'Valid book'.
	
	self 
		should: [cashier checkOut: cart with: expiredCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier expiredCardErrorMessage.]
	
	
	!
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 14:42:01'!
test01canNotCheckOutWithEmptyCart

	|cart cashier creditCard|
	
	cart := self createCart.
	
	cashier := Cashierr new.
	creditCard := CreditCard withNumber: 1111222233334444  expirationOn: (July of: 2024) ownedBy: 'Carlos'. 
	
	self 
		should: [cashier checkOut: cart with: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage.]
	
	
	! !

!methodRemoval: CarshierTest #test01 stamp: 'MS 11/4/2021 14:42:01'!
test01

	|cart cashier creditCard|
	
	cart := self createCart.
	
	cashier := Cashierr new.
	creditCard := CreditCard withNumber: 1111222233334444  expirationOn: (July of: 2024) ownedBy: 'Carlos'. 
	
	self 
		should: [cashier checkOut: cart with: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage.]
	
	
	!
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 14:48:49' prior: 50963883!
defaultCatalog
	
	"^ Array with: 'Valid book'."
	
	^ Dictionary
		at: 'Smaltalk80' put:  100;
		at: '1984' put: 10! !

!testRun: #CarshierTest #test01canNotCheckOutWithEmptyCart stamp: 'MS 11/4/2021 14:48:52'!
ERROR!

!testRun: #CarshierTest #test02canNotCheckOutWithExpiredCard stamp: 'MS 11/4/2021 14:48:52'!
ERROR!

!testRun: #CarshierTest #test07 stamp: 'MS 11/4/2021 14:48:52'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'MS 11/4/2021 14:49:03' prior: 50963840!
defaultCatalog
	
	"^ Array with: self itemSellByTheStore"
	! !
!CartTest methodsFor: 'support' stamp: 'MS 11/4/2021 14:49:11' prior: 50965356!
defaultCatalog
	
	"^ Array with: self itemSellByTheStore"
	
	^ Dictionary
		at: 'Smaltalk80' put:  100;
		at: '1984' put: 10
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/4/2021 14:49:12'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/4/2021 14:49:12'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/4/2021 14:49:12'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/4/2021 14:49:12'!
ERROR!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/4/2021 14:49:12'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/4/2021 14:49:12'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/4/2021 14:49:12'!
ERROR!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/4/2021 14:49:12'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/4/2021 14:49:20'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/4/2021 14:49:20'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/4/2021 14:49:31'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'MS 11/4/2021 14:50:06' prior: 50965361!
defaultCatalog
	
	"^ Array with: self itemSellByTheStore"
	
	^ Dictionary
		at: 'Smaltalk80' put:  100;
		at: '1984' put: 10;
	yourself.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/4/2021 14:50:09'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/4/2021 14:50:09'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'MS 11/4/2021 14:50:15' prior: 50965402!
defaultCatalog
	
	"^ Array with: self itemSellByTheStore"
	
	^ Dictionary
		at: 'Smaltalk80' put:  100;
		at: '1984' put: 10! !
!CartTest methodsFor: 'support' stamp: 'MS 11/4/2021 14:50:30' prior: 50965415!
defaultCatalog
	
	"^ Array with: self itemSellByTheStore"
	
	^ Dictionary new
		at: 'Smaltalk80' put:  100;
		at: '1984' put: 10;
		yourself! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/4/2021 14:50:33'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/4/2021 14:50:35'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/4/2021 14:50:35'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/4/2021 14:50:35'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/4/2021 14:50:35'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/4/2021 14:50:35'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/4/2021 14:50:35'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/4/2021 14:50:35'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/4/2021 14:50:35'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/4/2021 14:50:42'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/4/2021 14:50:42'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'MS 11/4/2021 14:51:01' prior: 50965422!
defaultCatalog
	
	"^ Array with: self itemSellByTheStore"
	
	^ Dictionary new
		at: 'validBook' put:  100;
		at: '1984' put: 10;
		yourself! !
!CartTest methodsFor: 'support' stamp: 'MS 11/4/2021 14:51:07' prior: 50965464!
defaultCatalog
	
	"^ Array with: self itemSellByTheStore"
	
	^ Dictionary new
		at: 'validBook' put:  100;
		at: 'invalidBook' put: 10;
		yourself! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/4/2021 14:51:08'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/4/2021 14:51:08'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/4/2021 14:51:08'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/4/2021 14:51:08'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/4/2021 14:51:08'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/4/2021 14:51:08'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/4/2021 14:51:08'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/4/2021 14:51:08'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/4/2021 14:51:13'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/4/2021 14:51:13'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/4/2021 14:52:08'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/4/2021 14:52:08'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'MS 11/4/2021 14:53:06' prior: 50965471!
defaultCatalog
	
	"^ Array with: self itemSellByTheStore"
	
	^ Dictionary new
		at: 'validBook' put:  100;
		yourself! !

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/4/2021 14:53:09'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/4/2021 14:53:09'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/4/2021 14:53:18'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/4/2021 14:53:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/4/2021 14:53:56'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/4/2021 14:53:56'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/4/2021 14:54:42'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/4/2021 14:54:42'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'MS 11/4/2021 14:54:49' prior: 50963688!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/4/2021 14:54:50'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/4/2021 14:54:52'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/4/2021 14:54:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/4/2021 14:54:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/4/2021 14:54:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/4/2021 14:54:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/4/2021 14:54:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/4/2021 14:54:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/4/2021 14:54:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/4/2021 14:54:54'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'MS 11/4/2021 14:54:56'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'MS 11/4/2021 14:54:56'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'MS 11/4/2021 14:54:56'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'MS 11/4/2021 14:54:56'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'MS 11/4/2021 14:54:56'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'MS 11/4/2021 14:54:56'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'MS 11/4/2021 14:54:56'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'MS 11/4/2021 14:54:56'!
PASSED!
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 14:55:11' prior: 50965341!
defaultCatalog
	
	"^ Array with: 'Valid book'."
	
	^ Dictionary new
		at: 'Smaltalk80' put:  100;
		at: '1984' put: 10;
		yourself! !

!testRun: #CarshierTest #test01canNotCheckOutWithEmptyCart stamp: 'MS 11/4/2021 14:55:14'!
PASSED!

!testRun: #CarshierTest #test01canNotCheckOutWithEmptyCart stamp: 'MS 11/4/2021 14:55:17'!
PASSED!

!testRun: #CarshierTest #test02canNotCheckOutWithExpiredCard stamp: 'MS 11/4/2021 14:55:17'!
ERROR!

!testRun: #CarshierTest #test07 stamp: 'MS 11/4/2021 14:55:17'!
ERROR!
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 14:55:26' prior: 50965283!
test02canNotCheckOutWithExpiredCard

	|cart cashier|
	
	cart := self createCart.

	cashier := Cashierr new.
	
	cart add: 'validBook'.
	
	self 
		should: [cashier checkOut: cart with: expiredCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier expiredCardErrorMessage.]
	
	
	! !
!CarshierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 14:55:36' prior: 50965617!
defaultCatalog
	
	"^ Array with: 'Valid book'."
	
	^ Dictionary new
		at: 'validBook' put:  100;
		yourself! !

!testRun: #CarshierTest #test01canNotCheckOutWithEmptyCart stamp: 'MS 11/4/2021 14:55:39'!
PASSED!

!testRun: #CarshierTest #test02canNotCheckOutWithExpiredCard stamp: 'MS 11/4/2021 14:55:40'!
PASSED!

!testRun: #CarshierTest #test07 stamp: 'MS 11/4/2021 14:55:42'!
ERROR!

!testRun: #CarshierTest #test07 stamp: 'MS 11/4/2021 14:55:42'!
ERROR!

Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'MS 11/4/2021 14:57:12'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'queries' stamp: 'MS 11/4/2021 15:13:27'!
total

	^items sum: [:anItem | catalog at: anItem ].! !
!Cashierr class methodsFor: 'no messages' stamp: 'MS 11/4/2021 15:19:15'!
for: aCart payingWith: aCreditCard on: aDate

	



	! !
!Cashierr methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:19:35' prior: 50965266!
checkOut: aCart with: aCreditCard

	( aCreditCard expirationDate < GregorianMonthOfYear current) ifTrue: [self error: self expiredCardErrorMessage ].
	
	
	! !
!Cashierr class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:19:43' prior: 50965683!
for: aCart payingWith: aCreditCard on: aDate

	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage]
	



	! !
!Cashierr class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:21:04'!
emptyCartErrorMessage

	^'The cart is empty'.



	! !
!Cashierr class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:21:15'!
expiredCardErrorMessage

	^'The card is expired'.



	! !
!Cashierr class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:21:40' prior: 50965697!
for: aCart payingWith: aCreditCard on: aDate
	
	( aCreditCard expirationDate < GregorianMonthOfYear current) ifTrue: [self error: self expiredCardErrorMessage ].
	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage]
	



	! !
!Cashierr class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:22:05'!
for: aCart payingWith: aCreditCard 
	
	( aCreditCard expirationDate < GregorianMonthOfYear current) ifTrue: [self error: self expiredCardErrorMessage ].
	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage]
	



	! !

!methodRemoval: Cashierr class #for:payingWith:on: stamp: 'MS 11/4/2021 15:22:05'!
for: aCart payingWith: aCreditCard on: aDate
	
	( aCreditCard expirationDate < GregorianMonthOfYear current) ifTrue: [self error: self expiredCardErrorMessage ].
	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage]
	



	!

!methodRemoval: Cashierr #emptyCartErrorMessage stamp: 'MS 11/4/2021 15:22:17'!
emptyCartErrorMessage

	^'The cart is empty'.!

!methodRemoval: Cashierr #expiredCardErrorMessage stamp: 'MS 11/4/2021 15:22:20'!
expiredCardErrorMessage

	^'The card is expired'.!
!Cashierr methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:22:24' prior: 50965688!
checkOut: aCart with: aCreditCard

	
	
	
	! !
!Cashierr class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:22:59' prior: 50965724!
for: aCart payingWith: aCreditCard 
	
	( aCreditCard expirationDate < GregorianMonthOfYear current) ifTrue: [self error: self expiredCardErrorMessage ].
	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage].
	
	^self new initializeWith: aCart payingWith: aCreditCard.
	



	! !

!classDefinition: #Cashierr category: 'TusLibros' stamp: 'MS 11/4/2021 15:23:33'!
Object subclass: #Cashierr
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashierr category: 'TusLibros' stamp: 'MS 11/4/2021 15:23:34'!
Object subclass: #Cashierr
	instanceVariableNames: 'cart creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashierr methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:23:32'!
initializeWith: aCart payingWith: aCreditCard

	cart := aCart.
	creditCard := aCreditCard .! !
!Cart methodsFor: 'queries' stamp: 'MS 11/4/2021 15:24:27'!
items

	^items copy.! !
!Cashierr methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:36:38' prior: 50965753!
checkOut: aCart with: aCreditCard

	^ aCart items sum: []
	
	
	
	! !
!Cashierr methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:37:59' prior: 50965792!
checkOut: aCart with: aCreditCard

	^ aCart items sum: [:anItem| aCart catalog at: anItem].
	
	
	
	! !
!Cart methodsFor: 'queries' stamp: 'MS 11/4/2021 15:38:20'!
catalog

	^items copy.! !

!methodRemoval: Cart #catalog stamp: 'MS 11/4/2021 15:38:25'!
catalog

	^items copy.!
!Cashierr methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:41:39' prior: 50965798!
checkOut: aCart with: aCreditCard
	|total|
	total := 0.
	^ aCart items do: [:anItem| total := total + anItem ].
	
	
	
	! !
!Cashierr methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:41:46' prior: 50965811!
checkOut: aCart with: aCreditCard
	|total|
	total := 0.
	aCart items do: [:anItem| total := total + anItem ].
	^total.
	
	
	! !

!testRun: #CarshierTest #test01canNotCheckOutWithEmptyCart stamp: 'MS 11/4/2021 15:41:58'!
FAILURE!

!testRun: #CarshierTest #test02canNotCheckOutWithExpiredCard stamp: 'MS 11/4/2021 15:41:58'!
ERROR!

!testRun: #CarshierTest #test07 stamp: 'MS 11/4/2021 15:41:58'!
ERROR!

!classRenamed: #CarshierTest as: #CashierTest stamp: 'MS 11/4/2021 15:42:09'!
Smalltalk renameClassNamed: #CarshierTest as: #CashierTest!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:42:26' prior: 50965309!
test01canNotCheckOutWithEmptyCart

	|cart cashier creditCard|
	
	cart := self createCart.
	
	cashier := Cashierr .
	creditCard := CreditCard withNumber: 1111222233334444  expirationOn: (July of: 2024) ownedBy: 'Carlos'. 
	
	self 
		should: [cashier checkOut: cart with: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage.]
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:42:54' prior: 50965838!
test01canNotCheckOutWithEmptyCart

	|cart cashier creditCard|
	
	cart := self createCart.
	
	cashier := Cashierr for:cart payingWith: creditCard .
	creditCard := CreditCard withNumber: 1111222233334444  expirationOn: (July of: 2024) ownedBy: 'Carlos'. 
	
	self 
		should: [cashier checkOut: cart with: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage.]
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:43:04' prior: 50965855!
test01canNotCheckOutWithEmptyCart

	|cart cashier creditCard|
	
	cart := self createCart.
	
	creditCard := CreditCard withNumber: 1111222233334444  expirationOn: (July of: 2024) ownedBy: 'Carlos'. 
	cashier := Cashierr for:cart payingWith: creditCard .
	
	self 
		should: [cashier checkOut: cart with: creditCard]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartErrorMessage.]
	
	
	! !

!testRun: #CashierTest #test01canNotCheckOutWithEmptyCart stamp: 'MS 11/4/2021 15:43:05'!
ERROR!

!testRun: #CashierTest #test01canNotCheckOutWithEmptyCart stamp: 'MS 11/4/2021 15:43:05'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:43:47' prior: 50965873!
test01canNotCheckOutWithEmptyCart

	|cart creditCard|
	
	cart := self createCart.
	
	creditCard := CreditCard withNumber: 1111222233334444  expirationOn: (July of: 2024) ownedBy: 'Carlos'. 
	
	self 
		should: [Cashierr for:cart payingWith: creditCard .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
				self assert: anError messageText .]
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:44:08' prior: 50965897!
test01canNotCheckOutWithEmptyCart

	|cart creditCard|
	
	cart := self createCart.
	
	creditCard := CreditCard withNumber: 1111222233334444  expirationOn: (July of: 2024) ownedBy: 'Carlos'. 
	
	self 
		should: [Cashierr for:cart payingWith: creditCard .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
				self assert: anError messageText = 'The cart is empty' .]
	
	
	! !

!testRun: #CashierTest #test01canNotCheckOutWithEmptyCart stamp: 'MS 11/4/2021 15:44:08'!
PASSED!

!testRun: #CashierTest #test01canNotCheckOutWithEmptyCart stamp: 'MS 11/4/2021 15:44:08'!
PASSED!

!testRun: #CashierTest #test02canNotCheckOutWithExpiredCard stamp: 'MS 11/4/2021 15:44:08'!
ERROR!

!testRun: #CashierTest #test07 stamp: 'MS 11/4/2021 15:44:08'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:44:36' prior: 50965636!
test02canNotCheckOutWithExpiredCard

	|cart cashier|
	
	cart := self createCart.
	cart add: 'validBook'.

	cashier := Cashierr new.
	
	cart add: 'validBook'.
	
	self 
		should: [cashier checkOut: cart with: expiredCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier expiredCardErrorMessage.]
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:44:56' prior: 50965939!
test02canNotCheckOutWithExpiredCard

	|cart cashier|
	
	cart := self createCart.
	cart add: 'validBook'.

	cashier := Cashierr for:cart  payingWith: expiredCard .
		
	self 
		should: [cashier checkOut: cart with: expiredCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier expiredCardErrorMessage.]
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:45:08' prior: 50965954!
test02canNotCheckOutWithExpiredCard

	|cart cashier|
	
	cart := self createCart.
	cart add: 'validBook'.

		
	self 
		should: [Cashierr for:cart  payingWith: expiredCard  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier expiredCardErrorMessage.]
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:45:28' prior: 50965969!
test02canNotCheckOutWithExpiredCard

	|cart cashier|
	
	cart := self createCart.
	cart add: 'validBook'.

		
	self 
		should: [Cashierr for:cart  payingWith: expiredCard  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'The card is expired'.]
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:45:32' prior: 50965983!
test02canNotCheckOutWithExpiredCard

	|cart |
	
	cart := self createCart.
	cart add: 'validBook'.

		
	self 
		should: [Cashierr for:cart  payingWith: expiredCard  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'The card is expired'.]
	
	
	! !

!testRun: #CashierTest #test02canNotCheckOutWithExpiredCard stamp: 'MS 11/4/2021 15:45:33'!
PASSED!

!testRun: #CashierTest #test01canNotCheckOutWithEmptyCart stamp: 'MS 11/4/2021 15:45:33'!
PASSED!

!testRun: #CashierTest #test02canNotCheckOutWithExpiredCard stamp: 'MS 11/4/2021 15:45:33'!
PASSED!

!testRun: #CashierTest #test07 stamp: 'MS 11/4/2021 15:45:33'!
ERROR!

!testRun: #CashierTest #test07 stamp: 'MS 11/4/2021 15:45:33'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:46:43' prior: 50965248!
test07

	|cart creditCard cashier|
	
	cart := self createCart.
	cart add: 'Valid book'.
	creditCard := validCard .
	cashier := Cashierr new.
	
	cart add: 'Valid book'.
	
	cashier checkOut: cart with: creditCard.
	
	
	
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:46:49' prior: 50966023!
test07

	|cart creditCard cashier|
	
	cart := self createCart.
	cart add: 'Valid book'.
	creditCard := validCard .
	cashier := Cashierr new.
	

	
	cashier checkOut: cart with: creditCard.
	
	
	
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:46:53' prior: 50966034!
test07

	|cart creditCard cashier|
	
	cart := self createCart.
	cart add: 'validBook'.
	creditCard := validCard .
	cashier := Cashierr new.
	

	
	cashier checkOut: cart with: creditCard.
	
	
	
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:47:33' prior: 50966044!
test07

	|cart creditCard cashier|
	
	cart := self createCart.
	cart add: 'validBook'.
	creditCard := validCard .
	cashier := Cashierr for:cart  payingWith:creditCard .
	

	
	cashier checkOut: cart with: creditCard.
	
	
	
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:47:35' prior: 50966054!
test07

	|cart creditCard cashier|
	
	cart := self createCart.
	cart add: 'validBook'.
	creditCard := validCard .
	cashier := Cashierr for:cart  payingWith:creditCard .
	
	cashier checkOut: cart with: creditCard.
	
	
	
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:48:03' prior: 50966065!
test07

	|cart creditCard cashier |
	
	cart := self createCart.
	cart add: 'validBook'.
	creditCard := validCard .
	cashier := Cashierr for:cart  payingWith:creditCard .
	
	cashier checkOut: cart with: creditCard.
	
	
	
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:48:38' prior: 50966076!
test07

	|cart creditCard cashier checkOut|
	
	cart := self createCart.
	cart add: 'validBook'.
	creditCard := validCard .
	cashier := Cashierr for:cart  payingWith:creditCard .
	
	checkOut := cashier checkOut: cart with: creditCard.
	
	self assert: 100 equals: checkOut.
	
	
	
	
		! !

!testRun: #CashierTest #test07 stamp: 'MS 11/4/2021 15:48:38'!
ERROR!
!Cart methodsFor: 'queries' stamp: 'MS 11/4/2021 15:49:48' prior: 50965678!
total

	^items sum: [:anItem | catalog at: anItem].! !
!Cashierr methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:50:04' prior: 50965818!
checkOut: aCart with: aCreditCard
	|total|
	
	^ cart total.
	
	
	! !
!Cashierr methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:50:10' prior: 50966106!
checkOut: aCart with: aCreditCard
	
	
	^ aCart total.
	
	
	! !
!Cashierr methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:50:15' prior: 50966112!
checkOut: aCart with: aCreditCard
	
	^ aCart total.
	
	
	! !

!testRun: #CreditCardTest #test01canNotCreateCardWhenHisNumberHasNot16Digits stamp: 'MS 11/4/2021 15:50:16'!
PASSED!

!testRun: #CreditCardTest #test02canNotCreateCardWithEmptyOwner stamp: 'MS 11/4/2021 15:50:16'!
PASSED!

!testRun: #CreditCardTest #test03canCreateCardWithValidNumberAndOwner stamp: 'MS 11/4/2021 15:50:16'!
PASSED!

!testRun: #CashierTest #test01canNotCheckOutWithEmptyCart stamp: 'MS 11/4/2021 15:50:19'!
PASSED!

!testRun: #CashierTest #test02canNotCheckOutWithExpiredCard stamp: 'MS 11/4/2021 15:50:19'!
PASSED!

!testRun: #CashierTest #test07 stamp: 'MS 11/4/2021 15:50:19'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:52:11'!
test03checkOutReturnsTotalAmountToPay

	|cart creditCard cashier checkOut|
	
	cart := self createCart.
	cart add: 'validBook'.
	creditCard := validCard .
	cashier := Cashierr for:cart  payingWith:creditCard .
	
	checkOut := cashier checkOut: cart with: creditCard.
	
	self assert: 100 equals: checkOut.
	
	
	
	
		! !

!methodRemoval: CashierTest #test07 stamp: 'MS 11/4/2021 15:52:11'!
test07

	|cart creditCard cashier checkOut|
	
	cart := self createCart.
	cart add: 'validBook'.
	creditCard := validCard .
	cashier := Cashierr for:cart  payingWith:creditCard .
	
	checkOut := cashier checkOut: cart with: creditCard.
	
	self assert: 100 equals: checkOut.
	
	
	
	
		!

!classRemoval: #MerchantProcessor stamp: 'MS 11/4/2021 15:52:23'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashierr class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:59:22' prior: 50965758!
for: aCart payingWith: aCreditCard 
	
	( aCreditCard expirationDate < GregorianMonthOfYear current) ifTrue: [self error: self expiredCardErrorMessage ].
	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage].
	
	(aCreditCard number decimalDigitLength = 16) ifFalse: [self signalInvalidCreditCardNumber].
	(aCreditCard owner = '') ifTrue: [self signalInvalidCreditCardName ].
	
	^self new initializeWith: aCart payingWith: aCreditCard.
	



	! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:59:40' prior: 50964658!
InvalidCreditCardName

	^'Can not create a card with empty name'.! !
!Cashierr class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:59:47'!
InvalidCreditCardName

	^'Can not create a card with empty name'.



	! !
!Cashierr class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 15:59:59' prior: 50966172!
for: aCart payingWith: aCreditCard 
	
	( aCreditCard expirationDate < GregorianMonthOfYear current) ifTrue: [self error: self expiredCardErrorMessage ].
	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage].
	
	(aCreditCard number decimalDigitLength = 16) ifFalse: [self signalInvalidCreditCardNumber].
	(aCreditCard owner = '') ifTrue: [self InvalidCreditCardName ].
	
	^self new initializeWith: aCart payingWith: aCreditCard.
	



	! !
!Cashierr class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:00:14' prior: 50966201!
for: aCart payingWith: aCreditCard 
	
	( aCreditCard expirationDate < GregorianMonthOfYear current) ifTrue: [self error: self expiredCardErrorMessage ].
	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage].
	
	(aCreditCard number decimalDigitLength = 16) ifFalse: [self signalInvalidCreditCardNumber].
	(aCreditCard owner = '') ifTrue: [self error: self InvalidCreditCardName ].
	
	^self new initializeWith: aCart payingWith: aCreditCard.
	



	! !
!Cashierr class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:00:30'!
InvalidCreditCardNumber

	^'Invalid credit card numer'.



	! !
!Cashierr class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:00:42' prior: 50966219!
for: aCart payingWith: aCreditCard 
	
	( aCreditCard expirationDate < GregorianMonthOfYear current) ifTrue: [self error: self expiredCardErrorMessage ].
	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage].
	
	(aCreditCard number decimalDigitLength = 16) ifFalse: [self error: self InvalidCreditCardNumber].
	(aCreditCard owner = '') ifTrue: [self error: self InvalidCreditCardName ].
	
	^self new initializeWith: aCart payingWith: aCreditCard.
	



	! !
!CashierTest methodsFor: 'setup' stamp: 'MS 11/4/2021 16:01:26' prior: 50965182 overrides: 16927572!
setUp
	
	|aValidDate anExpiredDate|
	
	aValidDate := GregorianMonthOfYear yearNumber: (GregorianMonthOfYear current year number) +1 monthNumber: GregorianMonthOfYear current monthNumber.
	
	anExpiredDate := GregorianMonthOfYear yearNumber: (GregorianMonthOfYear current year number) -1 monthNumber: GregorianMonthOfYear current monthNumber.
	
	validCard := CreditCard withNumber: 1111222233334444  expirationOn: aValidDate  ownedBy: 'Hernan'.
	expiredCard := CreditCard withNumber: 1111222233334444 expirationOn: anExpiredDate  ownedBy: 'Hernan'.
	
	 ! !

TestCase subclass: #CashierTest
	instanceVariableNames: 'validCard expiredCard cardWithInvalidName cardWithInvalidNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'MS 11/4/2021 16:01:51'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'validCard expiredCard cardWithInvalidName cardWithInvalidNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'setup' stamp: 'MS 11/4/2021 16:02:32' prior: 50966260 overrides: 16927572!
setUp
	
	|aValidDate anExpiredDate|
	
	aValidDate := GregorianMonthOfYear yearNumber: (GregorianMonthOfYear current year number) +1 monthNumber: GregorianMonthOfYear current monthNumber.
	
	anExpiredDate := GregorianMonthOfYear yearNumber: (GregorianMonthOfYear current year number) -1 monthNumber: GregorianMonthOfYear current monthNumber.
	
	validCard := CreditCard withNumber: 1111222233334444  expirationOn: aValidDate  ownedBy: 'Hernan'.
	expiredCard := CreditCard withNumber: 1111222233334444 expirationOn: anExpiredDate  ownedBy: 'Hernan'.
	
	cardWithInvalidName := CreditCard withNumber: 1111222233334444  expirationOn: aValidDate  ownedBy: ''.
	cardWithInvalidNumber := CreditCard withNumber: 1  expirationOn: aValidDate  ownedBy: ''.
	
	 ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:03:07'!
test04canNotCheckOutWithCreditCardWithEmptyName

	|cart creditCard cashier checkOut|
	
	cart := self createCart.
	cart add: 'validBook'.
	creditCard := validCard .
	cashier := Cashierr for:cart  payingWith:creditCard .
	
	checkOut := cashier checkOut: cart with: creditCard.
	
	self assert: 100 equals: checkOut.
	
	
	
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:03:24' prior: 50966322!
test04canNotCheckOutWithCreditCardWithEmptyName

	|cart creditCard cashier checkOut|
	
	cart := self createCart.
	cart add: 'validBook'.
	creditCard := cardWithInvalidName .
	cashier := Cashierr for:cart  payingWith:creditCard .
	
	checkOut := cashier checkOut: cart with: creditCard.
	
	self assert: 100 equals: checkOut.
	
	
	
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:03:29' prior: 50966336!
test04canNotCheckOutWithCreditCardWithEmptyName

	|cart creditCard cashier checkOut|
	
	cart := self createCart.
	cart add: 'validBook'.
	creditCard := cardWithInvalidName .
	
	cashier := Cashierr for:cart  payingWith:creditCard .
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:04:02' prior: 50966350!
test04canNotCheckOutWithCreditCardWithEmptyName

	|cart  cashier checkOut|
	
	cart := self createCart.
	cart add: 'validBook'.
		
	self 
		should: [Cashierr for:cart  payingWith: cardWithInvalidName  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'The card is expired'.]
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:04:08' prior: 50966361!
test04canNotCheckOutWithCreditCardWithEmptyName

	|cart|
	
	cart := self createCart.
	cart add: 'validBook'.
		
	self 
		should: [Cashierr for:cart  payingWith: cardWithInvalidName  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'The card is expired'.]
	
	! !
!Cashierr class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:04:52'!
EmptyCreditCardNameErrorMessage

	^'Can not create a card with empty name'.



	! !
!Cashierr class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:04:52' prior: 50966242!
for: aCart payingWith: aCreditCard 
	
	( aCreditCard expirationDate < GregorianMonthOfYear current) ifTrue: [self error: self expiredCardErrorMessage ].
	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage].
	
	(aCreditCard number decimalDigitLength = 16) ifFalse: [self error: self InvalidCreditCardNumber].
	(aCreditCard owner = '') ifTrue: [self error: self EmptyCreditCardNameErrorMessage ].
	
	^self new initializeWith: aCart payingWith: aCreditCard.
	



	! !

!methodRemoval: Cashierr class #InvalidCreditCardName stamp: 'MS 11/4/2021 16:04:52'!
InvalidCreditCardName

	^'Can not create a card with empty name'.



	!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:06:39' prior: 50966375!
test04canNotCheckOutWithCreditCardWithEmptyName

	|cart|
	
	cart := self createCart.
	cart add: 'validBook'.
		
	self 
		should: [Cashierr for:cart  payingWith: cardWithInvalidName  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Can not create a card with empty name'.]
	
	! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:07:03' prior: 50964686!
withNumber: aCreditCardNumber expirationOn: anExpirationDate ownedBy: aPerson

	"(aCreditCardNumber decimalDigitLength = 16) ifFalse: [self signalInvalidCreditCardNumber].
	(aPerson = '') ifTrue: [self signalInvalidCreditCardName ].
"
	
	^self new initializeWith: aCreditCardNumber expirationOn: anExpirationDate ownedBy: aPerson.! !

!testRun: #CashierTest #test01canNotCheckOutWithEmptyCart stamp: 'MS 11/4/2021 16:07:07'!
PASSED!

!testRun: #CashierTest #test02canNotCheckOutWithExpiredCard stamp: 'MS 11/4/2021 16:07:07'!
PASSED!

!testRun: #CashierTest #test03checkOutReturnsTotalAmountToPay stamp: 'MS 11/4/2021 16:07:07'!
PASSED!

!testRun: #CashierTest #test04canNotCheckOutWithCreditCardWithEmptyName stamp: 'MS 11/4/2021 16:07:07'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:08:46'!
test05canNotCheckOutWithCreditCardWithInvalidNumber

	|cart|
	
	cart := self createCart.
	cart add: 'validBook'.
		
	self 
		should: [Cashierr for:cart  payingWith: cardWithInvalidNumber  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Can not create a card with empty name'.]
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:09:05' prior: 50966457!
test05canNotCheckOutWithCreditCardWithInvalidNumber

	|cart|
	
	cart := self createCart.
	cart add: 'validBook'.
		
	self 
		should: [Cashierr for:cart  payingWith: cardWithInvalidNumber  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Invalid credit card numer'.]
	
	! !

!testRun: #CashierTest #test05canNotCheckOutWithCreditCardWithInvalidNumber stamp: 'MS 11/4/2021 16:09:06'!
PASSED!

!testRun: #CashierTest #test01canNotCheckOutWithEmptyCart stamp: 'MS 11/4/2021 16:09:06'!
PASSED!

!testRun: #CashierTest #test02canNotCheckOutWithExpiredCard stamp: 'MS 11/4/2021 16:09:06'!
PASSED!

!testRun: #CashierTest #test03checkOutReturnsTotalAmountToPay stamp: 'MS 11/4/2021 16:09:06'!
PASSED!

!testRun: #CashierTest #test04canNotCheckOutWithCreditCardWithEmptyName stamp: 'MS 11/4/2021 16:09:06'!
PASSED!

!testRun: #CashierTest #test05canNotCheckOutWithCreditCardWithInvalidNumber stamp: 'MS 11/4/2021 16:09:06'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:11:09' prior: 50965650!
defaultCatalog
	
	^ Dictionary new
		at: 'validBook' put:  100;
		yourself! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:12:47' prior: 50965912!
test01canNotCheckOutWithEmptyCart

	|cart |
	
	cart := self createCart.
	
	self 
		should: [Cashierr for:cart payingWith: validCard .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
				self assert: anError messageText = 'The cart is empty' .]
	
	
	! !

!testRun: #CashierTest #test01canNotCheckOutWithEmptyCart stamp: 'MS 11/4/2021 16:12:50'!
PASSED!

!testRun: #CashierTest #test01canNotCheckOutWithEmptyCart stamp: 'MS 11/4/2021 16:12:50'!
PASSED!

!testRun: #CashierTest #test02canNotCheckOutWithExpiredCard stamp: 'MS 11/4/2021 16:12:50'!
PASSED!

!testRun: #CashierTest #test03checkOutReturnsTotalAmountToPay stamp: 'MS 11/4/2021 16:12:50'!
PASSED!

!testRun: #CashierTest #test04canNotCheckOutWithCreditCardWithEmptyName stamp: 'MS 11/4/2021 16:12:50'!
PASSED!

!testRun: #CashierTest #test05canNotCheckOutWithCreditCardWithInvalidNumber stamp: 'MS 11/4/2021 16:12:50'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:12:56' prior: 50965996!
test02canNotCheckOutWithExpiredCard

	|cart |
	
	cart := self createCart.
	cart add: 'validBook'.
	
	self 
		should: [Cashierr for:cart  payingWith: expiredCard  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'The card is expired'.]
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:13:06' prior: 50966141!
test03checkOutReturnsTotalAmountToPay

	|cart creditCard cashier checkOut|
	
	cart := self createCart.
	cart add: 'validBook'.
	cashier := Cashierr for:cart  payingWith:validCard .
	
	checkOut := cashier checkOut: cart with: creditCard.
	
	self assert: 100 equals: checkOut.
	
	
	
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:13:28' prior: 50966556!
test03checkOutReturnsTotalAmountToPay

	|cart creditCard cashier checkOut|
	
	cart := self createCart.
	cart add: 'validBook'.
	creditCard := validCard .
	cashier := Cashierr for:cart  payingWith:creditCard .
	
	checkOut := cashier checkOut: cart with: creditCard.
	
	self assert: 100 equals: checkOut.
	
	
	
	
		! !

!testRun: #CashierTest #test03checkOutReturnsTotalAmountToPay stamp: 'MS 11/4/2021 16:13:28'!
PASSED!

!testRun: #CashierTest #test01canNotCheckOutWithEmptyCart stamp: 'MS 11/4/2021 16:13:28'!
PASSED!

!testRun: #CashierTest #test02canNotCheckOutWithExpiredCard stamp: 'MS 11/4/2021 16:13:28'!
PASSED!

!testRun: #CashierTest #test03checkOutReturnsTotalAmountToPay stamp: 'MS 11/4/2021 16:13:28'!
PASSED!

!testRun: #CashierTest #test04canNotCheckOutWithCreditCardWithEmptyName stamp: 'MS 11/4/2021 16:13:28'!
PASSED!

!testRun: #CashierTest #test05canNotCheckOutWithCreditCardWithInvalidNumber stamp: 'MS 11/4/2021 16:13:28'!
PASSED!
!Cashierr class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:20:20' prior: 50966394!
for: aCart payingWith: aCreditCard 

	self assertCreditCardIsNotExpired: aCreditCard.
	
	( aCreditCard expirationDate < GregorianMonthOfYear current) ifTrue: [self error: self expiredCardErrorMessage ].
	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage].
	
	(aCreditCard number decimalDigitLength = 16) ifFalse: [self error: self InvalidCreditCardNumber].
	(aCreditCard owner = '') ifTrue: [self error: self EmptyCreditCardNameErrorMessage ].
	
	^self new initializeWith: aCart payingWith: aCreditCard.
	



	! !
!Cashierr class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:20:39'!
assertCreditCardIsNotExpired: aCreditCard.
	
	( aCreditCard expirationDate < GregorianMonthOfYear current) ifTrue: [self error: self expiredCardErrorMessage ].
	

	! !
!Cashierr class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:21:28' prior: 50966601!
for: aCart payingWith: aCreditCard 

	self assertCreditCardIsNotExpired: aCreditCard.
	self assertCreditCardIs16DigitLength: aCreditCard.
	
	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage].
	
	(aCreditCard number decimalDigitLength = 16) ifFalse: [self error: self InvalidCreditCardNumber].
	(aCreditCard owner = '') ifTrue: [self error: self EmptyCreditCardNameErrorMessage ].
	
	^self new initializeWith: aCart payingWith: aCreditCard.
	



	! !
!Cashierr class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:21:41'!
assertCreditCardIs16DigitLength: aCreditCard.

	(aCreditCard number decimalDigitLength = 16) ifFalse: [self error: self InvalidCreditCardNumber].

	

	



	! !
!Cashierr class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:22:24' prior: 50966629!
for: aCart payingWith: aCreditCard 

	self assertCreditCardIsNotExpired: aCreditCard.
	self assertCreditCardIs16DigitLength: aCreditCard.
	self assertCreditCardNameIsNotEmpty: aCreditCard.
	
	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage].
	

	(aCreditCard owner = '') ifTrue: [self error: self EmptyCreditCardNameErrorMessage ].
	
	^self new initializeWith: aCart payingWith: aCreditCard.
	



	! !
!Cashierr class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:22:35'!
assertCreditCardNameIsNotEmpty: aCreditCard.	

	(aCreditCard owner = '') ifTrue: [self error: self EmptyCreditCardNameErrorMessage ].
	
	



	! !
!Cashierr class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:22:43' prior: 50966656!
for: aCart payingWith: aCreditCard 

	self assertCreditCardIsNotExpired: aCreditCard.
	self assertCreditCardIs16DigitLength: aCreditCard.
	self assertCreditCardNameIsNotEmpty: aCreditCard.
	
	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage].
	
	
	^self new initializeWith: aCart payingWith: aCreditCard.
	



	! !
!Cashierr class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:22:55' prior: 50966680!
for: aCart payingWith: aCreditCard 

	self assertCreditCardIsNotExpired: aCreditCard.
	self assertCreditCardIs16DigitLength: aCreditCard.
	self assertCreditCardNameIsNotEmpty: aCreditCard.
	
	self assertCartIsNotEmpty: aCart.
	
	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage].
	
	
	^self new initializeWith: aCart payingWith: aCreditCard.
	



	! !
!Cashierr class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:23:06'!
assertCartIsNotEmpty: aCart.
	
	aCart isEmpty ifTrue: [self error: self emptyCartErrorMessage].
	
	



	! !
!Cashierr class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:23:12' prior: 50966694!
for: aCart payingWith: aCreditCard 

	self assertCreditCardIsNotExpired: aCreditCard.
	self assertCreditCardIs16DigitLength: aCreditCard.
	self assertCreditCardNameIsNotEmpty: aCreditCard.
	
	self assertCartIsNotEmpty: aCart.	
	
	^self new initializeWith: aCart payingWith: aCreditCard.
	



	! !
!Cashierr class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:24:02' prior: 50966715!
for: aCart payingWith: aCreditCard 

	self assertCreditCardIsNotExpired: aCreditCard.
	self assertCreditCardIs16DigitLength: aCreditCard.
	self assertCreditCardNameIsNotEmpty: aCreditCard.
	self assertCreditCardNameIsNoLongerThan30Digits: aCreditCard.
	
	
	self assertCartIsNotEmpty: aCart.	
	
	^self new initializeWith: aCart payingWith: aCreditCard.
	



	! !
!Cashierr class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:25:18'!
assertCreditCardNameIsNoLongerThan30Digits: aCreditCard.
	
	^ self assert: (aCreditCard owner size <= 30) description: [self error: self creditCardOwnerNameCanNotExceed30Digits].




	! !
!Cashierr class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:25:25'!
creditCardOwnerNameCanNotExceed30Digits

	




	! !
!Cashierr class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:26:35'!
creditCardOwnerNameCanNotExceed30DigitsErrorMessage

	




	! !
!Cashierr class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:26:35' prior: 50966742!
assertCreditCardNameIsNoLongerThan30Digits: aCreditCard.
	
	^ self assert: (aCreditCard owner size <= 30) description: [self error: self creditCardOwnerNameCanNotExceed30DigitsErrorMessage].




	! !

!methodRemoval: Cashierr class #creditCardOwnerNameCanNotExceed30Digits stamp: 'MS 11/4/2021 16:26:35'!
creditCardOwnerNameCanNotExceed30Digits

	




	!
!Cashierr class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:27:18' prior: 50966756!
creditCardOwnerNameCanNotExceed30DigitsErrorMessage

	^'The name of the owner of the credit card can not exceed 30 digits'.

	




	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:28:17'!
test06canNotCheckOutWithCreditCardWithTooLongName

	|cart|
	
	cart := self createCart.
	cart add: 'validBook'.
		
	self 
		should: [Cashierr for:cart  payingWith: cardWithInvalidNumber  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Invalid credit card numer'.]
	
	! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'MS 11/4/2021 16:28:34'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'validCard expiredCard cardWithEmptyName cardWithInvalidNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:28:34' prior: 50966296 overrides: 16927572!
setUp
	
	|aValidDate anExpiredDate|
	
	aValidDate := GregorianMonthOfYear yearNumber: (GregorianMonthOfYear current year number) +1 monthNumber: GregorianMonthOfYear current monthNumber.
	
	anExpiredDate := GregorianMonthOfYear yearNumber: (GregorianMonthOfYear current year number) -1 monthNumber: GregorianMonthOfYear current monthNumber.
	
	validCard := CreditCard withNumber: 1111222233334444  expirationOn: aValidDate  ownedBy: 'Hernan'.
	expiredCard := CreditCard withNumber: 1111222233334444 expirationOn: anExpiredDate  ownedBy: 'Hernan'.
	
	cardWithEmptyName := CreditCard withNumber: 1111222233334444  expirationOn: aValidDate  ownedBy: ''.
	cardWithInvalidNumber := CreditCard withNumber: 1  expirationOn: aValidDate  ownedBy: ''.
	
	 ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:28:34' prior: 50966417!
test04canNotCheckOutWithCreditCardWithEmptyName

	|cart|
	
	cart := self createCart.
	cart add: 'validBook'.
		
	self 
		should: [Cashierr for:cart  payingWith: cardWithEmptyName  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Can not create a card with empty name'.]
	
	! !

TestCase subclass: #CashierTest
	instanceVariableNames: 'validCard expiredCard cardWithEmptyName cardWithInvalidNumber cardWithInvalidName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'MS 11/4/2021 16:28:42'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'validCard expiredCard cardWithEmptyName cardWithInvalidNumber cardWithInvalidName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'setup' stamp: 'MS 11/4/2021 16:29:10' prior: 50966807 overrides: 16927572!
setUp
	
	|aValidDate anExpiredDate|
	
	aValidDate := GregorianMonthOfYear yearNumber: (GregorianMonthOfYear current year number) +1 monthNumber: GregorianMonthOfYear current monthNumber.
	
	anExpiredDate := GregorianMonthOfYear yearNumber: (GregorianMonthOfYear current year number) -1 monthNumber: GregorianMonthOfYear current monthNumber.
	
	validCard := CreditCard withNumber: 1111222233334444  expirationOn: aValidDate  ownedBy: 'Hernan'.
	expiredCard := CreditCard withNumber: 1111222233334444 expirationOn: anExpiredDate  ownedBy: 'Hernan'.
	
	cardWithEmptyName := CreditCard withNumber: 1111222233334444  expirationOn: aValidDate  ownedBy: ''.
	cardWithInvalidNumber := CreditCard withNumber: 1  expirationOn: aValidDate  ownedBy: ''.
	cardWithEmptyName := CreditCard withNumber: 1111222233334444  expirationOn: aValidDate  ownedBy: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'.
	
	
	 ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:29:28' prior: 50966784!
test06canNotCheckOutWithCreditCardWithTooLongName

	|cart|
	
	cart := self createCart.
	cart add: 'validBook'.
		
	self 
		should: [Cashierr for:cart  payingWith: cardWithInvalidName  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Invalid credit card numer'.]
	
	! !
!Cashierr class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:30:01'!
invalidCreditCardNameErrorMessage

	^'The name of the owner of the credit card can not exceed 30 digits'.

	




	! !
!Cashierr class methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:30:01' prior: 50966762!
assertCreditCardNameIsNoLongerThan30Digits: aCreditCard.
	
	^ self assert: (aCreditCard owner size <= 30) description: [self error: self invalidCreditCardNameErrorMessage].




	! !

!methodRemoval: Cashierr class #creditCardOwnerNameCanNotExceed30DigitsErrorMessage stamp: 'MS 11/4/2021 16:30:01'!
creditCardOwnerNameCanNotExceed30DigitsErrorMessage

	^'The name of the owner of the credit card can not exceed 30 digits'.

	




	!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:30:19' prior: 50966896!
test06canNotCheckOutWithCreditCardWithTooLongName

	|cart|
	
	cart := self createCart.
	cart add: 'validBook'.
		
	self 
		should: [Cashierr for:cart  payingWith: cardWithInvalidName  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'The name of the owner of the credit card can not exceed 30 digits'.]
	
	! !

!testRun: #CashierTest #test06canNotCheckOutWithCreditCardWithTooLongName stamp: 'MS 11/4/2021 16:30:19'!
ERROR!

!testRun: #CashierTest #test06canNotCheckOutWithCreditCardWithTooLongName stamp: 'MS 11/4/2021 16:30:28'!
ERROR!

!testRun: #CashierTest #test06canNotCheckOutWithCreditCardWithTooLongName stamp: 'MS 11/4/2021 16:30:28'!
ERROR!

!testRun: #CashierTest #test01canNotCheckOutWithEmptyCart stamp: 'MS 11/4/2021 16:30:47'!
PASSED!

!testRun: #CashierTest #test01canNotCheckOutWithEmptyCart stamp: 'MS 11/4/2021 16:30:49'!
PASSED!

!testRun: #CashierTest #test02canNotCheckOutWithExpiredCard stamp: 'MS 11/4/2021 16:30:49'!
PASSED!

!testRun: #CashierTest #test03checkOutReturnsTotalAmountToPay stamp: 'MS 11/4/2021 16:30:49'!
PASSED!

!testRun: #CashierTest #test04canNotCheckOutWithCreditCardWithEmptyName stamp: 'MS 11/4/2021 16:30:49'!
FAILURE!

!testRun: #CashierTest #test05canNotCheckOutWithCreditCardWithInvalidNumber stamp: 'MS 11/4/2021 16:30:49'!
PASSED!

!testRun: #CashierTest #test06canNotCheckOutWithCreditCardWithTooLongName stamp: 'MS 11/4/2021 16:30:49'!
ERROR!

!testRun: #CashierTest #test04canNotCheckOutWithCreditCardWithEmptyName stamp: 'MS 11/4/2021 16:30:54'!
FAILURE!

!testRun: #CashierTest #test04canNotCheckOutWithCreditCardWithEmptyName stamp: 'MS 11/4/2021 16:30:54'!
FAILURE!
!CashierTest methodsFor: 'setup' stamp: 'MS 11/4/2021 16:31:38' prior: 50966864 overrides: 16927572!
setUp
	
	|aValidDate anExpiredDate|
	
	aValidDate := GregorianMonthOfYear yearNumber: (GregorianMonthOfYear current year number) +1 monthNumber: GregorianMonthOfYear current monthNumber.
	
	anExpiredDate := GregorianMonthOfYear yearNumber: (GregorianMonthOfYear current year number) -1 monthNumber: GregorianMonthOfYear current monthNumber.
	
	validCard := CreditCard withNumber: 1111222233334444  expirationOn: aValidDate  ownedBy: 'Hernan'.
	expiredCard := CreditCard withNumber: 1111222233334444 expirationOn: anExpiredDate  ownedBy: 'Hernan'.
	
	cardWithEmptyName := CreditCard withNumber: 1111222233334444  expirationOn: aValidDate  ownedBy: ''.
	cardWithInvalidNumber := CreditCard withNumber: 1  expirationOn: aValidDate  ownedBy: ''.
	cardWithInvalidName := CreditCard withNumber: 1111222233334444  expirationOn: aValidDate  ownedBy: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'.
	
	
	 ! !

!testRun: #CashierTest #test01canNotCheckOutWithEmptyCart stamp: 'MS 11/4/2021 16:31:41'!
PASSED!

!testRun: #CashierTest #test02canNotCheckOutWithExpiredCard stamp: 'MS 11/4/2021 16:31:41'!
PASSED!

!testRun: #CashierTest #test03checkOutReturnsTotalAmountToPay stamp: 'MS 11/4/2021 16:31:41'!
PASSED!

!testRun: #CashierTest #test04canNotCheckOutWithCreditCardWithEmptyName stamp: 'MS 11/4/2021 16:31:41'!
PASSED!

!testRun: #CashierTest #test05canNotCheckOutWithCreditCardWithInvalidNumber stamp: 'MS 11/4/2021 16:31:41'!
PASSED!

!testRun: #CashierTest #test06canNotCheckOutWithCreditCardWithTooLongName stamp: 'MS 11/4/2021 16:31:41'!
PASSED!

!classRenamed: #Cashierr as: #Cashier\ stamp: 'MS 11/4/2021 16:32:40'!
Smalltalk renameClassNamed: #Cashierr as: #Cashier\!

!classRenamed: #Cashier\ as: #Cahsier stamp: 'MS 11/4/2021 16:32:58'!
Smalltalk renameClassNamed: #Cashier\ as: #Cahsier!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:32:58' prior: 50966543!
test02canNotCheckOutWithExpiredCard

	|cart |
	
	cart := self createCart.
	cart add: 'validBook'.
	
	self 
		should: [Cashierr for:cart  payingWith: expiredCard  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'The card is expired'.]
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:32:58' prior: 50966933!
test06canNotCheckOutWithCreditCardWithTooLongName

	|cart|
	
	cart := self createCart.
	cart add: 'validBook'.
		
	self 
		should: [Cashierr for:cart  payingWith: cardWithInvalidName  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'The name of the owner of the credit card can not exceed 30 digits'.]
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:32:58' prior: 50966568!
test03checkOutReturnsTotalAmountToPay

	|cart creditCard cashier checkOut|
	
	cart := self createCart.
	cart add: 'validBook'.
	creditCard := validCard .
	cashier := Cashierr for:cart  payingWith:creditCard .
	
	checkOut := cashier checkOut: cart with: creditCard.
	
	self assert: 100 equals: checkOut.
	
	
	
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:32:58' prior: 50966471!
test05canNotCheckOutWithCreditCardWithInvalidNumber

	|cart|
	
	cart := self createCart.
	cart add: 'validBook'.
		
	self 
		should: [Cashierr for:cart  payingWith: cardWithInvalidNumber  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Invalid credit card numer'.]
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:32:58' prior: 50966511!
test01canNotCheckOutWithEmptyCart

	|cart |
	
	cart := self createCart.
	
	self 
		should: [Cashierr for:cart payingWith: validCard .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
				self assert: anError messageText = 'The cart is empty' .]
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:32:58' prior: 50966834!
test04canNotCheckOutWithCreditCardWithEmptyName

	|cart|
	
	cart := self createCart.
	cart add: 'validBook'.
		
	self 
		should: [Cashierr for:cart  payingWith: cardWithEmptyName  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Can not create a card with empty name'.]
	
	! !

!testRun: #CashierTest #test01canNotCheckOutWithEmptyCart stamp: 'MS 11/4/2021 16:33:03'!
ERROR!

!testRun: #CashierTest #test02canNotCheckOutWithExpiredCard stamp: 'MS 11/4/2021 16:33:03'!
ERROR!

!testRun: #CashierTest #test03checkOutReturnsTotalAmountToPay stamp: 'MS 11/4/2021 16:33:03'!
ERROR!

!testRun: #CashierTest #test04canNotCheckOutWithCreditCardWithEmptyName stamp: 'MS 11/4/2021 16:33:03'!
ERROR!

!testRun: #CashierTest #test05canNotCheckOutWithCreditCardWithInvalidNumber stamp: 'MS 11/4/2021 16:33:03'!
ERROR!

!testRun: #CashierTest #test06canNotCheckOutWithCreditCardWithTooLongName stamp: 'MS 11/4/2021 16:33:03'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:33:38' prior: 50967104!
test01canNotCheckOutWithEmptyCart

	|cart |
	
	cart := self createCart.
	
	self 
		should: [Cahsier for:cart payingWith: validCard .]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
				self assert: anError messageText = 'The cart is empty' .]
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:33:41' prior: 50967049!
test02canNotCheckOutWithExpiredCard

	|cart |
	
	cart := self createCart.
	cart add: 'validBook'.
	
	self 
		should: [Cahsier  for:cart  payingWith: expiredCard  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'The card is expired'.]
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:33:44' prior: 50967077!
test03checkOutReturnsTotalAmountToPay

	|cart creditCard cashier checkOut|
	
	cart := self createCart.
	cart add: 'validBook'.
	creditCard := validCard .
	cashier := Cahsier  for:cart  payingWith:creditCard .
	
	checkOut := cashier checkOut: cart with: creditCard.
	
	self assert: 100 equals: checkOut.
	
	
	
	
		! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:33:47' prior: 50967116!
test04canNotCheckOutWithCreditCardWithEmptyName

	|cart|
	
	cart := self createCart.
	cart add: 'validBook'.
		
	self 
		should: [Cahsier  for:cart  payingWith: cardWithEmptyName  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Can not create a card with empty name'.]
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:33:49' prior: 50967090!
test05canNotCheckOutWithCreditCardWithInvalidNumber

	|cart|
	
	cart := self createCart.
	cart add: 'validBook'.
		
	self 
		should: [Cahsier  for:cart  payingWith: cardWithInvalidNumber  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Invalid credit card numer'.]
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'MS 11/4/2021 16:33:53' prior: 50967062!
test06canNotCheckOutWithCreditCardWithTooLongName

	|cart|
	
	cart := self createCart.
	cart add: 'validBook'.
		
	self 
		should: [Cahsier  for:cart  payingWith: cardWithInvalidName  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'The name of the owner of the credit card can not exceed 30 digits'.]
	
	! !

!testRun: #CreditCardTest #test01canNotCreateCardWhenHisNumberHasNot16Digits stamp: 'MS 11/4/2021 16:34:00'!
FAILURE!

!testRun: #CreditCardTest #test02canNotCreateCardWithEmptyOwner stamp: 'MS 11/4/2021 16:34:00'!
FAILURE!

!testRun: #CreditCardTest #test03canCreateCardWithValidNumberAndOwner stamp: 'MS 11/4/2021 16:34:00'!
PASSED!

!classRemoval: #CreditCardTest stamp: 'MS 11/4/2021 16:34:05'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----SNAPSHOT----(4 November 2021 16:34:16) CuisUniversity-4913.image priorSource: 20275400!

----QUIT----(4 November 2021 16:34:26) CuisUniversity-4913.image priorSource: 20339092!